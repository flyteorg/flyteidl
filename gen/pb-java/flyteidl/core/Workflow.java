// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/workflow.proto

package flyteidl.core;

public final class Workflow {
  private Workflow() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface IfBlockOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flyteidl.core.IfBlock)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.flyteidl.core.BooleanExpression condition = 1;</code>
     */
    boolean hasCondition();
    /**
     * <code>.flyteidl.core.BooleanExpression condition = 1;</code>
     */
    flyteidl.core.Condition.BooleanExpression getCondition();
    /**
     * <code>.flyteidl.core.BooleanExpression condition = 1;</code>
     */
    flyteidl.core.Condition.BooleanExpressionOrBuilder getConditionOrBuilder();

    /**
     * <code>.flyteidl.core.Node then_node = 2;</code>
     */
    boolean hasThenNode();
    /**
     * <code>.flyteidl.core.Node then_node = 2;</code>
     */
    flyteidl.core.Workflow.Node getThenNode();
    /**
     * <code>.flyteidl.core.Node then_node = 2;</code>
     */
    flyteidl.core.Workflow.NodeOrBuilder getThenNodeOrBuilder();
  }
  /**
   * <pre>
   * Defines a condition and the execution unit that should be executed if the condition is satisfied.
   * </pre>
   *
   * Protobuf type {@code flyteidl.core.IfBlock}
   */
  public  static final class IfBlock extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flyteidl.core.IfBlock)
      IfBlockOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use IfBlock.newBuilder() to construct.
    private IfBlock(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private IfBlock() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private IfBlock(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              flyteidl.core.Condition.BooleanExpression.Builder subBuilder = null;
              if (condition_ != null) {
                subBuilder = condition_.toBuilder();
              }
              condition_ = input.readMessage(flyteidl.core.Condition.BooleanExpression.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(condition_);
                condition_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              flyteidl.core.Workflow.Node.Builder subBuilder = null;
              if (thenNode_ != null) {
                subBuilder = thenNode_.toBuilder();
              }
              thenNode_ = input.readMessage(flyteidl.core.Workflow.Node.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(thenNode_);
                thenNode_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return flyteidl.core.Workflow.internal_static_flyteidl_core_IfBlock_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return flyteidl.core.Workflow.internal_static_flyteidl_core_IfBlock_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              flyteidl.core.Workflow.IfBlock.class, flyteidl.core.Workflow.IfBlock.Builder.class);
    }

    public static final int CONDITION_FIELD_NUMBER = 1;
    private flyteidl.core.Condition.BooleanExpression condition_;
    /**
     * <code>.flyteidl.core.BooleanExpression condition = 1;</code>
     */
    public boolean hasCondition() {
      return condition_ != null;
    }
    /**
     * <code>.flyteidl.core.BooleanExpression condition = 1;</code>
     */
    public flyteidl.core.Condition.BooleanExpression getCondition() {
      return condition_ == null ? flyteidl.core.Condition.BooleanExpression.getDefaultInstance() : condition_;
    }
    /**
     * <code>.flyteidl.core.BooleanExpression condition = 1;</code>
     */
    public flyteidl.core.Condition.BooleanExpressionOrBuilder getConditionOrBuilder() {
      return getCondition();
    }

    public static final int THEN_NODE_FIELD_NUMBER = 2;
    private flyteidl.core.Workflow.Node thenNode_;
    /**
     * <code>.flyteidl.core.Node then_node = 2;</code>
     */
    public boolean hasThenNode() {
      return thenNode_ != null;
    }
    /**
     * <code>.flyteidl.core.Node then_node = 2;</code>
     */
    public flyteidl.core.Workflow.Node getThenNode() {
      return thenNode_ == null ? flyteidl.core.Workflow.Node.getDefaultInstance() : thenNode_;
    }
    /**
     * <code>.flyteidl.core.Node then_node = 2;</code>
     */
    public flyteidl.core.Workflow.NodeOrBuilder getThenNodeOrBuilder() {
      return getThenNode();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (condition_ != null) {
        output.writeMessage(1, getCondition());
      }
      if (thenNode_ != null) {
        output.writeMessage(2, getThenNode());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (condition_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getCondition());
      }
      if (thenNode_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getThenNode());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof flyteidl.core.Workflow.IfBlock)) {
        return super.equals(obj);
      }
      flyteidl.core.Workflow.IfBlock other = (flyteidl.core.Workflow.IfBlock) obj;

      if (hasCondition() != other.hasCondition()) return false;
      if (hasCondition()) {
        if (!getCondition()
            .equals(other.getCondition())) return false;
      }
      if (hasThenNode() != other.hasThenNode()) return false;
      if (hasThenNode()) {
        if (!getThenNode()
            .equals(other.getThenNode())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasCondition()) {
        hash = (37 * hash) + CONDITION_FIELD_NUMBER;
        hash = (53 * hash) + getCondition().hashCode();
      }
      if (hasThenNode()) {
        hash = (37 * hash) + THEN_NODE_FIELD_NUMBER;
        hash = (53 * hash) + getThenNode().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static flyteidl.core.Workflow.IfBlock parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Workflow.IfBlock parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Workflow.IfBlock parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Workflow.IfBlock parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Workflow.IfBlock parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Workflow.IfBlock parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Workflow.IfBlock parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static flyteidl.core.Workflow.IfBlock parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static flyteidl.core.Workflow.IfBlock parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static flyteidl.core.Workflow.IfBlock parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static flyteidl.core.Workflow.IfBlock parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static flyteidl.core.Workflow.IfBlock parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(flyteidl.core.Workflow.IfBlock prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Defines a condition and the execution unit that should be executed if the condition is satisfied.
     * </pre>
     *
     * Protobuf type {@code flyteidl.core.IfBlock}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flyteidl.core.IfBlock)
        flyteidl.core.Workflow.IfBlockOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return flyteidl.core.Workflow.internal_static_flyteidl_core_IfBlock_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return flyteidl.core.Workflow.internal_static_flyteidl_core_IfBlock_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                flyteidl.core.Workflow.IfBlock.class, flyteidl.core.Workflow.IfBlock.Builder.class);
      }

      // Construct using flyteidl.core.Workflow.IfBlock.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (conditionBuilder_ == null) {
          condition_ = null;
        } else {
          condition_ = null;
          conditionBuilder_ = null;
        }
        if (thenNodeBuilder_ == null) {
          thenNode_ = null;
        } else {
          thenNode_ = null;
          thenNodeBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return flyteidl.core.Workflow.internal_static_flyteidl_core_IfBlock_descriptor;
      }

      @java.lang.Override
      public flyteidl.core.Workflow.IfBlock getDefaultInstanceForType() {
        return flyteidl.core.Workflow.IfBlock.getDefaultInstance();
      }

      @java.lang.Override
      public flyteidl.core.Workflow.IfBlock build() {
        flyteidl.core.Workflow.IfBlock result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public flyteidl.core.Workflow.IfBlock buildPartial() {
        flyteidl.core.Workflow.IfBlock result = new flyteidl.core.Workflow.IfBlock(this);
        if (conditionBuilder_ == null) {
          result.condition_ = condition_;
        } else {
          result.condition_ = conditionBuilder_.build();
        }
        if (thenNodeBuilder_ == null) {
          result.thenNode_ = thenNode_;
        } else {
          result.thenNode_ = thenNodeBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof flyteidl.core.Workflow.IfBlock) {
          return mergeFrom((flyteidl.core.Workflow.IfBlock)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(flyteidl.core.Workflow.IfBlock other) {
        if (other == flyteidl.core.Workflow.IfBlock.getDefaultInstance()) return this;
        if (other.hasCondition()) {
          mergeCondition(other.getCondition());
        }
        if (other.hasThenNode()) {
          mergeThenNode(other.getThenNode());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        flyteidl.core.Workflow.IfBlock parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (flyteidl.core.Workflow.IfBlock) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private flyteidl.core.Condition.BooleanExpression condition_;
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Condition.BooleanExpression, flyteidl.core.Condition.BooleanExpression.Builder, flyteidl.core.Condition.BooleanExpressionOrBuilder> conditionBuilder_;
      /**
       * <code>.flyteidl.core.BooleanExpression condition = 1;</code>
       */
      public boolean hasCondition() {
        return conditionBuilder_ != null || condition_ != null;
      }
      /**
       * <code>.flyteidl.core.BooleanExpression condition = 1;</code>
       */
      public flyteidl.core.Condition.BooleanExpression getCondition() {
        if (conditionBuilder_ == null) {
          return condition_ == null ? flyteidl.core.Condition.BooleanExpression.getDefaultInstance() : condition_;
        } else {
          return conditionBuilder_.getMessage();
        }
      }
      /**
       * <code>.flyteidl.core.BooleanExpression condition = 1;</code>
       */
      public Builder setCondition(flyteidl.core.Condition.BooleanExpression value) {
        if (conditionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          condition_ = value;
          onChanged();
        } else {
          conditionBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.flyteidl.core.BooleanExpression condition = 1;</code>
       */
      public Builder setCondition(
          flyteidl.core.Condition.BooleanExpression.Builder builderForValue) {
        if (conditionBuilder_ == null) {
          condition_ = builderForValue.build();
          onChanged();
        } else {
          conditionBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.flyteidl.core.BooleanExpression condition = 1;</code>
       */
      public Builder mergeCondition(flyteidl.core.Condition.BooleanExpression value) {
        if (conditionBuilder_ == null) {
          if (condition_ != null) {
            condition_ =
              flyteidl.core.Condition.BooleanExpression.newBuilder(condition_).mergeFrom(value).buildPartial();
          } else {
            condition_ = value;
          }
          onChanged();
        } else {
          conditionBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.flyteidl.core.BooleanExpression condition = 1;</code>
       */
      public Builder clearCondition() {
        if (conditionBuilder_ == null) {
          condition_ = null;
          onChanged();
        } else {
          condition_ = null;
          conditionBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.flyteidl.core.BooleanExpression condition = 1;</code>
       */
      public flyteidl.core.Condition.BooleanExpression.Builder getConditionBuilder() {
        
        onChanged();
        return getConditionFieldBuilder().getBuilder();
      }
      /**
       * <code>.flyteidl.core.BooleanExpression condition = 1;</code>
       */
      public flyteidl.core.Condition.BooleanExpressionOrBuilder getConditionOrBuilder() {
        if (conditionBuilder_ != null) {
          return conditionBuilder_.getMessageOrBuilder();
        } else {
          return condition_ == null ?
              flyteidl.core.Condition.BooleanExpression.getDefaultInstance() : condition_;
        }
      }
      /**
       * <code>.flyteidl.core.BooleanExpression condition = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Condition.BooleanExpression, flyteidl.core.Condition.BooleanExpression.Builder, flyteidl.core.Condition.BooleanExpressionOrBuilder> 
          getConditionFieldBuilder() {
        if (conditionBuilder_ == null) {
          conditionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              flyteidl.core.Condition.BooleanExpression, flyteidl.core.Condition.BooleanExpression.Builder, flyteidl.core.Condition.BooleanExpressionOrBuilder>(
                  getCondition(),
                  getParentForChildren(),
                  isClean());
          condition_ = null;
        }
        return conditionBuilder_;
      }

      private flyteidl.core.Workflow.Node thenNode_;
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Workflow.Node, flyteidl.core.Workflow.Node.Builder, flyteidl.core.Workflow.NodeOrBuilder> thenNodeBuilder_;
      /**
       * <code>.flyteidl.core.Node then_node = 2;</code>
       */
      public boolean hasThenNode() {
        return thenNodeBuilder_ != null || thenNode_ != null;
      }
      /**
       * <code>.flyteidl.core.Node then_node = 2;</code>
       */
      public flyteidl.core.Workflow.Node getThenNode() {
        if (thenNodeBuilder_ == null) {
          return thenNode_ == null ? flyteidl.core.Workflow.Node.getDefaultInstance() : thenNode_;
        } else {
          return thenNodeBuilder_.getMessage();
        }
      }
      /**
       * <code>.flyteidl.core.Node then_node = 2;</code>
       */
      public Builder setThenNode(flyteidl.core.Workflow.Node value) {
        if (thenNodeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          thenNode_ = value;
          onChanged();
        } else {
          thenNodeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.flyteidl.core.Node then_node = 2;</code>
       */
      public Builder setThenNode(
          flyteidl.core.Workflow.Node.Builder builderForValue) {
        if (thenNodeBuilder_ == null) {
          thenNode_ = builderForValue.build();
          onChanged();
        } else {
          thenNodeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.flyteidl.core.Node then_node = 2;</code>
       */
      public Builder mergeThenNode(flyteidl.core.Workflow.Node value) {
        if (thenNodeBuilder_ == null) {
          if (thenNode_ != null) {
            thenNode_ =
              flyteidl.core.Workflow.Node.newBuilder(thenNode_).mergeFrom(value).buildPartial();
          } else {
            thenNode_ = value;
          }
          onChanged();
        } else {
          thenNodeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.flyteidl.core.Node then_node = 2;</code>
       */
      public Builder clearThenNode() {
        if (thenNodeBuilder_ == null) {
          thenNode_ = null;
          onChanged();
        } else {
          thenNode_ = null;
          thenNodeBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.flyteidl.core.Node then_node = 2;</code>
       */
      public flyteidl.core.Workflow.Node.Builder getThenNodeBuilder() {
        
        onChanged();
        return getThenNodeFieldBuilder().getBuilder();
      }
      /**
       * <code>.flyteidl.core.Node then_node = 2;</code>
       */
      public flyteidl.core.Workflow.NodeOrBuilder getThenNodeOrBuilder() {
        if (thenNodeBuilder_ != null) {
          return thenNodeBuilder_.getMessageOrBuilder();
        } else {
          return thenNode_ == null ?
              flyteidl.core.Workflow.Node.getDefaultInstance() : thenNode_;
        }
      }
      /**
       * <code>.flyteidl.core.Node then_node = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Workflow.Node, flyteidl.core.Workflow.Node.Builder, flyteidl.core.Workflow.NodeOrBuilder> 
          getThenNodeFieldBuilder() {
        if (thenNodeBuilder_ == null) {
          thenNodeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              flyteidl.core.Workflow.Node, flyteidl.core.Workflow.Node.Builder, flyteidl.core.Workflow.NodeOrBuilder>(
                  getThenNode(),
                  getParentForChildren(),
                  isClean());
          thenNode_ = null;
        }
        return thenNodeBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flyteidl.core.IfBlock)
    }

    // @@protoc_insertion_point(class_scope:flyteidl.core.IfBlock)
    private static final flyteidl.core.Workflow.IfBlock DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new flyteidl.core.Workflow.IfBlock();
    }

    public static flyteidl.core.Workflow.IfBlock getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<IfBlock>
        PARSER = new com.google.protobuf.AbstractParser<IfBlock>() {
      @java.lang.Override
      public IfBlock parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new IfBlock(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<IfBlock> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<IfBlock> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public flyteidl.core.Workflow.IfBlock getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface IfElseBlockOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flyteidl.core.IfElseBlock)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *+required. First condition to evaluate.
     * </pre>
     *
     * <code>.flyteidl.core.IfBlock case = 1;</code>
     */
    boolean hasCase();
    /**
     * <pre>
     *+required. First condition to evaluate.
     * </pre>
     *
     * <code>.flyteidl.core.IfBlock case = 1;</code>
     */
    flyteidl.core.Workflow.IfBlock getCase();
    /**
     * <pre>
     *+required. First condition to evaluate.
     * </pre>
     *
     * <code>.flyteidl.core.IfBlock case = 1;</code>
     */
    flyteidl.core.Workflow.IfBlockOrBuilder getCaseOrBuilder();

    /**
     * <pre>
     *+optional. Additional branches to evaluate.
     * </pre>
     *
     * <code>repeated .flyteidl.core.IfBlock other = 2;</code>
     */
    java.util.List<flyteidl.core.Workflow.IfBlock> 
        getOtherList();
    /**
     * <pre>
     *+optional. Additional branches to evaluate.
     * </pre>
     *
     * <code>repeated .flyteidl.core.IfBlock other = 2;</code>
     */
    flyteidl.core.Workflow.IfBlock getOther(int index);
    /**
     * <pre>
     *+optional. Additional branches to evaluate.
     * </pre>
     *
     * <code>repeated .flyteidl.core.IfBlock other = 2;</code>
     */
    int getOtherCount();
    /**
     * <pre>
     *+optional. Additional branches to evaluate.
     * </pre>
     *
     * <code>repeated .flyteidl.core.IfBlock other = 2;</code>
     */
    java.util.List<? extends flyteidl.core.Workflow.IfBlockOrBuilder> 
        getOtherOrBuilderList();
    /**
     * <pre>
     *+optional. Additional branches to evaluate.
     * </pre>
     *
     * <code>repeated .flyteidl.core.IfBlock other = 2;</code>
     */
    flyteidl.core.Workflow.IfBlockOrBuilder getOtherOrBuilder(
        int index);

    /**
     * <pre>
     * The node to execute in case none of the branches were taken.
     * </pre>
     *
     * <code>.flyteidl.core.Node else_node = 3;</code>
     */
    boolean hasElseNode();
    /**
     * <pre>
     * The node to execute in case none of the branches were taken.
     * </pre>
     *
     * <code>.flyteidl.core.Node else_node = 3;</code>
     */
    flyteidl.core.Workflow.Node getElseNode();
    /**
     * <pre>
     * The node to execute in case none of the branches were taken.
     * </pre>
     *
     * <code>.flyteidl.core.Node else_node = 3;</code>
     */
    flyteidl.core.Workflow.NodeOrBuilder getElseNodeOrBuilder();

    /**
     * <pre>
     * An error to throw in case none of the branches were taken.
     * </pre>
     *
     * <code>.flyteidl.core.Error error = 4;</code>
     */
    boolean hasError();
    /**
     * <pre>
     * An error to throw in case none of the branches were taken.
     * </pre>
     *
     * <code>.flyteidl.core.Error error = 4;</code>
     */
    flyteidl.core.Types.Error getError();
    /**
     * <pre>
     * An error to throw in case none of the branches were taken.
     * </pre>
     *
     * <code>.flyteidl.core.Error error = 4;</code>
     */
    flyteidl.core.Types.ErrorOrBuilder getErrorOrBuilder();

    public flyteidl.core.Workflow.IfElseBlock.DefaultCase getDefaultCase();
  }
  /**
   * <pre>
   * Defines a series of if/else blocks. The first branch whose condition evaluates to true is the one to execute.
   * If no conditions were satisfied, the else_node or the error will execute.
   * </pre>
   *
   * Protobuf type {@code flyteidl.core.IfElseBlock}
   */
  public  static final class IfElseBlock extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flyteidl.core.IfElseBlock)
      IfElseBlockOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use IfElseBlock.newBuilder() to construct.
    private IfElseBlock(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private IfElseBlock() {
      other_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private IfElseBlock(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              flyteidl.core.Workflow.IfBlock.Builder subBuilder = null;
              if (case_ != null) {
                subBuilder = case_.toBuilder();
              }
              case_ = input.readMessage(flyteidl.core.Workflow.IfBlock.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(case_);
                case_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                other_ = new java.util.ArrayList<flyteidl.core.Workflow.IfBlock>();
                mutable_bitField0_ |= 0x00000002;
              }
              other_.add(
                  input.readMessage(flyteidl.core.Workflow.IfBlock.parser(), extensionRegistry));
              break;
            }
            case 26: {
              flyteidl.core.Workflow.Node.Builder subBuilder = null;
              if (defaultCase_ == 3) {
                subBuilder = ((flyteidl.core.Workflow.Node) default_).toBuilder();
              }
              default_ =
                  input.readMessage(flyteidl.core.Workflow.Node.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((flyteidl.core.Workflow.Node) default_);
                default_ = subBuilder.buildPartial();
              }
              defaultCase_ = 3;
              break;
            }
            case 34: {
              flyteidl.core.Types.Error.Builder subBuilder = null;
              if (defaultCase_ == 4) {
                subBuilder = ((flyteidl.core.Types.Error) default_).toBuilder();
              }
              default_ =
                  input.readMessage(flyteidl.core.Types.Error.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((flyteidl.core.Types.Error) default_);
                default_ = subBuilder.buildPartial();
              }
              defaultCase_ = 4;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          other_ = java.util.Collections.unmodifiableList(other_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return flyteidl.core.Workflow.internal_static_flyteidl_core_IfElseBlock_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return flyteidl.core.Workflow.internal_static_flyteidl_core_IfElseBlock_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              flyteidl.core.Workflow.IfElseBlock.class, flyteidl.core.Workflow.IfElseBlock.Builder.class);
    }

    private int bitField0_;
    private int defaultCase_ = 0;
    private java.lang.Object default_;
    public enum DefaultCase
        implements com.google.protobuf.Internal.EnumLite {
      ELSE_NODE(3),
      ERROR(4),
      DEFAULT_NOT_SET(0);
      private final int value;
      private DefaultCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static DefaultCase valueOf(int value) {
        return forNumber(value);
      }

      public static DefaultCase forNumber(int value) {
        switch (value) {
          case 3: return ELSE_NODE;
          case 4: return ERROR;
          case 0: return DEFAULT_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public DefaultCase
    getDefaultCase() {
      return DefaultCase.forNumber(
          defaultCase_);
    }

    public static final int CASE_FIELD_NUMBER = 1;
    private flyteidl.core.Workflow.IfBlock case_;
    /**
     * <pre>
     *+required. First condition to evaluate.
     * </pre>
     *
     * <code>.flyteidl.core.IfBlock case = 1;</code>
     */
    public boolean hasCase() {
      return case_ != null;
    }
    /**
     * <pre>
     *+required. First condition to evaluate.
     * </pre>
     *
     * <code>.flyteidl.core.IfBlock case = 1;</code>
     */
    public flyteidl.core.Workflow.IfBlock getCase() {
      return case_ == null ? flyteidl.core.Workflow.IfBlock.getDefaultInstance() : case_;
    }
    /**
     * <pre>
     *+required. First condition to evaluate.
     * </pre>
     *
     * <code>.flyteidl.core.IfBlock case = 1;</code>
     */
    public flyteidl.core.Workflow.IfBlockOrBuilder getCaseOrBuilder() {
      return getCase();
    }

    public static final int OTHER_FIELD_NUMBER = 2;
    private java.util.List<flyteidl.core.Workflow.IfBlock> other_;
    /**
     * <pre>
     *+optional. Additional branches to evaluate.
     * </pre>
     *
     * <code>repeated .flyteidl.core.IfBlock other = 2;</code>
     */
    public java.util.List<flyteidl.core.Workflow.IfBlock> getOtherList() {
      return other_;
    }
    /**
     * <pre>
     *+optional. Additional branches to evaluate.
     * </pre>
     *
     * <code>repeated .flyteidl.core.IfBlock other = 2;</code>
     */
    public java.util.List<? extends flyteidl.core.Workflow.IfBlockOrBuilder> 
        getOtherOrBuilderList() {
      return other_;
    }
    /**
     * <pre>
     *+optional. Additional branches to evaluate.
     * </pre>
     *
     * <code>repeated .flyteidl.core.IfBlock other = 2;</code>
     */
    public int getOtherCount() {
      return other_.size();
    }
    /**
     * <pre>
     *+optional. Additional branches to evaluate.
     * </pre>
     *
     * <code>repeated .flyteidl.core.IfBlock other = 2;</code>
     */
    public flyteidl.core.Workflow.IfBlock getOther(int index) {
      return other_.get(index);
    }
    /**
     * <pre>
     *+optional. Additional branches to evaluate.
     * </pre>
     *
     * <code>repeated .flyteidl.core.IfBlock other = 2;</code>
     */
    public flyteidl.core.Workflow.IfBlockOrBuilder getOtherOrBuilder(
        int index) {
      return other_.get(index);
    }

    public static final int ELSE_NODE_FIELD_NUMBER = 3;
    /**
     * <pre>
     * The node to execute in case none of the branches were taken.
     * </pre>
     *
     * <code>.flyteidl.core.Node else_node = 3;</code>
     */
    public boolean hasElseNode() {
      return defaultCase_ == 3;
    }
    /**
     * <pre>
     * The node to execute in case none of the branches were taken.
     * </pre>
     *
     * <code>.flyteidl.core.Node else_node = 3;</code>
     */
    public flyteidl.core.Workflow.Node getElseNode() {
      if (defaultCase_ == 3) {
         return (flyteidl.core.Workflow.Node) default_;
      }
      return flyteidl.core.Workflow.Node.getDefaultInstance();
    }
    /**
     * <pre>
     * The node to execute in case none of the branches were taken.
     * </pre>
     *
     * <code>.flyteidl.core.Node else_node = 3;</code>
     */
    public flyteidl.core.Workflow.NodeOrBuilder getElseNodeOrBuilder() {
      if (defaultCase_ == 3) {
         return (flyteidl.core.Workflow.Node) default_;
      }
      return flyteidl.core.Workflow.Node.getDefaultInstance();
    }

    public static final int ERROR_FIELD_NUMBER = 4;
    /**
     * <pre>
     * An error to throw in case none of the branches were taken.
     * </pre>
     *
     * <code>.flyteidl.core.Error error = 4;</code>
     */
    public boolean hasError() {
      return defaultCase_ == 4;
    }
    /**
     * <pre>
     * An error to throw in case none of the branches were taken.
     * </pre>
     *
     * <code>.flyteidl.core.Error error = 4;</code>
     */
    public flyteidl.core.Types.Error getError() {
      if (defaultCase_ == 4) {
         return (flyteidl.core.Types.Error) default_;
      }
      return flyteidl.core.Types.Error.getDefaultInstance();
    }
    /**
     * <pre>
     * An error to throw in case none of the branches were taken.
     * </pre>
     *
     * <code>.flyteidl.core.Error error = 4;</code>
     */
    public flyteidl.core.Types.ErrorOrBuilder getErrorOrBuilder() {
      if (defaultCase_ == 4) {
         return (flyteidl.core.Types.Error) default_;
      }
      return flyteidl.core.Types.Error.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (case_ != null) {
        output.writeMessage(1, getCase());
      }
      for (int i = 0; i < other_.size(); i++) {
        output.writeMessage(2, other_.get(i));
      }
      if (defaultCase_ == 3) {
        output.writeMessage(3, (flyteidl.core.Workflow.Node) default_);
      }
      if (defaultCase_ == 4) {
        output.writeMessage(4, (flyteidl.core.Types.Error) default_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (case_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getCase());
      }
      for (int i = 0; i < other_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, other_.get(i));
      }
      if (defaultCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, (flyteidl.core.Workflow.Node) default_);
      }
      if (defaultCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, (flyteidl.core.Types.Error) default_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof flyteidl.core.Workflow.IfElseBlock)) {
        return super.equals(obj);
      }
      flyteidl.core.Workflow.IfElseBlock other = (flyteidl.core.Workflow.IfElseBlock) obj;

      if (hasCase() != other.hasCase()) return false;
      if (hasCase()) {
        if (!getCase()
            .equals(other.getCase())) return false;
      }
      if (!getOtherList()
          .equals(other.getOtherList())) return false;
      if (!getDefaultCase().equals(other.getDefaultCase())) return false;
      switch (defaultCase_) {
        case 3:
          if (!getElseNode()
              .equals(other.getElseNode())) return false;
          break;
        case 4:
          if (!getError()
              .equals(other.getError())) return false;
          break;
        case 0:
        default:
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasCase()) {
        hash = (37 * hash) + CASE_FIELD_NUMBER;
        hash = (53 * hash) + getCase().hashCode();
      }
      if (getOtherCount() > 0) {
        hash = (37 * hash) + OTHER_FIELD_NUMBER;
        hash = (53 * hash) + getOtherList().hashCode();
      }
      switch (defaultCase_) {
        case 3:
          hash = (37 * hash) + ELSE_NODE_FIELD_NUMBER;
          hash = (53 * hash) + getElseNode().hashCode();
          break;
        case 4:
          hash = (37 * hash) + ERROR_FIELD_NUMBER;
          hash = (53 * hash) + getError().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static flyteidl.core.Workflow.IfElseBlock parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Workflow.IfElseBlock parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Workflow.IfElseBlock parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Workflow.IfElseBlock parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Workflow.IfElseBlock parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Workflow.IfElseBlock parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Workflow.IfElseBlock parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static flyteidl.core.Workflow.IfElseBlock parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static flyteidl.core.Workflow.IfElseBlock parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static flyteidl.core.Workflow.IfElseBlock parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static flyteidl.core.Workflow.IfElseBlock parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static flyteidl.core.Workflow.IfElseBlock parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(flyteidl.core.Workflow.IfElseBlock prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Defines a series of if/else blocks. The first branch whose condition evaluates to true is the one to execute.
     * If no conditions were satisfied, the else_node or the error will execute.
     * </pre>
     *
     * Protobuf type {@code flyteidl.core.IfElseBlock}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flyteidl.core.IfElseBlock)
        flyteidl.core.Workflow.IfElseBlockOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return flyteidl.core.Workflow.internal_static_flyteidl_core_IfElseBlock_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return flyteidl.core.Workflow.internal_static_flyteidl_core_IfElseBlock_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                flyteidl.core.Workflow.IfElseBlock.class, flyteidl.core.Workflow.IfElseBlock.Builder.class);
      }

      // Construct using flyteidl.core.Workflow.IfElseBlock.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getOtherFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (caseBuilder_ == null) {
          case_ = null;
        } else {
          case_ = null;
          caseBuilder_ = null;
        }
        if (otherBuilder_ == null) {
          other_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          otherBuilder_.clear();
        }
        defaultCase_ = 0;
        default_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return flyteidl.core.Workflow.internal_static_flyteidl_core_IfElseBlock_descriptor;
      }

      @java.lang.Override
      public flyteidl.core.Workflow.IfElseBlock getDefaultInstanceForType() {
        return flyteidl.core.Workflow.IfElseBlock.getDefaultInstance();
      }

      @java.lang.Override
      public flyteidl.core.Workflow.IfElseBlock build() {
        flyteidl.core.Workflow.IfElseBlock result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public flyteidl.core.Workflow.IfElseBlock buildPartial() {
        flyteidl.core.Workflow.IfElseBlock result = new flyteidl.core.Workflow.IfElseBlock(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (caseBuilder_ == null) {
          result.case_ = case_;
        } else {
          result.case_ = caseBuilder_.build();
        }
        if (otherBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            other_ = java.util.Collections.unmodifiableList(other_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.other_ = other_;
        } else {
          result.other_ = otherBuilder_.build();
        }
        if (defaultCase_ == 3) {
          if (elseNodeBuilder_ == null) {
            result.default_ = default_;
          } else {
            result.default_ = elseNodeBuilder_.build();
          }
        }
        if (defaultCase_ == 4) {
          if (errorBuilder_ == null) {
            result.default_ = default_;
          } else {
            result.default_ = errorBuilder_.build();
          }
        }
        result.bitField0_ = to_bitField0_;
        result.defaultCase_ = defaultCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof flyteidl.core.Workflow.IfElseBlock) {
          return mergeFrom((flyteidl.core.Workflow.IfElseBlock)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(flyteidl.core.Workflow.IfElseBlock other) {
        if (other == flyteidl.core.Workflow.IfElseBlock.getDefaultInstance()) return this;
        if (other.hasCase()) {
          mergeCase(other.getCase());
        }
        if (otherBuilder_ == null) {
          if (!other.other_.isEmpty()) {
            if (other_.isEmpty()) {
              other_ = other.other_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureOtherIsMutable();
              other_.addAll(other.other_);
            }
            onChanged();
          }
        } else {
          if (!other.other_.isEmpty()) {
            if (otherBuilder_.isEmpty()) {
              otherBuilder_.dispose();
              otherBuilder_ = null;
              other_ = other.other_;
              bitField0_ = (bitField0_ & ~0x00000002);
              otherBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getOtherFieldBuilder() : null;
            } else {
              otherBuilder_.addAllMessages(other.other_);
            }
          }
        }
        switch (other.getDefaultCase()) {
          case ELSE_NODE: {
            mergeElseNode(other.getElseNode());
            break;
          }
          case ERROR: {
            mergeError(other.getError());
            break;
          }
          case DEFAULT_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        flyteidl.core.Workflow.IfElseBlock parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (flyteidl.core.Workflow.IfElseBlock) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int defaultCase_ = 0;
      private java.lang.Object default_;
      public DefaultCase
          getDefaultCase() {
        return DefaultCase.forNumber(
            defaultCase_);
      }

      public Builder clearDefault() {
        defaultCase_ = 0;
        default_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private flyteidl.core.Workflow.IfBlock case_;
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Workflow.IfBlock, flyteidl.core.Workflow.IfBlock.Builder, flyteidl.core.Workflow.IfBlockOrBuilder> caseBuilder_;
      /**
       * <pre>
       *+required. First condition to evaluate.
       * </pre>
       *
       * <code>.flyteidl.core.IfBlock case = 1;</code>
       */
      public boolean hasCase() {
        return caseBuilder_ != null || case_ != null;
      }
      /**
       * <pre>
       *+required. First condition to evaluate.
       * </pre>
       *
       * <code>.flyteidl.core.IfBlock case = 1;</code>
       */
      public flyteidl.core.Workflow.IfBlock getCase() {
        if (caseBuilder_ == null) {
          return case_ == null ? flyteidl.core.Workflow.IfBlock.getDefaultInstance() : case_;
        } else {
          return caseBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *+required. First condition to evaluate.
       * </pre>
       *
       * <code>.flyteidl.core.IfBlock case = 1;</code>
       */
      public Builder setCase(flyteidl.core.Workflow.IfBlock value) {
        if (caseBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          case_ = value;
          onChanged();
        } else {
          caseBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       *+required. First condition to evaluate.
       * </pre>
       *
       * <code>.flyteidl.core.IfBlock case = 1;</code>
       */
      public Builder setCase(
          flyteidl.core.Workflow.IfBlock.Builder builderForValue) {
        if (caseBuilder_ == null) {
          case_ = builderForValue.build();
          onChanged();
        } else {
          caseBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       *+required. First condition to evaluate.
       * </pre>
       *
       * <code>.flyteidl.core.IfBlock case = 1;</code>
       */
      public Builder mergeCase(flyteidl.core.Workflow.IfBlock value) {
        if (caseBuilder_ == null) {
          if (case_ != null) {
            case_ =
              flyteidl.core.Workflow.IfBlock.newBuilder(case_).mergeFrom(value).buildPartial();
          } else {
            case_ = value;
          }
          onChanged();
        } else {
          caseBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       *+required. First condition to evaluate.
       * </pre>
       *
       * <code>.flyteidl.core.IfBlock case = 1;</code>
       */
      public Builder clearCase() {
        if (caseBuilder_ == null) {
          case_ = null;
          onChanged();
        } else {
          case_ = null;
          caseBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       *+required. First condition to evaluate.
       * </pre>
       *
       * <code>.flyteidl.core.IfBlock case = 1;</code>
       */
      public flyteidl.core.Workflow.IfBlock.Builder getCaseBuilder() {
        
        onChanged();
        return getCaseFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *+required. First condition to evaluate.
       * </pre>
       *
       * <code>.flyteidl.core.IfBlock case = 1;</code>
       */
      public flyteidl.core.Workflow.IfBlockOrBuilder getCaseOrBuilder() {
        if (caseBuilder_ != null) {
          return caseBuilder_.getMessageOrBuilder();
        } else {
          return case_ == null ?
              flyteidl.core.Workflow.IfBlock.getDefaultInstance() : case_;
        }
      }
      /**
       * <pre>
       *+required. First condition to evaluate.
       * </pre>
       *
       * <code>.flyteidl.core.IfBlock case = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Workflow.IfBlock, flyteidl.core.Workflow.IfBlock.Builder, flyteidl.core.Workflow.IfBlockOrBuilder> 
          getCaseFieldBuilder() {
        if (caseBuilder_ == null) {
          caseBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              flyteidl.core.Workflow.IfBlock, flyteidl.core.Workflow.IfBlock.Builder, flyteidl.core.Workflow.IfBlockOrBuilder>(
                  getCase(),
                  getParentForChildren(),
                  isClean());
          case_ = null;
        }
        return caseBuilder_;
      }

      private java.util.List<flyteidl.core.Workflow.IfBlock> other_ =
        java.util.Collections.emptyList();
      private void ensureOtherIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          other_ = new java.util.ArrayList<flyteidl.core.Workflow.IfBlock>(other_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          flyteidl.core.Workflow.IfBlock, flyteidl.core.Workflow.IfBlock.Builder, flyteidl.core.Workflow.IfBlockOrBuilder> otherBuilder_;

      /**
       * <pre>
       *+optional. Additional branches to evaluate.
       * </pre>
       *
       * <code>repeated .flyteidl.core.IfBlock other = 2;</code>
       */
      public java.util.List<flyteidl.core.Workflow.IfBlock> getOtherList() {
        if (otherBuilder_ == null) {
          return java.util.Collections.unmodifiableList(other_);
        } else {
          return otherBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       *+optional. Additional branches to evaluate.
       * </pre>
       *
       * <code>repeated .flyteidl.core.IfBlock other = 2;</code>
       */
      public int getOtherCount() {
        if (otherBuilder_ == null) {
          return other_.size();
        } else {
          return otherBuilder_.getCount();
        }
      }
      /**
       * <pre>
       *+optional. Additional branches to evaluate.
       * </pre>
       *
       * <code>repeated .flyteidl.core.IfBlock other = 2;</code>
       */
      public flyteidl.core.Workflow.IfBlock getOther(int index) {
        if (otherBuilder_ == null) {
          return other_.get(index);
        } else {
          return otherBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       *+optional. Additional branches to evaluate.
       * </pre>
       *
       * <code>repeated .flyteidl.core.IfBlock other = 2;</code>
       */
      public Builder setOther(
          int index, flyteidl.core.Workflow.IfBlock value) {
        if (otherBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOtherIsMutable();
          other_.set(index, value);
          onChanged();
        } else {
          otherBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       *+optional. Additional branches to evaluate.
       * </pre>
       *
       * <code>repeated .flyteidl.core.IfBlock other = 2;</code>
       */
      public Builder setOther(
          int index, flyteidl.core.Workflow.IfBlock.Builder builderForValue) {
        if (otherBuilder_ == null) {
          ensureOtherIsMutable();
          other_.set(index, builderForValue.build());
          onChanged();
        } else {
          otherBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *+optional. Additional branches to evaluate.
       * </pre>
       *
       * <code>repeated .flyteidl.core.IfBlock other = 2;</code>
       */
      public Builder addOther(flyteidl.core.Workflow.IfBlock value) {
        if (otherBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOtherIsMutable();
          other_.add(value);
          onChanged();
        } else {
          otherBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       *+optional. Additional branches to evaluate.
       * </pre>
       *
       * <code>repeated .flyteidl.core.IfBlock other = 2;</code>
       */
      public Builder addOther(
          int index, flyteidl.core.Workflow.IfBlock value) {
        if (otherBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOtherIsMutable();
          other_.add(index, value);
          onChanged();
        } else {
          otherBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       *+optional. Additional branches to evaluate.
       * </pre>
       *
       * <code>repeated .flyteidl.core.IfBlock other = 2;</code>
       */
      public Builder addOther(
          flyteidl.core.Workflow.IfBlock.Builder builderForValue) {
        if (otherBuilder_ == null) {
          ensureOtherIsMutable();
          other_.add(builderForValue.build());
          onChanged();
        } else {
          otherBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *+optional. Additional branches to evaluate.
       * </pre>
       *
       * <code>repeated .flyteidl.core.IfBlock other = 2;</code>
       */
      public Builder addOther(
          int index, flyteidl.core.Workflow.IfBlock.Builder builderForValue) {
        if (otherBuilder_ == null) {
          ensureOtherIsMutable();
          other_.add(index, builderForValue.build());
          onChanged();
        } else {
          otherBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *+optional. Additional branches to evaluate.
       * </pre>
       *
       * <code>repeated .flyteidl.core.IfBlock other = 2;</code>
       */
      public Builder addAllOther(
          java.lang.Iterable<? extends flyteidl.core.Workflow.IfBlock> values) {
        if (otherBuilder_ == null) {
          ensureOtherIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, other_);
          onChanged();
        } else {
          otherBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       *+optional. Additional branches to evaluate.
       * </pre>
       *
       * <code>repeated .flyteidl.core.IfBlock other = 2;</code>
       */
      public Builder clearOther() {
        if (otherBuilder_ == null) {
          other_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          otherBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       *+optional. Additional branches to evaluate.
       * </pre>
       *
       * <code>repeated .flyteidl.core.IfBlock other = 2;</code>
       */
      public Builder removeOther(int index) {
        if (otherBuilder_ == null) {
          ensureOtherIsMutable();
          other_.remove(index);
          onChanged();
        } else {
          otherBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       *+optional. Additional branches to evaluate.
       * </pre>
       *
       * <code>repeated .flyteidl.core.IfBlock other = 2;</code>
       */
      public flyteidl.core.Workflow.IfBlock.Builder getOtherBuilder(
          int index) {
        return getOtherFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       *+optional. Additional branches to evaluate.
       * </pre>
       *
       * <code>repeated .flyteidl.core.IfBlock other = 2;</code>
       */
      public flyteidl.core.Workflow.IfBlockOrBuilder getOtherOrBuilder(
          int index) {
        if (otherBuilder_ == null) {
          return other_.get(index);  } else {
          return otherBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       *+optional. Additional branches to evaluate.
       * </pre>
       *
       * <code>repeated .flyteidl.core.IfBlock other = 2;</code>
       */
      public java.util.List<? extends flyteidl.core.Workflow.IfBlockOrBuilder> 
           getOtherOrBuilderList() {
        if (otherBuilder_ != null) {
          return otherBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(other_);
        }
      }
      /**
       * <pre>
       *+optional. Additional branches to evaluate.
       * </pre>
       *
       * <code>repeated .flyteidl.core.IfBlock other = 2;</code>
       */
      public flyteidl.core.Workflow.IfBlock.Builder addOtherBuilder() {
        return getOtherFieldBuilder().addBuilder(
            flyteidl.core.Workflow.IfBlock.getDefaultInstance());
      }
      /**
       * <pre>
       *+optional. Additional branches to evaluate.
       * </pre>
       *
       * <code>repeated .flyteidl.core.IfBlock other = 2;</code>
       */
      public flyteidl.core.Workflow.IfBlock.Builder addOtherBuilder(
          int index) {
        return getOtherFieldBuilder().addBuilder(
            index, flyteidl.core.Workflow.IfBlock.getDefaultInstance());
      }
      /**
       * <pre>
       *+optional. Additional branches to evaluate.
       * </pre>
       *
       * <code>repeated .flyteidl.core.IfBlock other = 2;</code>
       */
      public java.util.List<flyteidl.core.Workflow.IfBlock.Builder> 
           getOtherBuilderList() {
        return getOtherFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          flyteidl.core.Workflow.IfBlock, flyteidl.core.Workflow.IfBlock.Builder, flyteidl.core.Workflow.IfBlockOrBuilder> 
          getOtherFieldBuilder() {
        if (otherBuilder_ == null) {
          otherBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              flyteidl.core.Workflow.IfBlock, flyteidl.core.Workflow.IfBlock.Builder, flyteidl.core.Workflow.IfBlockOrBuilder>(
                  other_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          other_ = null;
        }
        return otherBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Workflow.Node, flyteidl.core.Workflow.Node.Builder, flyteidl.core.Workflow.NodeOrBuilder> elseNodeBuilder_;
      /**
       * <pre>
       * The node to execute in case none of the branches were taken.
       * </pre>
       *
       * <code>.flyteidl.core.Node else_node = 3;</code>
       */
      public boolean hasElseNode() {
        return defaultCase_ == 3;
      }
      /**
       * <pre>
       * The node to execute in case none of the branches were taken.
       * </pre>
       *
       * <code>.flyteidl.core.Node else_node = 3;</code>
       */
      public flyteidl.core.Workflow.Node getElseNode() {
        if (elseNodeBuilder_ == null) {
          if (defaultCase_ == 3) {
            return (flyteidl.core.Workflow.Node) default_;
          }
          return flyteidl.core.Workflow.Node.getDefaultInstance();
        } else {
          if (defaultCase_ == 3) {
            return elseNodeBuilder_.getMessage();
          }
          return flyteidl.core.Workflow.Node.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * The node to execute in case none of the branches were taken.
       * </pre>
       *
       * <code>.flyteidl.core.Node else_node = 3;</code>
       */
      public Builder setElseNode(flyteidl.core.Workflow.Node value) {
        if (elseNodeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          default_ = value;
          onChanged();
        } else {
          elseNodeBuilder_.setMessage(value);
        }
        defaultCase_ = 3;
        return this;
      }
      /**
       * <pre>
       * The node to execute in case none of the branches were taken.
       * </pre>
       *
       * <code>.flyteidl.core.Node else_node = 3;</code>
       */
      public Builder setElseNode(
          flyteidl.core.Workflow.Node.Builder builderForValue) {
        if (elseNodeBuilder_ == null) {
          default_ = builderForValue.build();
          onChanged();
        } else {
          elseNodeBuilder_.setMessage(builderForValue.build());
        }
        defaultCase_ = 3;
        return this;
      }
      /**
       * <pre>
       * The node to execute in case none of the branches were taken.
       * </pre>
       *
       * <code>.flyteidl.core.Node else_node = 3;</code>
       */
      public Builder mergeElseNode(flyteidl.core.Workflow.Node value) {
        if (elseNodeBuilder_ == null) {
          if (defaultCase_ == 3 &&
              default_ != flyteidl.core.Workflow.Node.getDefaultInstance()) {
            default_ = flyteidl.core.Workflow.Node.newBuilder((flyteidl.core.Workflow.Node) default_)
                .mergeFrom(value).buildPartial();
          } else {
            default_ = value;
          }
          onChanged();
        } else {
          if (defaultCase_ == 3) {
            elseNodeBuilder_.mergeFrom(value);
          }
          elseNodeBuilder_.setMessage(value);
        }
        defaultCase_ = 3;
        return this;
      }
      /**
       * <pre>
       * The node to execute in case none of the branches were taken.
       * </pre>
       *
       * <code>.flyteidl.core.Node else_node = 3;</code>
       */
      public Builder clearElseNode() {
        if (elseNodeBuilder_ == null) {
          if (defaultCase_ == 3) {
            defaultCase_ = 0;
            default_ = null;
            onChanged();
          }
        } else {
          if (defaultCase_ == 3) {
            defaultCase_ = 0;
            default_ = null;
          }
          elseNodeBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * The node to execute in case none of the branches were taken.
       * </pre>
       *
       * <code>.flyteidl.core.Node else_node = 3;</code>
       */
      public flyteidl.core.Workflow.Node.Builder getElseNodeBuilder() {
        return getElseNodeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The node to execute in case none of the branches were taken.
       * </pre>
       *
       * <code>.flyteidl.core.Node else_node = 3;</code>
       */
      public flyteidl.core.Workflow.NodeOrBuilder getElseNodeOrBuilder() {
        if ((defaultCase_ == 3) && (elseNodeBuilder_ != null)) {
          return elseNodeBuilder_.getMessageOrBuilder();
        } else {
          if (defaultCase_ == 3) {
            return (flyteidl.core.Workflow.Node) default_;
          }
          return flyteidl.core.Workflow.Node.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * The node to execute in case none of the branches were taken.
       * </pre>
       *
       * <code>.flyteidl.core.Node else_node = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Workflow.Node, flyteidl.core.Workflow.Node.Builder, flyteidl.core.Workflow.NodeOrBuilder> 
          getElseNodeFieldBuilder() {
        if (elseNodeBuilder_ == null) {
          if (!(defaultCase_ == 3)) {
            default_ = flyteidl.core.Workflow.Node.getDefaultInstance();
          }
          elseNodeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              flyteidl.core.Workflow.Node, flyteidl.core.Workflow.Node.Builder, flyteidl.core.Workflow.NodeOrBuilder>(
                  (flyteidl.core.Workflow.Node) default_,
                  getParentForChildren(),
                  isClean());
          default_ = null;
        }
        defaultCase_ = 3;
        onChanged();;
        return elseNodeBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Types.Error, flyteidl.core.Types.Error.Builder, flyteidl.core.Types.ErrorOrBuilder> errorBuilder_;
      /**
       * <pre>
       * An error to throw in case none of the branches were taken.
       * </pre>
       *
       * <code>.flyteidl.core.Error error = 4;</code>
       */
      public boolean hasError() {
        return defaultCase_ == 4;
      }
      /**
       * <pre>
       * An error to throw in case none of the branches were taken.
       * </pre>
       *
       * <code>.flyteidl.core.Error error = 4;</code>
       */
      public flyteidl.core.Types.Error getError() {
        if (errorBuilder_ == null) {
          if (defaultCase_ == 4) {
            return (flyteidl.core.Types.Error) default_;
          }
          return flyteidl.core.Types.Error.getDefaultInstance();
        } else {
          if (defaultCase_ == 4) {
            return errorBuilder_.getMessage();
          }
          return flyteidl.core.Types.Error.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * An error to throw in case none of the branches were taken.
       * </pre>
       *
       * <code>.flyteidl.core.Error error = 4;</code>
       */
      public Builder setError(flyteidl.core.Types.Error value) {
        if (errorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          default_ = value;
          onChanged();
        } else {
          errorBuilder_.setMessage(value);
        }
        defaultCase_ = 4;
        return this;
      }
      /**
       * <pre>
       * An error to throw in case none of the branches were taken.
       * </pre>
       *
       * <code>.flyteidl.core.Error error = 4;</code>
       */
      public Builder setError(
          flyteidl.core.Types.Error.Builder builderForValue) {
        if (errorBuilder_ == null) {
          default_ = builderForValue.build();
          onChanged();
        } else {
          errorBuilder_.setMessage(builderForValue.build());
        }
        defaultCase_ = 4;
        return this;
      }
      /**
       * <pre>
       * An error to throw in case none of the branches were taken.
       * </pre>
       *
       * <code>.flyteidl.core.Error error = 4;</code>
       */
      public Builder mergeError(flyteidl.core.Types.Error value) {
        if (errorBuilder_ == null) {
          if (defaultCase_ == 4 &&
              default_ != flyteidl.core.Types.Error.getDefaultInstance()) {
            default_ = flyteidl.core.Types.Error.newBuilder((flyteidl.core.Types.Error) default_)
                .mergeFrom(value).buildPartial();
          } else {
            default_ = value;
          }
          onChanged();
        } else {
          if (defaultCase_ == 4) {
            errorBuilder_.mergeFrom(value);
          }
          errorBuilder_.setMessage(value);
        }
        defaultCase_ = 4;
        return this;
      }
      /**
       * <pre>
       * An error to throw in case none of the branches were taken.
       * </pre>
       *
       * <code>.flyteidl.core.Error error = 4;</code>
       */
      public Builder clearError() {
        if (errorBuilder_ == null) {
          if (defaultCase_ == 4) {
            defaultCase_ = 0;
            default_ = null;
            onChanged();
          }
        } else {
          if (defaultCase_ == 4) {
            defaultCase_ = 0;
            default_ = null;
          }
          errorBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * An error to throw in case none of the branches were taken.
       * </pre>
       *
       * <code>.flyteidl.core.Error error = 4;</code>
       */
      public flyteidl.core.Types.Error.Builder getErrorBuilder() {
        return getErrorFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * An error to throw in case none of the branches were taken.
       * </pre>
       *
       * <code>.flyteidl.core.Error error = 4;</code>
       */
      public flyteidl.core.Types.ErrorOrBuilder getErrorOrBuilder() {
        if ((defaultCase_ == 4) && (errorBuilder_ != null)) {
          return errorBuilder_.getMessageOrBuilder();
        } else {
          if (defaultCase_ == 4) {
            return (flyteidl.core.Types.Error) default_;
          }
          return flyteidl.core.Types.Error.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * An error to throw in case none of the branches were taken.
       * </pre>
       *
       * <code>.flyteidl.core.Error error = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Types.Error, flyteidl.core.Types.Error.Builder, flyteidl.core.Types.ErrorOrBuilder> 
          getErrorFieldBuilder() {
        if (errorBuilder_ == null) {
          if (!(defaultCase_ == 4)) {
            default_ = flyteidl.core.Types.Error.getDefaultInstance();
          }
          errorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              flyteidl.core.Types.Error, flyteidl.core.Types.Error.Builder, flyteidl.core.Types.ErrorOrBuilder>(
                  (flyteidl.core.Types.Error) default_,
                  getParentForChildren(),
                  isClean());
          default_ = null;
        }
        defaultCase_ = 4;
        onChanged();;
        return errorBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flyteidl.core.IfElseBlock)
    }

    // @@protoc_insertion_point(class_scope:flyteidl.core.IfElseBlock)
    private static final flyteidl.core.Workflow.IfElseBlock DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new flyteidl.core.Workflow.IfElseBlock();
    }

    public static flyteidl.core.Workflow.IfElseBlock getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<IfElseBlock>
        PARSER = new com.google.protobuf.AbstractParser<IfElseBlock>() {
      @java.lang.Override
      public IfElseBlock parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new IfElseBlock(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<IfElseBlock> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<IfElseBlock> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public flyteidl.core.Workflow.IfElseBlock getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface BranchNodeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flyteidl.core.BranchNode)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *+required
     * </pre>
     *
     * <code>.flyteidl.core.IfElseBlock if_else = 1;</code>
     */
    boolean hasIfElse();
    /**
     * <pre>
     *+required
     * </pre>
     *
     * <code>.flyteidl.core.IfElseBlock if_else = 1;</code>
     */
    flyteidl.core.Workflow.IfElseBlock getIfElse();
    /**
     * <pre>
     *+required
     * </pre>
     *
     * <code>.flyteidl.core.IfElseBlock if_else = 1;</code>
     */
    flyteidl.core.Workflow.IfElseBlockOrBuilder getIfElseOrBuilder();
  }
  /**
   * <pre>
   * BranchNode is a special node that alter the flow of the workflow graph. It allows the control flow to branch at
   * runtime based on a series of conditions that get evaluated on various parameters (e.g. inputs, primitives).
   * </pre>
   *
   * Protobuf type {@code flyteidl.core.BranchNode}
   */
  public  static final class BranchNode extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flyteidl.core.BranchNode)
      BranchNodeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use BranchNode.newBuilder() to construct.
    private BranchNode(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private BranchNode() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private BranchNode(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              flyteidl.core.Workflow.IfElseBlock.Builder subBuilder = null;
              if (ifElse_ != null) {
                subBuilder = ifElse_.toBuilder();
              }
              ifElse_ = input.readMessage(flyteidl.core.Workflow.IfElseBlock.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(ifElse_);
                ifElse_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return flyteidl.core.Workflow.internal_static_flyteidl_core_BranchNode_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return flyteidl.core.Workflow.internal_static_flyteidl_core_BranchNode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              flyteidl.core.Workflow.BranchNode.class, flyteidl.core.Workflow.BranchNode.Builder.class);
    }

    public static final int IF_ELSE_FIELD_NUMBER = 1;
    private flyteidl.core.Workflow.IfElseBlock ifElse_;
    /**
     * <pre>
     *+required
     * </pre>
     *
     * <code>.flyteidl.core.IfElseBlock if_else = 1;</code>
     */
    public boolean hasIfElse() {
      return ifElse_ != null;
    }
    /**
     * <pre>
     *+required
     * </pre>
     *
     * <code>.flyteidl.core.IfElseBlock if_else = 1;</code>
     */
    public flyteidl.core.Workflow.IfElseBlock getIfElse() {
      return ifElse_ == null ? flyteidl.core.Workflow.IfElseBlock.getDefaultInstance() : ifElse_;
    }
    /**
     * <pre>
     *+required
     * </pre>
     *
     * <code>.flyteidl.core.IfElseBlock if_else = 1;</code>
     */
    public flyteidl.core.Workflow.IfElseBlockOrBuilder getIfElseOrBuilder() {
      return getIfElse();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (ifElse_ != null) {
        output.writeMessage(1, getIfElse());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (ifElse_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getIfElse());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof flyteidl.core.Workflow.BranchNode)) {
        return super.equals(obj);
      }
      flyteidl.core.Workflow.BranchNode other = (flyteidl.core.Workflow.BranchNode) obj;

      if (hasIfElse() != other.hasIfElse()) return false;
      if (hasIfElse()) {
        if (!getIfElse()
            .equals(other.getIfElse())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasIfElse()) {
        hash = (37 * hash) + IF_ELSE_FIELD_NUMBER;
        hash = (53 * hash) + getIfElse().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static flyteidl.core.Workflow.BranchNode parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Workflow.BranchNode parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Workflow.BranchNode parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Workflow.BranchNode parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Workflow.BranchNode parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Workflow.BranchNode parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Workflow.BranchNode parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static flyteidl.core.Workflow.BranchNode parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static flyteidl.core.Workflow.BranchNode parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static flyteidl.core.Workflow.BranchNode parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static flyteidl.core.Workflow.BranchNode parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static flyteidl.core.Workflow.BranchNode parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(flyteidl.core.Workflow.BranchNode prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * BranchNode is a special node that alter the flow of the workflow graph. It allows the control flow to branch at
     * runtime based on a series of conditions that get evaluated on various parameters (e.g. inputs, primitives).
     * </pre>
     *
     * Protobuf type {@code flyteidl.core.BranchNode}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flyteidl.core.BranchNode)
        flyteidl.core.Workflow.BranchNodeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return flyteidl.core.Workflow.internal_static_flyteidl_core_BranchNode_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return flyteidl.core.Workflow.internal_static_flyteidl_core_BranchNode_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                flyteidl.core.Workflow.BranchNode.class, flyteidl.core.Workflow.BranchNode.Builder.class);
      }

      // Construct using flyteidl.core.Workflow.BranchNode.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (ifElseBuilder_ == null) {
          ifElse_ = null;
        } else {
          ifElse_ = null;
          ifElseBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return flyteidl.core.Workflow.internal_static_flyteidl_core_BranchNode_descriptor;
      }

      @java.lang.Override
      public flyteidl.core.Workflow.BranchNode getDefaultInstanceForType() {
        return flyteidl.core.Workflow.BranchNode.getDefaultInstance();
      }

      @java.lang.Override
      public flyteidl.core.Workflow.BranchNode build() {
        flyteidl.core.Workflow.BranchNode result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public flyteidl.core.Workflow.BranchNode buildPartial() {
        flyteidl.core.Workflow.BranchNode result = new flyteidl.core.Workflow.BranchNode(this);
        if (ifElseBuilder_ == null) {
          result.ifElse_ = ifElse_;
        } else {
          result.ifElse_ = ifElseBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof flyteidl.core.Workflow.BranchNode) {
          return mergeFrom((flyteidl.core.Workflow.BranchNode)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(flyteidl.core.Workflow.BranchNode other) {
        if (other == flyteidl.core.Workflow.BranchNode.getDefaultInstance()) return this;
        if (other.hasIfElse()) {
          mergeIfElse(other.getIfElse());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        flyteidl.core.Workflow.BranchNode parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (flyteidl.core.Workflow.BranchNode) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private flyteidl.core.Workflow.IfElseBlock ifElse_;
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Workflow.IfElseBlock, flyteidl.core.Workflow.IfElseBlock.Builder, flyteidl.core.Workflow.IfElseBlockOrBuilder> ifElseBuilder_;
      /**
       * <pre>
       *+required
       * </pre>
       *
       * <code>.flyteidl.core.IfElseBlock if_else = 1;</code>
       */
      public boolean hasIfElse() {
        return ifElseBuilder_ != null || ifElse_ != null;
      }
      /**
       * <pre>
       *+required
       * </pre>
       *
       * <code>.flyteidl.core.IfElseBlock if_else = 1;</code>
       */
      public flyteidl.core.Workflow.IfElseBlock getIfElse() {
        if (ifElseBuilder_ == null) {
          return ifElse_ == null ? flyteidl.core.Workflow.IfElseBlock.getDefaultInstance() : ifElse_;
        } else {
          return ifElseBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *+required
       * </pre>
       *
       * <code>.flyteidl.core.IfElseBlock if_else = 1;</code>
       */
      public Builder setIfElse(flyteidl.core.Workflow.IfElseBlock value) {
        if (ifElseBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ifElse_ = value;
          onChanged();
        } else {
          ifElseBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       *+required
       * </pre>
       *
       * <code>.flyteidl.core.IfElseBlock if_else = 1;</code>
       */
      public Builder setIfElse(
          flyteidl.core.Workflow.IfElseBlock.Builder builderForValue) {
        if (ifElseBuilder_ == null) {
          ifElse_ = builderForValue.build();
          onChanged();
        } else {
          ifElseBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       *+required
       * </pre>
       *
       * <code>.flyteidl.core.IfElseBlock if_else = 1;</code>
       */
      public Builder mergeIfElse(flyteidl.core.Workflow.IfElseBlock value) {
        if (ifElseBuilder_ == null) {
          if (ifElse_ != null) {
            ifElse_ =
              flyteidl.core.Workflow.IfElseBlock.newBuilder(ifElse_).mergeFrom(value).buildPartial();
          } else {
            ifElse_ = value;
          }
          onChanged();
        } else {
          ifElseBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       *+required
       * </pre>
       *
       * <code>.flyteidl.core.IfElseBlock if_else = 1;</code>
       */
      public Builder clearIfElse() {
        if (ifElseBuilder_ == null) {
          ifElse_ = null;
          onChanged();
        } else {
          ifElse_ = null;
          ifElseBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       *+required
       * </pre>
       *
       * <code>.flyteidl.core.IfElseBlock if_else = 1;</code>
       */
      public flyteidl.core.Workflow.IfElseBlock.Builder getIfElseBuilder() {
        
        onChanged();
        return getIfElseFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *+required
       * </pre>
       *
       * <code>.flyteidl.core.IfElseBlock if_else = 1;</code>
       */
      public flyteidl.core.Workflow.IfElseBlockOrBuilder getIfElseOrBuilder() {
        if (ifElseBuilder_ != null) {
          return ifElseBuilder_.getMessageOrBuilder();
        } else {
          return ifElse_ == null ?
              flyteidl.core.Workflow.IfElseBlock.getDefaultInstance() : ifElse_;
        }
      }
      /**
       * <pre>
       *+required
       * </pre>
       *
       * <code>.flyteidl.core.IfElseBlock if_else = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Workflow.IfElseBlock, flyteidl.core.Workflow.IfElseBlock.Builder, flyteidl.core.Workflow.IfElseBlockOrBuilder> 
          getIfElseFieldBuilder() {
        if (ifElseBuilder_ == null) {
          ifElseBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              flyteidl.core.Workflow.IfElseBlock, flyteidl.core.Workflow.IfElseBlock.Builder, flyteidl.core.Workflow.IfElseBlockOrBuilder>(
                  getIfElse(),
                  getParentForChildren(),
                  isClean());
          ifElse_ = null;
        }
        return ifElseBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flyteidl.core.BranchNode)
    }

    // @@protoc_insertion_point(class_scope:flyteidl.core.BranchNode)
    private static final flyteidl.core.Workflow.BranchNode DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new flyteidl.core.Workflow.BranchNode();
    }

    public static flyteidl.core.Workflow.BranchNode getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<BranchNode>
        PARSER = new com.google.protobuf.AbstractParser<BranchNode>() {
      @java.lang.Override
      public BranchNode parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new BranchNode(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<BranchNode> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<BranchNode> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public flyteidl.core.Workflow.BranchNode getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TaskNodeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flyteidl.core.TaskNode)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * A globally unique identifier for the task.
     * </pre>
     *
     * <code>.flyteidl.core.Identifier reference_id = 1;</code>
     */
    boolean hasReferenceId();
    /**
     * <pre>
     * A globally unique identifier for the task.
     * </pre>
     *
     * <code>.flyteidl.core.Identifier reference_id = 1;</code>
     */
    flyteidl.core.IdentifierOuterClass.Identifier getReferenceId();
    /**
     * <pre>
     * A globally unique identifier for the task.
     * </pre>
     *
     * <code>.flyteidl.core.Identifier reference_id = 1;</code>
     */
    flyteidl.core.IdentifierOuterClass.IdentifierOrBuilder getReferenceIdOrBuilder();

    /**
     * <pre>
     * Optional overrides applied at task execution time.
     * </pre>
     *
     * <code>.flyteidl.core.TaskNodeOverrides overrides = 2;</code>
     */
    boolean hasOverrides();
    /**
     * <pre>
     * Optional overrides applied at task execution time.
     * </pre>
     *
     * <code>.flyteidl.core.TaskNodeOverrides overrides = 2;</code>
     */
    flyteidl.core.Workflow.TaskNodeOverrides getOverrides();
    /**
     * <pre>
     * Optional overrides applied at task execution time.
     * </pre>
     *
     * <code>.flyteidl.core.TaskNodeOverrides overrides = 2;</code>
     */
    flyteidl.core.Workflow.TaskNodeOverridesOrBuilder getOverridesOrBuilder();

    public flyteidl.core.Workflow.TaskNode.ReferenceCase getReferenceCase();
  }
  /**
   * <pre>
   * Refers to the task that the Node is to execute.
   * </pre>
   *
   * Protobuf type {@code flyteidl.core.TaskNode}
   */
  public  static final class TaskNode extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flyteidl.core.TaskNode)
      TaskNodeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use TaskNode.newBuilder() to construct.
    private TaskNode(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TaskNode() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private TaskNode(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              flyteidl.core.IdentifierOuterClass.Identifier.Builder subBuilder = null;
              if (referenceCase_ == 1) {
                subBuilder = ((flyteidl.core.IdentifierOuterClass.Identifier) reference_).toBuilder();
              }
              reference_ =
                  input.readMessage(flyteidl.core.IdentifierOuterClass.Identifier.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((flyteidl.core.IdentifierOuterClass.Identifier) reference_);
                reference_ = subBuilder.buildPartial();
              }
              referenceCase_ = 1;
              break;
            }
            case 18: {
              flyteidl.core.Workflow.TaskNodeOverrides.Builder subBuilder = null;
              if (overrides_ != null) {
                subBuilder = overrides_.toBuilder();
              }
              overrides_ = input.readMessage(flyteidl.core.Workflow.TaskNodeOverrides.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(overrides_);
                overrides_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return flyteidl.core.Workflow.internal_static_flyteidl_core_TaskNode_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return flyteidl.core.Workflow.internal_static_flyteidl_core_TaskNode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              flyteidl.core.Workflow.TaskNode.class, flyteidl.core.Workflow.TaskNode.Builder.class);
    }

    private int referenceCase_ = 0;
    private java.lang.Object reference_;
    public enum ReferenceCase
        implements com.google.protobuf.Internal.EnumLite {
      REFERENCE_ID(1),
      REFERENCE_NOT_SET(0);
      private final int value;
      private ReferenceCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ReferenceCase valueOf(int value) {
        return forNumber(value);
      }

      public static ReferenceCase forNumber(int value) {
        switch (value) {
          case 1: return REFERENCE_ID;
          case 0: return REFERENCE_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ReferenceCase
    getReferenceCase() {
      return ReferenceCase.forNumber(
          referenceCase_);
    }

    public static final int REFERENCE_ID_FIELD_NUMBER = 1;
    /**
     * <pre>
     * A globally unique identifier for the task.
     * </pre>
     *
     * <code>.flyteidl.core.Identifier reference_id = 1;</code>
     */
    public boolean hasReferenceId() {
      return referenceCase_ == 1;
    }
    /**
     * <pre>
     * A globally unique identifier for the task.
     * </pre>
     *
     * <code>.flyteidl.core.Identifier reference_id = 1;</code>
     */
    public flyteidl.core.IdentifierOuterClass.Identifier getReferenceId() {
      if (referenceCase_ == 1) {
         return (flyteidl.core.IdentifierOuterClass.Identifier) reference_;
      }
      return flyteidl.core.IdentifierOuterClass.Identifier.getDefaultInstance();
    }
    /**
     * <pre>
     * A globally unique identifier for the task.
     * </pre>
     *
     * <code>.flyteidl.core.Identifier reference_id = 1;</code>
     */
    public flyteidl.core.IdentifierOuterClass.IdentifierOrBuilder getReferenceIdOrBuilder() {
      if (referenceCase_ == 1) {
         return (flyteidl.core.IdentifierOuterClass.Identifier) reference_;
      }
      return flyteidl.core.IdentifierOuterClass.Identifier.getDefaultInstance();
    }

    public static final int OVERRIDES_FIELD_NUMBER = 2;
    private flyteidl.core.Workflow.TaskNodeOverrides overrides_;
    /**
     * <pre>
     * Optional overrides applied at task execution time.
     * </pre>
     *
     * <code>.flyteidl.core.TaskNodeOverrides overrides = 2;</code>
     */
    public boolean hasOverrides() {
      return overrides_ != null;
    }
    /**
     * <pre>
     * Optional overrides applied at task execution time.
     * </pre>
     *
     * <code>.flyteidl.core.TaskNodeOverrides overrides = 2;</code>
     */
    public flyteidl.core.Workflow.TaskNodeOverrides getOverrides() {
      return overrides_ == null ? flyteidl.core.Workflow.TaskNodeOverrides.getDefaultInstance() : overrides_;
    }
    /**
     * <pre>
     * Optional overrides applied at task execution time.
     * </pre>
     *
     * <code>.flyteidl.core.TaskNodeOverrides overrides = 2;</code>
     */
    public flyteidl.core.Workflow.TaskNodeOverridesOrBuilder getOverridesOrBuilder() {
      return getOverrides();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (referenceCase_ == 1) {
        output.writeMessage(1, (flyteidl.core.IdentifierOuterClass.Identifier) reference_);
      }
      if (overrides_ != null) {
        output.writeMessage(2, getOverrides());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (referenceCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, (flyteidl.core.IdentifierOuterClass.Identifier) reference_);
      }
      if (overrides_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getOverrides());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof flyteidl.core.Workflow.TaskNode)) {
        return super.equals(obj);
      }
      flyteidl.core.Workflow.TaskNode other = (flyteidl.core.Workflow.TaskNode) obj;

      if (hasOverrides() != other.hasOverrides()) return false;
      if (hasOverrides()) {
        if (!getOverrides()
            .equals(other.getOverrides())) return false;
      }
      if (!getReferenceCase().equals(other.getReferenceCase())) return false;
      switch (referenceCase_) {
        case 1:
          if (!getReferenceId()
              .equals(other.getReferenceId())) return false;
          break;
        case 0:
        default:
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasOverrides()) {
        hash = (37 * hash) + OVERRIDES_FIELD_NUMBER;
        hash = (53 * hash) + getOverrides().hashCode();
      }
      switch (referenceCase_) {
        case 1:
          hash = (37 * hash) + REFERENCE_ID_FIELD_NUMBER;
          hash = (53 * hash) + getReferenceId().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static flyteidl.core.Workflow.TaskNode parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Workflow.TaskNode parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Workflow.TaskNode parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Workflow.TaskNode parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Workflow.TaskNode parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Workflow.TaskNode parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Workflow.TaskNode parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static flyteidl.core.Workflow.TaskNode parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static flyteidl.core.Workflow.TaskNode parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static flyteidl.core.Workflow.TaskNode parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static flyteidl.core.Workflow.TaskNode parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static flyteidl.core.Workflow.TaskNode parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(flyteidl.core.Workflow.TaskNode prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Refers to the task that the Node is to execute.
     * </pre>
     *
     * Protobuf type {@code flyteidl.core.TaskNode}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flyteidl.core.TaskNode)
        flyteidl.core.Workflow.TaskNodeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return flyteidl.core.Workflow.internal_static_flyteidl_core_TaskNode_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return flyteidl.core.Workflow.internal_static_flyteidl_core_TaskNode_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                flyteidl.core.Workflow.TaskNode.class, flyteidl.core.Workflow.TaskNode.Builder.class);
      }

      // Construct using flyteidl.core.Workflow.TaskNode.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (overridesBuilder_ == null) {
          overrides_ = null;
        } else {
          overrides_ = null;
          overridesBuilder_ = null;
        }
        referenceCase_ = 0;
        reference_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return flyteidl.core.Workflow.internal_static_flyteidl_core_TaskNode_descriptor;
      }

      @java.lang.Override
      public flyteidl.core.Workflow.TaskNode getDefaultInstanceForType() {
        return flyteidl.core.Workflow.TaskNode.getDefaultInstance();
      }

      @java.lang.Override
      public flyteidl.core.Workflow.TaskNode build() {
        flyteidl.core.Workflow.TaskNode result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public flyteidl.core.Workflow.TaskNode buildPartial() {
        flyteidl.core.Workflow.TaskNode result = new flyteidl.core.Workflow.TaskNode(this);
        if (referenceCase_ == 1) {
          if (referenceIdBuilder_ == null) {
            result.reference_ = reference_;
          } else {
            result.reference_ = referenceIdBuilder_.build();
          }
        }
        if (overridesBuilder_ == null) {
          result.overrides_ = overrides_;
        } else {
          result.overrides_ = overridesBuilder_.build();
        }
        result.referenceCase_ = referenceCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof flyteidl.core.Workflow.TaskNode) {
          return mergeFrom((flyteidl.core.Workflow.TaskNode)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(flyteidl.core.Workflow.TaskNode other) {
        if (other == flyteidl.core.Workflow.TaskNode.getDefaultInstance()) return this;
        if (other.hasOverrides()) {
          mergeOverrides(other.getOverrides());
        }
        switch (other.getReferenceCase()) {
          case REFERENCE_ID: {
            mergeReferenceId(other.getReferenceId());
            break;
          }
          case REFERENCE_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        flyteidl.core.Workflow.TaskNode parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (flyteidl.core.Workflow.TaskNode) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int referenceCase_ = 0;
      private java.lang.Object reference_;
      public ReferenceCase
          getReferenceCase() {
        return ReferenceCase.forNumber(
            referenceCase_);
      }

      public Builder clearReference() {
        referenceCase_ = 0;
        reference_ = null;
        onChanged();
        return this;
      }


      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.IdentifierOuterClass.Identifier, flyteidl.core.IdentifierOuterClass.Identifier.Builder, flyteidl.core.IdentifierOuterClass.IdentifierOrBuilder> referenceIdBuilder_;
      /**
       * <pre>
       * A globally unique identifier for the task.
       * </pre>
       *
       * <code>.flyteidl.core.Identifier reference_id = 1;</code>
       */
      public boolean hasReferenceId() {
        return referenceCase_ == 1;
      }
      /**
       * <pre>
       * A globally unique identifier for the task.
       * </pre>
       *
       * <code>.flyteidl.core.Identifier reference_id = 1;</code>
       */
      public flyteidl.core.IdentifierOuterClass.Identifier getReferenceId() {
        if (referenceIdBuilder_ == null) {
          if (referenceCase_ == 1) {
            return (flyteidl.core.IdentifierOuterClass.Identifier) reference_;
          }
          return flyteidl.core.IdentifierOuterClass.Identifier.getDefaultInstance();
        } else {
          if (referenceCase_ == 1) {
            return referenceIdBuilder_.getMessage();
          }
          return flyteidl.core.IdentifierOuterClass.Identifier.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * A globally unique identifier for the task.
       * </pre>
       *
       * <code>.flyteidl.core.Identifier reference_id = 1;</code>
       */
      public Builder setReferenceId(flyteidl.core.IdentifierOuterClass.Identifier value) {
        if (referenceIdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          reference_ = value;
          onChanged();
        } else {
          referenceIdBuilder_.setMessage(value);
        }
        referenceCase_ = 1;
        return this;
      }
      /**
       * <pre>
       * A globally unique identifier for the task.
       * </pre>
       *
       * <code>.flyteidl.core.Identifier reference_id = 1;</code>
       */
      public Builder setReferenceId(
          flyteidl.core.IdentifierOuterClass.Identifier.Builder builderForValue) {
        if (referenceIdBuilder_ == null) {
          reference_ = builderForValue.build();
          onChanged();
        } else {
          referenceIdBuilder_.setMessage(builderForValue.build());
        }
        referenceCase_ = 1;
        return this;
      }
      /**
       * <pre>
       * A globally unique identifier for the task.
       * </pre>
       *
       * <code>.flyteidl.core.Identifier reference_id = 1;</code>
       */
      public Builder mergeReferenceId(flyteidl.core.IdentifierOuterClass.Identifier value) {
        if (referenceIdBuilder_ == null) {
          if (referenceCase_ == 1 &&
              reference_ != flyteidl.core.IdentifierOuterClass.Identifier.getDefaultInstance()) {
            reference_ = flyteidl.core.IdentifierOuterClass.Identifier.newBuilder((flyteidl.core.IdentifierOuterClass.Identifier) reference_)
                .mergeFrom(value).buildPartial();
          } else {
            reference_ = value;
          }
          onChanged();
        } else {
          if (referenceCase_ == 1) {
            referenceIdBuilder_.mergeFrom(value);
          }
          referenceIdBuilder_.setMessage(value);
        }
        referenceCase_ = 1;
        return this;
      }
      /**
       * <pre>
       * A globally unique identifier for the task.
       * </pre>
       *
       * <code>.flyteidl.core.Identifier reference_id = 1;</code>
       */
      public Builder clearReferenceId() {
        if (referenceIdBuilder_ == null) {
          if (referenceCase_ == 1) {
            referenceCase_ = 0;
            reference_ = null;
            onChanged();
          }
        } else {
          if (referenceCase_ == 1) {
            referenceCase_ = 0;
            reference_ = null;
          }
          referenceIdBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * A globally unique identifier for the task.
       * </pre>
       *
       * <code>.flyteidl.core.Identifier reference_id = 1;</code>
       */
      public flyteidl.core.IdentifierOuterClass.Identifier.Builder getReferenceIdBuilder() {
        return getReferenceIdFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * A globally unique identifier for the task.
       * </pre>
       *
       * <code>.flyteidl.core.Identifier reference_id = 1;</code>
       */
      public flyteidl.core.IdentifierOuterClass.IdentifierOrBuilder getReferenceIdOrBuilder() {
        if ((referenceCase_ == 1) && (referenceIdBuilder_ != null)) {
          return referenceIdBuilder_.getMessageOrBuilder();
        } else {
          if (referenceCase_ == 1) {
            return (flyteidl.core.IdentifierOuterClass.Identifier) reference_;
          }
          return flyteidl.core.IdentifierOuterClass.Identifier.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * A globally unique identifier for the task.
       * </pre>
       *
       * <code>.flyteidl.core.Identifier reference_id = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.IdentifierOuterClass.Identifier, flyteidl.core.IdentifierOuterClass.Identifier.Builder, flyteidl.core.IdentifierOuterClass.IdentifierOrBuilder> 
          getReferenceIdFieldBuilder() {
        if (referenceIdBuilder_ == null) {
          if (!(referenceCase_ == 1)) {
            reference_ = flyteidl.core.IdentifierOuterClass.Identifier.getDefaultInstance();
          }
          referenceIdBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              flyteidl.core.IdentifierOuterClass.Identifier, flyteidl.core.IdentifierOuterClass.Identifier.Builder, flyteidl.core.IdentifierOuterClass.IdentifierOrBuilder>(
                  (flyteidl.core.IdentifierOuterClass.Identifier) reference_,
                  getParentForChildren(),
                  isClean());
          reference_ = null;
        }
        referenceCase_ = 1;
        onChanged();;
        return referenceIdBuilder_;
      }

      private flyteidl.core.Workflow.TaskNodeOverrides overrides_;
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Workflow.TaskNodeOverrides, flyteidl.core.Workflow.TaskNodeOverrides.Builder, flyteidl.core.Workflow.TaskNodeOverridesOrBuilder> overridesBuilder_;
      /**
       * <pre>
       * Optional overrides applied at task execution time.
       * </pre>
       *
       * <code>.flyteidl.core.TaskNodeOverrides overrides = 2;</code>
       */
      public boolean hasOverrides() {
        return overridesBuilder_ != null || overrides_ != null;
      }
      /**
       * <pre>
       * Optional overrides applied at task execution time.
       * </pre>
       *
       * <code>.flyteidl.core.TaskNodeOverrides overrides = 2;</code>
       */
      public flyteidl.core.Workflow.TaskNodeOverrides getOverrides() {
        if (overridesBuilder_ == null) {
          return overrides_ == null ? flyteidl.core.Workflow.TaskNodeOverrides.getDefaultInstance() : overrides_;
        } else {
          return overridesBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Optional overrides applied at task execution time.
       * </pre>
       *
       * <code>.flyteidl.core.TaskNodeOverrides overrides = 2;</code>
       */
      public Builder setOverrides(flyteidl.core.Workflow.TaskNodeOverrides value) {
        if (overridesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          overrides_ = value;
          onChanged();
        } else {
          overridesBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Optional overrides applied at task execution time.
       * </pre>
       *
       * <code>.flyteidl.core.TaskNodeOverrides overrides = 2;</code>
       */
      public Builder setOverrides(
          flyteidl.core.Workflow.TaskNodeOverrides.Builder builderForValue) {
        if (overridesBuilder_ == null) {
          overrides_ = builderForValue.build();
          onChanged();
        } else {
          overridesBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Optional overrides applied at task execution time.
       * </pre>
       *
       * <code>.flyteidl.core.TaskNodeOverrides overrides = 2;</code>
       */
      public Builder mergeOverrides(flyteidl.core.Workflow.TaskNodeOverrides value) {
        if (overridesBuilder_ == null) {
          if (overrides_ != null) {
            overrides_ =
              flyteidl.core.Workflow.TaskNodeOverrides.newBuilder(overrides_).mergeFrom(value).buildPartial();
          } else {
            overrides_ = value;
          }
          onChanged();
        } else {
          overridesBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Optional overrides applied at task execution time.
       * </pre>
       *
       * <code>.flyteidl.core.TaskNodeOverrides overrides = 2;</code>
       */
      public Builder clearOverrides() {
        if (overridesBuilder_ == null) {
          overrides_ = null;
          onChanged();
        } else {
          overrides_ = null;
          overridesBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Optional overrides applied at task execution time.
       * </pre>
       *
       * <code>.flyteidl.core.TaskNodeOverrides overrides = 2;</code>
       */
      public flyteidl.core.Workflow.TaskNodeOverrides.Builder getOverridesBuilder() {
        
        onChanged();
        return getOverridesFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Optional overrides applied at task execution time.
       * </pre>
       *
       * <code>.flyteidl.core.TaskNodeOverrides overrides = 2;</code>
       */
      public flyteidl.core.Workflow.TaskNodeOverridesOrBuilder getOverridesOrBuilder() {
        if (overridesBuilder_ != null) {
          return overridesBuilder_.getMessageOrBuilder();
        } else {
          return overrides_ == null ?
              flyteidl.core.Workflow.TaskNodeOverrides.getDefaultInstance() : overrides_;
        }
      }
      /**
       * <pre>
       * Optional overrides applied at task execution time.
       * </pre>
       *
       * <code>.flyteidl.core.TaskNodeOverrides overrides = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Workflow.TaskNodeOverrides, flyteidl.core.Workflow.TaskNodeOverrides.Builder, flyteidl.core.Workflow.TaskNodeOverridesOrBuilder> 
          getOverridesFieldBuilder() {
        if (overridesBuilder_ == null) {
          overridesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              flyteidl.core.Workflow.TaskNodeOverrides, flyteidl.core.Workflow.TaskNodeOverrides.Builder, flyteidl.core.Workflow.TaskNodeOverridesOrBuilder>(
                  getOverrides(),
                  getParentForChildren(),
                  isClean());
          overrides_ = null;
        }
        return overridesBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flyteidl.core.TaskNode)
    }

    // @@protoc_insertion_point(class_scope:flyteidl.core.TaskNode)
    private static final flyteidl.core.Workflow.TaskNode DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new flyteidl.core.Workflow.TaskNode();
    }

    public static flyteidl.core.Workflow.TaskNode getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TaskNode>
        PARSER = new com.google.protobuf.AbstractParser<TaskNode>() {
      @java.lang.Override
      public TaskNode parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TaskNode(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<TaskNode> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TaskNode> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public flyteidl.core.Workflow.TaskNode getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface WorkflowNodeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flyteidl.core.WorkflowNode)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * A globally unique identifier for the launch plan.
     * </pre>
     *
     * <code>.flyteidl.core.Identifier launchplan_ref = 1;</code>
     */
    boolean hasLaunchplanRef();
    /**
     * <pre>
     * A globally unique identifier for the launch plan.
     * </pre>
     *
     * <code>.flyteidl.core.Identifier launchplan_ref = 1;</code>
     */
    flyteidl.core.IdentifierOuterClass.Identifier getLaunchplanRef();
    /**
     * <pre>
     * A globally unique identifier for the launch plan.
     * </pre>
     *
     * <code>.flyteidl.core.Identifier launchplan_ref = 1;</code>
     */
    flyteidl.core.IdentifierOuterClass.IdentifierOrBuilder getLaunchplanRefOrBuilder();

    /**
     * <pre>
     * Reference to a subworkflow, that should be defined with the compiler context
     * </pre>
     *
     * <code>.flyteidl.core.Identifier sub_workflow_ref = 2;</code>
     */
    boolean hasSubWorkflowRef();
    /**
     * <pre>
     * Reference to a subworkflow, that should be defined with the compiler context
     * </pre>
     *
     * <code>.flyteidl.core.Identifier sub_workflow_ref = 2;</code>
     */
    flyteidl.core.IdentifierOuterClass.Identifier getSubWorkflowRef();
    /**
     * <pre>
     * Reference to a subworkflow, that should be defined with the compiler context
     * </pre>
     *
     * <code>.flyteidl.core.Identifier sub_workflow_ref = 2;</code>
     */
    flyteidl.core.IdentifierOuterClass.IdentifierOrBuilder getSubWorkflowRefOrBuilder();

    public flyteidl.core.Workflow.WorkflowNode.ReferenceCase getReferenceCase();
  }
  /**
   * <pre>
   * Refers to a the workflow the node is to execute.
   * </pre>
   *
   * Protobuf type {@code flyteidl.core.WorkflowNode}
   */
  public  static final class WorkflowNode extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flyteidl.core.WorkflowNode)
      WorkflowNodeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use WorkflowNode.newBuilder() to construct.
    private WorkflowNode(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private WorkflowNode() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private WorkflowNode(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              flyteidl.core.IdentifierOuterClass.Identifier.Builder subBuilder = null;
              if (referenceCase_ == 1) {
                subBuilder = ((flyteidl.core.IdentifierOuterClass.Identifier) reference_).toBuilder();
              }
              reference_ =
                  input.readMessage(flyteidl.core.IdentifierOuterClass.Identifier.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((flyteidl.core.IdentifierOuterClass.Identifier) reference_);
                reference_ = subBuilder.buildPartial();
              }
              referenceCase_ = 1;
              break;
            }
            case 18: {
              flyteidl.core.IdentifierOuterClass.Identifier.Builder subBuilder = null;
              if (referenceCase_ == 2) {
                subBuilder = ((flyteidl.core.IdentifierOuterClass.Identifier) reference_).toBuilder();
              }
              reference_ =
                  input.readMessage(flyteidl.core.IdentifierOuterClass.Identifier.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((flyteidl.core.IdentifierOuterClass.Identifier) reference_);
                reference_ = subBuilder.buildPartial();
              }
              referenceCase_ = 2;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return flyteidl.core.Workflow.internal_static_flyteidl_core_WorkflowNode_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return flyteidl.core.Workflow.internal_static_flyteidl_core_WorkflowNode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              flyteidl.core.Workflow.WorkflowNode.class, flyteidl.core.Workflow.WorkflowNode.Builder.class);
    }

    private int referenceCase_ = 0;
    private java.lang.Object reference_;
    public enum ReferenceCase
        implements com.google.protobuf.Internal.EnumLite {
      LAUNCHPLAN_REF(1),
      SUB_WORKFLOW_REF(2),
      REFERENCE_NOT_SET(0);
      private final int value;
      private ReferenceCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ReferenceCase valueOf(int value) {
        return forNumber(value);
      }

      public static ReferenceCase forNumber(int value) {
        switch (value) {
          case 1: return LAUNCHPLAN_REF;
          case 2: return SUB_WORKFLOW_REF;
          case 0: return REFERENCE_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ReferenceCase
    getReferenceCase() {
      return ReferenceCase.forNumber(
          referenceCase_);
    }

    public static final int LAUNCHPLAN_REF_FIELD_NUMBER = 1;
    /**
     * <pre>
     * A globally unique identifier for the launch plan.
     * </pre>
     *
     * <code>.flyteidl.core.Identifier launchplan_ref = 1;</code>
     */
    public boolean hasLaunchplanRef() {
      return referenceCase_ == 1;
    }
    /**
     * <pre>
     * A globally unique identifier for the launch plan.
     * </pre>
     *
     * <code>.flyteidl.core.Identifier launchplan_ref = 1;</code>
     */
    public flyteidl.core.IdentifierOuterClass.Identifier getLaunchplanRef() {
      if (referenceCase_ == 1) {
         return (flyteidl.core.IdentifierOuterClass.Identifier) reference_;
      }
      return flyteidl.core.IdentifierOuterClass.Identifier.getDefaultInstance();
    }
    /**
     * <pre>
     * A globally unique identifier for the launch plan.
     * </pre>
     *
     * <code>.flyteidl.core.Identifier launchplan_ref = 1;</code>
     */
    public flyteidl.core.IdentifierOuterClass.IdentifierOrBuilder getLaunchplanRefOrBuilder() {
      if (referenceCase_ == 1) {
         return (flyteidl.core.IdentifierOuterClass.Identifier) reference_;
      }
      return flyteidl.core.IdentifierOuterClass.Identifier.getDefaultInstance();
    }

    public static final int SUB_WORKFLOW_REF_FIELD_NUMBER = 2;
    /**
     * <pre>
     * Reference to a subworkflow, that should be defined with the compiler context
     * </pre>
     *
     * <code>.flyteidl.core.Identifier sub_workflow_ref = 2;</code>
     */
    public boolean hasSubWorkflowRef() {
      return referenceCase_ == 2;
    }
    /**
     * <pre>
     * Reference to a subworkflow, that should be defined with the compiler context
     * </pre>
     *
     * <code>.flyteidl.core.Identifier sub_workflow_ref = 2;</code>
     */
    public flyteidl.core.IdentifierOuterClass.Identifier getSubWorkflowRef() {
      if (referenceCase_ == 2) {
         return (flyteidl.core.IdentifierOuterClass.Identifier) reference_;
      }
      return flyteidl.core.IdentifierOuterClass.Identifier.getDefaultInstance();
    }
    /**
     * <pre>
     * Reference to a subworkflow, that should be defined with the compiler context
     * </pre>
     *
     * <code>.flyteidl.core.Identifier sub_workflow_ref = 2;</code>
     */
    public flyteidl.core.IdentifierOuterClass.IdentifierOrBuilder getSubWorkflowRefOrBuilder() {
      if (referenceCase_ == 2) {
         return (flyteidl.core.IdentifierOuterClass.Identifier) reference_;
      }
      return flyteidl.core.IdentifierOuterClass.Identifier.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (referenceCase_ == 1) {
        output.writeMessage(1, (flyteidl.core.IdentifierOuterClass.Identifier) reference_);
      }
      if (referenceCase_ == 2) {
        output.writeMessage(2, (flyteidl.core.IdentifierOuterClass.Identifier) reference_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (referenceCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, (flyteidl.core.IdentifierOuterClass.Identifier) reference_);
      }
      if (referenceCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (flyteidl.core.IdentifierOuterClass.Identifier) reference_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof flyteidl.core.Workflow.WorkflowNode)) {
        return super.equals(obj);
      }
      flyteidl.core.Workflow.WorkflowNode other = (flyteidl.core.Workflow.WorkflowNode) obj;

      if (!getReferenceCase().equals(other.getReferenceCase())) return false;
      switch (referenceCase_) {
        case 1:
          if (!getLaunchplanRef()
              .equals(other.getLaunchplanRef())) return false;
          break;
        case 2:
          if (!getSubWorkflowRef()
              .equals(other.getSubWorkflowRef())) return false;
          break;
        case 0:
        default:
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      switch (referenceCase_) {
        case 1:
          hash = (37 * hash) + LAUNCHPLAN_REF_FIELD_NUMBER;
          hash = (53 * hash) + getLaunchplanRef().hashCode();
          break;
        case 2:
          hash = (37 * hash) + SUB_WORKFLOW_REF_FIELD_NUMBER;
          hash = (53 * hash) + getSubWorkflowRef().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static flyteidl.core.Workflow.WorkflowNode parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Workflow.WorkflowNode parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Workflow.WorkflowNode parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Workflow.WorkflowNode parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Workflow.WorkflowNode parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Workflow.WorkflowNode parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Workflow.WorkflowNode parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static flyteidl.core.Workflow.WorkflowNode parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static flyteidl.core.Workflow.WorkflowNode parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static flyteidl.core.Workflow.WorkflowNode parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static flyteidl.core.Workflow.WorkflowNode parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static flyteidl.core.Workflow.WorkflowNode parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(flyteidl.core.Workflow.WorkflowNode prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Refers to a the workflow the node is to execute.
     * </pre>
     *
     * Protobuf type {@code flyteidl.core.WorkflowNode}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flyteidl.core.WorkflowNode)
        flyteidl.core.Workflow.WorkflowNodeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return flyteidl.core.Workflow.internal_static_flyteidl_core_WorkflowNode_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return flyteidl.core.Workflow.internal_static_flyteidl_core_WorkflowNode_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                flyteidl.core.Workflow.WorkflowNode.class, flyteidl.core.Workflow.WorkflowNode.Builder.class);
      }

      // Construct using flyteidl.core.Workflow.WorkflowNode.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        referenceCase_ = 0;
        reference_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return flyteidl.core.Workflow.internal_static_flyteidl_core_WorkflowNode_descriptor;
      }

      @java.lang.Override
      public flyteidl.core.Workflow.WorkflowNode getDefaultInstanceForType() {
        return flyteidl.core.Workflow.WorkflowNode.getDefaultInstance();
      }

      @java.lang.Override
      public flyteidl.core.Workflow.WorkflowNode build() {
        flyteidl.core.Workflow.WorkflowNode result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public flyteidl.core.Workflow.WorkflowNode buildPartial() {
        flyteidl.core.Workflow.WorkflowNode result = new flyteidl.core.Workflow.WorkflowNode(this);
        if (referenceCase_ == 1) {
          if (launchplanRefBuilder_ == null) {
            result.reference_ = reference_;
          } else {
            result.reference_ = launchplanRefBuilder_.build();
          }
        }
        if (referenceCase_ == 2) {
          if (subWorkflowRefBuilder_ == null) {
            result.reference_ = reference_;
          } else {
            result.reference_ = subWorkflowRefBuilder_.build();
          }
        }
        result.referenceCase_ = referenceCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof flyteidl.core.Workflow.WorkflowNode) {
          return mergeFrom((flyteidl.core.Workflow.WorkflowNode)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(flyteidl.core.Workflow.WorkflowNode other) {
        if (other == flyteidl.core.Workflow.WorkflowNode.getDefaultInstance()) return this;
        switch (other.getReferenceCase()) {
          case LAUNCHPLAN_REF: {
            mergeLaunchplanRef(other.getLaunchplanRef());
            break;
          }
          case SUB_WORKFLOW_REF: {
            mergeSubWorkflowRef(other.getSubWorkflowRef());
            break;
          }
          case REFERENCE_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        flyteidl.core.Workflow.WorkflowNode parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (flyteidl.core.Workflow.WorkflowNode) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int referenceCase_ = 0;
      private java.lang.Object reference_;
      public ReferenceCase
          getReferenceCase() {
        return ReferenceCase.forNumber(
            referenceCase_);
      }

      public Builder clearReference() {
        referenceCase_ = 0;
        reference_ = null;
        onChanged();
        return this;
      }


      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.IdentifierOuterClass.Identifier, flyteidl.core.IdentifierOuterClass.Identifier.Builder, flyteidl.core.IdentifierOuterClass.IdentifierOrBuilder> launchplanRefBuilder_;
      /**
       * <pre>
       * A globally unique identifier for the launch plan.
       * </pre>
       *
       * <code>.flyteidl.core.Identifier launchplan_ref = 1;</code>
       */
      public boolean hasLaunchplanRef() {
        return referenceCase_ == 1;
      }
      /**
       * <pre>
       * A globally unique identifier for the launch plan.
       * </pre>
       *
       * <code>.flyteidl.core.Identifier launchplan_ref = 1;</code>
       */
      public flyteidl.core.IdentifierOuterClass.Identifier getLaunchplanRef() {
        if (launchplanRefBuilder_ == null) {
          if (referenceCase_ == 1) {
            return (flyteidl.core.IdentifierOuterClass.Identifier) reference_;
          }
          return flyteidl.core.IdentifierOuterClass.Identifier.getDefaultInstance();
        } else {
          if (referenceCase_ == 1) {
            return launchplanRefBuilder_.getMessage();
          }
          return flyteidl.core.IdentifierOuterClass.Identifier.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * A globally unique identifier for the launch plan.
       * </pre>
       *
       * <code>.flyteidl.core.Identifier launchplan_ref = 1;</code>
       */
      public Builder setLaunchplanRef(flyteidl.core.IdentifierOuterClass.Identifier value) {
        if (launchplanRefBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          reference_ = value;
          onChanged();
        } else {
          launchplanRefBuilder_.setMessage(value);
        }
        referenceCase_ = 1;
        return this;
      }
      /**
       * <pre>
       * A globally unique identifier for the launch plan.
       * </pre>
       *
       * <code>.flyteidl.core.Identifier launchplan_ref = 1;</code>
       */
      public Builder setLaunchplanRef(
          flyteidl.core.IdentifierOuterClass.Identifier.Builder builderForValue) {
        if (launchplanRefBuilder_ == null) {
          reference_ = builderForValue.build();
          onChanged();
        } else {
          launchplanRefBuilder_.setMessage(builderForValue.build());
        }
        referenceCase_ = 1;
        return this;
      }
      /**
       * <pre>
       * A globally unique identifier for the launch plan.
       * </pre>
       *
       * <code>.flyteidl.core.Identifier launchplan_ref = 1;</code>
       */
      public Builder mergeLaunchplanRef(flyteidl.core.IdentifierOuterClass.Identifier value) {
        if (launchplanRefBuilder_ == null) {
          if (referenceCase_ == 1 &&
              reference_ != flyteidl.core.IdentifierOuterClass.Identifier.getDefaultInstance()) {
            reference_ = flyteidl.core.IdentifierOuterClass.Identifier.newBuilder((flyteidl.core.IdentifierOuterClass.Identifier) reference_)
                .mergeFrom(value).buildPartial();
          } else {
            reference_ = value;
          }
          onChanged();
        } else {
          if (referenceCase_ == 1) {
            launchplanRefBuilder_.mergeFrom(value);
          }
          launchplanRefBuilder_.setMessage(value);
        }
        referenceCase_ = 1;
        return this;
      }
      /**
       * <pre>
       * A globally unique identifier for the launch plan.
       * </pre>
       *
       * <code>.flyteidl.core.Identifier launchplan_ref = 1;</code>
       */
      public Builder clearLaunchplanRef() {
        if (launchplanRefBuilder_ == null) {
          if (referenceCase_ == 1) {
            referenceCase_ = 0;
            reference_ = null;
            onChanged();
          }
        } else {
          if (referenceCase_ == 1) {
            referenceCase_ = 0;
            reference_ = null;
          }
          launchplanRefBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * A globally unique identifier for the launch plan.
       * </pre>
       *
       * <code>.flyteidl.core.Identifier launchplan_ref = 1;</code>
       */
      public flyteidl.core.IdentifierOuterClass.Identifier.Builder getLaunchplanRefBuilder() {
        return getLaunchplanRefFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * A globally unique identifier for the launch plan.
       * </pre>
       *
       * <code>.flyteidl.core.Identifier launchplan_ref = 1;</code>
       */
      public flyteidl.core.IdentifierOuterClass.IdentifierOrBuilder getLaunchplanRefOrBuilder() {
        if ((referenceCase_ == 1) && (launchplanRefBuilder_ != null)) {
          return launchplanRefBuilder_.getMessageOrBuilder();
        } else {
          if (referenceCase_ == 1) {
            return (flyteidl.core.IdentifierOuterClass.Identifier) reference_;
          }
          return flyteidl.core.IdentifierOuterClass.Identifier.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * A globally unique identifier for the launch plan.
       * </pre>
       *
       * <code>.flyteidl.core.Identifier launchplan_ref = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.IdentifierOuterClass.Identifier, flyteidl.core.IdentifierOuterClass.Identifier.Builder, flyteidl.core.IdentifierOuterClass.IdentifierOrBuilder> 
          getLaunchplanRefFieldBuilder() {
        if (launchplanRefBuilder_ == null) {
          if (!(referenceCase_ == 1)) {
            reference_ = flyteidl.core.IdentifierOuterClass.Identifier.getDefaultInstance();
          }
          launchplanRefBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              flyteidl.core.IdentifierOuterClass.Identifier, flyteidl.core.IdentifierOuterClass.Identifier.Builder, flyteidl.core.IdentifierOuterClass.IdentifierOrBuilder>(
                  (flyteidl.core.IdentifierOuterClass.Identifier) reference_,
                  getParentForChildren(),
                  isClean());
          reference_ = null;
        }
        referenceCase_ = 1;
        onChanged();;
        return launchplanRefBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.IdentifierOuterClass.Identifier, flyteidl.core.IdentifierOuterClass.Identifier.Builder, flyteidl.core.IdentifierOuterClass.IdentifierOrBuilder> subWorkflowRefBuilder_;
      /**
       * <pre>
       * Reference to a subworkflow, that should be defined with the compiler context
       * </pre>
       *
       * <code>.flyteidl.core.Identifier sub_workflow_ref = 2;</code>
       */
      public boolean hasSubWorkflowRef() {
        return referenceCase_ == 2;
      }
      /**
       * <pre>
       * Reference to a subworkflow, that should be defined with the compiler context
       * </pre>
       *
       * <code>.flyteidl.core.Identifier sub_workflow_ref = 2;</code>
       */
      public flyteidl.core.IdentifierOuterClass.Identifier getSubWorkflowRef() {
        if (subWorkflowRefBuilder_ == null) {
          if (referenceCase_ == 2) {
            return (flyteidl.core.IdentifierOuterClass.Identifier) reference_;
          }
          return flyteidl.core.IdentifierOuterClass.Identifier.getDefaultInstance();
        } else {
          if (referenceCase_ == 2) {
            return subWorkflowRefBuilder_.getMessage();
          }
          return flyteidl.core.IdentifierOuterClass.Identifier.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Reference to a subworkflow, that should be defined with the compiler context
       * </pre>
       *
       * <code>.flyteidl.core.Identifier sub_workflow_ref = 2;</code>
       */
      public Builder setSubWorkflowRef(flyteidl.core.IdentifierOuterClass.Identifier value) {
        if (subWorkflowRefBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          reference_ = value;
          onChanged();
        } else {
          subWorkflowRefBuilder_.setMessage(value);
        }
        referenceCase_ = 2;
        return this;
      }
      /**
       * <pre>
       * Reference to a subworkflow, that should be defined with the compiler context
       * </pre>
       *
       * <code>.flyteidl.core.Identifier sub_workflow_ref = 2;</code>
       */
      public Builder setSubWorkflowRef(
          flyteidl.core.IdentifierOuterClass.Identifier.Builder builderForValue) {
        if (subWorkflowRefBuilder_ == null) {
          reference_ = builderForValue.build();
          onChanged();
        } else {
          subWorkflowRefBuilder_.setMessage(builderForValue.build());
        }
        referenceCase_ = 2;
        return this;
      }
      /**
       * <pre>
       * Reference to a subworkflow, that should be defined with the compiler context
       * </pre>
       *
       * <code>.flyteidl.core.Identifier sub_workflow_ref = 2;</code>
       */
      public Builder mergeSubWorkflowRef(flyteidl.core.IdentifierOuterClass.Identifier value) {
        if (subWorkflowRefBuilder_ == null) {
          if (referenceCase_ == 2 &&
              reference_ != flyteidl.core.IdentifierOuterClass.Identifier.getDefaultInstance()) {
            reference_ = flyteidl.core.IdentifierOuterClass.Identifier.newBuilder((flyteidl.core.IdentifierOuterClass.Identifier) reference_)
                .mergeFrom(value).buildPartial();
          } else {
            reference_ = value;
          }
          onChanged();
        } else {
          if (referenceCase_ == 2) {
            subWorkflowRefBuilder_.mergeFrom(value);
          }
          subWorkflowRefBuilder_.setMessage(value);
        }
        referenceCase_ = 2;
        return this;
      }
      /**
       * <pre>
       * Reference to a subworkflow, that should be defined with the compiler context
       * </pre>
       *
       * <code>.flyteidl.core.Identifier sub_workflow_ref = 2;</code>
       */
      public Builder clearSubWorkflowRef() {
        if (subWorkflowRefBuilder_ == null) {
          if (referenceCase_ == 2) {
            referenceCase_ = 0;
            reference_ = null;
            onChanged();
          }
        } else {
          if (referenceCase_ == 2) {
            referenceCase_ = 0;
            reference_ = null;
          }
          subWorkflowRefBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Reference to a subworkflow, that should be defined with the compiler context
       * </pre>
       *
       * <code>.flyteidl.core.Identifier sub_workflow_ref = 2;</code>
       */
      public flyteidl.core.IdentifierOuterClass.Identifier.Builder getSubWorkflowRefBuilder() {
        return getSubWorkflowRefFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Reference to a subworkflow, that should be defined with the compiler context
       * </pre>
       *
       * <code>.flyteidl.core.Identifier sub_workflow_ref = 2;</code>
       */
      public flyteidl.core.IdentifierOuterClass.IdentifierOrBuilder getSubWorkflowRefOrBuilder() {
        if ((referenceCase_ == 2) && (subWorkflowRefBuilder_ != null)) {
          return subWorkflowRefBuilder_.getMessageOrBuilder();
        } else {
          if (referenceCase_ == 2) {
            return (flyteidl.core.IdentifierOuterClass.Identifier) reference_;
          }
          return flyteidl.core.IdentifierOuterClass.Identifier.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Reference to a subworkflow, that should be defined with the compiler context
       * </pre>
       *
       * <code>.flyteidl.core.Identifier sub_workflow_ref = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.IdentifierOuterClass.Identifier, flyteidl.core.IdentifierOuterClass.Identifier.Builder, flyteidl.core.IdentifierOuterClass.IdentifierOrBuilder> 
          getSubWorkflowRefFieldBuilder() {
        if (subWorkflowRefBuilder_ == null) {
          if (!(referenceCase_ == 2)) {
            reference_ = flyteidl.core.IdentifierOuterClass.Identifier.getDefaultInstance();
          }
          subWorkflowRefBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              flyteidl.core.IdentifierOuterClass.Identifier, flyteidl.core.IdentifierOuterClass.Identifier.Builder, flyteidl.core.IdentifierOuterClass.IdentifierOrBuilder>(
                  (flyteidl.core.IdentifierOuterClass.Identifier) reference_,
                  getParentForChildren(),
                  isClean());
          reference_ = null;
        }
        referenceCase_ = 2;
        onChanged();;
        return subWorkflowRefBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flyteidl.core.WorkflowNode)
    }

    // @@protoc_insertion_point(class_scope:flyteidl.core.WorkflowNode)
    private static final flyteidl.core.Workflow.WorkflowNode DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new flyteidl.core.Workflow.WorkflowNode();
    }

    public static flyteidl.core.Workflow.WorkflowNode getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<WorkflowNode>
        PARSER = new com.google.protobuf.AbstractParser<WorkflowNode>() {
      @java.lang.Override
      public WorkflowNode parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new WorkflowNode(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<WorkflowNode> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<WorkflowNode> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public flyteidl.core.Workflow.WorkflowNode getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ApproveConditionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flyteidl.core.ApproveCondition)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * A unique identifier for the requested boolean signal.
     * </pre>
     *
     * <code>string signal_id = 1;</code>
     */
    java.lang.String getSignalId();
    /**
     * <pre>
     * A unique identifier for the requested boolean signal.
     * </pre>
     *
     * <code>string signal_id = 1;</code>
     */
    com.google.protobuf.ByteString
        getSignalIdBytes();
  }
  /**
   * <pre>
   * ApproveCondition represents a dependency on an external approval. During execution, this will manifest as a boolean
   * signal with the provided signal_id.
   * </pre>
   *
   * Protobuf type {@code flyteidl.core.ApproveCondition}
   */
  public  static final class ApproveCondition extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flyteidl.core.ApproveCondition)
      ApproveConditionOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ApproveCondition.newBuilder() to construct.
    private ApproveCondition(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ApproveCondition() {
      signalId_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ApproveCondition(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              signalId_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return flyteidl.core.Workflow.internal_static_flyteidl_core_ApproveCondition_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return flyteidl.core.Workflow.internal_static_flyteidl_core_ApproveCondition_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              flyteidl.core.Workflow.ApproveCondition.class, flyteidl.core.Workflow.ApproveCondition.Builder.class);
    }

    public static final int SIGNAL_ID_FIELD_NUMBER = 1;
    private volatile java.lang.Object signalId_;
    /**
     * <pre>
     * A unique identifier for the requested boolean signal.
     * </pre>
     *
     * <code>string signal_id = 1;</code>
     */
    public java.lang.String getSignalId() {
      java.lang.Object ref = signalId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        signalId_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * A unique identifier for the requested boolean signal.
     * </pre>
     *
     * <code>string signal_id = 1;</code>
     */
    public com.google.protobuf.ByteString
        getSignalIdBytes() {
      java.lang.Object ref = signalId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        signalId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getSignalIdBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, signalId_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getSignalIdBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, signalId_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof flyteidl.core.Workflow.ApproveCondition)) {
        return super.equals(obj);
      }
      flyteidl.core.Workflow.ApproveCondition other = (flyteidl.core.Workflow.ApproveCondition) obj;

      if (!getSignalId()
          .equals(other.getSignalId())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + SIGNAL_ID_FIELD_NUMBER;
      hash = (53 * hash) + getSignalId().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static flyteidl.core.Workflow.ApproveCondition parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Workflow.ApproveCondition parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Workflow.ApproveCondition parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Workflow.ApproveCondition parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Workflow.ApproveCondition parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Workflow.ApproveCondition parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Workflow.ApproveCondition parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static flyteidl.core.Workflow.ApproveCondition parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static flyteidl.core.Workflow.ApproveCondition parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static flyteidl.core.Workflow.ApproveCondition parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static flyteidl.core.Workflow.ApproveCondition parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static flyteidl.core.Workflow.ApproveCondition parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(flyteidl.core.Workflow.ApproveCondition prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * ApproveCondition represents a dependency on an external approval. During execution, this will manifest as a boolean
     * signal with the provided signal_id.
     * </pre>
     *
     * Protobuf type {@code flyteidl.core.ApproveCondition}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flyteidl.core.ApproveCondition)
        flyteidl.core.Workflow.ApproveConditionOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return flyteidl.core.Workflow.internal_static_flyteidl_core_ApproveCondition_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return flyteidl.core.Workflow.internal_static_flyteidl_core_ApproveCondition_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                flyteidl.core.Workflow.ApproveCondition.class, flyteidl.core.Workflow.ApproveCondition.Builder.class);
      }

      // Construct using flyteidl.core.Workflow.ApproveCondition.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        signalId_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return flyteidl.core.Workflow.internal_static_flyteidl_core_ApproveCondition_descriptor;
      }

      @java.lang.Override
      public flyteidl.core.Workflow.ApproveCondition getDefaultInstanceForType() {
        return flyteidl.core.Workflow.ApproveCondition.getDefaultInstance();
      }

      @java.lang.Override
      public flyteidl.core.Workflow.ApproveCondition build() {
        flyteidl.core.Workflow.ApproveCondition result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public flyteidl.core.Workflow.ApproveCondition buildPartial() {
        flyteidl.core.Workflow.ApproveCondition result = new flyteidl.core.Workflow.ApproveCondition(this);
        result.signalId_ = signalId_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof flyteidl.core.Workflow.ApproveCondition) {
          return mergeFrom((flyteidl.core.Workflow.ApproveCondition)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(flyteidl.core.Workflow.ApproveCondition other) {
        if (other == flyteidl.core.Workflow.ApproveCondition.getDefaultInstance()) return this;
        if (!other.getSignalId().isEmpty()) {
          signalId_ = other.signalId_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        flyteidl.core.Workflow.ApproveCondition parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (flyteidl.core.Workflow.ApproveCondition) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object signalId_ = "";
      /**
       * <pre>
       * A unique identifier for the requested boolean signal.
       * </pre>
       *
       * <code>string signal_id = 1;</code>
       */
      public java.lang.String getSignalId() {
        java.lang.Object ref = signalId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          signalId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * A unique identifier for the requested boolean signal.
       * </pre>
       *
       * <code>string signal_id = 1;</code>
       */
      public com.google.protobuf.ByteString
          getSignalIdBytes() {
        java.lang.Object ref = signalId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          signalId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * A unique identifier for the requested boolean signal.
       * </pre>
       *
       * <code>string signal_id = 1;</code>
       */
      public Builder setSignalId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        signalId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A unique identifier for the requested boolean signal.
       * </pre>
       *
       * <code>string signal_id = 1;</code>
       */
      public Builder clearSignalId() {
        
        signalId_ = getDefaultInstance().getSignalId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A unique identifier for the requested boolean signal.
       * </pre>
       *
       * <code>string signal_id = 1;</code>
       */
      public Builder setSignalIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        signalId_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flyteidl.core.ApproveCondition)
    }

    // @@protoc_insertion_point(class_scope:flyteidl.core.ApproveCondition)
    private static final flyteidl.core.Workflow.ApproveCondition DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new flyteidl.core.Workflow.ApproveCondition();
    }

    public static flyteidl.core.Workflow.ApproveCondition getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ApproveCondition>
        PARSER = new com.google.protobuf.AbstractParser<ApproveCondition>() {
      @java.lang.Override
      public ApproveCondition parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ApproveCondition(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ApproveCondition> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ApproveCondition> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public flyteidl.core.Workflow.ApproveCondition getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SignalConditionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flyteidl.core.SignalCondition)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * A unique identifier for the requested signal.
     * </pre>
     *
     * <code>string signal_id = 1;</code>
     */
    java.lang.String getSignalId();
    /**
     * <pre>
     * A unique identifier for the requested signal.
     * </pre>
     *
     * <code>string signal_id = 1;</code>
     */
    com.google.protobuf.ByteString
        getSignalIdBytes();

    /**
     * <pre>
     * A type denoting the required value type for this signal.
     * </pre>
     *
     * <code>.flyteidl.core.LiteralType type = 2;</code>
     */
    boolean hasType();
    /**
     * <pre>
     * A type denoting the required value type for this signal.
     * </pre>
     *
     * <code>.flyteidl.core.LiteralType type = 2;</code>
     */
    flyteidl.core.Types.LiteralType getType();
    /**
     * <pre>
     * A type denoting the required value type for this signal.
     * </pre>
     *
     * <code>.flyteidl.core.LiteralType type = 2;</code>
     */
    flyteidl.core.Types.LiteralTypeOrBuilder getTypeOrBuilder();

    /**
     * <pre>
     * The variable name for the signal value in this nodes outputs.
     * </pre>
     *
     * <code>string output_variable_name = 3;</code>
     */
    java.lang.String getOutputVariableName();
    /**
     * <pre>
     * The variable name for the signal value in this nodes outputs.
     * </pre>
     *
     * <code>string output_variable_name = 3;</code>
     */
    com.google.protobuf.ByteString
        getOutputVariableNameBytes();
  }
  /**
   * <pre>
   * SignalCondition represents a dependency on an signal.
   * </pre>
   *
   * Protobuf type {@code flyteidl.core.SignalCondition}
   */
  public  static final class SignalCondition extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flyteidl.core.SignalCondition)
      SignalConditionOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use SignalCondition.newBuilder() to construct.
    private SignalCondition(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SignalCondition() {
      signalId_ = "";
      outputVariableName_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private SignalCondition(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              signalId_ = s;
              break;
            }
            case 18: {
              flyteidl.core.Types.LiteralType.Builder subBuilder = null;
              if (type_ != null) {
                subBuilder = type_.toBuilder();
              }
              type_ = input.readMessage(flyteidl.core.Types.LiteralType.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(type_);
                type_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              outputVariableName_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return flyteidl.core.Workflow.internal_static_flyteidl_core_SignalCondition_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return flyteidl.core.Workflow.internal_static_flyteidl_core_SignalCondition_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              flyteidl.core.Workflow.SignalCondition.class, flyteidl.core.Workflow.SignalCondition.Builder.class);
    }

    public static final int SIGNAL_ID_FIELD_NUMBER = 1;
    private volatile java.lang.Object signalId_;
    /**
     * <pre>
     * A unique identifier for the requested signal.
     * </pre>
     *
     * <code>string signal_id = 1;</code>
     */
    public java.lang.String getSignalId() {
      java.lang.Object ref = signalId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        signalId_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * A unique identifier for the requested signal.
     * </pre>
     *
     * <code>string signal_id = 1;</code>
     */
    public com.google.protobuf.ByteString
        getSignalIdBytes() {
      java.lang.Object ref = signalId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        signalId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TYPE_FIELD_NUMBER = 2;
    private flyteidl.core.Types.LiteralType type_;
    /**
     * <pre>
     * A type denoting the required value type for this signal.
     * </pre>
     *
     * <code>.flyteidl.core.LiteralType type = 2;</code>
     */
    public boolean hasType() {
      return type_ != null;
    }
    /**
     * <pre>
     * A type denoting the required value type for this signal.
     * </pre>
     *
     * <code>.flyteidl.core.LiteralType type = 2;</code>
     */
    public flyteidl.core.Types.LiteralType getType() {
      return type_ == null ? flyteidl.core.Types.LiteralType.getDefaultInstance() : type_;
    }
    /**
     * <pre>
     * A type denoting the required value type for this signal.
     * </pre>
     *
     * <code>.flyteidl.core.LiteralType type = 2;</code>
     */
    public flyteidl.core.Types.LiteralTypeOrBuilder getTypeOrBuilder() {
      return getType();
    }

    public static final int OUTPUT_VARIABLE_NAME_FIELD_NUMBER = 3;
    private volatile java.lang.Object outputVariableName_;
    /**
     * <pre>
     * The variable name for the signal value in this nodes outputs.
     * </pre>
     *
     * <code>string output_variable_name = 3;</code>
     */
    public java.lang.String getOutputVariableName() {
      java.lang.Object ref = outputVariableName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        outputVariableName_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The variable name for the signal value in this nodes outputs.
     * </pre>
     *
     * <code>string output_variable_name = 3;</code>
     */
    public com.google.protobuf.ByteString
        getOutputVariableNameBytes() {
      java.lang.Object ref = outputVariableName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        outputVariableName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getSignalIdBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, signalId_);
      }
      if (type_ != null) {
        output.writeMessage(2, getType());
      }
      if (!getOutputVariableNameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, outputVariableName_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getSignalIdBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, signalId_);
      }
      if (type_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getType());
      }
      if (!getOutputVariableNameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, outputVariableName_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof flyteidl.core.Workflow.SignalCondition)) {
        return super.equals(obj);
      }
      flyteidl.core.Workflow.SignalCondition other = (flyteidl.core.Workflow.SignalCondition) obj;

      if (!getSignalId()
          .equals(other.getSignalId())) return false;
      if (hasType() != other.hasType()) return false;
      if (hasType()) {
        if (!getType()
            .equals(other.getType())) return false;
      }
      if (!getOutputVariableName()
          .equals(other.getOutputVariableName())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + SIGNAL_ID_FIELD_NUMBER;
      hash = (53 * hash) + getSignalId().hashCode();
      if (hasType()) {
        hash = (37 * hash) + TYPE_FIELD_NUMBER;
        hash = (53 * hash) + getType().hashCode();
      }
      hash = (37 * hash) + OUTPUT_VARIABLE_NAME_FIELD_NUMBER;
      hash = (53 * hash) + getOutputVariableName().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static flyteidl.core.Workflow.SignalCondition parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Workflow.SignalCondition parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Workflow.SignalCondition parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Workflow.SignalCondition parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Workflow.SignalCondition parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Workflow.SignalCondition parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Workflow.SignalCondition parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static flyteidl.core.Workflow.SignalCondition parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static flyteidl.core.Workflow.SignalCondition parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static flyteidl.core.Workflow.SignalCondition parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static flyteidl.core.Workflow.SignalCondition parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static flyteidl.core.Workflow.SignalCondition parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(flyteidl.core.Workflow.SignalCondition prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * SignalCondition represents a dependency on an signal.
     * </pre>
     *
     * Protobuf type {@code flyteidl.core.SignalCondition}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flyteidl.core.SignalCondition)
        flyteidl.core.Workflow.SignalConditionOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return flyteidl.core.Workflow.internal_static_flyteidl_core_SignalCondition_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return flyteidl.core.Workflow.internal_static_flyteidl_core_SignalCondition_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                flyteidl.core.Workflow.SignalCondition.class, flyteidl.core.Workflow.SignalCondition.Builder.class);
      }

      // Construct using flyteidl.core.Workflow.SignalCondition.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        signalId_ = "";

        if (typeBuilder_ == null) {
          type_ = null;
        } else {
          type_ = null;
          typeBuilder_ = null;
        }
        outputVariableName_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return flyteidl.core.Workflow.internal_static_flyteidl_core_SignalCondition_descriptor;
      }

      @java.lang.Override
      public flyteidl.core.Workflow.SignalCondition getDefaultInstanceForType() {
        return flyteidl.core.Workflow.SignalCondition.getDefaultInstance();
      }

      @java.lang.Override
      public flyteidl.core.Workflow.SignalCondition build() {
        flyteidl.core.Workflow.SignalCondition result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public flyteidl.core.Workflow.SignalCondition buildPartial() {
        flyteidl.core.Workflow.SignalCondition result = new flyteidl.core.Workflow.SignalCondition(this);
        result.signalId_ = signalId_;
        if (typeBuilder_ == null) {
          result.type_ = type_;
        } else {
          result.type_ = typeBuilder_.build();
        }
        result.outputVariableName_ = outputVariableName_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof flyteidl.core.Workflow.SignalCondition) {
          return mergeFrom((flyteidl.core.Workflow.SignalCondition)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(flyteidl.core.Workflow.SignalCondition other) {
        if (other == flyteidl.core.Workflow.SignalCondition.getDefaultInstance()) return this;
        if (!other.getSignalId().isEmpty()) {
          signalId_ = other.signalId_;
          onChanged();
        }
        if (other.hasType()) {
          mergeType(other.getType());
        }
        if (!other.getOutputVariableName().isEmpty()) {
          outputVariableName_ = other.outputVariableName_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        flyteidl.core.Workflow.SignalCondition parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (flyteidl.core.Workflow.SignalCondition) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object signalId_ = "";
      /**
       * <pre>
       * A unique identifier for the requested signal.
       * </pre>
       *
       * <code>string signal_id = 1;</code>
       */
      public java.lang.String getSignalId() {
        java.lang.Object ref = signalId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          signalId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * A unique identifier for the requested signal.
       * </pre>
       *
       * <code>string signal_id = 1;</code>
       */
      public com.google.protobuf.ByteString
          getSignalIdBytes() {
        java.lang.Object ref = signalId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          signalId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * A unique identifier for the requested signal.
       * </pre>
       *
       * <code>string signal_id = 1;</code>
       */
      public Builder setSignalId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        signalId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A unique identifier for the requested signal.
       * </pre>
       *
       * <code>string signal_id = 1;</code>
       */
      public Builder clearSignalId() {
        
        signalId_ = getDefaultInstance().getSignalId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A unique identifier for the requested signal.
       * </pre>
       *
       * <code>string signal_id = 1;</code>
       */
      public Builder setSignalIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        signalId_ = value;
        onChanged();
        return this;
      }

      private flyteidl.core.Types.LiteralType type_;
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Types.LiteralType, flyteidl.core.Types.LiteralType.Builder, flyteidl.core.Types.LiteralTypeOrBuilder> typeBuilder_;
      /**
       * <pre>
       * A type denoting the required value type for this signal.
       * </pre>
       *
       * <code>.flyteidl.core.LiteralType type = 2;</code>
       */
      public boolean hasType() {
        return typeBuilder_ != null || type_ != null;
      }
      /**
       * <pre>
       * A type denoting the required value type for this signal.
       * </pre>
       *
       * <code>.flyteidl.core.LiteralType type = 2;</code>
       */
      public flyteidl.core.Types.LiteralType getType() {
        if (typeBuilder_ == null) {
          return type_ == null ? flyteidl.core.Types.LiteralType.getDefaultInstance() : type_;
        } else {
          return typeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * A type denoting the required value type for this signal.
       * </pre>
       *
       * <code>.flyteidl.core.LiteralType type = 2;</code>
       */
      public Builder setType(flyteidl.core.Types.LiteralType value) {
        if (typeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          type_ = value;
          onChanged();
        } else {
          typeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * A type denoting the required value type for this signal.
       * </pre>
       *
       * <code>.flyteidl.core.LiteralType type = 2;</code>
       */
      public Builder setType(
          flyteidl.core.Types.LiteralType.Builder builderForValue) {
        if (typeBuilder_ == null) {
          type_ = builderForValue.build();
          onChanged();
        } else {
          typeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * A type denoting the required value type for this signal.
       * </pre>
       *
       * <code>.flyteidl.core.LiteralType type = 2;</code>
       */
      public Builder mergeType(flyteidl.core.Types.LiteralType value) {
        if (typeBuilder_ == null) {
          if (type_ != null) {
            type_ =
              flyteidl.core.Types.LiteralType.newBuilder(type_).mergeFrom(value).buildPartial();
          } else {
            type_ = value;
          }
          onChanged();
        } else {
          typeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * A type denoting the required value type for this signal.
       * </pre>
       *
       * <code>.flyteidl.core.LiteralType type = 2;</code>
       */
      public Builder clearType() {
        if (typeBuilder_ == null) {
          type_ = null;
          onChanged();
        } else {
          type_ = null;
          typeBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * A type denoting the required value type for this signal.
       * </pre>
       *
       * <code>.flyteidl.core.LiteralType type = 2;</code>
       */
      public flyteidl.core.Types.LiteralType.Builder getTypeBuilder() {
        
        onChanged();
        return getTypeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * A type denoting the required value type for this signal.
       * </pre>
       *
       * <code>.flyteidl.core.LiteralType type = 2;</code>
       */
      public flyteidl.core.Types.LiteralTypeOrBuilder getTypeOrBuilder() {
        if (typeBuilder_ != null) {
          return typeBuilder_.getMessageOrBuilder();
        } else {
          return type_ == null ?
              flyteidl.core.Types.LiteralType.getDefaultInstance() : type_;
        }
      }
      /**
       * <pre>
       * A type denoting the required value type for this signal.
       * </pre>
       *
       * <code>.flyteidl.core.LiteralType type = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Types.LiteralType, flyteidl.core.Types.LiteralType.Builder, flyteidl.core.Types.LiteralTypeOrBuilder> 
          getTypeFieldBuilder() {
        if (typeBuilder_ == null) {
          typeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              flyteidl.core.Types.LiteralType, flyteidl.core.Types.LiteralType.Builder, flyteidl.core.Types.LiteralTypeOrBuilder>(
                  getType(),
                  getParentForChildren(),
                  isClean());
          type_ = null;
        }
        return typeBuilder_;
      }

      private java.lang.Object outputVariableName_ = "";
      /**
       * <pre>
       * The variable name for the signal value in this nodes outputs.
       * </pre>
       *
       * <code>string output_variable_name = 3;</code>
       */
      public java.lang.String getOutputVariableName() {
        java.lang.Object ref = outputVariableName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          outputVariableName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The variable name for the signal value in this nodes outputs.
       * </pre>
       *
       * <code>string output_variable_name = 3;</code>
       */
      public com.google.protobuf.ByteString
          getOutputVariableNameBytes() {
        java.lang.Object ref = outputVariableName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          outputVariableName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The variable name for the signal value in this nodes outputs.
       * </pre>
       *
       * <code>string output_variable_name = 3;</code>
       */
      public Builder setOutputVariableName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        outputVariableName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The variable name for the signal value in this nodes outputs.
       * </pre>
       *
       * <code>string output_variable_name = 3;</code>
       */
      public Builder clearOutputVariableName() {
        
        outputVariableName_ = getDefaultInstance().getOutputVariableName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The variable name for the signal value in this nodes outputs.
       * </pre>
       *
       * <code>string output_variable_name = 3;</code>
       */
      public Builder setOutputVariableNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        outputVariableName_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flyteidl.core.SignalCondition)
    }

    // @@protoc_insertion_point(class_scope:flyteidl.core.SignalCondition)
    private static final flyteidl.core.Workflow.SignalCondition DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new flyteidl.core.Workflow.SignalCondition();
    }

    public static flyteidl.core.Workflow.SignalCondition getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<SignalCondition>
        PARSER = new com.google.protobuf.AbstractParser<SignalCondition>() {
      @java.lang.Override
      public SignalCondition parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SignalCondition(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<SignalCondition> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<SignalCondition> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public flyteidl.core.Workflow.SignalCondition getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SleepConditionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flyteidl.core.SleepCondition)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The overall duration for this sleep.
     * </pre>
     *
     * <code>.google.protobuf.Duration duration = 1;</code>
     */
    boolean hasDuration();
    /**
     * <pre>
     * The overall duration for this sleep.
     * </pre>
     *
     * <code>.google.protobuf.Duration duration = 1;</code>
     */
    com.google.protobuf.Duration getDuration();
    /**
     * <pre>
     * The overall duration for this sleep.
     * </pre>
     *
     * <code>.google.protobuf.Duration duration = 1;</code>
     */
    com.google.protobuf.DurationOrBuilder getDurationOrBuilder();
  }
  /**
   * <pre>
   * SleepCondition represents a dependency on waiting for the specified duration.
   * </pre>
   *
   * Protobuf type {@code flyteidl.core.SleepCondition}
   */
  public  static final class SleepCondition extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flyteidl.core.SleepCondition)
      SleepConditionOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use SleepCondition.newBuilder() to construct.
    private SleepCondition(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SleepCondition() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private SleepCondition(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              com.google.protobuf.Duration.Builder subBuilder = null;
              if (duration_ != null) {
                subBuilder = duration_.toBuilder();
              }
              duration_ = input.readMessage(com.google.protobuf.Duration.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(duration_);
                duration_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return flyteidl.core.Workflow.internal_static_flyteidl_core_SleepCondition_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return flyteidl.core.Workflow.internal_static_flyteidl_core_SleepCondition_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              flyteidl.core.Workflow.SleepCondition.class, flyteidl.core.Workflow.SleepCondition.Builder.class);
    }

    public static final int DURATION_FIELD_NUMBER = 1;
    private com.google.protobuf.Duration duration_;
    /**
     * <pre>
     * The overall duration for this sleep.
     * </pre>
     *
     * <code>.google.protobuf.Duration duration = 1;</code>
     */
    public boolean hasDuration() {
      return duration_ != null;
    }
    /**
     * <pre>
     * The overall duration for this sleep.
     * </pre>
     *
     * <code>.google.protobuf.Duration duration = 1;</code>
     */
    public com.google.protobuf.Duration getDuration() {
      return duration_ == null ? com.google.protobuf.Duration.getDefaultInstance() : duration_;
    }
    /**
     * <pre>
     * The overall duration for this sleep.
     * </pre>
     *
     * <code>.google.protobuf.Duration duration = 1;</code>
     */
    public com.google.protobuf.DurationOrBuilder getDurationOrBuilder() {
      return getDuration();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (duration_ != null) {
        output.writeMessage(1, getDuration());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (duration_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getDuration());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof flyteidl.core.Workflow.SleepCondition)) {
        return super.equals(obj);
      }
      flyteidl.core.Workflow.SleepCondition other = (flyteidl.core.Workflow.SleepCondition) obj;

      if (hasDuration() != other.hasDuration()) return false;
      if (hasDuration()) {
        if (!getDuration()
            .equals(other.getDuration())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasDuration()) {
        hash = (37 * hash) + DURATION_FIELD_NUMBER;
        hash = (53 * hash) + getDuration().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static flyteidl.core.Workflow.SleepCondition parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Workflow.SleepCondition parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Workflow.SleepCondition parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Workflow.SleepCondition parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Workflow.SleepCondition parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Workflow.SleepCondition parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Workflow.SleepCondition parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static flyteidl.core.Workflow.SleepCondition parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static flyteidl.core.Workflow.SleepCondition parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static flyteidl.core.Workflow.SleepCondition parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static flyteidl.core.Workflow.SleepCondition parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static flyteidl.core.Workflow.SleepCondition parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(flyteidl.core.Workflow.SleepCondition prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * SleepCondition represents a dependency on waiting for the specified duration.
     * </pre>
     *
     * Protobuf type {@code flyteidl.core.SleepCondition}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flyteidl.core.SleepCondition)
        flyteidl.core.Workflow.SleepConditionOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return flyteidl.core.Workflow.internal_static_flyteidl_core_SleepCondition_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return flyteidl.core.Workflow.internal_static_flyteidl_core_SleepCondition_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                flyteidl.core.Workflow.SleepCondition.class, flyteidl.core.Workflow.SleepCondition.Builder.class);
      }

      // Construct using flyteidl.core.Workflow.SleepCondition.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (durationBuilder_ == null) {
          duration_ = null;
        } else {
          duration_ = null;
          durationBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return flyteidl.core.Workflow.internal_static_flyteidl_core_SleepCondition_descriptor;
      }

      @java.lang.Override
      public flyteidl.core.Workflow.SleepCondition getDefaultInstanceForType() {
        return flyteidl.core.Workflow.SleepCondition.getDefaultInstance();
      }

      @java.lang.Override
      public flyteidl.core.Workflow.SleepCondition build() {
        flyteidl.core.Workflow.SleepCondition result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public flyteidl.core.Workflow.SleepCondition buildPartial() {
        flyteidl.core.Workflow.SleepCondition result = new flyteidl.core.Workflow.SleepCondition(this);
        if (durationBuilder_ == null) {
          result.duration_ = duration_;
        } else {
          result.duration_ = durationBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof flyteidl.core.Workflow.SleepCondition) {
          return mergeFrom((flyteidl.core.Workflow.SleepCondition)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(flyteidl.core.Workflow.SleepCondition other) {
        if (other == flyteidl.core.Workflow.SleepCondition.getDefaultInstance()) return this;
        if (other.hasDuration()) {
          mergeDuration(other.getDuration());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        flyteidl.core.Workflow.SleepCondition parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (flyteidl.core.Workflow.SleepCondition) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private com.google.protobuf.Duration duration_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> durationBuilder_;
      /**
       * <pre>
       * The overall duration for this sleep.
       * </pre>
       *
       * <code>.google.protobuf.Duration duration = 1;</code>
       */
      public boolean hasDuration() {
        return durationBuilder_ != null || duration_ != null;
      }
      /**
       * <pre>
       * The overall duration for this sleep.
       * </pre>
       *
       * <code>.google.protobuf.Duration duration = 1;</code>
       */
      public com.google.protobuf.Duration getDuration() {
        if (durationBuilder_ == null) {
          return duration_ == null ? com.google.protobuf.Duration.getDefaultInstance() : duration_;
        } else {
          return durationBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The overall duration for this sleep.
       * </pre>
       *
       * <code>.google.protobuf.Duration duration = 1;</code>
       */
      public Builder setDuration(com.google.protobuf.Duration value) {
        if (durationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          duration_ = value;
          onChanged();
        } else {
          durationBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The overall duration for this sleep.
       * </pre>
       *
       * <code>.google.protobuf.Duration duration = 1;</code>
       */
      public Builder setDuration(
          com.google.protobuf.Duration.Builder builderForValue) {
        if (durationBuilder_ == null) {
          duration_ = builderForValue.build();
          onChanged();
        } else {
          durationBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The overall duration for this sleep.
       * </pre>
       *
       * <code>.google.protobuf.Duration duration = 1;</code>
       */
      public Builder mergeDuration(com.google.protobuf.Duration value) {
        if (durationBuilder_ == null) {
          if (duration_ != null) {
            duration_ =
              com.google.protobuf.Duration.newBuilder(duration_).mergeFrom(value).buildPartial();
          } else {
            duration_ = value;
          }
          onChanged();
        } else {
          durationBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The overall duration for this sleep.
       * </pre>
       *
       * <code>.google.protobuf.Duration duration = 1;</code>
       */
      public Builder clearDuration() {
        if (durationBuilder_ == null) {
          duration_ = null;
          onChanged();
        } else {
          duration_ = null;
          durationBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The overall duration for this sleep.
       * </pre>
       *
       * <code>.google.protobuf.Duration duration = 1;</code>
       */
      public com.google.protobuf.Duration.Builder getDurationBuilder() {
        
        onChanged();
        return getDurationFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The overall duration for this sleep.
       * </pre>
       *
       * <code>.google.protobuf.Duration duration = 1;</code>
       */
      public com.google.protobuf.DurationOrBuilder getDurationOrBuilder() {
        if (durationBuilder_ != null) {
          return durationBuilder_.getMessageOrBuilder();
        } else {
          return duration_ == null ?
              com.google.protobuf.Duration.getDefaultInstance() : duration_;
        }
      }
      /**
       * <pre>
       * The overall duration for this sleep.
       * </pre>
       *
       * <code>.google.protobuf.Duration duration = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> 
          getDurationFieldBuilder() {
        if (durationBuilder_ == null) {
          durationBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder>(
                  getDuration(),
                  getParentForChildren(),
                  isClean());
          duration_ = null;
        }
        return durationBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flyteidl.core.SleepCondition)
    }

    // @@protoc_insertion_point(class_scope:flyteidl.core.SleepCondition)
    private static final flyteidl.core.Workflow.SleepCondition DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new flyteidl.core.Workflow.SleepCondition();
    }

    public static flyteidl.core.Workflow.SleepCondition getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<SleepCondition>
        PARSER = new com.google.protobuf.AbstractParser<SleepCondition>() {
      @java.lang.Override
      public SleepCondition parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SleepCondition(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<SleepCondition> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<SleepCondition> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public flyteidl.core.Workflow.SleepCondition getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface GateNodeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flyteidl.core.GateNode)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * ApproveCondition represents a dependency on an external approval provided by a boolean signal.
     * </pre>
     *
     * <code>.flyteidl.core.ApproveCondition approve = 1;</code>
     */
    boolean hasApprove();
    /**
     * <pre>
     * ApproveCondition represents a dependency on an external approval provided by a boolean signal.
     * </pre>
     *
     * <code>.flyteidl.core.ApproveCondition approve = 1;</code>
     */
    flyteidl.core.Workflow.ApproveCondition getApprove();
    /**
     * <pre>
     * ApproveCondition represents a dependency on an external approval provided by a boolean signal.
     * </pre>
     *
     * <code>.flyteidl.core.ApproveCondition approve = 1;</code>
     */
    flyteidl.core.Workflow.ApproveConditionOrBuilder getApproveOrBuilder();

    /**
     * <pre>
     * SignalCondition represents a dependency on an signal.
     * </pre>
     *
     * <code>.flyteidl.core.SignalCondition signal = 2;</code>
     */
    boolean hasSignal();
    /**
     * <pre>
     * SignalCondition represents a dependency on an signal.
     * </pre>
     *
     * <code>.flyteidl.core.SignalCondition signal = 2;</code>
     */
    flyteidl.core.Workflow.SignalCondition getSignal();
    /**
     * <pre>
     * SignalCondition represents a dependency on an signal.
     * </pre>
     *
     * <code>.flyteidl.core.SignalCondition signal = 2;</code>
     */
    flyteidl.core.Workflow.SignalConditionOrBuilder getSignalOrBuilder();

    /**
     * <pre>
     * SleepCondition represents a dependency on waiting for the specified duration.
     * </pre>
     *
     * <code>.flyteidl.core.SleepCondition sleep = 3;</code>
     */
    boolean hasSleep();
    /**
     * <pre>
     * SleepCondition represents a dependency on waiting for the specified duration.
     * </pre>
     *
     * <code>.flyteidl.core.SleepCondition sleep = 3;</code>
     */
    flyteidl.core.Workflow.SleepCondition getSleep();
    /**
     * <pre>
     * SleepCondition represents a dependency on waiting for the specified duration.
     * </pre>
     *
     * <code>.flyteidl.core.SleepCondition sleep = 3;</code>
     */
    flyteidl.core.Workflow.SleepConditionOrBuilder getSleepOrBuilder();

    public flyteidl.core.Workflow.GateNode.ConditionCase getConditionCase();
  }
  /**
   * <pre>
   * GateNode refers to the condition that is required for the gate to successfully complete.
   * </pre>
   *
   * Protobuf type {@code flyteidl.core.GateNode}
   */
  public  static final class GateNode extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flyteidl.core.GateNode)
      GateNodeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use GateNode.newBuilder() to construct.
    private GateNode(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private GateNode() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private GateNode(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              flyteidl.core.Workflow.ApproveCondition.Builder subBuilder = null;
              if (conditionCase_ == 1) {
                subBuilder = ((flyteidl.core.Workflow.ApproveCondition) condition_).toBuilder();
              }
              condition_ =
                  input.readMessage(flyteidl.core.Workflow.ApproveCondition.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((flyteidl.core.Workflow.ApproveCondition) condition_);
                condition_ = subBuilder.buildPartial();
              }
              conditionCase_ = 1;
              break;
            }
            case 18: {
              flyteidl.core.Workflow.SignalCondition.Builder subBuilder = null;
              if (conditionCase_ == 2) {
                subBuilder = ((flyteidl.core.Workflow.SignalCondition) condition_).toBuilder();
              }
              condition_ =
                  input.readMessage(flyteidl.core.Workflow.SignalCondition.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((flyteidl.core.Workflow.SignalCondition) condition_);
                condition_ = subBuilder.buildPartial();
              }
              conditionCase_ = 2;
              break;
            }
            case 26: {
              flyteidl.core.Workflow.SleepCondition.Builder subBuilder = null;
              if (conditionCase_ == 3) {
                subBuilder = ((flyteidl.core.Workflow.SleepCondition) condition_).toBuilder();
              }
              condition_ =
                  input.readMessage(flyteidl.core.Workflow.SleepCondition.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((flyteidl.core.Workflow.SleepCondition) condition_);
                condition_ = subBuilder.buildPartial();
              }
              conditionCase_ = 3;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return flyteidl.core.Workflow.internal_static_flyteidl_core_GateNode_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return flyteidl.core.Workflow.internal_static_flyteidl_core_GateNode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              flyteidl.core.Workflow.GateNode.class, flyteidl.core.Workflow.GateNode.Builder.class);
    }

    private int conditionCase_ = 0;
    private java.lang.Object condition_;
    public enum ConditionCase
        implements com.google.protobuf.Internal.EnumLite {
      APPROVE(1),
      SIGNAL(2),
      SLEEP(3),
      CONDITION_NOT_SET(0);
      private final int value;
      private ConditionCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ConditionCase valueOf(int value) {
        return forNumber(value);
      }

      public static ConditionCase forNumber(int value) {
        switch (value) {
          case 1: return APPROVE;
          case 2: return SIGNAL;
          case 3: return SLEEP;
          case 0: return CONDITION_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ConditionCase
    getConditionCase() {
      return ConditionCase.forNumber(
          conditionCase_);
    }

    public static final int APPROVE_FIELD_NUMBER = 1;
    /**
     * <pre>
     * ApproveCondition represents a dependency on an external approval provided by a boolean signal.
     * </pre>
     *
     * <code>.flyteidl.core.ApproveCondition approve = 1;</code>
     */
    public boolean hasApprove() {
      return conditionCase_ == 1;
    }
    /**
     * <pre>
     * ApproveCondition represents a dependency on an external approval provided by a boolean signal.
     * </pre>
     *
     * <code>.flyteidl.core.ApproveCondition approve = 1;</code>
     */
    public flyteidl.core.Workflow.ApproveCondition getApprove() {
      if (conditionCase_ == 1) {
         return (flyteidl.core.Workflow.ApproveCondition) condition_;
      }
      return flyteidl.core.Workflow.ApproveCondition.getDefaultInstance();
    }
    /**
     * <pre>
     * ApproveCondition represents a dependency on an external approval provided by a boolean signal.
     * </pre>
     *
     * <code>.flyteidl.core.ApproveCondition approve = 1;</code>
     */
    public flyteidl.core.Workflow.ApproveConditionOrBuilder getApproveOrBuilder() {
      if (conditionCase_ == 1) {
         return (flyteidl.core.Workflow.ApproveCondition) condition_;
      }
      return flyteidl.core.Workflow.ApproveCondition.getDefaultInstance();
    }

    public static final int SIGNAL_FIELD_NUMBER = 2;
    /**
     * <pre>
     * SignalCondition represents a dependency on an signal.
     * </pre>
     *
     * <code>.flyteidl.core.SignalCondition signal = 2;</code>
     */
    public boolean hasSignal() {
      return conditionCase_ == 2;
    }
    /**
     * <pre>
     * SignalCondition represents a dependency on an signal.
     * </pre>
     *
     * <code>.flyteidl.core.SignalCondition signal = 2;</code>
     */
    public flyteidl.core.Workflow.SignalCondition getSignal() {
      if (conditionCase_ == 2) {
         return (flyteidl.core.Workflow.SignalCondition) condition_;
      }
      return flyteidl.core.Workflow.SignalCondition.getDefaultInstance();
    }
    /**
     * <pre>
     * SignalCondition represents a dependency on an signal.
     * </pre>
     *
     * <code>.flyteidl.core.SignalCondition signal = 2;</code>
     */
    public flyteidl.core.Workflow.SignalConditionOrBuilder getSignalOrBuilder() {
      if (conditionCase_ == 2) {
         return (flyteidl.core.Workflow.SignalCondition) condition_;
      }
      return flyteidl.core.Workflow.SignalCondition.getDefaultInstance();
    }

    public static final int SLEEP_FIELD_NUMBER = 3;
    /**
     * <pre>
     * SleepCondition represents a dependency on waiting for the specified duration.
     * </pre>
     *
     * <code>.flyteidl.core.SleepCondition sleep = 3;</code>
     */
    public boolean hasSleep() {
      return conditionCase_ == 3;
    }
    /**
     * <pre>
     * SleepCondition represents a dependency on waiting for the specified duration.
     * </pre>
     *
     * <code>.flyteidl.core.SleepCondition sleep = 3;</code>
     */
    public flyteidl.core.Workflow.SleepCondition getSleep() {
      if (conditionCase_ == 3) {
         return (flyteidl.core.Workflow.SleepCondition) condition_;
      }
      return flyteidl.core.Workflow.SleepCondition.getDefaultInstance();
    }
    /**
     * <pre>
     * SleepCondition represents a dependency on waiting for the specified duration.
     * </pre>
     *
     * <code>.flyteidl.core.SleepCondition sleep = 3;</code>
     */
    public flyteidl.core.Workflow.SleepConditionOrBuilder getSleepOrBuilder() {
      if (conditionCase_ == 3) {
         return (flyteidl.core.Workflow.SleepCondition) condition_;
      }
      return flyteidl.core.Workflow.SleepCondition.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (conditionCase_ == 1) {
        output.writeMessage(1, (flyteidl.core.Workflow.ApproveCondition) condition_);
      }
      if (conditionCase_ == 2) {
        output.writeMessage(2, (flyteidl.core.Workflow.SignalCondition) condition_);
      }
      if (conditionCase_ == 3) {
        output.writeMessage(3, (flyteidl.core.Workflow.SleepCondition) condition_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (conditionCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, (flyteidl.core.Workflow.ApproveCondition) condition_);
      }
      if (conditionCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (flyteidl.core.Workflow.SignalCondition) condition_);
      }
      if (conditionCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, (flyteidl.core.Workflow.SleepCondition) condition_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof flyteidl.core.Workflow.GateNode)) {
        return super.equals(obj);
      }
      flyteidl.core.Workflow.GateNode other = (flyteidl.core.Workflow.GateNode) obj;

      if (!getConditionCase().equals(other.getConditionCase())) return false;
      switch (conditionCase_) {
        case 1:
          if (!getApprove()
              .equals(other.getApprove())) return false;
          break;
        case 2:
          if (!getSignal()
              .equals(other.getSignal())) return false;
          break;
        case 3:
          if (!getSleep()
              .equals(other.getSleep())) return false;
          break;
        case 0:
        default:
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      switch (conditionCase_) {
        case 1:
          hash = (37 * hash) + APPROVE_FIELD_NUMBER;
          hash = (53 * hash) + getApprove().hashCode();
          break;
        case 2:
          hash = (37 * hash) + SIGNAL_FIELD_NUMBER;
          hash = (53 * hash) + getSignal().hashCode();
          break;
        case 3:
          hash = (37 * hash) + SLEEP_FIELD_NUMBER;
          hash = (53 * hash) + getSleep().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static flyteidl.core.Workflow.GateNode parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Workflow.GateNode parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Workflow.GateNode parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Workflow.GateNode parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Workflow.GateNode parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Workflow.GateNode parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Workflow.GateNode parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static flyteidl.core.Workflow.GateNode parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static flyteidl.core.Workflow.GateNode parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static flyteidl.core.Workflow.GateNode parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static flyteidl.core.Workflow.GateNode parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static flyteidl.core.Workflow.GateNode parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(flyteidl.core.Workflow.GateNode prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * GateNode refers to the condition that is required for the gate to successfully complete.
     * </pre>
     *
     * Protobuf type {@code flyteidl.core.GateNode}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flyteidl.core.GateNode)
        flyteidl.core.Workflow.GateNodeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return flyteidl.core.Workflow.internal_static_flyteidl_core_GateNode_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return flyteidl.core.Workflow.internal_static_flyteidl_core_GateNode_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                flyteidl.core.Workflow.GateNode.class, flyteidl.core.Workflow.GateNode.Builder.class);
      }

      // Construct using flyteidl.core.Workflow.GateNode.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        conditionCase_ = 0;
        condition_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return flyteidl.core.Workflow.internal_static_flyteidl_core_GateNode_descriptor;
      }

      @java.lang.Override
      public flyteidl.core.Workflow.GateNode getDefaultInstanceForType() {
        return flyteidl.core.Workflow.GateNode.getDefaultInstance();
      }

      @java.lang.Override
      public flyteidl.core.Workflow.GateNode build() {
        flyteidl.core.Workflow.GateNode result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public flyteidl.core.Workflow.GateNode buildPartial() {
        flyteidl.core.Workflow.GateNode result = new flyteidl.core.Workflow.GateNode(this);
        if (conditionCase_ == 1) {
          if (approveBuilder_ == null) {
            result.condition_ = condition_;
          } else {
            result.condition_ = approveBuilder_.build();
          }
        }
        if (conditionCase_ == 2) {
          if (signalBuilder_ == null) {
            result.condition_ = condition_;
          } else {
            result.condition_ = signalBuilder_.build();
          }
        }
        if (conditionCase_ == 3) {
          if (sleepBuilder_ == null) {
            result.condition_ = condition_;
          } else {
            result.condition_ = sleepBuilder_.build();
          }
        }
        result.conditionCase_ = conditionCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof flyteidl.core.Workflow.GateNode) {
          return mergeFrom((flyteidl.core.Workflow.GateNode)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(flyteidl.core.Workflow.GateNode other) {
        if (other == flyteidl.core.Workflow.GateNode.getDefaultInstance()) return this;
        switch (other.getConditionCase()) {
          case APPROVE: {
            mergeApprove(other.getApprove());
            break;
          }
          case SIGNAL: {
            mergeSignal(other.getSignal());
            break;
          }
          case SLEEP: {
            mergeSleep(other.getSleep());
            break;
          }
          case CONDITION_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        flyteidl.core.Workflow.GateNode parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (flyteidl.core.Workflow.GateNode) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int conditionCase_ = 0;
      private java.lang.Object condition_;
      public ConditionCase
          getConditionCase() {
        return ConditionCase.forNumber(
            conditionCase_);
      }

      public Builder clearCondition() {
        conditionCase_ = 0;
        condition_ = null;
        onChanged();
        return this;
      }


      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Workflow.ApproveCondition, flyteidl.core.Workflow.ApproveCondition.Builder, flyteidl.core.Workflow.ApproveConditionOrBuilder> approveBuilder_;
      /**
       * <pre>
       * ApproveCondition represents a dependency on an external approval provided by a boolean signal.
       * </pre>
       *
       * <code>.flyteidl.core.ApproveCondition approve = 1;</code>
       */
      public boolean hasApprove() {
        return conditionCase_ == 1;
      }
      /**
       * <pre>
       * ApproveCondition represents a dependency on an external approval provided by a boolean signal.
       * </pre>
       *
       * <code>.flyteidl.core.ApproveCondition approve = 1;</code>
       */
      public flyteidl.core.Workflow.ApproveCondition getApprove() {
        if (approveBuilder_ == null) {
          if (conditionCase_ == 1) {
            return (flyteidl.core.Workflow.ApproveCondition) condition_;
          }
          return flyteidl.core.Workflow.ApproveCondition.getDefaultInstance();
        } else {
          if (conditionCase_ == 1) {
            return approveBuilder_.getMessage();
          }
          return flyteidl.core.Workflow.ApproveCondition.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * ApproveCondition represents a dependency on an external approval provided by a boolean signal.
       * </pre>
       *
       * <code>.flyteidl.core.ApproveCondition approve = 1;</code>
       */
      public Builder setApprove(flyteidl.core.Workflow.ApproveCondition value) {
        if (approveBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          condition_ = value;
          onChanged();
        } else {
          approveBuilder_.setMessage(value);
        }
        conditionCase_ = 1;
        return this;
      }
      /**
       * <pre>
       * ApproveCondition represents a dependency on an external approval provided by a boolean signal.
       * </pre>
       *
       * <code>.flyteidl.core.ApproveCondition approve = 1;</code>
       */
      public Builder setApprove(
          flyteidl.core.Workflow.ApproveCondition.Builder builderForValue) {
        if (approveBuilder_ == null) {
          condition_ = builderForValue.build();
          onChanged();
        } else {
          approveBuilder_.setMessage(builderForValue.build());
        }
        conditionCase_ = 1;
        return this;
      }
      /**
       * <pre>
       * ApproveCondition represents a dependency on an external approval provided by a boolean signal.
       * </pre>
       *
       * <code>.flyteidl.core.ApproveCondition approve = 1;</code>
       */
      public Builder mergeApprove(flyteidl.core.Workflow.ApproveCondition value) {
        if (approveBuilder_ == null) {
          if (conditionCase_ == 1 &&
              condition_ != flyteidl.core.Workflow.ApproveCondition.getDefaultInstance()) {
            condition_ = flyteidl.core.Workflow.ApproveCondition.newBuilder((flyteidl.core.Workflow.ApproveCondition) condition_)
                .mergeFrom(value).buildPartial();
          } else {
            condition_ = value;
          }
          onChanged();
        } else {
          if (conditionCase_ == 1) {
            approveBuilder_.mergeFrom(value);
          }
          approveBuilder_.setMessage(value);
        }
        conditionCase_ = 1;
        return this;
      }
      /**
       * <pre>
       * ApproveCondition represents a dependency on an external approval provided by a boolean signal.
       * </pre>
       *
       * <code>.flyteidl.core.ApproveCondition approve = 1;</code>
       */
      public Builder clearApprove() {
        if (approveBuilder_ == null) {
          if (conditionCase_ == 1) {
            conditionCase_ = 0;
            condition_ = null;
            onChanged();
          }
        } else {
          if (conditionCase_ == 1) {
            conditionCase_ = 0;
            condition_ = null;
          }
          approveBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * ApproveCondition represents a dependency on an external approval provided by a boolean signal.
       * </pre>
       *
       * <code>.flyteidl.core.ApproveCondition approve = 1;</code>
       */
      public flyteidl.core.Workflow.ApproveCondition.Builder getApproveBuilder() {
        return getApproveFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * ApproveCondition represents a dependency on an external approval provided by a boolean signal.
       * </pre>
       *
       * <code>.flyteidl.core.ApproveCondition approve = 1;</code>
       */
      public flyteidl.core.Workflow.ApproveConditionOrBuilder getApproveOrBuilder() {
        if ((conditionCase_ == 1) && (approveBuilder_ != null)) {
          return approveBuilder_.getMessageOrBuilder();
        } else {
          if (conditionCase_ == 1) {
            return (flyteidl.core.Workflow.ApproveCondition) condition_;
          }
          return flyteidl.core.Workflow.ApproveCondition.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * ApproveCondition represents a dependency on an external approval provided by a boolean signal.
       * </pre>
       *
       * <code>.flyteidl.core.ApproveCondition approve = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Workflow.ApproveCondition, flyteidl.core.Workflow.ApproveCondition.Builder, flyteidl.core.Workflow.ApproveConditionOrBuilder> 
          getApproveFieldBuilder() {
        if (approveBuilder_ == null) {
          if (!(conditionCase_ == 1)) {
            condition_ = flyteidl.core.Workflow.ApproveCondition.getDefaultInstance();
          }
          approveBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              flyteidl.core.Workflow.ApproveCondition, flyteidl.core.Workflow.ApproveCondition.Builder, flyteidl.core.Workflow.ApproveConditionOrBuilder>(
                  (flyteidl.core.Workflow.ApproveCondition) condition_,
                  getParentForChildren(),
                  isClean());
          condition_ = null;
        }
        conditionCase_ = 1;
        onChanged();;
        return approveBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Workflow.SignalCondition, flyteidl.core.Workflow.SignalCondition.Builder, flyteidl.core.Workflow.SignalConditionOrBuilder> signalBuilder_;
      /**
       * <pre>
       * SignalCondition represents a dependency on an signal.
       * </pre>
       *
       * <code>.flyteidl.core.SignalCondition signal = 2;</code>
       */
      public boolean hasSignal() {
        return conditionCase_ == 2;
      }
      /**
       * <pre>
       * SignalCondition represents a dependency on an signal.
       * </pre>
       *
       * <code>.flyteidl.core.SignalCondition signal = 2;</code>
       */
      public flyteidl.core.Workflow.SignalCondition getSignal() {
        if (signalBuilder_ == null) {
          if (conditionCase_ == 2) {
            return (flyteidl.core.Workflow.SignalCondition) condition_;
          }
          return flyteidl.core.Workflow.SignalCondition.getDefaultInstance();
        } else {
          if (conditionCase_ == 2) {
            return signalBuilder_.getMessage();
          }
          return flyteidl.core.Workflow.SignalCondition.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * SignalCondition represents a dependency on an signal.
       * </pre>
       *
       * <code>.flyteidl.core.SignalCondition signal = 2;</code>
       */
      public Builder setSignal(flyteidl.core.Workflow.SignalCondition value) {
        if (signalBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          condition_ = value;
          onChanged();
        } else {
          signalBuilder_.setMessage(value);
        }
        conditionCase_ = 2;
        return this;
      }
      /**
       * <pre>
       * SignalCondition represents a dependency on an signal.
       * </pre>
       *
       * <code>.flyteidl.core.SignalCondition signal = 2;</code>
       */
      public Builder setSignal(
          flyteidl.core.Workflow.SignalCondition.Builder builderForValue) {
        if (signalBuilder_ == null) {
          condition_ = builderForValue.build();
          onChanged();
        } else {
          signalBuilder_.setMessage(builderForValue.build());
        }
        conditionCase_ = 2;
        return this;
      }
      /**
       * <pre>
       * SignalCondition represents a dependency on an signal.
       * </pre>
       *
       * <code>.flyteidl.core.SignalCondition signal = 2;</code>
       */
      public Builder mergeSignal(flyteidl.core.Workflow.SignalCondition value) {
        if (signalBuilder_ == null) {
          if (conditionCase_ == 2 &&
              condition_ != flyteidl.core.Workflow.SignalCondition.getDefaultInstance()) {
            condition_ = flyteidl.core.Workflow.SignalCondition.newBuilder((flyteidl.core.Workflow.SignalCondition) condition_)
                .mergeFrom(value).buildPartial();
          } else {
            condition_ = value;
          }
          onChanged();
        } else {
          if (conditionCase_ == 2) {
            signalBuilder_.mergeFrom(value);
          }
          signalBuilder_.setMessage(value);
        }
        conditionCase_ = 2;
        return this;
      }
      /**
       * <pre>
       * SignalCondition represents a dependency on an signal.
       * </pre>
       *
       * <code>.flyteidl.core.SignalCondition signal = 2;</code>
       */
      public Builder clearSignal() {
        if (signalBuilder_ == null) {
          if (conditionCase_ == 2) {
            conditionCase_ = 0;
            condition_ = null;
            onChanged();
          }
        } else {
          if (conditionCase_ == 2) {
            conditionCase_ = 0;
            condition_ = null;
          }
          signalBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * SignalCondition represents a dependency on an signal.
       * </pre>
       *
       * <code>.flyteidl.core.SignalCondition signal = 2;</code>
       */
      public flyteidl.core.Workflow.SignalCondition.Builder getSignalBuilder() {
        return getSignalFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * SignalCondition represents a dependency on an signal.
       * </pre>
       *
       * <code>.flyteidl.core.SignalCondition signal = 2;</code>
       */
      public flyteidl.core.Workflow.SignalConditionOrBuilder getSignalOrBuilder() {
        if ((conditionCase_ == 2) && (signalBuilder_ != null)) {
          return signalBuilder_.getMessageOrBuilder();
        } else {
          if (conditionCase_ == 2) {
            return (flyteidl.core.Workflow.SignalCondition) condition_;
          }
          return flyteidl.core.Workflow.SignalCondition.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * SignalCondition represents a dependency on an signal.
       * </pre>
       *
       * <code>.flyteidl.core.SignalCondition signal = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Workflow.SignalCondition, flyteidl.core.Workflow.SignalCondition.Builder, flyteidl.core.Workflow.SignalConditionOrBuilder> 
          getSignalFieldBuilder() {
        if (signalBuilder_ == null) {
          if (!(conditionCase_ == 2)) {
            condition_ = flyteidl.core.Workflow.SignalCondition.getDefaultInstance();
          }
          signalBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              flyteidl.core.Workflow.SignalCondition, flyteidl.core.Workflow.SignalCondition.Builder, flyteidl.core.Workflow.SignalConditionOrBuilder>(
                  (flyteidl.core.Workflow.SignalCondition) condition_,
                  getParentForChildren(),
                  isClean());
          condition_ = null;
        }
        conditionCase_ = 2;
        onChanged();;
        return signalBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Workflow.SleepCondition, flyteidl.core.Workflow.SleepCondition.Builder, flyteidl.core.Workflow.SleepConditionOrBuilder> sleepBuilder_;
      /**
       * <pre>
       * SleepCondition represents a dependency on waiting for the specified duration.
       * </pre>
       *
       * <code>.flyteidl.core.SleepCondition sleep = 3;</code>
       */
      public boolean hasSleep() {
        return conditionCase_ == 3;
      }
      /**
       * <pre>
       * SleepCondition represents a dependency on waiting for the specified duration.
       * </pre>
       *
       * <code>.flyteidl.core.SleepCondition sleep = 3;</code>
       */
      public flyteidl.core.Workflow.SleepCondition getSleep() {
        if (sleepBuilder_ == null) {
          if (conditionCase_ == 3) {
            return (flyteidl.core.Workflow.SleepCondition) condition_;
          }
          return flyteidl.core.Workflow.SleepCondition.getDefaultInstance();
        } else {
          if (conditionCase_ == 3) {
            return sleepBuilder_.getMessage();
          }
          return flyteidl.core.Workflow.SleepCondition.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * SleepCondition represents a dependency on waiting for the specified duration.
       * </pre>
       *
       * <code>.flyteidl.core.SleepCondition sleep = 3;</code>
       */
      public Builder setSleep(flyteidl.core.Workflow.SleepCondition value) {
        if (sleepBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          condition_ = value;
          onChanged();
        } else {
          sleepBuilder_.setMessage(value);
        }
        conditionCase_ = 3;
        return this;
      }
      /**
       * <pre>
       * SleepCondition represents a dependency on waiting for the specified duration.
       * </pre>
       *
       * <code>.flyteidl.core.SleepCondition sleep = 3;</code>
       */
      public Builder setSleep(
          flyteidl.core.Workflow.SleepCondition.Builder builderForValue) {
        if (sleepBuilder_ == null) {
          condition_ = builderForValue.build();
          onChanged();
        } else {
          sleepBuilder_.setMessage(builderForValue.build());
        }
        conditionCase_ = 3;
        return this;
      }
      /**
       * <pre>
       * SleepCondition represents a dependency on waiting for the specified duration.
       * </pre>
       *
       * <code>.flyteidl.core.SleepCondition sleep = 3;</code>
       */
      public Builder mergeSleep(flyteidl.core.Workflow.SleepCondition value) {
        if (sleepBuilder_ == null) {
          if (conditionCase_ == 3 &&
              condition_ != flyteidl.core.Workflow.SleepCondition.getDefaultInstance()) {
            condition_ = flyteidl.core.Workflow.SleepCondition.newBuilder((flyteidl.core.Workflow.SleepCondition) condition_)
                .mergeFrom(value).buildPartial();
          } else {
            condition_ = value;
          }
          onChanged();
        } else {
          if (conditionCase_ == 3) {
            sleepBuilder_.mergeFrom(value);
          }
          sleepBuilder_.setMessage(value);
        }
        conditionCase_ = 3;
        return this;
      }
      /**
       * <pre>
       * SleepCondition represents a dependency on waiting for the specified duration.
       * </pre>
       *
       * <code>.flyteidl.core.SleepCondition sleep = 3;</code>
       */
      public Builder clearSleep() {
        if (sleepBuilder_ == null) {
          if (conditionCase_ == 3) {
            conditionCase_ = 0;
            condition_ = null;
            onChanged();
          }
        } else {
          if (conditionCase_ == 3) {
            conditionCase_ = 0;
            condition_ = null;
          }
          sleepBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * SleepCondition represents a dependency on waiting for the specified duration.
       * </pre>
       *
       * <code>.flyteidl.core.SleepCondition sleep = 3;</code>
       */
      public flyteidl.core.Workflow.SleepCondition.Builder getSleepBuilder() {
        return getSleepFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * SleepCondition represents a dependency on waiting for the specified duration.
       * </pre>
       *
       * <code>.flyteidl.core.SleepCondition sleep = 3;</code>
       */
      public flyteidl.core.Workflow.SleepConditionOrBuilder getSleepOrBuilder() {
        if ((conditionCase_ == 3) && (sleepBuilder_ != null)) {
          return sleepBuilder_.getMessageOrBuilder();
        } else {
          if (conditionCase_ == 3) {
            return (flyteidl.core.Workflow.SleepCondition) condition_;
          }
          return flyteidl.core.Workflow.SleepCondition.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * SleepCondition represents a dependency on waiting for the specified duration.
       * </pre>
       *
       * <code>.flyteidl.core.SleepCondition sleep = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Workflow.SleepCondition, flyteidl.core.Workflow.SleepCondition.Builder, flyteidl.core.Workflow.SleepConditionOrBuilder> 
          getSleepFieldBuilder() {
        if (sleepBuilder_ == null) {
          if (!(conditionCase_ == 3)) {
            condition_ = flyteidl.core.Workflow.SleepCondition.getDefaultInstance();
          }
          sleepBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              flyteidl.core.Workflow.SleepCondition, flyteidl.core.Workflow.SleepCondition.Builder, flyteidl.core.Workflow.SleepConditionOrBuilder>(
                  (flyteidl.core.Workflow.SleepCondition) condition_,
                  getParentForChildren(),
                  isClean());
          condition_ = null;
        }
        conditionCase_ = 3;
        onChanged();;
        return sleepBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flyteidl.core.GateNode)
    }

    // @@protoc_insertion_point(class_scope:flyteidl.core.GateNode)
    private static final flyteidl.core.Workflow.GateNode DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new flyteidl.core.Workflow.GateNode();
    }

    public static flyteidl.core.Workflow.GateNode getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<GateNode>
        PARSER = new com.google.protobuf.AbstractParser<GateNode>() {
      @java.lang.Override
      public GateNode parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new GateNode(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<GateNode> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<GateNode> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public flyteidl.core.Workflow.GateNode getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface NodeMetadataOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flyteidl.core.NodeMetadata)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * A friendly name for the Node
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    java.lang.String getName();
    /**
     * <pre>
     * A friendly name for the Node
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * The overall timeout of a task.
     * </pre>
     *
     * <code>.google.protobuf.Duration timeout = 4;</code>
     */
    boolean hasTimeout();
    /**
     * <pre>
     * The overall timeout of a task.
     * </pre>
     *
     * <code>.google.protobuf.Duration timeout = 4;</code>
     */
    com.google.protobuf.Duration getTimeout();
    /**
     * <pre>
     * The overall timeout of a task.
     * </pre>
     *
     * <code>.google.protobuf.Duration timeout = 4;</code>
     */
    com.google.protobuf.DurationOrBuilder getTimeoutOrBuilder();

    /**
     * <pre>
     * Number of retries per task.
     * </pre>
     *
     * <code>.flyteidl.core.RetryStrategy retries = 5;</code>
     */
    boolean hasRetries();
    /**
     * <pre>
     * Number of retries per task.
     * </pre>
     *
     * <code>.flyteidl.core.RetryStrategy retries = 5;</code>
     */
    flyteidl.core.Literals.RetryStrategy getRetries();
    /**
     * <pre>
     * Number of retries per task.
     * </pre>
     *
     * <code>.flyteidl.core.RetryStrategy retries = 5;</code>
     */
    flyteidl.core.Literals.RetryStrategyOrBuilder getRetriesOrBuilder();

    /**
     * <code>bool interruptible = 6;</code>
     */
    boolean getInterruptible();

    public flyteidl.core.Workflow.NodeMetadata.InterruptibleValueCase getInterruptibleValueCase();
  }
  /**
   * <pre>
   * Defines extra information about the Node.
   * </pre>
   *
   * Protobuf type {@code flyteidl.core.NodeMetadata}
   */
  public  static final class NodeMetadata extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flyteidl.core.NodeMetadata)
      NodeMetadataOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use NodeMetadata.newBuilder() to construct.
    private NodeMetadata(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private NodeMetadata() {
      name_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private NodeMetadata(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              name_ = s;
              break;
            }
            case 34: {
              com.google.protobuf.Duration.Builder subBuilder = null;
              if (timeout_ != null) {
                subBuilder = timeout_.toBuilder();
              }
              timeout_ = input.readMessage(com.google.protobuf.Duration.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(timeout_);
                timeout_ = subBuilder.buildPartial();
              }

              break;
            }
            case 42: {
              flyteidl.core.Literals.RetryStrategy.Builder subBuilder = null;
              if (retries_ != null) {
                subBuilder = retries_.toBuilder();
              }
              retries_ = input.readMessage(flyteidl.core.Literals.RetryStrategy.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(retries_);
                retries_ = subBuilder.buildPartial();
              }

              break;
            }
            case 48: {
              interruptibleValueCase_ = 6;
              interruptibleValue_ = input.readBool();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return flyteidl.core.Workflow.internal_static_flyteidl_core_NodeMetadata_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return flyteidl.core.Workflow.internal_static_flyteidl_core_NodeMetadata_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              flyteidl.core.Workflow.NodeMetadata.class, flyteidl.core.Workflow.NodeMetadata.Builder.class);
    }

    private int interruptibleValueCase_ = 0;
    private java.lang.Object interruptibleValue_;
    public enum InterruptibleValueCase
        implements com.google.protobuf.Internal.EnumLite {
      INTERRUPTIBLE(6),
      INTERRUPTIBLEVALUE_NOT_SET(0);
      private final int value;
      private InterruptibleValueCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static InterruptibleValueCase valueOf(int value) {
        return forNumber(value);
      }

      public static InterruptibleValueCase forNumber(int value) {
        switch (value) {
          case 6: return INTERRUPTIBLE;
          case 0: return INTERRUPTIBLEVALUE_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public InterruptibleValueCase
    getInterruptibleValueCase() {
      return InterruptibleValueCase.forNumber(
          interruptibleValueCase_);
    }

    public static final int NAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object name_;
    /**
     * <pre>
     * A friendly name for the Node
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * A friendly name for the Node
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TIMEOUT_FIELD_NUMBER = 4;
    private com.google.protobuf.Duration timeout_;
    /**
     * <pre>
     * The overall timeout of a task.
     * </pre>
     *
     * <code>.google.protobuf.Duration timeout = 4;</code>
     */
    public boolean hasTimeout() {
      return timeout_ != null;
    }
    /**
     * <pre>
     * The overall timeout of a task.
     * </pre>
     *
     * <code>.google.protobuf.Duration timeout = 4;</code>
     */
    public com.google.protobuf.Duration getTimeout() {
      return timeout_ == null ? com.google.protobuf.Duration.getDefaultInstance() : timeout_;
    }
    /**
     * <pre>
     * The overall timeout of a task.
     * </pre>
     *
     * <code>.google.protobuf.Duration timeout = 4;</code>
     */
    public com.google.protobuf.DurationOrBuilder getTimeoutOrBuilder() {
      return getTimeout();
    }

    public static final int RETRIES_FIELD_NUMBER = 5;
    private flyteidl.core.Literals.RetryStrategy retries_;
    /**
     * <pre>
     * Number of retries per task.
     * </pre>
     *
     * <code>.flyteidl.core.RetryStrategy retries = 5;</code>
     */
    public boolean hasRetries() {
      return retries_ != null;
    }
    /**
     * <pre>
     * Number of retries per task.
     * </pre>
     *
     * <code>.flyteidl.core.RetryStrategy retries = 5;</code>
     */
    public flyteidl.core.Literals.RetryStrategy getRetries() {
      return retries_ == null ? flyteidl.core.Literals.RetryStrategy.getDefaultInstance() : retries_;
    }
    /**
     * <pre>
     * Number of retries per task.
     * </pre>
     *
     * <code>.flyteidl.core.RetryStrategy retries = 5;</code>
     */
    public flyteidl.core.Literals.RetryStrategyOrBuilder getRetriesOrBuilder() {
      return getRetries();
    }

    public static final int INTERRUPTIBLE_FIELD_NUMBER = 6;
    /**
     * <code>bool interruptible = 6;</code>
     */
    public boolean getInterruptible() {
      if (interruptibleValueCase_ == 6) {
        return (java.lang.Boolean) interruptibleValue_;
      }
      return false;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getNameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
      }
      if (timeout_ != null) {
        output.writeMessage(4, getTimeout());
      }
      if (retries_ != null) {
        output.writeMessage(5, getRetries());
      }
      if (interruptibleValueCase_ == 6) {
        output.writeBool(
            6, (boolean)((java.lang.Boolean) interruptibleValue_));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getNameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
      }
      if (timeout_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getTimeout());
      }
      if (retries_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getRetries());
      }
      if (interruptibleValueCase_ == 6) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(
              6, (boolean)((java.lang.Boolean) interruptibleValue_));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof flyteidl.core.Workflow.NodeMetadata)) {
        return super.equals(obj);
      }
      flyteidl.core.Workflow.NodeMetadata other = (flyteidl.core.Workflow.NodeMetadata) obj;

      if (!getName()
          .equals(other.getName())) return false;
      if (hasTimeout() != other.hasTimeout()) return false;
      if (hasTimeout()) {
        if (!getTimeout()
            .equals(other.getTimeout())) return false;
      }
      if (hasRetries() != other.hasRetries()) return false;
      if (hasRetries()) {
        if (!getRetries()
            .equals(other.getRetries())) return false;
      }
      if (!getInterruptibleValueCase().equals(other.getInterruptibleValueCase())) return false;
      switch (interruptibleValueCase_) {
        case 6:
          if (getInterruptible()
              != other.getInterruptible()) return false;
          break;
        case 0:
        default:
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      if (hasTimeout()) {
        hash = (37 * hash) + TIMEOUT_FIELD_NUMBER;
        hash = (53 * hash) + getTimeout().hashCode();
      }
      if (hasRetries()) {
        hash = (37 * hash) + RETRIES_FIELD_NUMBER;
        hash = (53 * hash) + getRetries().hashCode();
      }
      switch (interruptibleValueCase_) {
        case 6:
          hash = (37 * hash) + INTERRUPTIBLE_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
              getInterruptible());
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static flyteidl.core.Workflow.NodeMetadata parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Workflow.NodeMetadata parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Workflow.NodeMetadata parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Workflow.NodeMetadata parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Workflow.NodeMetadata parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Workflow.NodeMetadata parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Workflow.NodeMetadata parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static flyteidl.core.Workflow.NodeMetadata parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static flyteidl.core.Workflow.NodeMetadata parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static flyteidl.core.Workflow.NodeMetadata parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static flyteidl.core.Workflow.NodeMetadata parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static flyteidl.core.Workflow.NodeMetadata parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(flyteidl.core.Workflow.NodeMetadata prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Defines extra information about the Node.
     * </pre>
     *
     * Protobuf type {@code flyteidl.core.NodeMetadata}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flyteidl.core.NodeMetadata)
        flyteidl.core.Workflow.NodeMetadataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return flyteidl.core.Workflow.internal_static_flyteidl_core_NodeMetadata_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return flyteidl.core.Workflow.internal_static_flyteidl_core_NodeMetadata_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                flyteidl.core.Workflow.NodeMetadata.class, flyteidl.core.Workflow.NodeMetadata.Builder.class);
      }

      // Construct using flyteidl.core.Workflow.NodeMetadata.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        name_ = "";

        if (timeoutBuilder_ == null) {
          timeout_ = null;
        } else {
          timeout_ = null;
          timeoutBuilder_ = null;
        }
        if (retriesBuilder_ == null) {
          retries_ = null;
        } else {
          retries_ = null;
          retriesBuilder_ = null;
        }
        interruptibleValueCase_ = 0;
        interruptibleValue_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return flyteidl.core.Workflow.internal_static_flyteidl_core_NodeMetadata_descriptor;
      }

      @java.lang.Override
      public flyteidl.core.Workflow.NodeMetadata getDefaultInstanceForType() {
        return flyteidl.core.Workflow.NodeMetadata.getDefaultInstance();
      }

      @java.lang.Override
      public flyteidl.core.Workflow.NodeMetadata build() {
        flyteidl.core.Workflow.NodeMetadata result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public flyteidl.core.Workflow.NodeMetadata buildPartial() {
        flyteidl.core.Workflow.NodeMetadata result = new flyteidl.core.Workflow.NodeMetadata(this);
        result.name_ = name_;
        if (timeoutBuilder_ == null) {
          result.timeout_ = timeout_;
        } else {
          result.timeout_ = timeoutBuilder_.build();
        }
        if (retriesBuilder_ == null) {
          result.retries_ = retries_;
        } else {
          result.retries_ = retriesBuilder_.build();
        }
        if (interruptibleValueCase_ == 6) {
          result.interruptibleValue_ = interruptibleValue_;
        }
        result.interruptibleValueCase_ = interruptibleValueCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof flyteidl.core.Workflow.NodeMetadata) {
          return mergeFrom((flyteidl.core.Workflow.NodeMetadata)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(flyteidl.core.Workflow.NodeMetadata other) {
        if (other == flyteidl.core.Workflow.NodeMetadata.getDefaultInstance()) return this;
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          onChanged();
        }
        if (other.hasTimeout()) {
          mergeTimeout(other.getTimeout());
        }
        if (other.hasRetries()) {
          mergeRetries(other.getRetries());
        }
        switch (other.getInterruptibleValueCase()) {
          case INTERRUPTIBLE: {
            setInterruptible(other.getInterruptible());
            break;
          }
          case INTERRUPTIBLEVALUE_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        flyteidl.core.Workflow.NodeMetadata parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (flyteidl.core.Workflow.NodeMetadata) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int interruptibleValueCase_ = 0;
      private java.lang.Object interruptibleValue_;
      public InterruptibleValueCase
          getInterruptibleValueCase() {
        return InterruptibleValueCase.forNumber(
            interruptibleValueCase_);
      }

      public Builder clearInterruptibleValue() {
        interruptibleValueCase_ = 0;
        interruptibleValue_ = null;
        onChanged();
        return this;
      }


      private java.lang.Object name_ = "";
      /**
       * <pre>
       * A friendly name for the Node
       * </pre>
       *
       * <code>string name = 1;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * A friendly name for the Node
       * </pre>
       *
       * <code>string name = 1;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * A friendly name for the Node
       * </pre>
       *
       * <code>string name = 1;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A friendly name for the Node
       * </pre>
       *
       * <code>string name = 1;</code>
       */
      public Builder clearName() {
        
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A friendly name for the Node
       * </pre>
       *
       * <code>string name = 1;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        name_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.Duration timeout_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> timeoutBuilder_;
      /**
       * <pre>
       * The overall timeout of a task.
       * </pre>
       *
       * <code>.google.protobuf.Duration timeout = 4;</code>
       */
      public boolean hasTimeout() {
        return timeoutBuilder_ != null || timeout_ != null;
      }
      /**
       * <pre>
       * The overall timeout of a task.
       * </pre>
       *
       * <code>.google.protobuf.Duration timeout = 4;</code>
       */
      public com.google.protobuf.Duration getTimeout() {
        if (timeoutBuilder_ == null) {
          return timeout_ == null ? com.google.protobuf.Duration.getDefaultInstance() : timeout_;
        } else {
          return timeoutBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The overall timeout of a task.
       * </pre>
       *
       * <code>.google.protobuf.Duration timeout = 4;</code>
       */
      public Builder setTimeout(com.google.protobuf.Duration value) {
        if (timeoutBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          timeout_ = value;
          onChanged();
        } else {
          timeoutBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The overall timeout of a task.
       * </pre>
       *
       * <code>.google.protobuf.Duration timeout = 4;</code>
       */
      public Builder setTimeout(
          com.google.protobuf.Duration.Builder builderForValue) {
        if (timeoutBuilder_ == null) {
          timeout_ = builderForValue.build();
          onChanged();
        } else {
          timeoutBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The overall timeout of a task.
       * </pre>
       *
       * <code>.google.protobuf.Duration timeout = 4;</code>
       */
      public Builder mergeTimeout(com.google.protobuf.Duration value) {
        if (timeoutBuilder_ == null) {
          if (timeout_ != null) {
            timeout_ =
              com.google.protobuf.Duration.newBuilder(timeout_).mergeFrom(value).buildPartial();
          } else {
            timeout_ = value;
          }
          onChanged();
        } else {
          timeoutBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The overall timeout of a task.
       * </pre>
       *
       * <code>.google.protobuf.Duration timeout = 4;</code>
       */
      public Builder clearTimeout() {
        if (timeoutBuilder_ == null) {
          timeout_ = null;
          onChanged();
        } else {
          timeout_ = null;
          timeoutBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The overall timeout of a task.
       * </pre>
       *
       * <code>.google.protobuf.Duration timeout = 4;</code>
       */
      public com.google.protobuf.Duration.Builder getTimeoutBuilder() {
        
        onChanged();
        return getTimeoutFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The overall timeout of a task.
       * </pre>
       *
       * <code>.google.protobuf.Duration timeout = 4;</code>
       */
      public com.google.protobuf.DurationOrBuilder getTimeoutOrBuilder() {
        if (timeoutBuilder_ != null) {
          return timeoutBuilder_.getMessageOrBuilder();
        } else {
          return timeout_ == null ?
              com.google.protobuf.Duration.getDefaultInstance() : timeout_;
        }
      }
      /**
       * <pre>
       * The overall timeout of a task.
       * </pre>
       *
       * <code>.google.protobuf.Duration timeout = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> 
          getTimeoutFieldBuilder() {
        if (timeoutBuilder_ == null) {
          timeoutBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder>(
                  getTimeout(),
                  getParentForChildren(),
                  isClean());
          timeout_ = null;
        }
        return timeoutBuilder_;
      }

      private flyteidl.core.Literals.RetryStrategy retries_;
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Literals.RetryStrategy, flyteidl.core.Literals.RetryStrategy.Builder, flyteidl.core.Literals.RetryStrategyOrBuilder> retriesBuilder_;
      /**
       * <pre>
       * Number of retries per task.
       * </pre>
       *
       * <code>.flyteidl.core.RetryStrategy retries = 5;</code>
       */
      public boolean hasRetries() {
        return retriesBuilder_ != null || retries_ != null;
      }
      /**
       * <pre>
       * Number of retries per task.
       * </pre>
       *
       * <code>.flyteidl.core.RetryStrategy retries = 5;</code>
       */
      public flyteidl.core.Literals.RetryStrategy getRetries() {
        if (retriesBuilder_ == null) {
          return retries_ == null ? flyteidl.core.Literals.RetryStrategy.getDefaultInstance() : retries_;
        } else {
          return retriesBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Number of retries per task.
       * </pre>
       *
       * <code>.flyteidl.core.RetryStrategy retries = 5;</code>
       */
      public Builder setRetries(flyteidl.core.Literals.RetryStrategy value) {
        if (retriesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          retries_ = value;
          onChanged();
        } else {
          retriesBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Number of retries per task.
       * </pre>
       *
       * <code>.flyteidl.core.RetryStrategy retries = 5;</code>
       */
      public Builder setRetries(
          flyteidl.core.Literals.RetryStrategy.Builder builderForValue) {
        if (retriesBuilder_ == null) {
          retries_ = builderForValue.build();
          onChanged();
        } else {
          retriesBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Number of retries per task.
       * </pre>
       *
       * <code>.flyteidl.core.RetryStrategy retries = 5;</code>
       */
      public Builder mergeRetries(flyteidl.core.Literals.RetryStrategy value) {
        if (retriesBuilder_ == null) {
          if (retries_ != null) {
            retries_ =
              flyteidl.core.Literals.RetryStrategy.newBuilder(retries_).mergeFrom(value).buildPartial();
          } else {
            retries_ = value;
          }
          onChanged();
        } else {
          retriesBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Number of retries per task.
       * </pre>
       *
       * <code>.flyteidl.core.RetryStrategy retries = 5;</code>
       */
      public Builder clearRetries() {
        if (retriesBuilder_ == null) {
          retries_ = null;
          onChanged();
        } else {
          retries_ = null;
          retriesBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Number of retries per task.
       * </pre>
       *
       * <code>.flyteidl.core.RetryStrategy retries = 5;</code>
       */
      public flyteidl.core.Literals.RetryStrategy.Builder getRetriesBuilder() {
        
        onChanged();
        return getRetriesFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Number of retries per task.
       * </pre>
       *
       * <code>.flyteidl.core.RetryStrategy retries = 5;</code>
       */
      public flyteidl.core.Literals.RetryStrategyOrBuilder getRetriesOrBuilder() {
        if (retriesBuilder_ != null) {
          return retriesBuilder_.getMessageOrBuilder();
        } else {
          return retries_ == null ?
              flyteidl.core.Literals.RetryStrategy.getDefaultInstance() : retries_;
        }
      }
      /**
       * <pre>
       * Number of retries per task.
       * </pre>
       *
       * <code>.flyteidl.core.RetryStrategy retries = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Literals.RetryStrategy, flyteidl.core.Literals.RetryStrategy.Builder, flyteidl.core.Literals.RetryStrategyOrBuilder> 
          getRetriesFieldBuilder() {
        if (retriesBuilder_ == null) {
          retriesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              flyteidl.core.Literals.RetryStrategy, flyteidl.core.Literals.RetryStrategy.Builder, flyteidl.core.Literals.RetryStrategyOrBuilder>(
                  getRetries(),
                  getParentForChildren(),
                  isClean());
          retries_ = null;
        }
        return retriesBuilder_;
      }

      /**
       * <code>bool interruptible = 6;</code>
       */
      public boolean getInterruptible() {
        if (interruptibleValueCase_ == 6) {
          return (java.lang.Boolean) interruptibleValue_;
        }
        return false;
      }
      /**
       * <code>bool interruptible = 6;</code>
       */
      public Builder setInterruptible(boolean value) {
        interruptibleValueCase_ = 6;
        interruptibleValue_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bool interruptible = 6;</code>
       */
      public Builder clearInterruptible() {
        if (interruptibleValueCase_ == 6) {
          interruptibleValueCase_ = 0;
          interruptibleValue_ = null;
          onChanged();
        }
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flyteidl.core.NodeMetadata)
    }

    // @@protoc_insertion_point(class_scope:flyteidl.core.NodeMetadata)
    private static final flyteidl.core.Workflow.NodeMetadata DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new flyteidl.core.Workflow.NodeMetadata();
    }

    public static flyteidl.core.Workflow.NodeMetadata getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<NodeMetadata>
        PARSER = new com.google.protobuf.AbstractParser<NodeMetadata>() {
      @java.lang.Override
      public NodeMetadata parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new NodeMetadata(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<NodeMetadata> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<NodeMetadata> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public flyteidl.core.Workflow.NodeMetadata getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface AliasOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flyteidl.core.Alias)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Must match one of the output variable names on a node.
     * </pre>
     *
     * <code>string var = 1;</code>
     */
    java.lang.String getVar();
    /**
     * <pre>
     * Must match one of the output variable names on a node.
     * </pre>
     *
     * <code>string var = 1;</code>
     */
    com.google.protobuf.ByteString
        getVarBytes();

    /**
     * <pre>
     * A workflow-level unique alias that downstream nodes can refer to in their input.
     * </pre>
     *
     * <code>string alias = 2;</code>
     */
    java.lang.String getAlias();
    /**
     * <pre>
     * A workflow-level unique alias that downstream nodes can refer to in their input.
     * </pre>
     *
     * <code>string alias = 2;</code>
     */
    com.google.protobuf.ByteString
        getAliasBytes();
  }
  /**
   * <pre>
   * Links a variable to an alias.
   * </pre>
   *
   * Protobuf type {@code flyteidl.core.Alias}
   */
  public  static final class Alias extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flyteidl.core.Alias)
      AliasOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Alias.newBuilder() to construct.
    private Alias(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Alias() {
      var_ = "";
      alias_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Alias(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              var_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              alias_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return flyteidl.core.Workflow.internal_static_flyteidl_core_Alias_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return flyteidl.core.Workflow.internal_static_flyteidl_core_Alias_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              flyteidl.core.Workflow.Alias.class, flyteidl.core.Workflow.Alias.Builder.class);
    }

    public static final int VAR_FIELD_NUMBER = 1;
    private volatile java.lang.Object var_;
    /**
     * <pre>
     * Must match one of the output variable names on a node.
     * </pre>
     *
     * <code>string var = 1;</code>
     */
    public java.lang.String getVar() {
      java.lang.Object ref = var_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        var_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Must match one of the output variable names on a node.
     * </pre>
     *
     * <code>string var = 1;</code>
     */
    public com.google.protobuf.ByteString
        getVarBytes() {
      java.lang.Object ref = var_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        var_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ALIAS_FIELD_NUMBER = 2;
    private volatile java.lang.Object alias_;
    /**
     * <pre>
     * A workflow-level unique alias that downstream nodes can refer to in their input.
     * </pre>
     *
     * <code>string alias = 2;</code>
     */
    public java.lang.String getAlias() {
      java.lang.Object ref = alias_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        alias_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * A workflow-level unique alias that downstream nodes can refer to in their input.
     * </pre>
     *
     * <code>string alias = 2;</code>
     */
    public com.google.protobuf.ByteString
        getAliasBytes() {
      java.lang.Object ref = alias_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        alias_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getVarBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, var_);
      }
      if (!getAliasBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, alias_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getVarBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, var_);
      }
      if (!getAliasBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, alias_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof flyteidl.core.Workflow.Alias)) {
        return super.equals(obj);
      }
      flyteidl.core.Workflow.Alias other = (flyteidl.core.Workflow.Alias) obj;

      if (!getVar()
          .equals(other.getVar())) return false;
      if (!getAlias()
          .equals(other.getAlias())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + VAR_FIELD_NUMBER;
      hash = (53 * hash) + getVar().hashCode();
      hash = (37 * hash) + ALIAS_FIELD_NUMBER;
      hash = (53 * hash) + getAlias().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static flyteidl.core.Workflow.Alias parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Workflow.Alias parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Workflow.Alias parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Workflow.Alias parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Workflow.Alias parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Workflow.Alias parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Workflow.Alias parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static flyteidl.core.Workflow.Alias parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static flyteidl.core.Workflow.Alias parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static flyteidl.core.Workflow.Alias parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static flyteidl.core.Workflow.Alias parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static flyteidl.core.Workflow.Alias parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(flyteidl.core.Workflow.Alias prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Links a variable to an alias.
     * </pre>
     *
     * Protobuf type {@code flyteidl.core.Alias}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flyteidl.core.Alias)
        flyteidl.core.Workflow.AliasOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return flyteidl.core.Workflow.internal_static_flyteidl_core_Alias_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return flyteidl.core.Workflow.internal_static_flyteidl_core_Alias_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                flyteidl.core.Workflow.Alias.class, flyteidl.core.Workflow.Alias.Builder.class);
      }

      // Construct using flyteidl.core.Workflow.Alias.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        var_ = "";

        alias_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return flyteidl.core.Workflow.internal_static_flyteidl_core_Alias_descriptor;
      }

      @java.lang.Override
      public flyteidl.core.Workflow.Alias getDefaultInstanceForType() {
        return flyteidl.core.Workflow.Alias.getDefaultInstance();
      }

      @java.lang.Override
      public flyteidl.core.Workflow.Alias build() {
        flyteidl.core.Workflow.Alias result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public flyteidl.core.Workflow.Alias buildPartial() {
        flyteidl.core.Workflow.Alias result = new flyteidl.core.Workflow.Alias(this);
        result.var_ = var_;
        result.alias_ = alias_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof flyteidl.core.Workflow.Alias) {
          return mergeFrom((flyteidl.core.Workflow.Alias)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(flyteidl.core.Workflow.Alias other) {
        if (other == flyteidl.core.Workflow.Alias.getDefaultInstance()) return this;
        if (!other.getVar().isEmpty()) {
          var_ = other.var_;
          onChanged();
        }
        if (!other.getAlias().isEmpty()) {
          alias_ = other.alias_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        flyteidl.core.Workflow.Alias parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (flyteidl.core.Workflow.Alias) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object var_ = "";
      /**
       * <pre>
       * Must match one of the output variable names on a node.
       * </pre>
       *
       * <code>string var = 1;</code>
       */
      public java.lang.String getVar() {
        java.lang.Object ref = var_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          var_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Must match one of the output variable names on a node.
       * </pre>
       *
       * <code>string var = 1;</code>
       */
      public com.google.protobuf.ByteString
          getVarBytes() {
        java.lang.Object ref = var_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          var_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Must match one of the output variable names on a node.
       * </pre>
       *
       * <code>string var = 1;</code>
       */
      public Builder setVar(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        var_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Must match one of the output variable names on a node.
       * </pre>
       *
       * <code>string var = 1;</code>
       */
      public Builder clearVar() {
        
        var_ = getDefaultInstance().getVar();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Must match one of the output variable names on a node.
       * </pre>
       *
       * <code>string var = 1;</code>
       */
      public Builder setVarBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        var_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object alias_ = "";
      /**
       * <pre>
       * A workflow-level unique alias that downstream nodes can refer to in their input.
       * </pre>
       *
       * <code>string alias = 2;</code>
       */
      public java.lang.String getAlias() {
        java.lang.Object ref = alias_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          alias_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * A workflow-level unique alias that downstream nodes can refer to in their input.
       * </pre>
       *
       * <code>string alias = 2;</code>
       */
      public com.google.protobuf.ByteString
          getAliasBytes() {
        java.lang.Object ref = alias_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          alias_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * A workflow-level unique alias that downstream nodes can refer to in their input.
       * </pre>
       *
       * <code>string alias = 2;</code>
       */
      public Builder setAlias(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        alias_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A workflow-level unique alias that downstream nodes can refer to in their input.
       * </pre>
       *
       * <code>string alias = 2;</code>
       */
      public Builder clearAlias() {
        
        alias_ = getDefaultInstance().getAlias();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A workflow-level unique alias that downstream nodes can refer to in their input.
       * </pre>
       *
       * <code>string alias = 2;</code>
       */
      public Builder setAliasBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        alias_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flyteidl.core.Alias)
    }

    // @@protoc_insertion_point(class_scope:flyteidl.core.Alias)
    private static final flyteidl.core.Workflow.Alias DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new flyteidl.core.Workflow.Alias();
    }

    public static flyteidl.core.Workflow.Alias getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Alias>
        PARSER = new com.google.protobuf.AbstractParser<Alias>() {
      @java.lang.Override
      public Alias parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Alias(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Alias> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Alias> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public flyteidl.core.Workflow.Alias getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface NodeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flyteidl.core.Node)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * A workflow-level unique identifier that identifies this node in the workflow. 'inputs' and 'outputs' are reserved
     * node ids that cannot be used by other nodes.
     * </pre>
     *
     * <code>string id = 1;</code>
     */
    java.lang.String getId();
    /**
     * <pre>
     * A workflow-level unique identifier that identifies this node in the workflow. 'inputs' and 'outputs' are reserved
     * node ids that cannot be used by other nodes.
     * </pre>
     *
     * <code>string id = 1;</code>
     */
    com.google.protobuf.ByteString
        getIdBytes();

    /**
     * <pre>
     * Extra metadata about the node.
     * </pre>
     *
     * <code>.flyteidl.core.NodeMetadata metadata = 2;</code>
     */
    boolean hasMetadata();
    /**
     * <pre>
     * Extra metadata about the node.
     * </pre>
     *
     * <code>.flyteidl.core.NodeMetadata metadata = 2;</code>
     */
    flyteidl.core.Workflow.NodeMetadata getMetadata();
    /**
     * <pre>
     * Extra metadata about the node.
     * </pre>
     *
     * <code>.flyteidl.core.NodeMetadata metadata = 2;</code>
     */
    flyteidl.core.Workflow.NodeMetadataOrBuilder getMetadataOrBuilder();

    /**
     * <pre>
     * Specifies how to bind the underlying interface's inputs. All required inputs specified in the underlying interface
     * must be fulfilled.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Binding inputs = 3;</code>
     */
    java.util.List<flyteidl.core.Literals.Binding> 
        getInputsList();
    /**
     * <pre>
     * Specifies how to bind the underlying interface's inputs. All required inputs specified in the underlying interface
     * must be fulfilled.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Binding inputs = 3;</code>
     */
    flyteidl.core.Literals.Binding getInputs(int index);
    /**
     * <pre>
     * Specifies how to bind the underlying interface's inputs. All required inputs specified in the underlying interface
     * must be fulfilled.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Binding inputs = 3;</code>
     */
    int getInputsCount();
    /**
     * <pre>
     * Specifies how to bind the underlying interface's inputs. All required inputs specified in the underlying interface
     * must be fulfilled.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Binding inputs = 3;</code>
     */
    java.util.List<? extends flyteidl.core.Literals.BindingOrBuilder> 
        getInputsOrBuilderList();
    /**
     * <pre>
     * Specifies how to bind the underlying interface's inputs. All required inputs specified in the underlying interface
     * must be fulfilled.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Binding inputs = 3;</code>
     */
    flyteidl.core.Literals.BindingOrBuilder getInputsOrBuilder(
        int index);

    /**
     * <pre>
     *+optional Specifies execution dependency for this node ensuring it will only get scheduled to run after all its
     * upstream nodes have completed. This node will have an implicit dependency on any node that appears in inputs
     * field.
     * </pre>
     *
     * <code>repeated string upstream_node_ids = 4;</code>
     */
    java.util.List<java.lang.String>
        getUpstreamNodeIdsList();
    /**
     * <pre>
     *+optional Specifies execution dependency for this node ensuring it will only get scheduled to run after all its
     * upstream nodes have completed. This node will have an implicit dependency on any node that appears in inputs
     * field.
     * </pre>
     *
     * <code>repeated string upstream_node_ids = 4;</code>
     */
    int getUpstreamNodeIdsCount();
    /**
     * <pre>
     *+optional Specifies execution dependency for this node ensuring it will only get scheduled to run after all its
     * upstream nodes have completed. This node will have an implicit dependency on any node that appears in inputs
     * field.
     * </pre>
     *
     * <code>repeated string upstream_node_ids = 4;</code>
     */
    java.lang.String getUpstreamNodeIds(int index);
    /**
     * <pre>
     *+optional Specifies execution dependency for this node ensuring it will only get scheduled to run after all its
     * upstream nodes have completed. This node will have an implicit dependency on any node that appears in inputs
     * field.
     * </pre>
     *
     * <code>repeated string upstream_node_ids = 4;</code>
     */
    com.google.protobuf.ByteString
        getUpstreamNodeIdsBytes(int index);

    /**
     * <pre>
     *+optional. A node can define aliases for a subset of its outputs. This is particularly useful if different nodes
     * need to conform to the same interface (e.g. all branches in a branch node). Downstream nodes must refer to this
     * nodes outputs using the alias if one's specified.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Alias output_aliases = 5;</code>
     */
    java.util.List<flyteidl.core.Workflow.Alias> 
        getOutputAliasesList();
    /**
     * <pre>
     *+optional. A node can define aliases for a subset of its outputs. This is particularly useful if different nodes
     * need to conform to the same interface (e.g. all branches in a branch node). Downstream nodes must refer to this
     * nodes outputs using the alias if one's specified.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Alias output_aliases = 5;</code>
     */
    flyteidl.core.Workflow.Alias getOutputAliases(int index);
    /**
     * <pre>
     *+optional. A node can define aliases for a subset of its outputs. This is particularly useful if different nodes
     * need to conform to the same interface (e.g. all branches in a branch node). Downstream nodes must refer to this
     * nodes outputs using the alias if one's specified.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Alias output_aliases = 5;</code>
     */
    int getOutputAliasesCount();
    /**
     * <pre>
     *+optional. A node can define aliases for a subset of its outputs. This is particularly useful if different nodes
     * need to conform to the same interface (e.g. all branches in a branch node). Downstream nodes must refer to this
     * nodes outputs using the alias if one's specified.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Alias output_aliases = 5;</code>
     */
    java.util.List<? extends flyteidl.core.Workflow.AliasOrBuilder> 
        getOutputAliasesOrBuilderList();
    /**
     * <pre>
     *+optional. A node can define aliases for a subset of its outputs. This is particularly useful if different nodes
     * need to conform to the same interface (e.g. all branches in a branch node). Downstream nodes must refer to this
     * nodes outputs using the alias if one's specified.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Alias output_aliases = 5;</code>
     */
    flyteidl.core.Workflow.AliasOrBuilder getOutputAliasesOrBuilder(
        int index);

    /**
     * <pre>
     * Information about the Task to execute in this node.
     * </pre>
     *
     * <code>.flyteidl.core.TaskNode task_node = 6;</code>
     */
    boolean hasTaskNode();
    /**
     * <pre>
     * Information about the Task to execute in this node.
     * </pre>
     *
     * <code>.flyteidl.core.TaskNode task_node = 6;</code>
     */
    flyteidl.core.Workflow.TaskNode getTaskNode();
    /**
     * <pre>
     * Information about the Task to execute in this node.
     * </pre>
     *
     * <code>.flyteidl.core.TaskNode task_node = 6;</code>
     */
    flyteidl.core.Workflow.TaskNodeOrBuilder getTaskNodeOrBuilder();

    /**
     * <pre>
     * Information about the Workflow to execute in this mode.
     * </pre>
     *
     * <code>.flyteidl.core.WorkflowNode workflow_node = 7;</code>
     */
    boolean hasWorkflowNode();
    /**
     * <pre>
     * Information about the Workflow to execute in this mode.
     * </pre>
     *
     * <code>.flyteidl.core.WorkflowNode workflow_node = 7;</code>
     */
    flyteidl.core.Workflow.WorkflowNode getWorkflowNode();
    /**
     * <pre>
     * Information about the Workflow to execute in this mode.
     * </pre>
     *
     * <code>.flyteidl.core.WorkflowNode workflow_node = 7;</code>
     */
    flyteidl.core.Workflow.WorkflowNodeOrBuilder getWorkflowNodeOrBuilder();

    /**
     * <pre>
     * Information about the branch node to evaluate in this node.
     * </pre>
     *
     * <code>.flyteidl.core.BranchNode branch_node = 8;</code>
     */
    boolean hasBranchNode();
    /**
     * <pre>
     * Information about the branch node to evaluate in this node.
     * </pre>
     *
     * <code>.flyteidl.core.BranchNode branch_node = 8;</code>
     */
    flyteidl.core.Workflow.BranchNode getBranchNode();
    /**
     * <pre>
     * Information about the branch node to evaluate in this node.
     * </pre>
     *
     * <code>.flyteidl.core.BranchNode branch_node = 8;</code>
     */
    flyteidl.core.Workflow.BranchNodeOrBuilder getBranchNodeOrBuilder();

    /**
     * <pre>
     * Information about the condition to evaluate in this node.
     * </pre>
     *
     * <code>.flyteidl.core.GateNode gate_node = 9;</code>
     */
    boolean hasGateNode();
    /**
     * <pre>
     * Information about the condition to evaluate in this node.
     * </pre>
     *
     * <code>.flyteidl.core.GateNode gate_node = 9;</code>
     */
    flyteidl.core.Workflow.GateNode getGateNode();
    /**
     * <pre>
     * Information about the condition to evaluate in this node.
     * </pre>
     *
     * <code>.flyteidl.core.GateNode gate_node = 9;</code>
     */
    flyteidl.core.Workflow.GateNodeOrBuilder getGateNodeOrBuilder();

    public flyteidl.core.Workflow.Node.TargetCase getTargetCase();
  }
  /**
   * <pre>
   * A Workflow graph Node. One unit of execution in the graph. Each node can be linked to a Task, a Workflow or a branch
   * node.
   * </pre>
   *
   * Protobuf type {@code flyteidl.core.Node}
   */
  public  static final class Node extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flyteidl.core.Node)
      NodeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Node.newBuilder() to construct.
    private Node(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Node() {
      id_ = "";
      inputs_ = java.util.Collections.emptyList();
      upstreamNodeIds_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      outputAliases_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Node(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              id_ = s;
              break;
            }
            case 18: {
              flyteidl.core.Workflow.NodeMetadata.Builder subBuilder = null;
              if (metadata_ != null) {
                subBuilder = metadata_.toBuilder();
              }
              metadata_ = input.readMessage(flyteidl.core.Workflow.NodeMetadata.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(metadata_);
                metadata_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) != 0)) {
                inputs_ = new java.util.ArrayList<flyteidl.core.Literals.Binding>();
                mutable_bitField0_ |= 0x00000004;
              }
              inputs_.add(
                  input.readMessage(flyteidl.core.Literals.Binding.parser(), extensionRegistry));
              break;
            }
            case 34: {
              java.lang.String s = input.readStringRequireUtf8();
              if (!((mutable_bitField0_ & 0x00000008) != 0)) {
                upstreamNodeIds_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000008;
              }
              upstreamNodeIds_.add(s);
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) != 0)) {
                outputAliases_ = new java.util.ArrayList<flyteidl.core.Workflow.Alias>();
                mutable_bitField0_ |= 0x00000010;
              }
              outputAliases_.add(
                  input.readMessage(flyteidl.core.Workflow.Alias.parser(), extensionRegistry));
              break;
            }
            case 50: {
              flyteidl.core.Workflow.TaskNode.Builder subBuilder = null;
              if (targetCase_ == 6) {
                subBuilder = ((flyteidl.core.Workflow.TaskNode) target_).toBuilder();
              }
              target_ =
                  input.readMessage(flyteidl.core.Workflow.TaskNode.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((flyteidl.core.Workflow.TaskNode) target_);
                target_ = subBuilder.buildPartial();
              }
              targetCase_ = 6;
              break;
            }
            case 58: {
              flyteidl.core.Workflow.WorkflowNode.Builder subBuilder = null;
              if (targetCase_ == 7) {
                subBuilder = ((flyteidl.core.Workflow.WorkflowNode) target_).toBuilder();
              }
              target_ =
                  input.readMessage(flyteidl.core.Workflow.WorkflowNode.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((flyteidl.core.Workflow.WorkflowNode) target_);
                target_ = subBuilder.buildPartial();
              }
              targetCase_ = 7;
              break;
            }
            case 66: {
              flyteidl.core.Workflow.BranchNode.Builder subBuilder = null;
              if (targetCase_ == 8) {
                subBuilder = ((flyteidl.core.Workflow.BranchNode) target_).toBuilder();
              }
              target_ =
                  input.readMessage(flyteidl.core.Workflow.BranchNode.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((flyteidl.core.Workflow.BranchNode) target_);
                target_ = subBuilder.buildPartial();
              }
              targetCase_ = 8;
              break;
            }
            case 74: {
              flyteidl.core.Workflow.GateNode.Builder subBuilder = null;
              if (targetCase_ == 9) {
                subBuilder = ((flyteidl.core.Workflow.GateNode) target_).toBuilder();
              }
              target_ =
                  input.readMessage(flyteidl.core.Workflow.GateNode.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((flyteidl.core.Workflow.GateNode) target_);
                target_ = subBuilder.buildPartial();
              }
              targetCase_ = 9;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) != 0)) {
          inputs_ = java.util.Collections.unmodifiableList(inputs_);
        }
        if (((mutable_bitField0_ & 0x00000008) != 0)) {
          upstreamNodeIds_ = upstreamNodeIds_.getUnmodifiableView();
        }
        if (((mutable_bitField0_ & 0x00000010) != 0)) {
          outputAliases_ = java.util.Collections.unmodifiableList(outputAliases_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return flyteidl.core.Workflow.internal_static_flyteidl_core_Node_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return flyteidl.core.Workflow.internal_static_flyteidl_core_Node_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              flyteidl.core.Workflow.Node.class, flyteidl.core.Workflow.Node.Builder.class);
    }

    private int bitField0_;
    private int targetCase_ = 0;
    private java.lang.Object target_;
    public enum TargetCase
        implements com.google.protobuf.Internal.EnumLite {
      TASK_NODE(6),
      WORKFLOW_NODE(7),
      BRANCH_NODE(8),
      GATE_NODE(9),
      TARGET_NOT_SET(0);
      private final int value;
      private TargetCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static TargetCase valueOf(int value) {
        return forNumber(value);
      }

      public static TargetCase forNumber(int value) {
        switch (value) {
          case 6: return TASK_NODE;
          case 7: return WORKFLOW_NODE;
          case 8: return BRANCH_NODE;
          case 9: return GATE_NODE;
          case 0: return TARGET_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public TargetCase
    getTargetCase() {
      return TargetCase.forNumber(
          targetCase_);
    }

    public static final int ID_FIELD_NUMBER = 1;
    private volatile java.lang.Object id_;
    /**
     * <pre>
     * A workflow-level unique identifier that identifies this node in the workflow. 'inputs' and 'outputs' are reserved
     * node ids that cannot be used by other nodes.
     * </pre>
     *
     * <code>string id = 1;</code>
     */
    public java.lang.String getId() {
      java.lang.Object ref = id_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        id_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * A workflow-level unique identifier that identifies this node in the workflow. 'inputs' and 'outputs' are reserved
     * node ids that cannot be used by other nodes.
     * </pre>
     *
     * <code>string id = 1;</code>
     */
    public com.google.protobuf.ByteString
        getIdBytes() {
      java.lang.Object ref = id_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        id_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int METADATA_FIELD_NUMBER = 2;
    private flyteidl.core.Workflow.NodeMetadata metadata_;
    /**
     * <pre>
     * Extra metadata about the node.
     * </pre>
     *
     * <code>.flyteidl.core.NodeMetadata metadata = 2;</code>
     */
    public boolean hasMetadata() {
      return metadata_ != null;
    }
    /**
     * <pre>
     * Extra metadata about the node.
     * </pre>
     *
     * <code>.flyteidl.core.NodeMetadata metadata = 2;</code>
     */
    public flyteidl.core.Workflow.NodeMetadata getMetadata() {
      return metadata_ == null ? flyteidl.core.Workflow.NodeMetadata.getDefaultInstance() : metadata_;
    }
    /**
     * <pre>
     * Extra metadata about the node.
     * </pre>
     *
     * <code>.flyteidl.core.NodeMetadata metadata = 2;</code>
     */
    public flyteidl.core.Workflow.NodeMetadataOrBuilder getMetadataOrBuilder() {
      return getMetadata();
    }

    public static final int INPUTS_FIELD_NUMBER = 3;
    private java.util.List<flyteidl.core.Literals.Binding> inputs_;
    /**
     * <pre>
     * Specifies how to bind the underlying interface's inputs. All required inputs specified in the underlying interface
     * must be fulfilled.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Binding inputs = 3;</code>
     */
    public java.util.List<flyteidl.core.Literals.Binding> getInputsList() {
      return inputs_;
    }
    /**
     * <pre>
     * Specifies how to bind the underlying interface's inputs. All required inputs specified in the underlying interface
     * must be fulfilled.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Binding inputs = 3;</code>
     */
    public java.util.List<? extends flyteidl.core.Literals.BindingOrBuilder> 
        getInputsOrBuilderList() {
      return inputs_;
    }
    /**
     * <pre>
     * Specifies how to bind the underlying interface's inputs. All required inputs specified in the underlying interface
     * must be fulfilled.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Binding inputs = 3;</code>
     */
    public int getInputsCount() {
      return inputs_.size();
    }
    /**
     * <pre>
     * Specifies how to bind the underlying interface's inputs. All required inputs specified in the underlying interface
     * must be fulfilled.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Binding inputs = 3;</code>
     */
    public flyteidl.core.Literals.Binding getInputs(int index) {
      return inputs_.get(index);
    }
    /**
     * <pre>
     * Specifies how to bind the underlying interface's inputs. All required inputs specified in the underlying interface
     * must be fulfilled.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Binding inputs = 3;</code>
     */
    public flyteidl.core.Literals.BindingOrBuilder getInputsOrBuilder(
        int index) {
      return inputs_.get(index);
    }

    public static final int UPSTREAM_NODE_IDS_FIELD_NUMBER = 4;
    private com.google.protobuf.LazyStringList upstreamNodeIds_;
    /**
     * <pre>
     *+optional Specifies execution dependency for this node ensuring it will only get scheduled to run after all its
     * upstream nodes have completed. This node will have an implicit dependency on any node that appears in inputs
     * field.
     * </pre>
     *
     * <code>repeated string upstream_node_ids = 4;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getUpstreamNodeIdsList() {
      return upstreamNodeIds_;
    }
    /**
     * <pre>
     *+optional Specifies execution dependency for this node ensuring it will only get scheduled to run after all its
     * upstream nodes have completed. This node will have an implicit dependency on any node that appears in inputs
     * field.
     * </pre>
     *
     * <code>repeated string upstream_node_ids = 4;</code>
     */
    public int getUpstreamNodeIdsCount() {
      return upstreamNodeIds_.size();
    }
    /**
     * <pre>
     *+optional Specifies execution dependency for this node ensuring it will only get scheduled to run after all its
     * upstream nodes have completed. This node will have an implicit dependency on any node that appears in inputs
     * field.
     * </pre>
     *
     * <code>repeated string upstream_node_ids = 4;</code>
     */
    public java.lang.String getUpstreamNodeIds(int index) {
      return upstreamNodeIds_.get(index);
    }
    /**
     * <pre>
     *+optional Specifies execution dependency for this node ensuring it will only get scheduled to run after all its
     * upstream nodes have completed. This node will have an implicit dependency on any node that appears in inputs
     * field.
     * </pre>
     *
     * <code>repeated string upstream_node_ids = 4;</code>
     */
    public com.google.protobuf.ByteString
        getUpstreamNodeIdsBytes(int index) {
      return upstreamNodeIds_.getByteString(index);
    }

    public static final int OUTPUT_ALIASES_FIELD_NUMBER = 5;
    private java.util.List<flyteidl.core.Workflow.Alias> outputAliases_;
    /**
     * <pre>
     *+optional. A node can define aliases for a subset of its outputs. This is particularly useful if different nodes
     * need to conform to the same interface (e.g. all branches in a branch node). Downstream nodes must refer to this
     * nodes outputs using the alias if one's specified.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Alias output_aliases = 5;</code>
     */
    public java.util.List<flyteidl.core.Workflow.Alias> getOutputAliasesList() {
      return outputAliases_;
    }
    /**
     * <pre>
     *+optional. A node can define aliases for a subset of its outputs. This is particularly useful if different nodes
     * need to conform to the same interface (e.g. all branches in a branch node). Downstream nodes must refer to this
     * nodes outputs using the alias if one's specified.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Alias output_aliases = 5;</code>
     */
    public java.util.List<? extends flyteidl.core.Workflow.AliasOrBuilder> 
        getOutputAliasesOrBuilderList() {
      return outputAliases_;
    }
    /**
     * <pre>
     *+optional. A node can define aliases for a subset of its outputs. This is particularly useful if different nodes
     * need to conform to the same interface (e.g. all branches in a branch node). Downstream nodes must refer to this
     * nodes outputs using the alias if one's specified.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Alias output_aliases = 5;</code>
     */
    public int getOutputAliasesCount() {
      return outputAliases_.size();
    }
    /**
     * <pre>
     *+optional. A node can define aliases for a subset of its outputs. This is particularly useful if different nodes
     * need to conform to the same interface (e.g. all branches in a branch node). Downstream nodes must refer to this
     * nodes outputs using the alias if one's specified.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Alias output_aliases = 5;</code>
     */
    public flyteidl.core.Workflow.Alias getOutputAliases(int index) {
      return outputAliases_.get(index);
    }
    /**
     * <pre>
     *+optional. A node can define aliases for a subset of its outputs. This is particularly useful if different nodes
     * need to conform to the same interface (e.g. all branches in a branch node). Downstream nodes must refer to this
     * nodes outputs using the alias if one's specified.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Alias output_aliases = 5;</code>
     */
    public flyteidl.core.Workflow.AliasOrBuilder getOutputAliasesOrBuilder(
        int index) {
      return outputAliases_.get(index);
    }

    public static final int TASK_NODE_FIELD_NUMBER = 6;
    /**
     * <pre>
     * Information about the Task to execute in this node.
     * </pre>
     *
     * <code>.flyteidl.core.TaskNode task_node = 6;</code>
     */
    public boolean hasTaskNode() {
      return targetCase_ == 6;
    }
    /**
     * <pre>
     * Information about the Task to execute in this node.
     * </pre>
     *
     * <code>.flyteidl.core.TaskNode task_node = 6;</code>
     */
    public flyteidl.core.Workflow.TaskNode getTaskNode() {
      if (targetCase_ == 6) {
         return (flyteidl.core.Workflow.TaskNode) target_;
      }
      return flyteidl.core.Workflow.TaskNode.getDefaultInstance();
    }
    /**
     * <pre>
     * Information about the Task to execute in this node.
     * </pre>
     *
     * <code>.flyteidl.core.TaskNode task_node = 6;</code>
     */
    public flyteidl.core.Workflow.TaskNodeOrBuilder getTaskNodeOrBuilder() {
      if (targetCase_ == 6) {
         return (flyteidl.core.Workflow.TaskNode) target_;
      }
      return flyteidl.core.Workflow.TaskNode.getDefaultInstance();
    }

    public static final int WORKFLOW_NODE_FIELD_NUMBER = 7;
    /**
     * <pre>
     * Information about the Workflow to execute in this mode.
     * </pre>
     *
     * <code>.flyteidl.core.WorkflowNode workflow_node = 7;</code>
     */
    public boolean hasWorkflowNode() {
      return targetCase_ == 7;
    }
    /**
     * <pre>
     * Information about the Workflow to execute in this mode.
     * </pre>
     *
     * <code>.flyteidl.core.WorkflowNode workflow_node = 7;</code>
     */
    public flyteidl.core.Workflow.WorkflowNode getWorkflowNode() {
      if (targetCase_ == 7) {
         return (flyteidl.core.Workflow.WorkflowNode) target_;
      }
      return flyteidl.core.Workflow.WorkflowNode.getDefaultInstance();
    }
    /**
     * <pre>
     * Information about the Workflow to execute in this mode.
     * </pre>
     *
     * <code>.flyteidl.core.WorkflowNode workflow_node = 7;</code>
     */
    public flyteidl.core.Workflow.WorkflowNodeOrBuilder getWorkflowNodeOrBuilder() {
      if (targetCase_ == 7) {
         return (flyteidl.core.Workflow.WorkflowNode) target_;
      }
      return flyteidl.core.Workflow.WorkflowNode.getDefaultInstance();
    }

    public static final int BRANCH_NODE_FIELD_NUMBER = 8;
    /**
     * <pre>
     * Information about the branch node to evaluate in this node.
     * </pre>
     *
     * <code>.flyteidl.core.BranchNode branch_node = 8;</code>
     */
    public boolean hasBranchNode() {
      return targetCase_ == 8;
    }
    /**
     * <pre>
     * Information about the branch node to evaluate in this node.
     * </pre>
     *
     * <code>.flyteidl.core.BranchNode branch_node = 8;</code>
     */
    public flyteidl.core.Workflow.BranchNode getBranchNode() {
      if (targetCase_ == 8) {
         return (flyteidl.core.Workflow.BranchNode) target_;
      }
      return flyteidl.core.Workflow.BranchNode.getDefaultInstance();
    }
    /**
     * <pre>
     * Information about the branch node to evaluate in this node.
     * </pre>
     *
     * <code>.flyteidl.core.BranchNode branch_node = 8;</code>
     */
    public flyteidl.core.Workflow.BranchNodeOrBuilder getBranchNodeOrBuilder() {
      if (targetCase_ == 8) {
         return (flyteidl.core.Workflow.BranchNode) target_;
      }
      return flyteidl.core.Workflow.BranchNode.getDefaultInstance();
    }

    public static final int GATE_NODE_FIELD_NUMBER = 9;
    /**
     * <pre>
     * Information about the condition to evaluate in this node.
     * </pre>
     *
     * <code>.flyteidl.core.GateNode gate_node = 9;</code>
     */
    public boolean hasGateNode() {
      return targetCase_ == 9;
    }
    /**
     * <pre>
     * Information about the condition to evaluate in this node.
     * </pre>
     *
     * <code>.flyteidl.core.GateNode gate_node = 9;</code>
     */
    public flyteidl.core.Workflow.GateNode getGateNode() {
      if (targetCase_ == 9) {
         return (flyteidl.core.Workflow.GateNode) target_;
      }
      return flyteidl.core.Workflow.GateNode.getDefaultInstance();
    }
    /**
     * <pre>
     * Information about the condition to evaluate in this node.
     * </pre>
     *
     * <code>.flyteidl.core.GateNode gate_node = 9;</code>
     */
    public flyteidl.core.Workflow.GateNodeOrBuilder getGateNodeOrBuilder() {
      if (targetCase_ == 9) {
         return (flyteidl.core.Workflow.GateNode) target_;
      }
      return flyteidl.core.Workflow.GateNode.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getIdBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, id_);
      }
      if (metadata_ != null) {
        output.writeMessage(2, getMetadata());
      }
      for (int i = 0; i < inputs_.size(); i++) {
        output.writeMessage(3, inputs_.get(i));
      }
      for (int i = 0; i < upstreamNodeIds_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, upstreamNodeIds_.getRaw(i));
      }
      for (int i = 0; i < outputAliases_.size(); i++) {
        output.writeMessage(5, outputAliases_.get(i));
      }
      if (targetCase_ == 6) {
        output.writeMessage(6, (flyteidl.core.Workflow.TaskNode) target_);
      }
      if (targetCase_ == 7) {
        output.writeMessage(7, (flyteidl.core.Workflow.WorkflowNode) target_);
      }
      if (targetCase_ == 8) {
        output.writeMessage(8, (flyteidl.core.Workflow.BranchNode) target_);
      }
      if (targetCase_ == 9) {
        output.writeMessage(9, (flyteidl.core.Workflow.GateNode) target_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getIdBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, id_);
      }
      if (metadata_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getMetadata());
      }
      for (int i = 0; i < inputs_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, inputs_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < upstreamNodeIds_.size(); i++) {
          dataSize += computeStringSizeNoTag(upstreamNodeIds_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getUpstreamNodeIdsList().size();
      }
      for (int i = 0; i < outputAliases_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, outputAliases_.get(i));
      }
      if (targetCase_ == 6) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, (flyteidl.core.Workflow.TaskNode) target_);
      }
      if (targetCase_ == 7) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, (flyteidl.core.Workflow.WorkflowNode) target_);
      }
      if (targetCase_ == 8) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, (flyteidl.core.Workflow.BranchNode) target_);
      }
      if (targetCase_ == 9) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, (flyteidl.core.Workflow.GateNode) target_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof flyteidl.core.Workflow.Node)) {
        return super.equals(obj);
      }
      flyteidl.core.Workflow.Node other = (flyteidl.core.Workflow.Node) obj;

      if (!getId()
          .equals(other.getId())) return false;
      if (hasMetadata() != other.hasMetadata()) return false;
      if (hasMetadata()) {
        if (!getMetadata()
            .equals(other.getMetadata())) return false;
      }
      if (!getInputsList()
          .equals(other.getInputsList())) return false;
      if (!getUpstreamNodeIdsList()
          .equals(other.getUpstreamNodeIdsList())) return false;
      if (!getOutputAliasesList()
          .equals(other.getOutputAliasesList())) return false;
      if (!getTargetCase().equals(other.getTargetCase())) return false;
      switch (targetCase_) {
        case 6:
          if (!getTaskNode()
              .equals(other.getTaskNode())) return false;
          break;
        case 7:
          if (!getWorkflowNode()
              .equals(other.getWorkflowNode())) return false;
          break;
        case 8:
          if (!getBranchNode()
              .equals(other.getBranchNode())) return false;
          break;
        case 9:
          if (!getGateNode()
              .equals(other.getGateNode())) return false;
          break;
        case 0:
        default:
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + ID_FIELD_NUMBER;
      hash = (53 * hash) + getId().hashCode();
      if (hasMetadata()) {
        hash = (37 * hash) + METADATA_FIELD_NUMBER;
        hash = (53 * hash) + getMetadata().hashCode();
      }
      if (getInputsCount() > 0) {
        hash = (37 * hash) + INPUTS_FIELD_NUMBER;
        hash = (53 * hash) + getInputsList().hashCode();
      }
      if (getUpstreamNodeIdsCount() > 0) {
        hash = (37 * hash) + UPSTREAM_NODE_IDS_FIELD_NUMBER;
        hash = (53 * hash) + getUpstreamNodeIdsList().hashCode();
      }
      if (getOutputAliasesCount() > 0) {
        hash = (37 * hash) + OUTPUT_ALIASES_FIELD_NUMBER;
        hash = (53 * hash) + getOutputAliasesList().hashCode();
      }
      switch (targetCase_) {
        case 6:
          hash = (37 * hash) + TASK_NODE_FIELD_NUMBER;
          hash = (53 * hash) + getTaskNode().hashCode();
          break;
        case 7:
          hash = (37 * hash) + WORKFLOW_NODE_FIELD_NUMBER;
          hash = (53 * hash) + getWorkflowNode().hashCode();
          break;
        case 8:
          hash = (37 * hash) + BRANCH_NODE_FIELD_NUMBER;
          hash = (53 * hash) + getBranchNode().hashCode();
          break;
        case 9:
          hash = (37 * hash) + GATE_NODE_FIELD_NUMBER;
          hash = (53 * hash) + getGateNode().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static flyteidl.core.Workflow.Node parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Workflow.Node parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Workflow.Node parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Workflow.Node parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Workflow.Node parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Workflow.Node parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Workflow.Node parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static flyteidl.core.Workflow.Node parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static flyteidl.core.Workflow.Node parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static flyteidl.core.Workflow.Node parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static flyteidl.core.Workflow.Node parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static flyteidl.core.Workflow.Node parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(flyteidl.core.Workflow.Node prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A Workflow graph Node. One unit of execution in the graph. Each node can be linked to a Task, a Workflow or a branch
     * node.
     * </pre>
     *
     * Protobuf type {@code flyteidl.core.Node}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flyteidl.core.Node)
        flyteidl.core.Workflow.NodeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return flyteidl.core.Workflow.internal_static_flyteidl_core_Node_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return flyteidl.core.Workflow.internal_static_flyteidl_core_Node_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                flyteidl.core.Workflow.Node.class, flyteidl.core.Workflow.Node.Builder.class);
      }

      // Construct using flyteidl.core.Workflow.Node.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getInputsFieldBuilder();
          getOutputAliasesFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        id_ = "";

        if (metadataBuilder_ == null) {
          metadata_ = null;
        } else {
          metadata_ = null;
          metadataBuilder_ = null;
        }
        if (inputsBuilder_ == null) {
          inputs_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          inputsBuilder_.clear();
        }
        upstreamNodeIds_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000008);
        if (outputAliasesBuilder_ == null) {
          outputAliases_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          outputAliasesBuilder_.clear();
        }
        targetCase_ = 0;
        target_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return flyteidl.core.Workflow.internal_static_flyteidl_core_Node_descriptor;
      }

      @java.lang.Override
      public flyteidl.core.Workflow.Node getDefaultInstanceForType() {
        return flyteidl.core.Workflow.Node.getDefaultInstance();
      }

      @java.lang.Override
      public flyteidl.core.Workflow.Node build() {
        flyteidl.core.Workflow.Node result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public flyteidl.core.Workflow.Node buildPartial() {
        flyteidl.core.Workflow.Node result = new flyteidl.core.Workflow.Node(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.id_ = id_;
        if (metadataBuilder_ == null) {
          result.metadata_ = metadata_;
        } else {
          result.metadata_ = metadataBuilder_.build();
        }
        if (inputsBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0)) {
            inputs_ = java.util.Collections.unmodifiableList(inputs_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.inputs_ = inputs_;
        } else {
          result.inputs_ = inputsBuilder_.build();
        }
        if (((bitField0_ & 0x00000008) != 0)) {
          upstreamNodeIds_ = upstreamNodeIds_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.upstreamNodeIds_ = upstreamNodeIds_;
        if (outputAliasesBuilder_ == null) {
          if (((bitField0_ & 0x00000010) != 0)) {
            outputAliases_ = java.util.Collections.unmodifiableList(outputAliases_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.outputAliases_ = outputAliases_;
        } else {
          result.outputAliases_ = outputAliasesBuilder_.build();
        }
        if (targetCase_ == 6) {
          if (taskNodeBuilder_ == null) {
            result.target_ = target_;
          } else {
            result.target_ = taskNodeBuilder_.build();
          }
        }
        if (targetCase_ == 7) {
          if (workflowNodeBuilder_ == null) {
            result.target_ = target_;
          } else {
            result.target_ = workflowNodeBuilder_.build();
          }
        }
        if (targetCase_ == 8) {
          if (branchNodeBuilder_ == null) {
            result.target_ = target_;
          } else {
            result.target_ = branchNodeBuilder_.build();
          }
        }
        if (targetCase_ == 9) {
          if (gateNodeBuilder_ == null) {
            result.target_ = target_;
          } else {
            result.target_ = gateNodeBuilder_.build();
          }
        }
        result.bitField0_ = to_bitField0_;
        result.targetCase_ = targetCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof flyteidl.core.Workflow.Node) {
          return mergeFrom((flyteidl.core.Workflow.Node)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(flyteidl.core.Workflow.Node other) {
        if (other == flyteidl.core.Workflow.Node.getDefaultInstance()) return this;
        if (!other.getId().isEmpty()) {
          id_ = other.id_;
          onChanged();
        }
        if (other.hasMetadata()) {
          mergeMetadata(other.getMetadata());
        }
        if (inputsBuilder_ == null) {
          if (!other.inputs_.isEmpty()) {
            if (inputs_.isEmpty()) {
              inputs_ = other.inputs_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureInputsIsMutable();
              inputs_.addAll(other.inputs_);
            }
            onChanged();
          }
        } else {
          if (!other.inputs_.isEmpty()) {
            if (inputsBuilder_.isEmpty()) {
              inputsBuilder_.dispose();
              inputsBuilder_ = null;
              inputs_ = other.inputs_;
              bitField0_ = (bitField0_ & ~0x00000004);
              inputsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getInputsFieldBuilder() : null;
            } else {
              inputsBuilder_.addAllMessages(other.inputs_);
            }
          }
        }
        if (!other.upstreamNodeIds_.isEmpty()) {
          if (upstreamNodeIds_.isEmpty()) {
            upstreamNodeIds_ = other.upstreamNodeIds_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureUpstreamNodeIdsIsMutable();
            upstreamNodeIds_.addAll(other.upstreamNodeIds_);
          }
          onChanged();
        }
        if (outputAliasesBuilder_ == null) {
          if (!other.outputAliases_.isEmpty()) {
            if (outputAliases_.isEmpty()) {
              outputAliases_ = other.outputAliases_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureOutputAliasesIsMutable();
              outputAliases_.addAll(other.outputAliases_);
            }
            onChanged();
          }
        } else {
          if (!other.outputAliases_.isEmpty()) {
            if (outputAliasesBuilder_.isEmpty()) {
              outputAliasesBuilder_.dispose();
              outputAliasesBuilder_ = null;
              outputAliases_ = other.outputAliases_;
              bitField0_ = (bitField0_ & ~0x00000010);
              outputAliasesBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getOutputAliasesFieldBuilder() : null;
            } else {
              outputAliasesBuilder_.addAllMessages(other.outputAliases_);
            }
          }
        }
        switch (other.getTargetCase()) {
          case TASK_NODE: {
            mergeTaskNode(other.getTaskNode());
            break;
          }
          case WORKFLOW_NODE: {
            mergeWorkflowNode(other.getWorkflowNode());
            break;
          }
          case BRANCH_NODE: {
            mergeBranchNode(other.getBranchNode());
            break;
          }
          case GATE_NODE: {
            mergeGateNode(other.getGateNode());
            break;
          }
          case TARGET_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        flyteidl.core.Workflow.Node parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (flyteidl.core.Workflow.Node) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int targetCase_ = 0;
      private java.lang.Object target_;
      public TargetCase
          getTargetCase() {
        return TargetCase.forNumber(
            targetCase_);
      }

      public Builder clearTarget() {
        targetCase_ = 0;
        target_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private java.lang.Object id_ = "";
      /**
       * <pre>
       * A workflow-level unique identifier that identifies this node in the workflow. 'inputs' and 'outputs' are reserved
       * node ids that cannot be used by other nodes.
       * </pre>
       *
       * <code>string id = 1;</code>
       */
      public java.lang.String getId() {
        java.lang.Object ref = id_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          id_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * A workflow-level unique identifier that identifies this node in the workflow. 'inputs' and 'outputs' are reserved
       * node ids that cannot be used by other nodes.
       * </pre>
       *
       * <code>string id = 1;</code>
       */
      public com.google.protobuf.ByteString
          getIdBytes() {
        java.lang.Object ref = id_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          id_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * A workflow-level unique identifier that identifies this node in the workflow. 'inputs' and 'outputs' are reserved
       * node ids that cannot be used by other nodes.
       * </pre>
       *
       * <code>string id = 1;</code>
       */
      public Builder setId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        id_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A workflow-level unique identifier that identifies this node in the workflow. 'inputs' and 'outputs' are reserved
       * node ids that cannot be used by other nodes.
       * </pre>
       *
       * <code>string id = 1;</code>
       */
      public Builder clearId() {
        
        id_ = getDefaultInstance().getId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A workflow-level unique identifier that identifies this node in the workflow. 'inputs' and 'outputs' are reserved
       * node ids that cannot be used by other nodes.
       * </pre>
       *
       * <code>string id = 1;</code>
       */
      public Builder setIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        id_ = value;
        onChanged();
        return this;
      }

      private flyteidl.core.Workflow.NodeMetadata metadata_;
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Workflow.NodeMetadata, flyteidl.core.Workflow.NodeMetadata.Builder, flyteidl.core.Workflow.NodeMetadataOrBuilder> metadataBuilder_;
      /**
       * <pre>
       * Extra metadata about the node.
       * </pre>
       *
       * <code>.flyteidl.core.NodeMetadata metadata = 2;</code>
       */
      public boolean hasMetadata() {
        return metadataBuilder_ != null || metadata_ != null;
      }
      /**
       * <pre>
       * Extra metadata about the node.
       * </pre>
       *
       * <code>.flyteidl.core.NodeMetadata metadata = 2;</code>
       */
      public flyteidl.core.Workflow.NodeMetadata getMetadata() {
        if (metadataBuilder_ == null) {
          return metadata_ == null ? flyteidl.core.Workflow.NodeMetadata.getDefaultInstance() : metadata_;
        } else {
          return metadataBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Extra metadata about the node.
       * </pre>
       *
       * <code>.flyteidl.core.NodeMetadata metadata = 2;</code>
       */
      public Builder setMetadata(flyteidl.core.Workflow.NodeMetadata value) {
        if (metadataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          metadata_ = value;
          onChanged();
        } else {
          metadataBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Extra metadata about the node.
       * </pre>
       *
       * <code>.flyteidl.core.NodeMetadata metadata = 2;</code>
       */
      public Builder setMetadata(
          flyteidl.core.Workflow.NodeMetadata.Builder builderForValue) {
        if (metadataBuilder_ == null) {
          metadata_ = builderForValue.build();
          onChanged();
        } else {
          metadataBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Extra metadata about the node.
       * </pre>
       *
       * <code>.flyteidl.core.NodeMetadata metadata = 2;</code>
       */
      public Builder mergeMetadata(flyteidl.core.Workflow.NodeMetadata value) {
        if (metadataBuilder_ == null) {
          if (metadata_ != null) {
            metadata_ =
              flyteidl.core.Workflow.NodeMetadata.newBuilder(metadata_).mergeFrom(value).buildPartial();
          } else {
            metadata_ = value;
          }
          onChanged();
        } else {
          metadataBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Extra metadata about the node.
       * </pre>
       *
       * <code>.flyteidl.core.NodeMetadata metadata = 2;</code>
       */
      public Builder clearMetadata() {
        if (metadataBuilder_ == null) {
          metadata_ = null;
          onChanged();
        } else {
          metadata_ = null;
          metadataBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Extra metadata about the node.
       * </pre>
       *
       * <code>.flyteidl.core.NodeMetadata metadata = 2;</code>
       */
      public flyteidl.core.Workflow.NodeMetadata.Builder getMetadataBuilder() {
        
        onChanged();
        return getMetadataFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Extra metadata about the node.
       * </pre>
       *
       * <code>.flyteidl.core.NodeMetadata metadata = 2;</code>
       */
      public flyteidl.core.Workflow.NodeMetadataOrBuilder getMetadataOrBuilder() {
        if (metadataBuilder_ != null) {
          return metadataBuilder_.getMessageOrBuilder();
        } else {
          return metadata_ == null ?
              flyteidl.core.Workflow.NodeMetadata.getDefaultInstance() : metadata_;
        }
      }
      /**
       * <pre>
       * Extra metadata about the node.
       * </pre>
       *
       * <code>.flyteidl.core.NodeMetadata metadata = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Workflow.NodeMetadata, flyteidl.core.Workflow.NodeMetadata.Builder, flyteidl.core.Workflow.NodeMetadataOrBuilder> 
          getMetadataFieldBuilder() {
        if (metadataBuilder_ == null) {
          metadataBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              flyteidl.core.Workflow.NodeMetadata, flyteidl.core.Workflow.NodeMetadata.Builder, flyteidl.core.Workflow.NodeMetadataOrBuilder>(
                  getMetadata(),
                  getParentForChildren(),
                  isClean());
          metadata_ = null;
        }
        return metadataBuilder_;
      }

      private java.util.List<flyteidl.core.Literals.Binding> inputs_ =
        java.util.Collections.emptyList();
      private void ensureInputsIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          inputs_ = new java.util.ArrayList<flyteidl.core.Literals.Binding>(inputs_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          flyteidl.core.Literals.Binding, flyteidl.core.Literals.Binding.Builder, flyteidl.core.Literals.BindingOrBuilder> inputsBuilder_;

      /**
       * <pre>
       * Specifies how to bind the underlying interface's inputs. All required inputs specified in the underlying interface
       * must be fulfilled.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Binding inputs = 3;</code>
       */
      public java.util.List<flyteidl.core.Literals.Binding> getInputsList() {
        if (inputsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(inputs_);
        } else {
          return inputsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Specifies how to bind the underlying interface's inputs. All required inputs specified in the underlying interface
       * must be fulfilled.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Binding inputs = 3;</code>
       */
      public int getInputsCount() {
        if (inputsBuilder_ == null) {
          return inputs_.size();
        } else {
          return inputsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Specifies how to bind the underlying interface's inputs. All required inputs specified in the underlying interface
       * must be fulfilled.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Binding inputs = 3;</code>
       */
      public flyteidl.core.Literals.Binding getInputs(int index) {
        if (inputsBuilder_ == null) {
          return inputs_.get(index);
        } else {
          return inputsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Specifies how to bind the underlying interface's inputs. All required inputs specified in the underlying interface
       * must be fulfilled.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Binding inputs = 3;</code>
       */
      public Builder setInputs(
          int index, flyteidl.core.Literals.Binding value) {
        if (inputsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInputsIsMutable();
          inputs_.set(index, value);
          onChanged();
        } else {
          inputsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies how to bind the underlying interface's inputs. All required inputs specified in the underlying interface
       * must be fulfilled.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Binding inputs = 3;</code>
       */
      public Builder setInputs(
          int index, flyteidl.core.Literals.Binding.Builder builderForValue) {
        if (inputsBuilder_ == null) {
          ensureInputsIsMutable();
          inputs_.set(index, builderForValue.build());
          onChanged();
        } else {
          inputsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Specifies how to bind the underlying interface's inputs. All required inputs specified in the underlying interface
       * must be fulfilled.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Binding inputs = 3;</code>
       */
      public Builder addInputs(flyteidl.core.Literals.Binding value) {
        if (inputsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInputsIsMutable();
          inputs_.add(value);
          onChanged();
        } else {
          inputsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies how to bind the underlying interface's inputs. All required inputs specified in the underlying interface
       * must be fulfilled.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Binding inputs = 3;</code>
       */
      public Builder addInputs(
          int index, flyteidl.core.Literals.Binding value) {
        if (inputsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInputsIsMutable();
          inputs_.add(index, value);
          onChanged();
        } else {
          inputsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies how to bind the underlying interface's inputs. All required inputs specified in the underlying interface
       * must be fulfilled.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Binding inputs = 3;</code>
       */
      public Builder addInputs(
          flyteidl.core.Literals.Binding.Builder builderForValue) {
        if (inputsBuilder_ == null) {
          ensureInputsIsMutable();
          inputs_.add(builderForValue.build());
          onChanged();
        } else {
          inputsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Specifies how to bind the underlying interface's inputs. All required inputs specified in the underlying interface
       * must be fulfilled.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Binding inputs = 3;</code>
       */
      public Builder addInputs(
          int index, flyteidl.core.Literals.Binding.Builder builderForValue) {
        if (inputsBuilder_ == null) {
          ensureInputsIsMutable();
          inputs_.add(index, builderForValue.build());
          onChanged();
        } else {
          inputsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Specifies how to bind the underlying interface's inputs. All required inputs specified in the underlying interface
       * must be fulfilled.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Binding inputs = 3;</code>
       */
      public Builder addAllInputs(
          java.lang.Iterable<? extends flyteidl.core.Literals.Binding> values) {
        if (inputsBuilder_ == null) {
          ensureInputsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, inputs_);
          onChanged();
        } else {
          inputsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies how to bind the underlying interface's inputs. All required inputs specified in the underlying interface
       * must be fulfilled.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Binding inputs = 3;</code>
       */
      public Builder clearInputs() {
        if (inputsBuilder_ == null) {
          inputs_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          inputsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Specifies how to bind the underlying interface's inputs. All required inputs specified in the underlying interface
       * must be fulfilled.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Binding inputs = 3;</code>
       */
      public Builder removeInputs(int index) {
        if (inputsBuilder_ == null) {
          ensureInputsIsMutable();
          inputs_.remove(index);
          onChanged();
        } else {
          inputsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies how to bind the underlying interface's inputs. All required inputs specified in the underlying interface
       * must be fulfilled.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Binding inputs = 3;</code>
       */
      public flyteidl.core.Literals.Binding.Builder getInputsBuilder(
          int index) {
        return getInputsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Specifies how to bind the underlying interface's inputs. All required inputs specified in the underlying interface
       * must be fulfilled.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Binding inputs = 3;</code>
       */
      public flyteidl.core.Literals.BindingOrBuilder getInputsOrBuilder(
          int index) {
        if (inputsBuilder_ == null) {
          return inputs_.get(index);  } else {
          return inputsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Specifies how to bind the underlying interface's inputs. All required inputs specified in the underlying interface
       * must be fulfilled.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Binding inputs = 3;</code>
       */
      public java.util.List<? extends flyteidl.core.Literals.BindingOrBuilder> 
           getInputsOrBuilderList() {
        if (inputsBuilder_ != null) {
          return inputsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(inputs_);
        }
      }
      /**
       * <pre>
       * Specifies how to bind the underlying interface's inputs. All required inputs specified in the underlying interface
       * must be fulfilled.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Binding inputs = 3;</code>
       */
      public flyteidl.core.Literals.Binding.Builder addInputsBuilder() {
        return getInputsFieldBuilder().addBuilder(
            flyteidl.core.Literals.Binding.getDefaultInstance());
      }
      /**
       * <pre>
       * Specifies how to bind the underlying interface's inputs. All required inputs specified in the underlying interface
       * must be fulfilled.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Binding inputs = 3;</code>
       */
      public flyteidl.core.Literals.Binding.Builder addInputsBuilder(
          int index) {
        return getInputsFieldBuilder().addBuilder(
            index, flyteidl.core.Literals.Binding.getDefaultInstance());
      }
      /**
       * <pre>
       * Specifies how to bind the underlying interface's inputs. All required inputs specified in the underlying interface
       * must be fulfilled.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Binding inputs = 3;</code>
       */
      public java.util.List<flyteidl.core.Literals.Binding.Builder> 
           getInputsBuilderList() {
        return getInputsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          flyteidl.core.Literals.Binding, flyteidl.core.Literals.Binding.Builder, flyteidl.core.Literals.BindingOrBuilder> 
          getInputsFieldBuilder() {
        if (inputsBuilder_ == null) {
          inputsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              flyteidl.core.Literals.Binding, flyteidl.core.Literals.Binding.Builder, flyteidl.core.Literals.BindingOrBuilder>(
                  inputs_,
                  ((bitField0_ & 0x00000004) != 0),
                  getParentForChildren(),
                  isClean());
          inputs_ = null;
        }
        return inputsBuilder_;
      }

      private com.google.protobuf.LazyStringList upstreamNodeIds_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureUpstreamNodeIdsIsMutable() {
        if (!((bitField0_ & 0x00000008) != 0)) {
          upstreamNodeIds_ = new com.google.protobuf.LazyStringArrayList(upstreamNodeIds_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <pre>
       *+optional Specifies execution dependency for this node ensuring it will only get scheduled to run after all its
       * upstream nodes have completed. This node will have an implicit dependency on any node that appears in inputs
       * field.
       * </pre>
       *
       * <code>repeated string upstream_node_ids = 4;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getUpstreamNodeIdsList() {
        return upstreamNodeIds_.getUnmodifiableView();
      }
      /**
       * <pre>
       *+optional Specifies execution dependency for this node ensuring it will only get scheduled to run after all its
       * upstream nodes have completed. This node will have an implicit dependency on any node that appears in inputs
       * field.
       * </pre>
       *
       * <code>repeated string upstream_node_ids = 4;</code>
       */
      public int getUpstreamNodeIdsCount() {
        return upstreamNodeIds_.size();
      }
      /**
       * <pre>
       *+optional Specifies execution dependency for this node ensuring it will only get scheduled to run after all its
       * upstream nodes have completed. This node will have an implicit dependency on any node that appears in inputs
       * field.
       * </pre>
       *
       * <code>repeated string upstream_node_ids = 4;</code>
       */
      public java.lang.String getUpstreamNodeIds(int index) {
        return upstreamNodeIds_.get(index);
      }
      /**
       * <pre>
       *+optional Specifies execution dependency for this node ensuring it will only get scheduled to run after all its
       * upstream nodes have completed. This node will have an implicit dependency on any node that appears in inputs
       * field.
       * </pre>
       *
       * <code>repeated string upstream_node_ids = 4;</code>
       */
      public com.google.protobuf.ByteString
          getUpstreamNodeIdsBytes(int index) {
        return upstreamNodeIds_.getByteString(index);
      }
      /**
       * <pre>
       *+optional Specifies execution dependency for this node ensuring it will only get scheduled to run after all its
       * upstream nodes have completed. This node will have an implicit dependency on any node that appears in inputs
       * field.
       * </pre>
       *
       * <code>repeated string upstream_node_ids = 4;</code>
       */
      public Builder setUpstreamNodeIds(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureUpstreamNodeIdsIsMutable();
        upstreamNodeIds_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *+optional Specifies execution dependency for this node ensuring it will only get scheduled to run after all its
       * upstream nodes have completed. This node will have an implicit dependency on any node that appears in inputs
       * field.
       * </pre>
       *
       * <code>repeated string upstream_node_ids = 4;</code>
       */
      public Builder addUpstreamNodeIds(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureUpstreamNodeIdsIsMutable();
        upstreamNodeIds_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *+optional Specifies execution dependency for this node ensuring it will only get scheduled to run after all its
       * upstream nodes have completed. This node will have an implicit dependency on any node that appears in inputs
       * field.
       * </pre>
       *
       * <code>repeated string upstream_node_ids = 4;</code>
       */
      public Builder addAllUpstreamNodeIds(
          java.lang.Iterable<java.lang.String> values) {
        ensureUpstreamNodeIdsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, upstreamNodeIds_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *+optional Specifies execution dependency for this node ensuring it will only get scheduled to run after all its
       * upstream nodes have completed. This node will have an implicit dependency on any node that appears in inputs
       * field.
       * </pre>
       *
       * <code>repeated string upstream_node_ids = 4;</code>
       */
      public Builder clearUpstreamNodeIds() {
        upstreamNodeIds_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *+optional Specifies execution dependency for this node ensuring it will only get scheduled to run after all its
       * upstream nodes have completed. This node will have an implicit dependency on any node that appears in inputs
       * field.
       * </pre>
       *
       * <code>repeated string upstream_node_ids = 4;</code>
       */
      public Builder addUpstreamNodeIdsBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        ensureUpstreamNodeIdsIsMutable();
        upstreamNodeIds_.add(value);
        onChanged();
        return this;
      }

      private java.util.List<flyteidl.core.Workflow.Alias> outputAliases_ =
        java.util.Collections.emptyList();
      private void ensureOutputAliasesIsMutable() {
        if (!((bitField0_ & 0x00000010) != 0)) {
          outputAliases_ = new java.util.ArrayList<flyteidl.core.Workflow.Alias>(outputAliases_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          flyteidl.core.Workflow.Alias, flyteidl.core.Workflow.Alias.Builder, flyteidl.core.Workflow.AliasOrBuilder> outputAliasesBuilder_;

      /**
       * <pre>
       *+optional. A node can define aliases for a subset of its outputs. This is particularly useful if different nodes
       * need to conform to the same interface (e.g. all branches in a branch node). Downstream nodes must refer to this
       * nodes outputs using the alias if one's specified.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Alias output_aliases = 5;</code>
       */
      public java.util.List<flyteidl.core.Workflow.Alias> getOutputAliasesList() {
        if (outputAliasesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(outputAliases_);
        } else {
          return outputAliasesBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       *+optional. A node can define aliases for a subset of its outputs. This is particularly useful if different nodes
       * need to conform to the same interface (e.g. all branches in a branch node). Downstream nodes must refer to this
       * nodes outputs using the alias if one's specified.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Alias output_aliases = 5;</code>
       */
      public int getOutputAliasesCount() {
        if (outputAliasesBuilder_ == null) {
          return outputAliases_.size();
        } else {
          return outputAliasesBuilder_.getCount();
        }
      }
      /**
       * <pre>
       *+optional. A node can define aliases for a subset of its outputs. This is particularly useful if different nodes
       * need to conform to the same interface (e.g. all branches in a branch node). Downstream nodes must refer to this
       * nodes outputs using the alias if one's specified.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Alias output_aliases = 5;</code>
       */
      public flyteidl.core.Workflow.Alias getOutputAliases(int index) {
        if (outputAliasesBuilder_ == null) {
          return outputAliases_.get(index);
        } else {
          return outputAliasesBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       *+optional. A node can define aliases for a subset of its outputs. This is particularly useful if different nodes
       * need to conform to the same interface (e.g. all branches in a branch node). Downstream nodes must refer to this
       * nodes outputs using the alias if one's specified.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Alias output_aliases = 5;</code>
       */
      public Builder setOutputAliases(
          int index, flyteidl.core.Workflow.Alias value) {
        if (outputAliasesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutputAliasesIsMutable();
          outputAliases_.set(index, value);
          onChanged();
        } else {
          outputAliasesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       *+optional. A node can define aliases for a subset of its outputs. This is particularly useful if different nodes
       * need to conform to the same interface (e.g. all branches in a branch node). Downstream nodes must refer to this
       * nodes outputs using the alias if one's specified.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Alias output_aliases = 5;</code>
       */
      public Builder setOutputAliases(
          int index, flyteidl.core.Workflow.Alias.Builder builderForValue) {
        if (outputAliasesBuilder_ == null) {
          ensureOutputAliasesIsMutable();
          outputAliases_.set(index, builderForValue.build());
          onChanged();
        } else {
          outputAliasesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *+optional. A node can define aliases for a subset of its outputs. This is particularly useful if different nodes
       * need to conform to the same interface (e.g. all branches in a branch node). Downstream nodes must refer to this
       * nodes outputs using the alias if one's specified.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Alias output_aliases = 5;</code>
       */
      public Builder addOutputAliases(flyteidl.core.Workflow.Alias value) {
        if (outputAliasesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutputAliasesIsMutable();
          outputAliases_.add(value);
          onChanged();
        } else {
          outputAliasesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       *+optional. A node can define aliases for a subset of its outputs. This is particularly useful if different nodes
       * need to conform to the same interface (e.g. all branches in a branch node). Downstream nodes must refer to this
       * nodes outputs using the alias if one's specified.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Alias output_aliases = 5;</code>
       */
      public Builder addOutputAliases(
          int index, flyteidl.core.Workflow.Alias value) {
        if (outputAliasesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutputAliasesIsMutable();
          outputAliases_.add(index, value);
          onChanged();
        } else {
          outputAliasesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       *+optional. A node can define aliases for a subset of its outputs. This is particularly useful if different nodes
       * need to conform to the same interface (e.g. all branches in a branch node). Downstream nodes must refer to this
       * nodes outputs using the alias if one's specified.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Alias output_aliases = 5;</code>
       */
      public Builder addOutputAliases(
          flyteidl.core.Workflow.Alias.Builder builderForValue) {
        if (outputAliasesBuilder_ == null) {
          ensureOutputAliasesIsMutable();
          outputAliases_.add(builderForValue.build());
          onChanged();
        } else {
          outputAliasesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *+optional. A node can define aliases for a subset of its outputs. This is particularly useful if different nodes
       * need to conform to the same interface (e.g. all branches in a branch node). Downstream nodes must refer to this
       * nodes outputs using the alias if one's specified.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Alias output_aliases = 5;</code>
       */
      public Builder addOutputAliases(
          int index, flyteidl.core.Workflow.Alias.Builder builderForValue) {
        if (outputAliasesBuilder_ == null) {
          ensureOutputAliasesIsMutable();
          outputAliases_.add(index, builderForValue.build());
          onChanged();
        } else {
          outputAliasesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *+optional. A node can define aliases for a subset of its outputs. This is particularly useful if different nodes
       * need to conform to the same interface (e.g. all branches in a branch node). Downstream nodes must refer to this
       * nodes outputs using the alias if one's specified.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Alias output_aliases = 5;</code>
       */
      public Builder addAllOutputAliases(
          java.lang.Iterable<? extends flyteidl.core.Workflow.Alias> values) {
        if (outputAliasesBuilder_ == null) {
          ensureOutputAliasesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, outputAliases_);
          onChanged();
        } else {
          outputAliasesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       *+optional. A node can define aliases for a subset of its outputs. This is particularly useful if different nodes
       * need to conform to the same interface (e.g. all branches in a branch node). Downstream nodes must refer to this
       * nodes outputs using the alias if one's specified.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Alias output_aliases = 5;</code>
       */
      public Builder clearOutputAliases() {
        if (outputAliasesBuilder_ == null) {
          outputAliases_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          outputAliasesBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       *+optional. A node can define aliases for a subset of its outputs. This is particularly useful if different nodes
       * need to conform to the same interface (e.g. all branches in a branch node). Downstream nodes must refer to this
       * nodes outputs using the alias if one's specified.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Alias output_aliases = 5;</code>
       */
      public Builder removeOutputAliases(int index) {
        if (outputAliasesBuilder_ == null) {
          ensureOutputAliasesIsMutable();
          outputAliases_.remove(index);
          onChanged();
        } else {
          outputAliasesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       *+optional. A node can define aliases for a subset of its outputs. This is particularly useful if different nodes
       * need to conform to the same interface (e.g. all branches in a branch node). Downstream nodes must refer to this
       * nodes outputs using the alias if one's specified.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Alias output_aliases = 5;</code>
       */
      public flyteidl.core.Workflow.Alias.Builder getOutputAliasesBuilder(
          int index) {
        return getOutputAliasesFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       *+optional. A node can define aliases for a subset of its outputs. This is particularly useful if different nodes
       * need to conform to the same interface (e.g. all branches in a branch node). Downstream nodes must refer to this
       * nodes outputs using the alias if one's specified.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Alias output_aliases = 5;</code>
       */
      public flyteidl.core.Workflow.AliasOrBuilder getOutputAliasesOrBuilder(
          int index) {
        if (outputAliasesBuilder_ == null) {
          return outputAliases_.get(index);  } else {
          return outputAliasesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       *+optional. A node can define aliases for a subset of its outputs. This is particularly useful if different nodes
       * need to conform to the same interface (e.g. all branches in a branch node). Downstream nodes must refer to this
       * nodes outputs using the alias if one's specified.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Alias output_aliases = 5;</code>
       */
      public java.util.List<? extends flyteidl.core.Workflow.AliasOrBuilder> 
           getOutputAliasesOrBuilderList() {
        if (outputAliasesBuilder_ != null) {
          return outputAliasesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(outputAliases_);
        }
      }
      /**
       * <pre>
       *+optional. A node can define aliases for a subset of its outputs. This is particularly useful if different nodes
       * need to conform to the same interface (e.g. all branches in a branch node). Downstream nodes must refer to this
       * nodes outputs using the alias if one's specified.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Alias output_aliases = 5;</code>
       */
      public flyteidl.core.Workflow.Alias.Builder addOutputAliasesBuilder() {
        return getOutputAliasesFieldBuilder().addBuilder(
            flyteidl.core.Workflow.Alias.getDefaultInstance());
      }
      /**
       * <pre>
       *+optional. A node can define aliases for a subset of its outputs. This is particularly useful if different nodes
       * need to conform to the same interface (e.g. all branches in a branch node). Downstream nodes must refer to this
       * nodes outputs using the alias if one's specified.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Alias output_aliases = 5;</code>
       */
      public flyteidl.core.Workflow.Alias.Builder addOutputAliasesBuilder(
          int index) {
        return getOutputAliasesFieldBuilder().addBuilder(
            index, flyteidl.core.Workflow.Alias.getDefaultInstance());
      }
      /**
       * <pre>
       *+optional. A node can define aliases for a subset of its outputs. This is particularly useful if different nodes
       * need to conform to the same interface (e.g. all branches in a branch node). Downstream nodes must refer to this
       * nodes outputs using the alias if one's specified.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Alias output_aliases = 5;</code>
       */
      public java.util.List<flyteidl.core.Workflow.Alias.Builder> 
           getOutputAliasesBuilderList() {
        return getOutputAliasesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          flyteidl.core.Workflow.Alias, flyteidl.core.Workflow.Alias.Builder, flyteidl.core.Workflow.AliasOrBuilder> 
          getOutputAliasesFieldBuilder() {
        if (outputAliasesBuilder_ == null) {
          outputAliasesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              flyteidl.core.Workflow.Alias, flyteidl.core.Workflow.Alias.Builder, flyteidl.core.Workflow.AliasOrBuilder>(
                  outputAliases_,
                  ((bitField0_ & 0x00000010) != 0),
                  getParentForChildren(),
                  isClean());
          outputAliases_ = null;
        }
        return outputAliasesBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Workflow.TaskNode, flyteidl.core.Workflow.TaskNode.Builder, flyteidl.core.Workflow.TaskNodeOrBuilder> taskNodeBuilder_;
      /**
       * <pre>
       * Information about the Task to execute in this node.
       * </pre>
       *
       * <code>.flyteidl.core.TaskNode task_node = 6;</code>
       */
      public boolean hasTaskNode() {
        return targetCase_ == 6;
      }
      /**
       * <pre>
       * Information about the Task to execute in this node.
       * </pre>
       *
       * <code>.flyteidl.core.TaskNode task_node = 6;</code>
       */
      public flyteidl.core.Workflow.TaskNode getTaskNode() {
        if (taskNodeBuilder_ == null) {
          if (targetCase_ == 6) {
            return (flyteidl.core.Workflow.TaskNode) target_;
          }
          return flyteidl.core.Workflow.TaskNode.getDefaultInstance();
        } else {
          if (targetCase_ == 6) {
            return taskNodeBuilder_.getMessage();
          }
          return flyteidl.core.Workflow.TaskNode.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Information about the Task to execute in this node.
       * </pre>
       *
       * <code>.flyteidl.core.TaskNode task_node = 6;</code>
       */
      public Builder setTaskNode(flyteidl.core.Workflow.TaskNode value) {
        if (taskNodeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          target_ = value;
          onChanged();
        } else {
          taskNodeBuilder_.setMessage(value);
        }
        targetCase_ = 6;
        return this;
      }
      /**
       * <pre>
       * Information about the Task to execute in this node.
       * </pre>
       *
       * <code>.flyteidl.core.TaskNode task_node = 6;</code>
       */
      public Builder setTaskNode(
          flyteidl.core.Workflow.TaskNode.Builder builderForValue) {
        if (taskNodeBuilder_ == null) {
          target_ = builderForValue.build();
          onChanged();
        } else {
          taskNodeBuilder_.setMessage(builderForValue.build());
        }
        targetCase_ = 6;
        return this;
      }
      /**
       * <pre>
       * Information about the Task to execute in this node.
       * </pre>
       *
       * <code>.flyteidl.core.TaskNode task_node = 6;</code>
       */
      public Builder mergeTaskNode(flyteidl.core.Workflow.TaskNode value) {
        if (taskNodeBuilder_ == null) {
          if (targetCase_ == 6 &&
              target_ != flyteidl.core.Workflow.TaskNode.getDefaultInstance()) {
            target_ = flyteidl.core.Workflow.TaskNode.newBuilder((flyteidl.core.Workflow.TaskNode) target_)
                .mergeFrom(value).buildPartial();
          } else {
            target_ = value;
          }
          onChanged();
        } else {
          if (targetCase_ == 6) {
            taskNodeBuilder_.mergeFrom(value);
          }
          taskNodeBuilder_.setMessage(value);
        }
        targetCase_ = 6;
        return this;
      }
      /**
       * <pre>
       * Information about the Task to execute in this node.
       * </pre>
       *
       * <code>.flyteidl.core.TaskNode task_node = 6;</code>
       */
      public Builder clearTaskNode() {
        if (taskNodeBuilder_ == null) {
          if (targetCase_ == 6) {
            targetCase_ = 0;
            target_ = null;
            onChanged();
          }
        } else {
          if (targetCase_ == 6) {
            targetCase_ = 0;
            target_ = null;
          }
          taskNodeBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Information about the Task to execute in this node.
       * </pre>
       *
       * <code>.flyteidl.core.TaskNode task_node = 6;</code>
       */
      public flyteidl.core.Workflow.TaskNode.Builder getTaskNodeBuilder() {
        return getTaskNodeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Information about the Task to execute in this node.
       * </pre>
       *
       * <code>.flyteidl.core.TaskNode task_node = 6;</code>
       */
      public flyteidl.core.Workflow.TaskNodeOrBuilder getTaskNodeOrBuilder() {
        if ((targetCase_ == 6) && (taskNodeBuilder_ != null)) {
          return taskNodeBuilder_.getMessageOrBuilder();
        } else {
          if (targetCase_ == 6) {
            return (flyteidl.core.Workflow.TaskNode) target_;
          }
          return flyteidl.core.Workflow.TaskNode.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Information about the Task to execute in this node.
       * </pre>
       *
       * <code>.flyteidl.core.TaskNode task_node = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Workflow.TaskNode, flyteidl.core.Workflow.TaskNode.Builder, flyteidl.core.Workflow.TaskNodeOrBuilder> 
          getTaskNodeFieldBuilder() {
        if (taskNodeBuilder_ == null) {
          if (!(targetCase_ == 6)) {
            target_ = flyteidl.core.Workflow.TaskNode.getDefaultInstance();
          }
          taskNodeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              flyteidl.core.Workflow.TaskNode, flyteidl.core.Workflow.TaskNode.Builder, flyteidl.core.Workflow.TaskNodeOrBuilder>(
                  (flyteidl.core.Workflow.TaskNode) target_,
                  getParentForChildren(),
                  isClean());
          target_ = null;
        }
        targetCase_ = 6;
        onChanged();;
        return taskNodeBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Workflow.WorkflowNode, flyteidl.core.Workflow.WorkflowNode.Builder, flyteidl.core.Workflow.WorkflowNodeOrBuilder> workflowNodeBuilder_;
      /**
       * <pre>
       * Information about the Workflow to execute in this mode.
       * </pre>
       *
       * <code>.flyteidl.core.WorkflowNode workflow_node = 7;</code>
       */
      public boolean hasWorkflowNode() {
        return targetCase_ == 7;
      }
      /**
       * <pre>
       * Information about the Workflow to execute in this mode.
       * </pre>
       *
       * <code>.flyteidl.core.WorkflowNode workflow_node = 7;</code>
       */
      public flyteidl.core.Workflow.WorkflowNode getWorkflowNode() {
        if (workflowNodeBuilder_ == null) {
          if (targetCase_ == 7) {
            return (flyteidl.core.Workflow.WorkflowNode) target_;
          }
          return flyteidl.core.Workflow.WorkflowNode.getDefaultInstance();
        } else {
          if (targetCase_ == 7) {
            return workflowNodeBuilder_.getMessage();
          }
          return flyteidl.core.Workflow.WorkflowNode.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Information about the Workflow to execute in this mode.
       * </pre>
       *
       * <code>.flyteidl.core.WorkflowNode workflow_node = 7;</code>
       */
      public Builder setWorkflowNode(flyteidl.core.Workflow.WorkflowNode value) {
        if (workflowNodeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          target_ = value;
          onChanged();
        } else {
          workflowNodeBuilder_.setMessage(value);
        }
        targetCase_ = 7;
        return this;
      }
      /**
       * <pre>
       * Information about the Workflow to execute in this mode.
       * </pre>
       *
       * <code>.flyteidl.core.WorkflowNode workflow_node = 7;</code>
       */
      public Builder setWorkflowNode(
          flyteidl.core.Workflow.WorkflowNode.Builder builderForValue) {
        if (workflowNodeBuilder_ == null) {
          target_ = builderForValue.build();
          onChanged();
        } else {
          workflowNodeBuilder_.setMessage(builderForValue.build());
        }
        targetCase_ = 7;
        return this;
      }
      /**
       * <pre>
       * Information about the Workflow to execute in this mode.
       * </pre>
       *
       * <code>.flyteidl.core.WorkflowNode workflow_node = 7;</code>
       */
      public Builder mergeWorkflowNode(flyteidl.core.Workflow.WorkflowNode value) {
        if (workflowNodeBuilder_ == null) {
          if (targetCase_ == 7 &&
              target_ != flyteidl.core.Workflow.WorkflowNode.getDefaultInstance()) {
            target_ = flyteidl.core.Workflow.WorkflowNode.newBuilder((flyteidl.core.Workflow.WorkflowNode) target_)
                .mergeFrom(value).buildPartial();
          } else {
            target_ = value;
          }
          onChanged();
        } else {
          if (targetCase_ == 7) {
            workflowNodeBuilder_.mergeFrom(value);
          }
          workflowNodeBuilder_.setMessage(value);
        }
        targetCase_ = 7;
        return this;
      }
      /**
       * <pre>
       * Information about the Workflow to execute in this mode.
       * </pre>
       *
       * <code>.flyteidl.core.WorkflowNode workflow_node = 7;</code>
       */
      public Builder clearWorkflowNode() {
        if (workflowNodeBuilder_ == null) {
          if (targetCase_ == 7) {
            targetCase_ = 0;
            target_ = null;
            onChanged();
          }
        } else {
          if (targetCase_ == 7) {
            targetCase_ = 0;
            target_ = null;
          }
          workflowNodeBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Information about the Workflow to execute in this mode.
       * </pre>
       *
       * <code>.flyteidl.core.WorkflowNode workflow_node = 7;</code>
       */
      public flyteidl.core.Workflow.WorkflowNode.Builder getWorkflowNodeBuilder() {
        return getWorkflowNodeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Information about the Workflow to execute in this mode.
       * </pre>
       *
       * <code>.flyteidl.core.WorkflowNode workflow_node = 7;</code>
       */
      public flyteidl.core.Workflow.WorkflowNodeOrBuilder getWorkflowNodeOrBuilder() {
        if ((targetCase_ == 7) && (workflowNodeBuilder_ != null)) {
          return workflowNodeBuilder_.getMessageOrBuilder();
        } else {
          if (targetCase_ == 7) {
            return (flyteidl.core.Workflow.WorkflowNode) target_;
          }
          return flyteidl.core.Workflow.WorkflowNode.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Information about the Workflow to execute in this mode.
       * </pre>
       *
       * <code>.flyteidl.core.WorkflowNode workflow_node = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Workflow.WorkflowNode, flyteidl.core.Workflow.WorkflowNode.Builder, flyteidl.core.Workflow.WorkflowNodeOrBuilder> 
          getWorkflowNodeFieldBuilder() {
        if (workflowNodeBuilder_ == null) {
          if (!(targetCase_ == 7)) {
            target_ = flyteidl.core.Workflow.WorkflowNode.getDefaultInstance();
          }
          workflowNodeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              flyteidl.core.Workflow.WorkflowNode, flyteidl.core.Workflow.WorkflowNode.Builder, flyteidl.core.Workflow.WorkflowNodeOrBuilder>(
                  (flyteidl.core.Workflow.WorkflowNode) target_,
                  getParentForChildren(),
                  isClean());
          target_ = null;
        }
        targetCase_ = 7;
        onChanged();;
        return workflowNodeBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Workflow.BranchNode, flyteidl.core.Workflow.BranchNode.Builder, flyteidl.core.Workflow.BranchNodeOrBuilder> branchNodeBuilder_;
      /**
       * <pre>
       * Information about the branch node to evaluate in this node.
       * </pre>
       *
       * <code>.flyteidl.core.BranchNode branch_node = 8;</code>
       */
      public boolean hasBranchNode() {
        return targetCase_ == 8;
      }
      /**
       * <pre>
       * Information about the branch node to evaluate in this node.
       * </pre>
       *
       * <code>.flyteidl.core.BranchNode branch_node = 8;</code>
       */
      public flyteidl.core.Workflow.BranchNode getBranchNode() {
        if (branchNodeBuilder_ == null) {
          if (targetCase_ == 8) {
            return (flyteidl.core.Workflow.BranchNode) target_;
          }
          return flyteidl.core.Workflow.BranchNode.getDefaultInstance();
        } else {
          if (targetCase_ == 8) {
            return branchNodeBuilder_.getMessage();
          }
          return flyteidl.core.Workflow.BranchNode.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Information about the branch node to evaluate in this node.
       * </pre>
       *
       * <code>.flyteidl.core.BranchNode branch_node = 8;</code>
       */
      public Builder setBranchNode(flyteidl.core.Workflow.BranchNode value) {
        if (branchNodeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          target_ = value;
          onChanged();
        } else {
          branchNodeBuilder_.setMessage(value);
        }
        targetCase_ = 8;
        return this;
      }
      /**
       * <pre>
       * Information about the branch node to evaluate in this node.
       * </pre>
       *
       * <code>.flyteidl.core.BranchNode branch_node = 8;</code>
       */
      public Builder setBranchNode(
          flyteidl.core.Workflow.BranchNode.Builder builderForValue) {
        if (branchNodeBuilder_ == null) {
          target_ = builderForValue.build();
          onChanged();
        } else {
          branchNodeBuilder_.setMessage(builderForValue.build());
        }
        targetCase_ = 8;
        return this;
      }
      /**
       * <pre>
       * Information about the branch node to evaluate in this node.
       * </pre>
       *
       * <code>.flyteidl.core.BranchNode branch_node = 8;</code>
       */
      public Builder mergeBranchNode(flyteidl.core.Workflow.BranchNode value) {
        if (branchNodeBuilder_ == null) {
          if (targetCase_ == 8 &&
              target_ != flyteidl.core.Workflow.BranchNode.getDefaultInstance()) {
            target_ = flyteidl.core.Workflow.BranchNode.newBuilder((flyteidl.core.Workflow.BranchNode) target_)
                .mergeFrom(value).buildPartial();
          } else {
            target_ = value;
          }
          onChanged();
        } else {
          if (targetCase_ == 8) {
            branchNodeBuilder_.mergeFrom(value);
          }
          branchNodeBuilder_.setMessage(value);
        }
        targetCase_ = 8;
        return this;
      }
      /**
       * <pre>
       * Information about the branch node to evaluate in this node.
       * </pre>
       *
       * <code>.flyteidl.core.BranchNode branch_node = 8;</code>
       */
      public Builder clearBranchNode() {
        if (branchNodeBuilder_ == null) {
          if (targetCase_ == 8) {
            targetCase_ = 0;
            target_ = null;
            onChanged();
          }
        } else {
          if (targetCase_ == 8) {
            targetCase_ = 0;
            target_ = null;
          }
          branchNodeBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Information about the branch node to evaluate in this node.
       * </pre>
       *
       * <code>.flyteidl.core.BranchNode branch_node = 8;</code>
       */
      public flyteidl.core.Workflow.BranchNode.Builder getBranchNodeBuilder() {
        return getBranchNodeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Information about the branch node to evaluate in this node.
       * </pre>
       *
       * <code>.flyteidl.core.BranchNode branch_node = 8;</code>
       */
      public flyteidl.core.Workflow.BranchNodeOrBuilder getBranchNodeOrBuilder() {
        if ((targetCase_ == 8) && (branchNodeBuilder_ != null)) {
          return branchNodeBuilder_.getMessageOrBuilder();
        } else {
          if (targetCase_ == 8) {
            return (flyteidl.core.Workflow.BranchNode) target_;
          }
          return flyteidl.core.Workflow.BranchNode.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Information about the branch node to evaluate in this node.
       * </pre>
       *
       * <code>.flyteidl.core.BranchNode branch_node = 8;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Workflow.BranchNode, flyteidl.core.Workflow.BranchNode.Builder, flyteidl.core.Workflow.BranchNodeOrBuilder> 
          getBranchNodeFieldBuilder() {
        if (branchNodeBuilder_ == null) {
          if (!(targetCase_ == 8)) {
            target_ = flyteidl.core.Workflow.BranchNode.getDefaultInstance();
          }
          branchNodeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              flyteidl.core.Workflow.BranchNode, flyteidl.core.Workflow.BranchNode.Builder, flyteidl.core.Workflow.BranchNodeOrBuilder>(
                  (flyteidl.core.Workflow.BranchNode) target_,
                  getParentForChildren(),
                  isClean());
          target_ = null;
        }
        targetCase_ = 8;
        onChanged();;
        return branchNodeBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Workflow.GateNode, flyteidl.core.Workflow.GateNode.Builder, flyteidl.core.Workflow.GateNodeOrBuilder> gateNodeBuilder_;
      /**
       * <pre>
       * Information about the condition to evaluate in this node.
       * </pre>
       *
       * <code>.flyteidl.core.GateNode gate_node = 9;</code>
       */
      public boolean hasGateNode() {
        return targetCase_ == 9;
      }
      /**
       * <pre>
       * Information about the condition to evaluate in this node.
       * </pre>
       *
       * <code>.flyteidl.core.GateNode gate_node = 9;</code>
       */
      public flyteidl.core.Workflow.GateNode getGateNode() {
        if (gateNodeBuilder_ == null) {
          if (targetCase_ == 9) {
            return (flyteidl.core.Workflow.GateNode) target_;
          }
          return flyteidl.core.Workflow.GateNode.getDefaultInstance();
        } else {
          if (targetCase_ == 9) {
            return gateNodeBuilder_.getMessage();
          }
          return flyteidl.core.Workflow.GateNode.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Information about the condition to evaluate in this node.
       * </pre>
       *
       * <code>.flyteidl.core.GateNode gate_node = 9;</code>
       */
      public Builder setGateNode(flyteidl.core.Workflow.GateNode value) {
        if (gateNodeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          target_ = value;
          onChanged();
        } else {
          gateNodeBuilder_.setMessage(value);
        }
        targetCase_ = 9;
        return this;
      }
      /**
       * <pre>
       * Information about the condition to evaluate in this node.
       * </pre>
       *
       * <code>.flyteidl.core.GateNode gate_node = 9;</code>
       */
      public Builder setGateNode(
          flyteidl.core.Workflow.GateNode.Builder builderForValue) {
        if (gateNodeBuilder_ == null) {
          target_ = builderForValue.build();
          onChanged();
        } else {
          gateNodeBuilder_.setMessage(builderForValue.build());
        }
        targetCase_ = 9;
        return this;
      }
      /**
       * <pre>
       * Information about the condition to evaluate in this node.
       * </pre>
       *
       * <code>.flyteidl.core.GateNode gate_node = 9;</code>
       */
      public Builder mergeGateNode(flyteidl.core.Workflow.GateNode value) {
        if (gateNodeBuilder_ == null) {
          if (targetCase_ == 9 &&
              target_ != flyteidl.core.Workflow.GateNode.getDefaultInstance()) {
            target_ = flyteidl.core.Workflow.GateNode.newBuilder((flyteidl.core.Workflow.GateNode) target_)
                .mergeFrom(value).buildPartial();
          } else {
            target_ = value;
          }
          onChanged();
        } else {
          if (targetCase_ == 9) {
            gateNodeBuilder_.mergeFrom(value);
          }
          gateNodeBuilder_.setMessage(value);
        }
        targetCase_ = 9;
        return this;
      }
      /**
       * <pre>
       * Information about the condition to evaluate in this node.
       * </pre>
       *
       * <code>.flyteidl.core.GateNode gate_node = 9;</code>
       */
      public Builder clearGateNode() {
        if (gateNodeBuilder_ == null) {
          if (targetCase_ == 9) {
            targetCase_ = 0;
            target_ = null;
            onChanged();
          }
        } else {
          if (targetCase_ == 9) {
            targetCase_ = 0;
            target_ = null;
          }
          gateNodeBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Information about the condition to evaluate in this node.
       * </pre>
       *
       * <code>.flyteidl.core.GateNode gate_node = 9;</code>
       */
      public flyteidl.core.Workflow.GateNode.Builder getGateNodeBuilder() {
        return getGateNodeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Information about the condition to evaluate in this node.
       * </pre>
       *
       * <code>.flyteidl.core.GateNode gate_node = 9;</code>
       */
      public flyteidl.core.Workflow.GateNodeOrBuilder getGateNodeOrBuilder() {
        if ((targetCase_ == 9) && (gateNodeBuilder_ != null)) {
          return gateNodeBuilder_.getMessageOrBuilder();
        } else {
          if (targetCase_ == 9) {
            return (flyteidl.core.Workflow.GateNode) target_;
          }
          return flyteidl.core.Workflow.GateNode.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Information about the condition to evaluate in this node.
       * </pre>
       *
       * <code>.flyteidl.core.GateNode gate_node = 9;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Workflow.GateNode, flyteidl.core.Workflow.GateNode.Builder, flyteidl.core.Workflow.GateNodeOrBuilder> 
          getGateNodeFieldBuilder() {
        if (gateNodeBuilder_ == null) {
          if (!(targetCase_ == 9)) {
            target_ = flyteidl.core.Workflow.GateNode.getDefaultInstance();
          }
          gateNodeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              flyteidl.core.Workflow.GateNode, flyteidl.core.Workflow.GateNode.Builder, flyteidl.core.Workflow.GateNodeOrBuilder>(
                  (flyteidl.core.Workflow.GateNode) target_,
                  getParentForChildren(),
                  isClean());
          target_ = null;
        }
        targetCase_ = 9;
        onChanged();;
        return gateNodeBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flyteidl.core.Node)
    }

    // @@protoc_insertion_point(class_scope:flyteidl.core.Node)
    private static final flyteidl.core.Workflow.Node DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new flyteidl.core.Workflow.Node();
    }

    public static flyteidl.core.Workflow.Node getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Node>
        PARSER = new com.google.protobuf.AbstractParser<Node>() {
      @java.lang.Override
      public Node parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Node(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Node> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Node> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public flyteidl.core.Workflow.Node getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface WorkflowMetadataOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flyteidl.core.WorkflowMetadata)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Indicates the runtime priority of workflow executions. 
     * </pre>
     *
     * <code>.flyteidl.core.QualityOfService quality_of_service = 1;</code>
     */
    boolean hasQualityOfService();
    /**
     * <pre>
     * Indicates the runtime priority of workflow executions. 
     * </pre>
     *
     * <code>.flyteidl.core.QualityOfService quality_of_service = 1;</code>
     */
    flyteidl.core.Execution.QualityOfService getQualityOfService();
    /**
     * <pre>
     * Indicates the runtime priority of workflow executions. 
     * </pre>
     *
     * <code>.flyteidl.core.QualityOfService quality_of_service = 1;</code>
     */
    flyteidl.core.Execution.QualityOfServiceOrBuilder getQualityOfServiceOrBuilder();

    /**
     * <pre>
     * Defines how the system should behave when a failure is detected in the workflow execution.
     * </pre>
     *
     * <code>.flyteidl.core.WorkflowMetadata.OnFailurePolicy on_failure = 2;</code>
     */
    int getOnFailureValue();
    /**
     * <pre>
     * Defines how the system should behave when a failure is detected in the workflow execution.
     * </pre>
     *
     * <code>.flyteidl.core.WorkflowMetadata.OnFailurePolicy on_failure = 2;</code>
     */
    flyteidl.core.Workflow.WorkflowMetadata.OnFailurePolicy getOnFailure();

    /**
     * <pre>
     * Arbitrary tags that allow users and the platform to store small but arbitrary labels
     * </pre>
     *
     * <code>map&lt;string, string&gt; tags = 3;</code>
     */
    int getTagsCount();
    /**
     * <pre>
     * Arbitrary tags that allow users and the platform to store small but arbitrary labels
     * </pre>
     *
     * <code>map&lt;string, string&gt; tags = 3;</code>
     */
    boolean containsTags(
        java.lang.String key);
    /**
     * Use {@link #getTagsMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.String>
    getTags();
    /**
     * <pre>
     * Arbitrary tags that allow users and the platform to store small but arbitrary labels
     * </pre>
     *
     * <code>map&lt;string, string&gt; tags = 3;</code>
     */
    java.util.Map<java.lang.String, java.lang.String>
    getTagsMap();
    /**
     * <pre>
     * Arbitrary tags that allow users and the platform to store small but arbitrary labels
     * </pre>
     *
     * <code>map&lt;string, string&gt; tags = 3;</code>
     */

    java.lang.String getTagsOrDefault(
        java.lang.String key,
        java.lang.String defaultValue);
    /**
     * <pre>
     * Arbitrary tags that allow users and the platform to store small but arbitrary labels
     * </pre>
     *
     * <code>map&lt;string, string&gt; tags = 3;</code>
     */

    java.lang.String getTagsOrThrow(
        java.lang.String key);
  }
  /**
   * <pre>
   * This is workflow layer metadata. These settings are only applicable to the workflow as a whole, and do not
   * percolate down to child entities (like tasks) launched by the workflow.
   * </pre>
   *
   * Protobuf type {@code flyteidl.core.WorkflowMetadata}
   */
  public  static final class WorkflowMetadata extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flyteidl.core.WorkflowMetadata)
      WorkflowMetadataOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use WorkflowMetadata.newBuilder() to construct.
    private WorkflowMetadata(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private WorkflowMetadata() {
      onFailure_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private WorkflowMetadata(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              flyteidl.core.Execution.QualityOfService.Builder subBuilder = null;
              if (qualityOfService_ != null) {
                subBuilder = qualityOfService_.toBuilder();
              }
              qualityOfService_ = input.readMessage(flyteidl.core.Execution.QualityOfService.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(qualityOfService_);
                qualityOfService_ = subBuilder.buildPartial();
              }

              break;
            }
            case 16: {
              int rawValue = input.readEnum();

              onFailure_ = rawValue;
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) != 0)) {
                tags_ = com.google.protobuf.MapField.newMapField(
                    TagsDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000004;
              }
              com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
              tags__ = input.readMessage(
                  TagsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              tags_.getMutableMap().put(
                  tags__.getKey(), tags__.getValue());
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return flyteidl.core.Workflow.internal_static_flyteidl_core_WorkflowMetadata_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @java.lang.Override
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 3:
          return internalGetTags();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return flyteidl.core.Workflow.internal_static_flyteidl_core_WorkflowMetadata_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              flyteidl.core.Workflow.WorkflowMetadata.class, flyteidl.core.Workflow.WorkflowMetadata.Builder.class);
    }

    /**
     * <pre>
     * Failure Handling Strategy
     * </pre>
     *
     * Protobuf enum {@code flyteidl.core.WorkflowMetadata.OnFailurePolicy}
     */
    public enum OnFailurePolicy
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <pre>
       * FAIL_IMMEDIATELY instructs the system to fail as soon as a node fails in the workflow. It'll automatically
       * abort all currently running nodes and clean up resources before finally marking the workflow executions as
       * failed.
       * </pre>
       *
       * <code>FAIL_IMMEDIATELY = 0;</code>
       */
      FAIL_IMMEDIATELY(0),
      /**
       * <pre>
       * FAIL_AFTER_EXECUTABLE_NODES_COMPLETE instructs the system to make as much progress as it can. The system will
       * not alter the dependencies of the execution graph so any node that depend on the failed node will not be run.
       * Other nodes that will be executed to completion before cleaning up resources and marking the workflow
       * execution as failed.
       * </pre>
       *
       * <code>FAIL_AFTER_EXECUTABLE_NODES_COMPLETE = 1;</code>
       */
      FAIL_AFTER_EXECUTABLE_NODES_COMPLETE(1),
      UNRECOGNIZED(-1),
      ;

      /**
       * <pre>
       * FAIL_IMMEDIATELY instructs the system to fail as soon as a node fails in the workflow. It'll automatically
       * abort all currently running nodes and clean up resources before finally marking the workflow executions as
       * failed.
       * </pre>
       *
       * <code>FAIL_IMMEDIATELY = 0;</code>
       */
      public static final int FAIL_IMMEDIATELY_VALUE = 0;
      /**
       * <pre>
       * FAIL_AFTER_EXECUTABLE_NODES_COMPLETE instructs the system to make as much progress as it can. The system will
       * not alter the dependencies of the execution graph so any node that depend on the failed node will not be run.
       * Other nodes that will be executed to completion before cleaning up resources and marking the workflow
       * execution as failed.
       * </pre>
       *
       * <code>FAIL_AFTER_EXECUTABLE_NODES_COMPLETE = 1;</code>
       */
      public static final int FAIL_AFTER_EXECUTABLE_NODES_COMPLETE_VALUE = 1;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static OnFailurePolicy valueOf(int value) {
        return forNumber(value);
      }

      public static OnFailurePolicy forNumber(int value) {
        switch (value) {
          case 0: return FAIL_IMMEDIATELY;
          case 1: return FAIL_AFTER_EXECUTABLE_NODES_COMPLETE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<OnFailurePolicy>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          OnFailurePolicy> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<OnFailurePolicy>() {
              public OnFailurePolicy findValueByNumber(int number) {
                return OnFailurePolicy.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return flyteidl.core.Workflow.WorkflowMetadata.getDescriptor().getEnumTypes().get(0);
      }

      private static final OnFailurePolicy[] VALUES = values();

      public static OnFailurePolicy valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private OnFailurePolicy(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:flyteidl.core.WorkflowMetadata.OnFailurePolicy)
    }

    private int bitField0_;
    public static final int QUALITY_OF_SERVICE_FIELD_NUMBER = 1;
    private flyteidl.core.Execution.QualityOfService qualityOfService_;
    /**
     * <pre>
     * Indicates the runtime priority of workflow executions. 
     * </pre>
     *
     * <code>.flyteidl.core.QualityOfService quality_of_service = 1;</code>
     */
    public boolean hasQualityOfService() {
      return qualityOfService_ != null;
    }
    /**
     * <pre>
     * Indicates the runtime priority of workflow executions. 
     * </pre>
     *
     * <code>.flyteidl.core.QualityOfService quality_of_service = 1;</code>
     */
    public flyteidl.core.Execution.QualityOfService getQualityOfService() {
      return qualityOfService_ == null ? flyteidl.core.Execution.QualityOfService.getDefaultInstance() : qualityOfService_;
    }
    /**
     * <pre>
     * Indicates the runtime priority of workflow executions. 
     * </pre>
     *
     * <code>.flyteidl.core.QualityOfService quality_of_service = 1;</code>
     */
    public flyteidl.core.Execution.QualityOfServiceOrBuilder getQualityOfServiceOrBuilder() {
      return getQualityOfService();
    }

    public static final int ON_FAILURE_FIELD_NUMBER = 2;
    private int onFailure_;
    /**
     * <pre>
     * Defines how the system should behave when a failure is detected in the workflow execution.
     * </pre>
     *
     * <code>.flyteidl.core.WorkflowMetadata.OnFailurePolicy on_failure = 2;</code>
     */
    public int getOnFailureValue() {
      return onFailure_;
    }
    /**
     * <pre>
     * Defines how the system should behave when a failure is detected in the workflow execution.
     * </pre>
     *
     * <code>.flyteidl.core.WorkflowMetadata.OnFailurePolicy on_failure = 2;</code>
     */
    public flyteidl.core.Workflow.WorkflowMetadata.OnFailurePolicy getOnFailure() {
      @SuppressWarnings("deprecation")
      flyteidl.core.Workflow.WorkflowMetadata.OnFailurePolicy result = flyteidl.core.Workflow.WorkflowMetadata.OnFailurePolicy.valueOf(onFailure_);
      return result == null ? flyteidl.core.Workflow.WorkflowMetadata.OnFailurePolicy.UNRECOGNIZED : result;
    }

    public static final int TAGS_FIELD_NUMBER = 3;
    private static final class TagsDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, java.lang.String>newDefaultInstance(
                  flyteidl.core.Workflow.internal_static_flyteidl_core_WorkflowMetadata_TagsEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    private com.google.protobuf.MapField<
        java.lang.String, java.lang.String> tags_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetTags() {
      if (tags_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            TagsDefaultEntryHolder.defaultEntry);
      }
      return tags_;
    }

    public int getTagsCount() {
      return internalGetTags().getMap().size();
    }
    /**
     * <pre>
     * Arbitrary tags that allow users and the platform to store small but arbitrary labels
     * </pre>
     *
     * <code>map&lt;string, string&gt; tags = 3;</code>
     */

    public boolean containsTags(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetTags().getMap().containsKey(key);
    }
    /**
     * Use {@link #getTagsMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getTags() {
      return getTagsMap();
    }
    /**
     * <pre>
     * Arbitrary tags that allow users and the platform to store small but arbitrary labels
     * </pre>
     *
     * <code>map&lt;string, string&gt; tags = 3;</code>
     */

    public java.util.Map<java.lang.String, java.lang.String> getTagsMap() {
      return internalGetTags().getMap();
    }
    /**
     * <pre>
     * Arbitrary tags that allow users and the platform to store small but arbitrary labels
     * </pre>
     *
     * <code>map&lt;string, string&gt; tags = 3;</code>
     */

    public java.lang.String getTagsOrDefault(
        java.lang.String key,
        java.lang.String defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetTags().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * Arbitrary tags that allow users and the platform to store small but arbitrary labels
     * </pre>
     *
     * <code>map&lt;string, string&gt; tags = 3;</code>
     */

    public java.lang.String getTagsOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetTags().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (qualityOfService_ != null) {
        output.writeMessage(1, getQualityOfService());
      }
      if (onFailure_ != flyteidl.core.Workflow.WorkflowMetadata.OnFailurePolicy.FAIL_IMMEDIATELY.getNumber()) {
        output.writeEnum(2, onFailure_);
      }
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetTags(),
          TagsDefaultEntryHolder.defaultEntry,
          3);
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (qualityOfService_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getQualityOfService());
      }
      if (onFailure_ != flyteidl.core.Workflow.WorkflowMetadata.OnFailurePolicy.FAIL_IMMEDIATELY.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, onFailure_);
      }
      for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
           : internalGetTags().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
        tags__ = TagsDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(3, tags__);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof flyteidl.core.Workflow.WorkflowMetadata)) {
        return super.equals(obj);
      }
      flyteidl.core.Workflow.WorkflowMetadata other = (flyteidl.core.Workflow.WorkflowMetadata) obj;

      if (hasQualityOfService() != other.hasQualityOfService()) return false;
      if (hasQualityOfService()) {
        if (!getQualityOfService()
            .equals(other.getQualityOfService())) return false;
      }
      if (onFailure_ != other.onFailure_) return false;
      if (!internalGetTags().equals(
          other.internalGetTags())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasQualityOfService()) {
        hash = (37 * hash) + QUALITY_OF_SERVICE_FIELD_NUMBER;
        hash = (53 * hash) + getQualityOfService().hashCode();
      }
      hash = (37 * hash) + ON_FAILURE_FIELD_NUMBER;
      hash = (53 * hash) + onFailure_;
      if (!internalGetTags().getMap().isEmpty()) {
        hash = (37 * hash) + TAGS_FIELD_NUMBER;
        hash = (53 * hash) + internalGetTags().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static flyteidl.core.Workflow.WorkflowMetadata parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Workflow.WorkflowMetadata parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Workflow.WorkflowMetadata parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Workflow.WorkflowMetadata parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Workflow.WorkflowMetadata parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Workflow.WorkflowMetadata parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Workflow.WorkflowMetadata parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static flyteidl.core.Workflow.WorkflowMetadata parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static flyteidl.core.Workflow.WorkflowMetadata parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static flyteidl.core.Workflow.WorkflowMetadata parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static flyteidl.core.Workflow.WorkflowMetadata parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static flyteidl.core.Workflow.WorkflowMetadata parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(flyteidl.core.Workflow.WorkflowMetadata prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * This is workflow layer metadata. These settings are only applicable to the workflow as a whole, and do not
     * percolate down to child entities (like tasks) launched by the workflow.
     * </pre>
     *
     * Protobuf type {@code flyteidl.core.WorkflowMetadata}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flyteidl.core.WorkflowMetadata)
        flyteidl.core.Workflow.WorkflowMetadataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return flyteidl.core.Workflow.internal_static_flyteidl_core_WorkflowMetadata_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 3:
            return internalGetTags();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 3:
            return internalGetMutableTags();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return flyteidl.core.Workflow.internal_static_flyteidl_core_WorkflowMetadata_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                flyteidl.core.Workflow.WorkflowMetadata.class, flyteidl.core.Workflow.WorkflowMetadata.Builder.class);
      }

      // Construct using flyteidl.core.Workflow.WorkflowMetadata.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (qualityOfServiceBuilder_ == null) {
          qualityOfService_ = null;
        } else {
          qualityOfService_ = null;
          qualityOfServiceBuilder_ = null;
        }
        onFailure_ = 0;

        internalGetMutableTags().clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return flyteidl.core.Workflow.internal_static_flyteidl_core_WorkflowMetadata_descriptor;
      }

      @java.lang.Override
      public flyteidl.core.Workflow.WorkflowMetadata getDefaultInstanceForType() {
        return flyteidl.core.Workflow.WorkflowMetadata.getDefaultInstance();
      }

      @java.lang.Override
      public flyteidl.core.Workflow.WorkflowMetadata build() {
        flyteidl.core.Workflow.WorkflowMetadata result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public flyteidl.core.Workflow.WorkflowMetadata buildPartial() {
        flyteidl.core.Workflow.WorkflowMetadata result = new flyteidl.core.Workflow.WorkflowMetadata(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (qualityOfServiceBuilder_ == null) {
          result.qualityOfService_ = qualityOfService_;
        } else {
          result.qualityOfService_ = qualityOfServiceBuilder_.build();
        }
        result.onFailure_ = onFailure_;
        result.tags_ = internalGetTags();
        result.tags_.makeImmutable();
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof flyteidl.core.Workflow.WorkflowMetadata) {
          return mergeFrom((flyteidl.core.Workflow.WorkflowMetadata)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(flyteidl.core.Workflow.WorkflowMetadata other) {
        if (other == flyteidl.core.Workflow.WorkflowMetadata.getDefaultInstance()) return this;
        if (other.hasQualityOfService()) {
          mergeQualityOfService(other.getQualityOfService());
        }
        if (other.onFailure_ != 0) {
          setOnFailureValue(other.getOnFailureValue());
        }
        internalGetMutableTags().mergeFrom(
            other.internalGetTags());
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        flyteidl.core.Workflow.WorkflowMetadata parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (flyteidl.core.Workflow.WorkflowMetadata) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private flyteidl.core.Execution.QualityOfService qualityOfService_;
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Execution.QualityOfService, flyteidl.core.Execution.QualityOfService.Builder, flyteidl.core.Execution.QualityOfServiceOrBuilder> qualityOfServiceBuilder_;
      /**
       * <pre>
       * Indicates the runtime priority of workflow executions. 
       * </pre>
       *
       * <code>.flyteidl.core.QualityOfService quality_of_service = 1;</code>
       */
      public boolean hasQualityOfService() {
        return qualityOfServiceBuilder_ != null || qualityOfService_ != null;
      }
      /**
       * <pre>
       * Indicates the runtime priority of workflow executions. 
       * </pre>
       *
       * <code>.flyteidl.core.QualityOfService quality_of_service = 1;</code>
       */
      public flyteidl.core.Execution.QualityOfService getQualityOfService() {
        if (qualityOfServiceBuilder_ == null) {
          return qualityOfService_ == null ? flyteidl.core.Execution.QualityOfService.getDefaultInstance() : qualityOfService_;
        } else {
          return qualityOfServiceBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Indicates the runtime priority of workflow executions. 
       * </pre>
       *
       * <code>.flyteidl.core.QualityOfService quality_of_service = 1;</code>
       */
      public Builder setQualityOfService(flyteidl.core.Execution.QualityOfService value) {
        if (qualityOfServiceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          qualityOfService_ = value;
          onChanged();
        } else {
          qualityOfServiceBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Indicates the runtime priority of workflow executions. 
       * </pre>
       *
       * <code>.flyteidl.core.QualityOfService quality_of_service = 1;</code>
       */
      public Builder setQualityOfService(
          flyteidl.core.Execution.QualityOfService.Builder builderForValue) {
        if (qualityOfServiceBuilder_ == null) {
          qualityOfService_ = builderForValue.build();
          onChanged();
        } else {
          qualityOfServiceBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Indicates the runtime priority of workflow executions. 
       * </pre>
       *
       * <code>.flyteidl.core.QualityOfService quality_of_service = 1;</code>
       */
      public Builder mergeQualityOfService(flyteidl.core.Execution.QualityOfService value) {
        if (qualityOfServiceBuilder_ == null) {
          if (qualityOfService_ != null) {
            qualityOfService_ =
              flyteidl.core.Execution.QualityOfService.newBuilder(qualityOfService_).mergeFrom(value).buildPartial();
          } else {
            qualityOfService_ = value;
          }
          onChanged();
        } else {
          qualityOfServiceBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Indicates the runtime priority of workflow executions. 
       * </pre>
       *
       * <code>.flyteidl.core.QualityOfService quality_of_service = 1;</code>
       */
      public Builder clearQualityOfService() {
        if (qualityOfServiceBuilder_ == null) {
          qualityOfService_ = null;
          onChanged();
        } else {
          qualityOfService_ = null;
          qualityOfServiceBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Indicates the runtime priority of workflow executions. 
       * </pre>
       *
       * <code>.flyteidl.core.QualityOfService quality_of_service = 1;</code>
       */
      public flyteidl.core.Execution.QualityOfService.Builder getQualityOfServiceBuilder() {
        
        onChanged();
        return getQualityOfServiceFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Indicates the runtime priority of workflow executions. 
       * </pre>
       *
       * <code>.flyteidl.core.QualityOfService quality_of_service = 1;</code>
       */
      public flyteidl.core.Execution.QualityOfServiceOrBuilder getQualityOfServiceOrBuilder() {
        if (qualityOfServiceBuilder_ != null) {
          return qualityOfServiceBuilder_.getMessageOrBuilder();
        } else {
          return qualityOfService_ == null ?
              flyteidl.core.Execution.QualityOfService.getDefaultInstance() : qualityOfService_;
        }
      }
      /**
       * <pre>
       * Indicates the runtime priority of workflow executions. 
       * </pre>
       *
       * <code>.flyteidl.core.QualityOfService quality_of_service = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Execution.QualityOfService, flyteidl.core.Execution.QualityOfService.Builder, flyteidl.core.Execution.QualityOfServiceOrBuilder> 
          getQualityOfServiceFieldBuilder() {
        if (qualityOfServiceBuilder_ == null) {
          qualityOfServiceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              flyteidl.core.Execution.QualityOfService, flyteidl.core.Execution.QualityOfService.Builder, flyteidl.core.Execution.QualityOfServiceOrBuilder>(
                  getQualityOfService(),
                  getParentForChildren(),
                  isClean());
          qualityOfService_ = null;
        }
        return qualityOfServiceBuilder_;
      }

      private int onFailure_ = 0;
      /**
       * <pre>
       * Defines how the system should behave when a failure is detected in the workflow execution.
       * </pre>
       *
       * <code>.flyteidl.core.WorkflowMetadata.OnFailurePolicy on_failure = 2;</code>
       */
      public int getOnFailureValue() {
        return onFailure_;
      }
      /**
       * <pre>
       * Defines how the system should behave when a failure is detected in the workflow execution.
       * </pre>
       *
       * <code>.flyteidl.core.WorkflowMetadata.OnFailurePolicy on_failure = 2;</code>
       */
      public Builder setOnFailureValue(int value) {
        onFailure_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Defines how the system should behave when a failure is detected in the workflow execution.
       * </pre>
       *
       * <code>.flyteidl.core.WorkflowMetadata.OnFailurePolicy on_failure = 2;</code>
       */
      public flyteidl.core.Workflow.WorkflowMetadata.OnFailurePolicy getOnFailure() {
        @SuppressWarnings("deprecation")
        flyteidl.core.Workflow.WorkflowMetadata.OnFailurePolicy result = flyteidl.core.Workflow.WorkflowMetadata.OnFailurePolicy.valueOf(onFailure_);
        return result == null ? flyteidl.core.Workflow.WorkflowMetadata.OnFailurePolicy.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Defines how the system should behave when a failure is detected in the workflow execution.
       * </pre>
       *
       * <code>.flyteidl.core.WorkflowMetadata.OnFailurePolicy on_failure = 2;</code>
       */
      public Builder setOnFailure(flyteidl.core.Workflow.WorkflowMetadata.OnFailurePolicy value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        onFailure_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Defines how the system should behave when a failure is detected in the workflow execution.
       * </pre>
       *
       * <code>.flyteidl.core.WorkflowMetadata.OnFailurePolicy on_failure = 2;</code>
       */
      public Builder clearOnFailure() {
        
        onFailure_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.MapField<
          java.lang.String, java.lang.String> tags_;
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetTags() {
        if (tags_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              TagsDefaultEntryHolder.defaultEntry);
        }
        return tags_;
      }
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetMutableTags() {
        onChanged();;
        if (tags_ == null) {
          tags_ = com.google.protobuf.MapField.newMapField(
              TagsDefaultEntryHolder.defaultEntry);
        }
        if (!tags_.isMutable()) {
          tags_ = tags_.copy();
        }
        return tags_;
      }

      public int getTagsCount() {
        return internalGetTags().getMap().size();
      }
      /**
       * <pre>
       * Arbitrary tags that allow users and the platform to store small but arbitrary labels
       * </pre>
       *
       * <code>map&lt;string, string&gt; tags = 3;</code>
       */

      public boolean containsTags(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        return internalGetTags().getMap().containsKey(key);
      }
      /**
       * Use {@link #getTagsMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String> getTags() {
        return getTagsMap();
      }
      /**
       * <pre>
       * Arbitrary tags that allow users and the platform to store small but arbitrary labels
       * </pre>
       *
       * <code>map&lt;string, string&gt; tags = 3;</code>
       */

      public java.util.Map<java.lang.String, java.lang.String> getTagsMap() {
        return internalGetTags().getMap();
      }
      /**
       * <pre>
       * Arbitrary tags that allow users and the platform to store small but arbitrary labels
       * </pre>
       *
       * <code>map&lt;string, string&gt; tags = 3;</code>
       */

      public java.lang.String getTagsOrDefault(
          java.lang.String key,
          java.lang.String defaultValue) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetTags().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * Arbitrary tags that allow users and the platform to store small but arbitrary labels
       * </pre>
       *
       * <code>map&lt;string, string&gt; tags = 3;</code>
       */

      public java.lang.String getTagsOrThrow(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetTags().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearTags() {
        internalGetMutableTags().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       * Arbitrary tags that allow users and the platform to store small but arbitrary labels
       * </pre>
       *
       * <code>map&lt;string, string&gt; tags = 3;</code>
       */

      public Builder removeTags(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableTags().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String>
      getMutableTags() {
        return internalGetMutableTags().getMutableMap();
      }
      /**
       * <pre>
       * Arbitrary tags that allow users and the platform to store small but arbitrary labels
       * </pre>
       *
       * <code>map&lt;string, string&gt; tags = 3;</code>
       */
      public Builder putTags(
          java.lang.String key,
          java.lang.String value) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        if (value == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableTags().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <pre>
       * Arbitrary tags that allow users and the platform to store small but arbitrary labels
       * </pre>
       *
       * <code>map&lt;string, string&gt; tags = 3;</code>
       */

      public Builder putAllTags(
          java.util.Map<java.lang.String, java.lang.String> values) {
        internalGetMutableTags().getMutableMap()
            .putAll(values);
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flyteidl.core.WorkflowMetadata)
    }

    // @@protoc_insertion_point(class_scope:flyteidl.core.WorkflowMetadata)
    private static final flyteidl.core.Workflow.WorkflowMetadata DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new flyteidl.core.Workflow.WorkflowMetadata();
    }

    public static flyteidl.core.Workflow.WorkflowMetadata getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<WorkflowMetadata>
        PARSER = new com.google.protobuf.AbstractParser<WorkflowMetadata>() {
      @java.lang.Override
      public WorkflowMetadata parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new WorkflowMetadata(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<WorkflowMetadata> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<WorkflowMetadata> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public flyteidl.core.Workflow.WorkflowMetadata getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface WorkflowMetadataDefaultsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flyteidl.core.WorkflowMetadataDefaults)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Whether child nodes of the workflow are interruptible.
     * </pre>
     *
     * <code>bool interruptible = 1;</code>
     */
    boolean getInterruptible();
  }
  /**
   * <pre>
   * The difference between these settings and the WorkflowMetadata ones is that these are meant to be passed down to
   * a workflow's underlying entities (like tasks). For instance, 'interruptible' has no meaning at the workflow layer, it
   * is only relevant when a task executes. The settings here are the defaults that are passed to all nodes
   * unless explicitly overridden at the node layer.
   * If you are adding a setting that applies to both the Workflow itself, and everything underneath it, it should be
   * added to both this object and the WorkflowMetadata object above.
   * </pre>
   *
   * Protobuf type {@code flyteidl.core.WorkflowMetadataDefaults}
   */
  public  static final class WorkflowMetadataDefaults extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flyteidl.core.WorkflowMetadataDefaults)
      WorkflowMetadataDefaultsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use WorkflowMetadataDefaults.newBuilder() to construct.
    private WorkflowMetadataDefaults(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private WorkflowMetadataDefaults() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private WorkflowMetadataDefaults(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              interruptible_ = input.readBool();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return flyteidl.core.Workflow.internal_static_flyteidl_core_WorkflowMetadataDefaults_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return flyteidl.core.Workflow.internal_static_flyteidl_core_WorkflowMetadataDefaults_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              flyteidl.core.Workflow.WorkflowMetadataDefaults.class, flyteidl.core.Workflow.WorkflowMetadataDefaults.Builder.class);
    }

    public static final int INTERRUPTIBLE_FIELD_NUMBER = 1;
    private boolean interruptible_;
    /**
     * <pre>
     * Whether child nodes of the workflow are interruptible.
     * </pre>
     *
     * <code>bool interruptible = 1;</code>
     */
    public boolean getInterruptible() {
      return interruptible_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (interruptible_ != false) {
        output.writeBool(1, interruptible_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (interruptible_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, interruptible_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof flyteidl.core.Workflow.WorkflowMetadataDefaults)) {
        return super.equals(obj);
      }
      flyteidl.core.Workflow.WorkflowMetadataDefaults other = (flyteidl.core.Workflow.WorkflowMetadataDefaults) obj;

      if (getInterruptible()
          != other.getInterruptible()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + INTERRUPTIBLE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getInterruptible());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static flyteidl.core.Workflow.WorkflowMetadataDefaults parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Workflow.WorkflowMetadataDefaults parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Workflow.WorkflowMetadataDefaults parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Workflow.WorkflowMetadataDefaults parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Workflow.WorkflowMetadataDefaults parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Workflow.WorkflowMetadataDefaults parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Workflow.WorkflowMetadataDefaults parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static flyteidl.core.Workflow.WorkflowMetadataDefaults parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static flyteidl.core.Workflow.WorkflowMetadataDefaults parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static flyteidl.core.Workflow.WorkflowMetadataDefaults parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static flyteidl.core.Workflow.WorkflowMetadataDefaults parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static flyteidl.core.Workflow.WorkflowMetadataDefaults parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(flyteidl.core.Workflow.WorkflowMetadataDefaults prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * The difference between these settings and the WorkflowMetadata ones is that these are meant to be passed down to
     * a workflow's underlying entities (like tasks). For instance, 'interruptible' has no meaning at the workflow layer, it
     * is only relevant when a task executes. The settings here are the defaults that are passed to all nodes
     * unless explicitly overridden at the node layer.
     * If you are adding a setting that applies to both the Workflow itself, and everything underneath it, it should be
     * added to both this object and the WorkflowMetadata object above.
     * </pre>
     *
     * Protobuf type {@code flyteidl.core.WorkflowMetadataDefaults}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flyteidl.core.WorkflowMetadataDefaults)
        flyteidl.core.Workflow.WorkflowMetadataDefaultsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return flyteidl.core.Workflow.internal_static_flyteidl_core_WorkflowMetadataDefaults_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return flyteidl.core.Workflow.internal_static_flyteidl_core_WorkflowMetadataDefaults_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                flyteidl.core.Workflow.WorkflowMetadataDefaults.class, flyteidl.core.Workflow.WorkflowMetadataDefaults.Builder.class);
      }

      // Construct using flyteidl.core.Workflow.WorkflowMetadataDefaults.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        interruptible_ = false;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return flyteidl.core.Workflow.internal_static_flyteidl_core_WorkflowMetadataDefaults_descriptor;
      }

      @java.lang.Override
      public flyteidl.core.Workflow.WorkflowMetadataDefaults getDefaultInstanceForType() {
        return flyteidl.core.Workflow.WorkflowMetadataDefaults.getDefaultInstance();
      }

      @java.lang.Override
      public flyteidl.core.Workflow.WorkflowMetadataDefaults build() {
        flyteidl.core.Workflow.WorkflowMetadataDefaults result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public flyteidl.core.Workflow.WorkflowMetadataDefaults buildPartial() {
        flyteidl.core.Workflow.WorkflowMetadataDefaults result = new flyteidl.core.Workflow.WorkflowMetadataDefaults(this);
        result.interruptible_ = interruptible_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof flyteidl.core.Workflow.WorkflowMetadataDefaults) {
          return mergeFrom((flyteidl.core.Workflow.WorkflowMetadataDefaults)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(flyteidl.core.Workflow.WorkflowMetadataDefaults other) {
        if (other == flyteidl.core.Workflow.WorkflowMetadataDefaults.getDefaultInstance()) return this;
        if (other.getInterruptible() != false) {
          setInterruptible(other.getInterruptible());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        flyteidl.core.Workflow.WorkflowMetadataDefaults parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (flyteidl.core.Workflow.WorkflowMetadataDefaults) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private boolean interruptible_ ;
      /**
       * <pre>
       * Whether child nodes of the workflow are interruptible.
       * </pre>
       *
       * <code>bool interruptible = 1;</code>
       */
      public boolean getInterruptible() {
        return interruptible_;
      }
      /**
       * <pre>
       * Whether child nodes of the workflow are interruptible.
       * </pre>
       *
       * <code>bool interruptible = 1;</code>
       */
      public Builder setInterruptible(boolean value) {
        
        interruptible_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Whether child nodes of the workflow are interruptible.
       * </pre>
       *
       * <code>bool interruptible = 1;</code>
       */
      public Builder clearInterruptible() {
        
        interruptible_ = false;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flyteidl.core.WorkflowMetadataDefaults)
    }

    // @@protoc_insertion_point(class_scope:flyteidl.core.WorkflowMetadataDefaults)
    private static final flyteidl.core.Workflow.WorkflowMetadataDefaults DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new flyteidl.core.Workflow.WorkflowMetadataDefaults();
    }

    public static flyteidl.core.Workflow.WorkflowMetadataDefaults getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<WorkflowMetadataDefaults>
        PARSER = new com.google.protobuf.AbstractParser<WorkflowMetadataDefaults>() {
      @java.lang.Override
      public WorkflowMetadataDefaults parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new WorkflowMetadataDefaults(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<WorkflowMetadataDefaults> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<WorkflowMetadataDefaults> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public flyteidl.core.Workflow.WorkflowMetadataDefaults getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface WorkflowTemplateOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flyteidl.core.WorkflowTemplate)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * A globally unique identifier for the workflow.
     * </pre>
     *
     * <code>.flyteidl.core.Identifier id = 1;</code>
     */
    boolean hasId();
    /**
     * <pre>
     * A globally unique identifier for the workflow.
     * </pre>
     *
     * <code>.flyteidl.core.Identifier id = 1;</code>
     */
    flyteidl.core.IdentifierOuterClass.Identifier getId();
    /**
     * <pre>
     * A globally unique identifier for the workflow.
     * </pre>
     *
     * <code>.flyteidl.core.Identifier id = 1;</code>
     */
    flyteidl.core.IdentifierOuterClass.IdentifierOrBuilder getIdOrBuilder();

    /**
     * <pre>
     * Extra metadata about the workflow.
     * </pre>
     *
     * <code>.flyteidl.core.WorkflowMetadata metadata = 2;</code>
     */
    boolean hasMetadata();
    /**
     * <pre>
     * Extra metadata about the workflow.
     * </pre>
     *
     * <code>.flyteidl.core.WorkflowMetadata metadata = 2;</code>
     */
    flyteidl.core.Workflow.WorkflowMetadata getMetadata();
    /**
     * <pre>
     * Extra metadata about the workflow.
     * </pre>
     *
     * <code>.flyteidl.core.WorkflowMetadata metadata = 2;</code>
     */
    flyteidl.core.Workflow.WorkflowMetadataOrBuilder getMetadataOrBuilder();

    /**
     * <pre>
     * Defines a strongly typed interface for the Workflow. This can include some optional parameters.
     * </pre>
     *
     * <code>.flyteidl.core.TypedInterface interface = 3;</code>
     */
    boolean hasInterface();
    /**
     * <pre>
     * Defines a strongly typed interface for the Workflow. This can include some optional parameters.
     * </pre>
     *
     * <code>.flyteidl.core.TypedInterface interface = 3;</code>
     */
    flyteidl.core.Interface.TypedInterface getInterface();
    /**
     * <pre>
     * Defines a strongly typed interface for the Workflow. This can include some optional parameters.
     * </pre>
     *
     * <code>.flyteidl.core.TypedInterface interface = 3;</code>
     */
    flyteidl.core.Interface.TypedInterfaceOrBuilder getInterfaceOrBuilder();

    /**
     * <pre>
     * A list of nodes. In addition, 'globals' is a special reserved node id that can be used to consume workflow inputs.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Node nodes = 4;</code>
     */
    java.util.List<flyteidl.core.Workflow.Node> 
        getNodesList();
    /**
     * <pre>
     * A list of nodes. In addition, 'globals' is a special reserved node id that can be used to consume workflow inputs.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Node nodes = 4;</code>
     */
    flyteidl.core.Workflow.Node getNodes(int index);
    /**
     * <pre>
     * A list of nodes. In addition, 'globals' is a special reserved node id that can be used to consume workflow inputs.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Node nodes = 4;</code>
     */
    int getNodesCount();
    /**
     * <pre>
     * A list of nodes. In addition, 'globals' is a special reserved node id that can be used to consume workflow inputs.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Node nodes = 4;</code>
     */
    java.util.List<? extends flyteidl.core.Workflow.NodeOrBuilder> 
        getNodesOrBuilderList();
    /**
     * <pre>
     * A list of nodes. In addition, 'globals' is a special reserved node id that can be used to consume workflow inputs.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Node nodes = 4;</code>
     */
    flyteidl.core.Workflow.NodeOrBuilder getNodesOrBuilder(
        int index);

    /**
     * <pre>
     * A list of output bindings that specify how to construct workflow outputs. Bindings can pull node outputs or
     * specify literals. All workflow outputs specified in the interface field must be bound in order for the workflow
     * to be validated. A workflow has an implicit dependency on all of its nodes to execute successfully in order to
     * bind final outputs.
     * Most of these outputs will be Binding's with a BindingData of type OutputReference.  That is, your workflow can
     * just have an output of some constant (`Output(5)`), but usually, the workflow will be pulling
     * outputs from the output of a task.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Binding outputs = 5;</code>
     */
    java.util.List<flyteidl.core.Literals.Binding> 
        getOutputsList();
    /**
     * <pre>
     * A list of output bindings that specify how to construct workflow outputs. Bindings can pull node outputs or
     * specify literals. All workflow outputs specified in the interface field must be bound in order for the workflow
     * to be validated. A workflow has an implicit dependency on all of its nodes to execute successfully in order to
     * bind final outputs.
     * Most of these outputs will be Binding's with a BindingData of type OutputReference.  That is, your workflow can
     * just have an output of some constant (`Output(5)`), but usually, the workflow will be pulling
     * outputs from the output of a task.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Binding outputs = 5;</code>
     */
    flyteidl.core.Literals.Binding getOutputs(int index);
    /**
     * <pre>
     * A list of output bindings that specify how to construct workflow outputs. Bindings can pull node outputs or
     * specify literals. All workflow outputs specified in the interface field must be bound in order for the workflow
     * to be validated. A workflow has an implicit dependency on all of its nodes to execute successfully in order to
     * bind final outputs.
     * Most of these outputs will be Binding's with a BindingData of type OutputReference.  That is, your workflow can
     * just have an output of some constant (`Output(5)`), but usually, the workflow will be pulling
     * outputs from the output of a task.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Binding outputs = 5;</code>
     */
    int getOutputsCount();
    /**
     * <pre>
     * A list of output bindings that specify how to construct workflow outputs. Bindings can pull node outputs or
     * specify literals. All workflow outputs specified in the interface field must be bound in order for the workflow
     * to be validated. A workflow has an implicit dependency on all of its nodes to execute successfully in order to
     * bind final outputs.
     * Most of these outputs will be Binding's with a BindingData of type OutputReference.  That is, your workflow can
     * just have an output of some constant (`Output(5)`), but usually, the workflow will be pulling
     * outputs from the output of a task.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Binding outputs = 5;</code>
     */
    java.util.List<? extends flyteidl.core.Literals.BindingOrBuilder> 
        getOutputsOrBuilderList();
    /**
     * <pre>
     * A list of output bindings that specify how to construct workflow outputs. Bindings can pull node outputs or
     * specify literals. All workflow outputs specified in the interface field must be bound in order for the workflow
     * to be validated. A workflow has an implicit dependency on all of its nodes to execute successfully in order to
     * bind final outputs.
     * Most of these outputs will be Binding's with a BindingData of type OutputReference.  That is, your workflow can
     * just have an output of some constant (`Output(5)`), but usually, the workflow will be pulling
     * outputs from the output of a task.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Binding outputs = 5;</code>
     */
    flyteidl.core.Literals.BindingOrBuilder getOutputsOrBuilder(
        int index);

    /**
     * <pre>
     *+optional A catch-all node. This node is executed whenever the execution engine determines the workflow has failed.
     * The interface of this node must match the Workflow interface with an additional input named 'error' of type
     * pb.lyft.flyte.core.Error.
     * </pre>
     *
     * <code>.flyteidl.core.Node failure_node = 6;</code>
     */
    boolean hasFailureNode();
    /**
     * <pre>
     *+optional A catch-all node. This node is executed whenever the execution engine determines the workflow has failed.
     * The interface of this node must match the Workflow interface with an additional input named 'error' of type
     * pb.lyft.flyte.core.Error.
     * </pre>
     *
     * <code>.flyteidl.core.Node failure_node = 6;</code>
     */
    flyteidl.core.Workflow.Node getFailureNode();
    /**
     * <pre>
     *+optional A catch-all node. This node is executed whenever the execution engine determines the workflow has failed.
     * The interface of this node must match the Workflow interface with an additional input named 'error' of type
     * pb.lyft.flyte.core.Error.
     * </pre>
     *
     * <code>.flyteidl.core.Node failure_node = 6;</code>
     */
    flyteidl.core.Workflow.NodeOrBuilder getFailureNodeOrBuilder();

    /**
     * <pre>
     * workflow defaults
     * </pre>
     *
     * <code>.flyteidl.core.WorkflowMetadataDefaults metadata_defaults = 7;</code>
     */
    boolean hasMetadataDefaults();
    /**
     * <pre>
     * workflow defaults
     * </pre>
     *
     * <code>.flyteidl.core.WorkflowMetadataDefaults metadata_defaults = 7;</code>
     */
    flyteidl.core.Workflow.WorkflowMetadataDefaults getMetadataDefaults();
    /**
     * <pre>
     * workflow defaults
     * </pre>
     *
     * <code>.flyteidl.core.WorkflowMetadataDefaults metadata_defaults = 7;</code>
     */
    flyteidl.core.Workflow.WorkflowMetadataDefaultsOrBuilder getMetadataDefaultsOrBuilder();
  }
  /**
   * <pre>
   * Flyte Workflow Structure that encapsulates task, branch and subworkflow nodes to form a statically analyzable,
   * directed acyclic graph.
   * </pre>
   *
   * Protobuf type {@code flyteidl.core.WorkflowTemplate}
   */
  public  static final class WorkflowTemplate extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flyteidl.core.WorkflowTemplate)
      WorkflowTemplateOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use WorkflowTemplate.newBuilder() to construct.
    private WorkflowTemplate(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private WorkflowTemplate() {
      nodes_ = java.util.Collections.emptyList();
      outputs_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private WorkflowTemplate(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              flyteidl.core.IdentifierOuterClass.Identifier.Builder subBuilder = null;
              if (id_ != null) {
                subBuilder = id_.toBuilder();
              }
              id_ = input.readMessage(flyteidl.core.IdentifierOuterClass.Identifier.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(id_);
                id_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              flyteidl.core.Workflow.WorkflowMetadata.Builder subBuilder = null;
              if (metadata_ != null) {
                subBuilder = metadata_.toBuilder();
              }
              metadata_ = input.readMessage(flyteidl.core.Workflow.WorkflowMetadata.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(metadata_);
                metadata_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              flyteidl.core.Interface.TypedInterface.Builder subBuilder = null;
              if (interface_ != null) {
                subBuilder = interface_.toBuilder();
              }
              interface_ = input.readMessage(flyteidl.core.Interface.TypedInterface.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(interface_);
                interface_ = subBuilder.buildPartial();
              }

              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000008) != 0)) {
                nodes_ = new java.util.ArrayList<flyteidl.core.Workflow.Node>();
                mutable_bitField0_ |= 0x00000008;
              }
              nodes_.add(
                  input.readMessage(flyteidl.core.Workflow.Node.parser(), extensionRegistry));
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000010) != 0)) {
                outputs_ = new java.util.ArrayList<flyteidl.core.Literals.Binding>();
                mutable_bitField0_ |= 0x00000010;
              }
              outputs_.add(
                  input.readMessage(flyteidl.core.Literals.Binding.parser(), extensionRegistry));
              break;
            }
            case 50: {
              flyteidl.core.Workflow.Node.Builder subBuilder = null;
              if (failureNode_ != null) {
                subBuilder = failureNode_.toBuilder();
              }
              failureNode_ = input.readMessage(flyteidl.core.Workflow.Node.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(failureNode_);
                failureNode_ = subBuilder.buildPartial();
              }

              break;
            }
            case 58: {
              flyteidl.core.Workflow.WorkflowMetadataDefaults.Builder subBuilder = null;
              if (metadataDefaults_ != null) {
                subBuilder = metadataDefaults_.toBuilder();
              }
              metadataDefaults_ = input.readMessage(flyteidl.core.Workflow.WorkflowMetadataDefaults.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(metadataDefaults_);
                metadataDefaults_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) != 0)) {
          nodes_ = java.util.Collections.unmodifiableList(nodes_);
        }
        if (((mutable_bitField0_ & 0x00000010) != 0)) {
          outputs_ = java.util.Collections.unmodifiableList(outputs_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return flyteidl.core.Workflow.internal_static_flyteidl_core_WorkflowTemplate_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return flyteidl.core.Workflow.internal_static_flyteidl_core_WorkflowTemplate_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              flyteidl.core.Workflow.WorkflowTemplate.class, flyteidl.core.Workflow.WorkflowTemplate.Builder.class);
    }

    private int bitField0_;
    public static final int ID_FIELD_NUMBER = 1;
    private flyteidl.core.IdentifierOuterClass.Identifier id_;
    /**
     * <pre>
     * A globally unique identifier for the workflow.
     * </pre>
     *
     * <code>.flyteidl.core.Identifier id = 1;</code>
     */
    public boolean hasId() {
      return id_ != null;
    }
    /**
     * <pre>
     * A globally unique identifier for the workflow.
     * </pre>
     *
     * <code>.flyteidl.core.Identifier id = 1;</code>
     */
    public flyteidl.core.IdentifierOuterClass.Identifier getId() {
      return id_ == null ? flyteidl.core.IdentifierOuterClass.Identifier.getDefaultInstance() : id_;
    }
    /**
     * <pre>
     * A globally unique identifier for the workflow.
     * </pre>
     *
     * <code>.flyteidl.core.Identifier id = 1;</code>
     */
    public flyteidl.core.IdentifierOuterClass.IdentifierOrBuilder getIdOrBuilder() {
      return getId();
    }

    public static final int METADATA_FIELD_NUMBER = 2;
    private flyteidl.core.Workflow.WorkflowMetadata metadata_;
    /**
     * <pre>
     * Extra metadata about the workflow.
     * </pre>
     *
     * <code>.flyteidl.core.WorkflowMetadata metadata = 2;</code>
     */
    public boolean hasMetadata() {
      return metadata_ != null;
    }
    /**
     * <pre>
     * Extra metadata about the workflow.
     * </pre>
     *
     * <code>.flyteidl.core.WorkflowMetadata metadata = 2;</code>
     */
    public flyteidl.core.Workflow.WorkflowMetadata getMetadata() {
      return metadata_ == null ? flyteidl.core.Workflow.WorkflowMetadata.getDefaultInstance() : metadata_;
    }
    /**
     * <pre>
     * Extra metadata about the workflow.
     * </pre>
     *
     * <code>.flyteidl.core.WorkflowMetadata metadata = 2;</code>
     */
    public flyteidl.core.Workflow.WorkflowMetadataOrBuilder getMetadataOrBuilder() {
      return getMetadata();
    }

    public static final int INTERFACE_FIELD_NUMBER = 3;
    private flyteidl.core.Interface.TypedInterface interface_;
    /**
     * <pre>
     * Defines a strongly typed interface for the Workflow. This can include some optional parameters.
     * </pre>
     *
     * <code>.flyteidl.core.TypedInterface interface = 3;</code>
     */
    public boolean hasInterface() {
      return interface_ != null;
    }
    /**
     * <pre>
     * Defines a strongly typed interface for the Workflow. This can include some optional parameters.
     * </pre>
     *
     * <code>.flyteidl.core.TypedInterface interface = 3;</code>
     */
    public flyteidl.core.Interface.TypedInterface getInterface() {
      return interface_ == null ? flyteidl.core.Interface.TypedInterface.getDefaultInstance() : interface_;
    }
    /**
     * <pre>
     * Defines a strongly typed interface for the Workflow. This can include some optional parameters.
     * </pre>
     *
     * <code>.flyteidl.core.TypedInterface interface = 3;</code>
     */
    public flyteidl.core.Interface.TypedInterfaceOrBuilder getInterfaceOrBuilder() {
      return getInterface();
    }

    public static final int NODES_FIELD_NUMBER = 4;
    private java.util.List<flyteidl.core.Workflow.Node> nodes_;
    /**
     * <pre>
     * A list of nodes. In addition, 'globals' is a special reserved node id that can be used to consume workflow inputs.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Node nodes = 4;</code>
     */
    public java.util.List<flyteidl.core.Workflow.Node> getNodesList() {
      return nodes_;
    }
    /**
     * <pre>
     * A list of nodes. In addition, 'globals' is a special reserved node id that can be used to consume workflow inputs.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Node nodes = 4;</code>
     */
    public java.util.List<? extends flyteidl.core.Workflow.NodeOrBuilder> 
        getNodesOrBuilderList() {
      return nodes_;
    }
    /**
     * <pre>
     * A list of nodes. In addition, 'globals' is a special reserved node id that can be used to consume workflow inputs.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Node nodes = 4;</code>
     */
    public int getNodesCount() {
      return nodes_.size();
    }
    /**
     * <pre>
     * A list of nodes. In addition, 'globals' is a special reserved node id that can be used to consume workflow inputs.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Node nodes = 4;</code>
     */
    public flyteidl.core.Workflow.Node getNodes(int index) {
      return nodes_.get(index);
    }
    /**
     * <pre>
     * A list of nodes. In addition, 'globals' is a special reserved node id that can be used to consume workflow inputs.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Node nodes = 4;</code>
     */
    public flyteidl.core.Workflow.NodeOrBuilder getNodesOrBuilder(
        int index) {
      return nodes_.get(index);
    }

    public static final int OUTPUTS_FIELD_NUMBER = 5;
    private java.util.List<flyteidl.core.Literals.Binding> outputs_;
    /**
     * <pre>
     * A list of output bindings that specify how to construct workflow outputs. Bindings can pull node outputs or
     * specify literals. All workflow outputs specified in the interface field must be bound in order for the workflow
     * to be validated. A workflow has an implicit dependency on all of its nodes to execute successfully in order to
     * bind final outputs.
     * Most of these outputs will be Binding's with a BindingData of type OutputReference.  That is, your workflow can
     * just have an output of some constant (`Output(5)`), but usually, the workflow will be pulling
     * outputs from the output of a task.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Binding outputs = 5;</code>
     */
    public java.util.List<flyteidl.core.Literals.Binding> getOutputsList() {
      return outputs_;
    }
    /**
     * <pre>
     * A list of output bindings that specify how to construct workflow outputs. Bindings can pull node outputs or
     * specify literals. All workflow outputs specified in the interface field must be bound in order for the workflow
     * to be validated. A workflow has an implicit dependency on all of its nodes to execute successfully in order to
     * bind final outputs.
     * Most of these outputs will be Binding's with a BindingData of type OutputReference.  That is, your workflow can
     * just have an output of some constant (`Output(5)`), but usually, the workflow will be pulling
     * outputs from the output of a task.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Binding outputs = 5;</code>
     */
    public java.util.List<? extends flyteidl.core.Literals.BindingOrBuilder> 
        getOutputsOrBuilderList() {
      return outputs_;
    }
    /**
     * <pre>
     * A list of output bindings that specify how to construct workflow outputs. Bindings can pull node outputs or
     * specify literals. All workflow outputs specified in the interface field must be bound in order for the workflow
     * to be validated. A workflow has an implicit dependency on all of its nodes to execute successfully in order to
     * bind final outputs.
     * Most of these outputs will be Binding's with a BindingData of type OutputReference.  That is, your workflow can
     * just have an output of some constant (`Output(5)`), but usually, the workflow will be pulling
     * outputs from the output of a task.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Binding outputs = 5;</code>
     */
    public int getOutputsCount() {
      return outputs_.size();
    }
    /**
     * <pre>
     * A list of output bindings that specify how to construct workflow outputs. Bindings can pull node outputs or
     * specify literals. All workflow outputs specified in the interface field must be bound in order for the workflow
     * to be validated. A workflow has an implicit dependency on all of its nodes to execute successfully in order to
     * bind final outputs.
     * Most of these outputs will be Binding's with a BindingData of type OutputReference.  That is, your workflow can
     * just have an output of some constant (`Output(5)`), but usually, the workflow will be pulling
     * outputs from the output of a task.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Binding outputs = 5;</code>
     */
    public flyteidl.core.Literals.Binding getOutputs(int index) {
      return outputs_.get(index);
    }
    /**
     * <pre>
     * A list of output bindings that specify how to construct workflow outputs. Bindings can pull node outputs or
     * specify literals. All workflow outputs specified in the interface field must be bound in order for the workflow
     * to be validated. A workflow has an implicit dependency on all of its nodes to execute successfully in order to
     * bind final outputs.
     * Most of these outputs will be Binding's with a BindingData of type OutputReference.  That is, your workflow can
     * just have an output of some constant (`Output(5)`), but usually, the workflow will be pulling
     * outputs from the output of a task.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Binding outputs = 5;</code>
     */
    public flyteidl.core.Literals.BindingOrBuilder getOutputsOrBuilder(
        int index) {
      return outputs_.get(index);
    }

    public static final int FAILURE_NODE_FIELD_NUMBER = 6;
    private flyteidl.core.Workflow.Node failureNode_;
    /**
     * <pre>
     *+optional A catch-all node. This node is executed whenever the execution engine determines the workflow has failed.
     * The interface of this node must match the Workflow interface with an additional input named 'error' of type
     * pb.lyft.flyte.core.Error.
     * </pre>
     *
     * <code>.flyteidl.core.Node failure_node = 6;</code>
     */
    public boolean hasFailureNode() {
      return failureNode_ != null;
    }
    /**
     * <pre>
     *+optional A catch-all node. This node is executed whenever the execution engine determines the workflow has failed.
     * The interface of this node must match the Workflow interface with an additional input named 'error' of type
     * pb.lyft.flyte.core.Error.
     * </pre>
     *
     * <code>.flyteidl.core.Node failure_node = 6;</code>
     */
    public flyteidl.core.Workflow.Node getFailureNode() {
      return failureNode_ == null ? flyteidl.core.Workflow.Node.getDefaultInstance() : failureNode_;
    }
    /**
     * <pre>
     *+optional A catch-all node. This node is executed whenever the execution engine determines the workflow has failed.
     * The interface of this node must match the Workflow interface with an additional input named 'error' of type
     * pb.lyft.flyte.core.Error.
     * </pre>
     *
     * <code>.flyteidl.core.Node failure_node = 6;</code>
     */
    public flyteidl.core.Workflow.NodeOrBuilder getFailureNodeOrBuilder() {
      return getFailureNode();
    }

    public static final int METADATA_DEFAULTS_FIELD_NUMBER = 7;
    private flyteidl.core.Workflow.WorkflowMetadataDefaults metadataDefaults_;
    /**
     * <pre>
     * workflow defaults
     * </pre>
     *
     * <code>.flyteidl.core.WorkflowMetadataDefaults metadata_defaults = 7;</code>
     */
    public boolean hasMetadataDefaults() {
      return metadataDefaults_ != null;
    }
    /**
     * <pre>
     * workflow defaults
     * </pre>
     *
     * <code>.flyteidl.core.WorkflowMetadataDefaults metadata_defaults = 7;</code>
     */
    public flyteidl.core.Workflow.WorkflowMetadataDefaults getMetadataDefaults() {
      return metadataDefaults_ == null ? flyteidl.core.Workflow.WorkflowMetadataDefaults.getDefaultInstance() : metadataDefaults_;
    }
    /**
     * <pre>
     * workflow defaults
     * </pre>
     *
     * <code>.flyteidl.core.WorkflowMetadataDefaults metadata_defaults = 7;</code>
     */
    public flyteidl.core.Workflow.WorkflowMetadataDefaultsOrBuilder getMetadataDefaultsOrBuilder() {
      return getMetadataDefaults();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (id_ != null) {
        output.writeMessage(1, getId());
      }
      if (metadata_ != null) {
        output.writeMessage(2, getMetadata());
      }
      if (interface_ != null) {
        output.writeMessage(3, getInterface());
      }
      for (int i = 0; i < nodes_.size(); i++) {
        output.writeMessage(4, nodes_.get(i));
      }
      for (int i = 0; i < outputs_.size(); i++) {
        output.writeMessage(5, outputs_.get(i));
      }
      if (failureNode_ != null) {
        output.writeMessage(6, getFailureNode());
      }
      if (metadataDefaults_ != null) {
        output.writeMessage(7, getMetadataDefaults());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (id_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getId());
      }
      if (metadata_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getMetadata());
      }
      if (interface_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getInterface());
      }
      for (int i = 0; i < nodes_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, nodes_.get(i));
      }
      for (int i = 0; i < outputs_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, outputs_.get(i));
      }
      if (failureNode_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getFailureNode());
      }
      if (metadataDefaults_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, getMetadataDefaults());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof flyteidl.core.Workflow.WorkflowTemplate)) {
        return super.equals(obj);
      }
      flyteidl.core.Workflow.WorkflowTemplate other = (flyteidl.core.Workflow.WorkflowTemplate) obj;

      if (hasId() != other.hasId()) return false;
      if (hasId()) {
        if (!getId()
            .equals(other.getId())) return false;
      }
      if (hasMetadata() != other.hasMetadata()) return false;
      if (hasMetadata()) {
        if (!getMetadata()
            .equals(other.getMetadata())) return false;
      }
      if (hasInterface() != other.hasInterface()) return false;
      if (hasInterface()) {
        if (!getInterface()
            .equals(other.getInterface())) return false;
      }
      if (!getNodesList()
          .equals(other.getNodesList())) return false;
      if (!getOutputsList()
          .equals(other.getOutputsList())) return false;
      if (hasFailureNode() != other.hasFailureNode()) return false;
      if (hasFailureNode()) {
        if (!getFailureNode()
            .equals(other.getFailureNode())) return false;
      }
      if (hasMetadataDefaults() != other.hasMetadataDefaults()) return false;
      if (hasMetadataDefaults()) {
        if (!getMetadataDefaults()
            .equals(other.getMetadataDefaults())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasId()) {
        hash = (37 * hash) + ID_FIELD_NUMBER;
        hash = (53 * hash) + getId().hashCode();
      }
      if (hasMetadata()) {
        hash = (37 * hash) + METADATA_FIELD_NUMBER;
        hash = (53 * hash) + getMetadata().hashCode();
      }
      if (hasInterface()) {
        hash = (37 * hash) + INTERFACE_FIELD_NUMBER;
        hash = (53 * hash) + getInterface().hashCode();
      }
      if (getNodesCount() > 0) {
        hash = (37 * hash) + NODES_FIELD_NUMBER;
        hash = (53 * hash) + getNodesList().hashCode();
      }
      if (getOutputsCount() > 0) {
        hash = (37 * hash) + OUTPUTS_FIELD_NUMBER;
        hash = (53 * hash) + getOutputsList().hashCode();
      }
      if (hasFailureNode()) {
        hash = (37 * hash) + FAILURE_NODE_FIELD_NUMBER;
        hash = (53 * hash) + getFailureNode().hashCode();
      }
      if (hasMetadataDefaults()) {
        hash = (37 * hash) + METADATA_DEFAULTS_FIELD_NUMBER;
        hash = (53 * hash) + getMetadataDefaults().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static flyteidl.core.Workflow.WorkflowTemplate parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Workflow.WorkflowTemplate parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Workflow.WorkflowTemplate parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Workflow.WorkflowTemplate parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Workflow.WorkflowTemplate parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Workflow.WorkflowTemplate parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Workflow.WorkflowTemplate parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static flyteidl.core.Workflow.WorkflowTemplate parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static flyteidl.core.Workflow.WorkflowTemplate parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static flyteidl.core.Workflow.WorkflowTemplate parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static flyteidl.core.Workflow.WorkflowTemplate parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static flyteidl.core.Workflow.WorkflowTemplate parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(flyteidl.core.Workflow.WorkflowTemplate prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Flyte Workflow Structure that encapsulates task, branch and subworkflow nodes to form a statically analyzable,
     * directed acyclic graph.
     * </pre>
     *
     * Protobuf type {@code flyteidl.core.WorkflowTemplate}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flyteidl.core.WorkflowTemplate)
        flyteidl.core.Workflow.WorkflowTemplateOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return flyteidl.core.Workflow.internal_static_flyteidl_core_WorkflowTemplate_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return flyteidl.core.Workflow.internal_static_flyteidl_core_WorkflowTemplate_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                flyteidl.core.Workflow.WorkflowTemplate.class, flyteidl.core.Workflow.WorkflowTemplate.Builder.class);
      }

      // Construct using flyteidl.core.Workflow.WorkflowTemplate.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getNodesFieldBuilder();
          getOutputsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (idBuilder_ == null) {
          id_ = null;
        } else {
          id_ = null;
          idBuilder_ = null;
        }
        if (metadataBuilder_ == null) {
          metadata_ = null;
        } else {
          metadata_ = null;
          metadataBuilder_ = null;
        }
        if (interfaceBuilder_ == null) {
          interface_ = null;
        } else {
          interface_ = null;
          interfaceBuilder_ = null;
        }
        if (nodesBuilder_ == null) {
          nodes_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          nodesBuilder_.clear();
        }
        if (outputsBuilder_ == null) {
          outputs_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          outputsBuilder_.clear();
        }
        if (failureNodeBuilder_ == null) {
          failureNode_ = null;
        } else {
          failureNode_ = null;
          failureNodeBuilder_ = null;
        }
        if (metadataDefaultsBuilder_ == null) {
          metadataDefaults_ = null;
        } else {
          metadataDefaults_ = null;
          metadataDefaultsBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return flyteidl.core.Workflow.internal_static_flyteidl_core_WorkflowTemplate_descriptor;
      }

      @java.lang.Override
      public flyteidl.core.Workflow.WorkflowTemplate getDefaultInstanceForType() {
        return flyteidl.core.Workflow.WorkflowTemplate.getDefaultInstance();
      }

      @java.lang.Override
      public flyteidl.core.Workflow.WorkflowTemplate build() {
        flyteidl.core.Workflow.WorkflowTemplate result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public flyteidl.core.Workflow.WorkflowTemplate buildPartial() {
        flyteidl.core.Workflow.WorkflowTemplate result = new flyteidl.core.Workflow.WorkflowTemplate(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (idBuilder_ == null) {
          result.id_ = id_;
        } else {
          result.id_ = idBuilder_.build();
        }
        if (metadataBuilder_ == null) {
          result.metadata_ = metadata_;
        } else {
          result.metadata_ = metadataBuilder_.build();
        }
        if (interfaceBuilder_ == null) {
          result.interface_ = interface_;
        } else {
          result.interface_ = interfaceBuilder_.build();
        }
        if (nodesBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0)) {
            nodes_ = java.util.Collections.unmodifiableList(nodes_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.nodes_ = nodes_;
        } else {
          result.nodes_ = nodesBuilder_.build();
        }
        if (outputsBuilder_ == null) {
          if (((bitField0_ & 0x00000010) != 0)) {
            outputs_ = java.util.Collections.unmodifiableList(outputs_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.outputs_ = outputs_;
        } else {
          result.outputs_ = outputsBuilder_.build();
        }
        if (failureNodeBuilder_ == null) {
          result.failureNode_ = failureNode_;
        } else {
          result.failureNode_ = failureNodeBuilder_.build();
        }
        if (metadataDefaultsBuilder_ == null) {
          result.metadataDefaults_ = metadataDefaults_;
        } else {
          result.metadataDefaults_ = metadataDefaultsBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof flyteidl.core.Workflow.WorkflowTemplate) {
          return mergeFrom((flyteidl.core.Workflow.WorkflowTemplate)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(flyteidl.core.Workflow.WorkflowTemplate other) {
        if (other == flyteidl.core.Workflow.WorkflowTemplate.getDefaultInstance()) return this;
        if (other.hasId()) {
          mergeId(other.getId());
        }
        if (other.hasMetadata()) {
          mergeMetadata(other.getMetadata());
        }
        if (other.hasInterface()) {
          mergeInterface(other.getInterface());
        }
        if (nodesBuilder_ == null) {
          if (!other.nodes_.isEmpty()) {
            if (nodes_.isEmpty()) {
              nodes_ = other.nodes_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureNodesIsMutable();
              nodes_.addAll(other.nodes_);
            }
            onChanged();
          }
        } else {
          if (!other.nodes_.isEmpty()) {
            if (nodesBuilder_.isEmpty()) {
              nodesBuilder_.dispose();
              nodesBuilder_ = null;
              nodes_ = other.nodes_;
              bitField0_ = (bitField0_ & ~0x00000008);
              nodesBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getNodesFieldBuilder() : null;
            } else {
              nodesBuilder_.addAllMessages(other.nodes_);
            }
          }
        }
        if (outputsBuilder_ == null) {
          if (!other.outputs_.isEmpty()) {
            if (outputs_.isEmpty()) {
              outputs_ = other.outputs_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureOutputsIsMutable();
              outputs_.addAll(other.outputs_);
            }
            onChanged();
          }
        } else {
          if (!other.outputs_.isEmpty()) {
            if (outputsBuilder_.isEmpty()) {
              outputsBuilder_.dispose();
              outputsBuilder_ = null;
              outputs_ = other.outputs_;
              bitField0_ = (bitField0_ & ~0x00000010);
              outputsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getOutputsFieldBuilder() : null;
            } else {
              outputsBuilder_.addAllMessages(other.outputs_);
            }
          }
        }
        if (other.hasFailureNode()) {
          mergeFailureNode(other.getFailureNode());
        }
        if (other.hasMetadataDefaults()) {
          mergeMetadataDefaults(other.getMetadataDefaults());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        flyteidl.core.Workflow.WorkflowTemplate parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (flyteidl.core.Workflow.WorkflowTemplate) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private flyteidl.core.IdentifierOuterClass.Identifier id_;
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.IdentifierOuterClass.Identifier, flyteidl.core.IdentifierOuterClass.Identifier.Builder, flyteidl.core.IdentifierOuterClass.IdentifierOrBuilder> idBuilder_;
      /**
       * <pre>
       * A globally unique identifier for the workflow.
       * </pre>
       *
       * <code>.flyteidl.core.Identifier id = 1;</code>
       */
      public boolean hasId() {
        return idBuilder_ != null || id_ != null;
      }
      /**
       * <pre>
       * A globally unique identifier for the workflow.
       * </pre>
       *
       * <code>.flyteidl.core.Identifier id = 1;</code>
       */
      public flyteidl.core.IdentifierOuterClass.Identifier getId() {
        if (idBuilder_ == null) {
          return id_ == null ? flyteidl.core.IdentifierOuterClass.Identifier.getDefaultInstance() : id_;
        } else {
          return idBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * A globally unique identifier for the workflow.
       * </pre>
       *
       * <code>.flyteidl.core.Identifier id = 1;</code>
       */
      public Builder setId(flyteidl.core.IdentifierOuterClass.Identifier value) {
        if (idBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          id_ = value;
          onChanged();
        } else {
          idBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * A globally unique identifier for the workflow.
       * </pre>
       *
       * <code>.flyteidl.core.Identifier id = 1;</code>
       */
      public Builder setId(
          flyteidl.core.IdentifierOuterClass.Identifier.Builder builderForValue) {
        if (idBuilder_ == null) {
          id_ = builderForValue.build();
          onChanged();
        } else {
          idBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * A globally unique identifier for the workflow.
       * </pre>
       *
       * <code>.flyteidl.core.Identifier id = 1;</code>
       */
      public Builder mergeId(flyteidl.core.IdentifierOuterClass.Identifier value) {
        if (idBuilder_ == null) {
          if (id_ != null) {
            id_ =
              flyteidl.core.IdentifierOuterClass.Identifier.newBuilder(id_).mergeFrom(value).buildPartial();
          } else {
            id_ = value;
          }
          onChanged();
        } else {
          idBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * A globally unique identifier for the workflow.
       * </pre>
       *
       * <code>.flyteidl.core.Identifier id = 1;</code>
       */
      public Builder clearId() {
        if (idBuilder_ == null) {
          id_ = null;
          onChanged();
        } else {
          id_ = null;
          idBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * A globally unique identifier for the workflow.
       * </pre>
       *
       * <code>.flyteidl.core.Identifier id = 1;</code>
       */
      public flyteidl.core.IdentifierOuterClass.Identifier.Builder getIdBuilder() {
        
        onChanged();
        return getIdFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * A globally unique identifier for the workflow.
       * </pre>
       *
       * <code>.flyteidl.core.Identifier id = 1;</code>
       */
      public flyteidl.core.IdentifierOuterClass.IdentifierOrBuilder getIdOrBuilder() {
        if (idBuilder_ != null) {
          return idBuilder_.getMessageOrBuilder();
        } else {
          return id_ == null ?
              flyteidl.core.IdentifierOuterClass.Identifier.getDefaultInstance() : id_;
        }
      }
      /**
       * <pre>
       * A globally unique identifier for the workflow.
       * </pre>
       *
       * <code>.flyteidl.core.Identifier id = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.IdentifierOuterClass.Identifier, flyteidl.core.IdentifierOuterClass.Identifier.Builder, flyteidl.core.IdentifierOuterClass.IdentifierOrBuilder> 
          getIdFieldBuilder() {
        if (idBuilder_ == null) {
          idBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              flyteidl.core.IdentifierOuterClass.Identifier, flyteidl.core.IdentifierOuterClass.Identifier.Builder, flyteidl.core.IdentifierOuterClass.IdentifierOrBuilder>(
                  getId(),
                  getParentForChildren(),
                  isClean());
          id_ = null;
        }
        return idBuilder_;
      }

      private flyteidl.core.Workflow.WorkflowMetadata metadata_;
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Workflow.WorkflowMetadata, flyteidl.core.Workflow.WorkflowMetadata.Builder, flyteidl.core.Workflow.WorkflowMetadataOrBuilder> metadataBuilder_;
      /**
       * <pre>
       * Extra metadata about the workflow.
       * </pre>
       *
       * <code>.flyteidl.core.WorkflowMetadata metadata = 2;</code>
       */
      public boolean hasMetadata() {
        return metadataBuilder_ != null || metadata_ != null;
      }
      /**
       * <pre>
       * Extra metadata about the workflow.
       * </pre>
       *
       * <code>.flyteidl.core.WorkflowMetadata metadata = 2;</code>
       */
      public flyteidl.core.Workflow.WorkflowMetadata getMetadata() {
        if (metadataBuilder_ == null) {
          return metadata_ == null ? flyteidl.core.Workflow.WorkflowMetadata.getDefaultInstance() : metadata_;
        } else {
          return metadataBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Extra metadata about the workflow.
       * </pre>
       *
       * <code>.flyteidl.core.WorkflowMetadata metadata = 2;</code>
       */
      public Builder setMetadata(flyteidl.core.Workflow.WorkflowMetadata value) {
        if (metadataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          metadata_ = value;
          onChanged();
        } else {
          metadataBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Extra metadata about the workflow.
       * </pre>
       *
       * <code>.flyteidl.core.WorkflowMetadata metadata = 2;</code>
       */
      public Builder setMetadata(
          flyteidl.core.Workflow.WorkflowMetadata.Builder builderForValue) {
        if (metadataBuilder_ == null) {
          metadata_ = builderForValue.build();
          onChanged();
        } else {
          metadataBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Extra metadata about the workflow.
       * </pre>
       *
       * <code>.flyteidl.core.WorkflowMetadata metadata = 2;</code>
       */
      public Builder mergeMetadata(flyteidl.core.Workflow.WorkflowMetadata value) {
        if (metadataBuilder_ == null) {
          if (metadata_ != null) {
            metadata_ =
              flyteidl.core.Workflow.WorkflowMetadata.newBuilder(metadata_).mergeFrom(value).buildPartial();
          } else {
            metadata_ = value;
          }
          onChanged();
        } else {
          metadataBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Extra metadata about the workflow.
       * </pre>
       *
       * <code>.flyteidl.core.WorkflowMetadata metadata = 2;</code>
       */
      public Builder clearMetadata() {
        if (metadataBuilder_ == null) {
          metadata_ = null;
          onChanged();
        } else {
          metadata_ = null;
          metadataBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Extra metadata about the workflow.
       * </pre>
       *
       * <code>.flyteidl.core.WorkflowMetadata metadata = 2;</code>
       */
      public flyteidl.core.Workflow.WorkflowMetadata.Builder getMetadataBuilder() {
        
        onChanged();
        return getMetadataFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Extra metadata about the workflow.
       * </pre>
       *
       * <code>.flyteidl.core.WorkflowMetadata metadata = 2;</code>
       */
      public flyteidl.core.Workflow.WorkflowMetadataOrBuilder getMetadataOrBuilder() {
        if (metadataBuilder_ != null) {
          return metadataBuilder_.getMessageOrBuilder();
        } else {
          return metadata_ == null ?
              flyteidl.core.Workflow.WorkflowMetadata.getDefaultInstance() : metadata_;
        }
      }
      /**
       * <pre>
       * Extra metadata about the workflow.
       * </pre>
       *
       * <code>.flyteidl.core.WorkflowMetadata metadata = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Workflow.WorkflowMetadata, flyteidl.core.Workflow.WorkflowMetadata.Builder, flyteidl.core.Workflow.WorkflowMetadataOrBuilder> 
          getMetadataFieldBuilder() {
        if (metadataBuilder_ == null) {
          metadataBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              flyteidl.core.Workflow.WorkflowMetadata, flyteidl.core.Workflow.WorkflowMetadata.Builder, flyteidl.core.Workflow.WorkflowMetadataOrBuilder>(
                  getMetadata(),
                  getParentForChildren(),
                  isClean());
          metadata_ = null;
        }
        return metadataBuilder_;
      }

      private flyteidl.core.Interface.TypedInterface interface_;
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Interface.TypedInterface, flyteidl.core.Interface.TypedInterface.Builder, flyteidl.core.Interface.TypedInterfaceOrBuilder> interfaceBuilder_;
      /**
       * <pre>
       * Defines a strongly typed interface for the Workflow. This can include some optional parameters.
       * </pre>
       *
       * <code>.flyteidl.core.TypedInterface interface = 3;</code>
       */
      public boolean hasInterface() {
        return interfaceBuilder_ != null || interface_ != null;
      }
      /**
       * <pre>
       * Defines a strongly typed interface for the Workflow. This can include some optional parameters.
       * </pre>
       *
       * <code>.flyteidl.core.TypedInterface interface = 3;</code>
       */
      public flyteidl.core.Interface.TypedInterface getInterface() {
        if (interfaceBuilder_ == null) {
          return interface_ == null ? flyteidl.core.Interface.TypedInterface.getDefaultInstance() : interface_;
        } else {
          return interfaceBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Defines a strongly typed interface for the Workflow. This can include some optional parameters.
       * </pre>
       *
       * <code>.flyteidl.core.TypedInterface interface = 3;</code>
       */
      public Builder setInterface(flyteidl.core.Interface.TypedInterface value) {
        if (interfaceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          interface_ = value;
          onChanged();
        } else {
          interfaceBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Defines a strongly typed interface for the Workflow. This can include some optional parameters.
       * </pre>
       *
       * <code>.flyteidl.core.TypedInterface interface = 3;</code>
       */
      public Builder setInterface(
          flyteidl.core.Interface.TypedInterface.Builder builderForValue) {
        if (interfaceBuilder_ == null) {
          interface_ = builderForValue.build();
          onChanged();
        } else {
          interfaceBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Defines a strongly typed interface for the Workflow. This can include some optional parameters.
       * </pre>
       *
       * <code>.flyteidl.core.TypedInterface interface = 3;</code>
       */
      public Builder mergeInterface(flyteidl.core.Interface.TypedInterface value) {
        if (interfaceBuilder_ == null) {
          if (interface_ != null) {
            interface_ =
              flyteidl.core.Interface.TypedInterface.newBuilder(interface_).mergeFrom(value).buildPartial();
          } else {
            interface_ = value;
          }
          onChanged();
        } else {
          interfaceBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Defines a strongly typed interface for the Workflow. This can include some optional parameters.
       * </pre>
       *
       * <code>.flyteidl.core.TypedInterface interface = 3;</code>
       */
      public Builder clearInterface() {
        if (interfaceBuilder_ == null) {
          interface_ = null;
          onChanged();
        } else {
          interface_ = null;
          interfaceBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Defines a strongly typed interface for the Workflow. This can include some optional parameters.
       * </pre>
       *
       * <code>.flyteidl.core.TypedInterface interface = 3;</code>
       */
      public flyteidl.core.Interface.TypedInterface.Builder getInterfaceBuilder() {
        
        onChanged();
        return getInterfaceFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Defines a strongly typed interface for the Workflow. This can include some optional parameters.
       * </pre>
       *
       * <code>.flyteidl.core.TypedInterface interface = 3;</code>
       */
      public flyteidl.core.Interface.TypedInterfaceOrBuilder getInterfaceOrBuilder() {
        if (interfaceBuilder_ != null) {
          return interfaceBuilder_.getMessageOrBuilder();
        } else {
          return interface_ == null ?
              flyteidl.core.Interface.TypedInterface.getDefaultInstance() : interface_;
        }
      }
      /**
       * <pre>
       * Defines a strongly typed interface for the Workflow. This can include some optional parameters.
       * </pre>
       *
       * <code>.flyteidl.core.TypedInterface interface = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Interface.TypedInterface, flyteidl.core.Interface.TypedInterface.Builder, flyteidl.core.Interface.TypedInterfaceOrBuilder> 
          getInterfaceFieldBuilder() {
        if (interfaceBuilder_ == null) {
          interfaceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              flyteidl.core.Interface.TypedInterface, flyteidl.core.Interface.TypedInterface.Builder, flyteidl.core.Interface.TypedInterfaceOrBuilder>(
                  getInterface(),
                  getParentForChildren(),
                  isClean());
          interface_ = null;
        }
        return interfaceBuilder_;
      }

      private java.util.List<flyteidl.core.Workflow.Node> nodes_ =
        java.util.Collections.emptyList();
      private void ensureNodesIsMutable() {
        if (!((bitField0_ & 0x00000008) != 0)) {
          nodes_ = new java.util.ArrayList<flyteidl.core.Workflow.Node>(nodes_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          flyteidl.core.Workflow.Node, flyteidl.core.Workflow.Node.Builder, flyteidl.core.Workflow.NodeOrBuilder> nodesBuilder_;

      /**
       * <pre>
       * A list of nodes. In addition, 'globals' is a special reserved node id that can be used to consume workflow inputs.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Node nodes = 4;</code>
       */
      public java.util.List<flyteidl.core.Workflow.Node> getNodesList() {
        if (nodesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(nodes_);
        } else {
          return nodesBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * A list of nodes. In addition, 'globals' is a special reserved node id that can be used to consume workflow inputs.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Node nodes = 4;</code>
       */
      public int getNodesCount() {
        if (nodesBuilder_ == null) {
          return nodes_.size();
        } else {
          return nodesBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * A list of nodes. In addition, 'globals' is a special reserved node id that can be used to consume workflow inputs.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Node nodes = 4;</code>
       */
      public flyteidl.core.Workflow.Node getNodes(int index) {
        if (nodesBuilder_ == null) {
          return nodes_.get(index);
        } else {
          return nodesBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * A list of nodes. In addition, 'globals' is a special reserved node id that can be used to consume workflow inputs.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Node nodes = 4;</code>
       */
      public Builder setNodes(
          int index, flyteidl.core.Workflow.Node value) {
        if (nodesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureNodesIsMutable();
          nodes_.set(index, value);
          onChanged();
        } else {
          nodesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A list of nodes. In addition, 'globals' is a special reserved node id that can be used to consume workflow inputs.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Node nodes = 4;</code>
       */
      public Builder setNodes(
          int index, flyteidl.core.Workflow.Node.Builder builderForValue) {
        if (nodesBuilder_ == null) {
          ensureNodesIsMutable();
          nodes_.set(index, builderForValue.build());
          onChanged();
        } else {
          nodesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A list of nodes. In addition, 'globals' is a special reserved node id that can be used to consume workflow inputs.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Node nodes = 4;</code>
       */
      public Builder addNodes(flyteidl.core.Workflow.Node value) {
        if (nodesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureNodesIsMutable();
          nodes_.add(value);
          onChanged();
        } else {
          nodesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * A list of nodes. In addition, 'globals' is a special reserved node id that can be used to consume workflow inputs.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Node nodes = 4;</code>
       */
      public Builder addNodes(
          int index, flyteidl.core.Workflow.Node value) {
        if (nodesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureNodesIsMutable();
          nodes_.add(index, value);
          onChanged();
        } else {
          nodesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A list of nodes. In addition, 'globals' is a special reserved node id that can be used to consume workflow inputs.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Node nodes = 4;</code>
       */
      public Builder addNodes(
          flyteidl.core.Workflow.Node.Builder builderForValue) {
        if (nodesBuilder_ == null) {
          ensureNodesIsMutable();
          nodes_.add(builderForValue.build());
          onChanged();
        } else {
          nodesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A list of nodes. In addition, 'globals' is a special reserved node id that can be used to consume workflow inputs.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Node nodes = 4;</code>
       */
      public Builder addNodes(
          int index, flyteidl.core.Workflow.Node.Builder builderForValue) {
        if (nodesBuilder_ == null) {
          ensureNodesIsMutable();
          nodes_.add(index, builderForValue.build());
          onChanged();
        } else {
          nodesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A list of nodes. In addition, 'globals' is a special reserved node id that can be used to consume workflow inputs.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Node nodes = 4;</code>
       */
      public Builder addAllNodes(
          java.lang.Iterable<? extends flyteidl.core.Workflow.Node> values) {
        if (nodesBuilder_ == null) {
          ensureNodesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, nodes_);
          onChanged();
        } else {
          nodesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * A list of nodes. In addition, 'globals' is a special reserved node id that can be used to consume workflow inputs.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Node nodes = 4;</code>
       */
      public Builder clearNodes() {
        if (nodesBuilder_ == null) {
          nodes_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          nodesBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * A list of nodes. In addition, 'globals' is a special reserved node id that can be used to consume workflow inputs.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Node nodes = 4;</code>
       */
      public Builder removeNodes(int index) {
        if (nodesBuilder_ == null) {
          ensureNodesIsMutable();
          nodes_.remove(index);
          onChanged();
        } else {
          nodesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * A list of nodes. In addition, 'globals' is a special reserved node id that can be used to consume workflow inputs.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Node nodes = 4;</code>
       */
      public flyteidl.core.Workflow.Node.Builder getNodesBuilder(
          int index) {
        return getNodesFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * A list of nodes. In addition, 'globals' is a special reserved node id that can be used to consume workflow inputs.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Node nodes = 4;</code>
       */
      public flyteidl.core.Workflow.NodeOrBuilder getNodesOrBuilder(
          int index) {
        if (nodesBuilder_ == null) {
          return nodes_.get(index);  } else {
          return nodesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * A list of nodes. In addition, 'globals' is a special reserved node id that can be used to consume workflow inputs.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Node nodes = 4;</code>
       */
      public java.util.List<? extends flyteidl.core.Workflow.NodeOrBuilder> 
           getNodesOrBuilderList() {
        if (nodesBuilder_ != null) {
          return nodesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(nodes_);
        }
      }
      /**
       * <pre>
       * A list of nodes. In addition, 'globals' is a special reserved node id that can be used to consume workflow inputs.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Node nodes = 4;</code>
       */
      public flyteidl.core.Workflow.Node.Builder addNodesBuilder() {
        return getNodesFieldBuilder().addBuilder(
            flyteidl.core.Workflow.Node.getDefaultInstance());
      }
      /**
       * <pre>
       * A list of nodes. In addition, 'globals' is a special reserved node id that can be used to consume workflow inputs.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Node nodes = 4;</code>
       */
      public flyteidl.core.Workflow.Node.Builder addNodesBuilder(
          int index) {
        return getNodesFieldBuilder().addBuilder(
            index, flyteidl.core.Workflow.Node.getDefaultInstance());
      }
      /**
       * <pre>
       * A list of nodes. In addition, 'globals' is a special reserved node id that can be used to consume workflow inputs.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Node nodes = 4;</code>
       */
      public java.util.List<flyteidl.core.Workflow.Node.Builder> 
           getNodesBuilderList() {
        return getNodesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          flyteidl.core.Workflow.Node, flyteidl.core.Workflow.Node.Builder, flyteidl.core.Workflow.NodeOrBuilder> 
          getNodesFieldBuilder() {
        if (nodesBuilder_ == null) {
          nodesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              flyteidl.core.Workflow.Node, flyteidl.core.Workflow.Node.Builder, flyteidl.core.Workflow.NodeOrBuilder>(
                  nodes_,
                  ((bitField0_ & 0x00000008) != 0),
                  getParentForChildren(),
                  isClean());
          nodes_ = null;
        }
        return nodesBuilder_;
      }

      private java.util.List<flyteidl.core.Literals.Binding> outputs_ =
        java.util.Collections.emptyList();
      private void ensureOutputsIsMutable() {
        if (!((bitField0_ & 0x00000010) != 0)) {
          outputs_ = new java.util.ArrayList<flyteidl.core.Literals.Binding>(outputs_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          flyteidl.core.Literals.Binding, flyteidl.core.Literals.Binding.Builder, flyteidl.core.Literals.BindingOrBuilder> outputsBuilder_;

      /**
       * <pre>
       * A list of output bindings that specify how to construct workflow outputs. Bindings can pull node outputs or
       * specify literals. All workflow outputs specified in the interface field must be bound in order for the workflow
       * to be validated. A workflow has an implicit dependency on all of its nodes to execute successfully in order to
       * bind final outputs.
       * Most of these outputs will be Binding's with a BindingData of type OutputReference.  That is, your workflow can
       * just have an output of some constant (`Output(5)`), but usually, the workflow will be pulling
       * outputs from the output of a task.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Binding outputs = 5;</code>
       */
      public java.util.List<flyteidl.core.Literals.Binding> getOutputsList() {
        if (outputsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(outputs_);
        } else {
          return outputsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * A list of output bindings that specify how to construct workflow outputs. Bindings can pull node outputs or
       * specify literals. All workflow outputs specified in the interface field must be bound in order for the workflow
       * to be validated. A workflow has an implicit dependency on all of its nodes to execute successfully in order to
       * bind final outputs.
       * Most of these outputs will be Binding's with a BindingData of type OutputReference.  That is, your workflow can
       * just have an output of some constant (`Output(5)`), but usually, the workflow will be pulling
       * outputs from the output of a task.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Binding outputs = 5;</code>
       */
      public int getOutputsCount() {
        if (outputsBuilder_ == null) {
          return outputs_.size();
        } else {
          return outputsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * A list of output bindings that specify how to construct workflow outputs. Bindings can pull node outputs or
       * specify literals. All workflow outputs specified in the interface field must be bound in order for the workflow
       * to be validated. A workflow has an implicit dependency on all of its nodes to execute successfully in order to
       * bind final outputs.
       * Most of these outputs will be Binding's with a BindingData of type OutputReference.  That is, your workflow can
       * just have an output of some constant (`Output(5)`), but usually, the workflow will be pulling
       * outputs from the output of a task.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Binding outputs = 5;</code>
       */
      public flyteidl.core.Literals.Binding getOutputs(int index) {
        if (outputsBuilder_ == null) {
          return outputs_.get(index);
        } else {
          return outputsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * A list of output bindings that specify how to construct workflow outputs. Bindings can pull node outputs or
       * specify literals. All workflow outputs specified in the interface field must be bound in order for the workflow
       * to be validated. A workflow has an implicit dependency on all of its nodes to execute successfully in order to
       * bind final outputs.
       * Most of these outputs will be Binding's with a BindingData of type OutputReference.  That is, your workflow can
       * just have an output of some constant (`Output(5)`), but usually, the workflow will be pulling
       * outputs from the output of a task.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Binding outputs = 5;</code>
       */
      public Builder setOutputs(
          int index, flyteidl.core.Literals.Binding value) {
        if (outputsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutputsIsMutable();
          outputs_.set(index, value);
          onChanged();
        } else {
          outputsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A list of output bindings that specify how to construct workflow outputs. Bindings can pull node outputs or
       * specify literals. All workflow outputs specified in the interface field must be bound in order for the workflow
       * to be validated. A workflow has an implicit dependency on all of its nodes to execute successfully in order to
       * bind final outputs.
       * Most of these outputs will be Binding's with a BindingData of type OutputReference.  That is, your workflow can
       * just have an output of some constant (`Output(5)`), but usually, the workflow will be pulling
       * outputs from the output of a task.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Binding outputs = 5;</code>
       */
      public Builder setOutputs(
          int index, flyteidl.core.Literals.Binding.Builder builderForValue) {
        if (outputsBuilder_ == null) {
          ensureOutputsIsMutable();
          outputs_.set(index, builderForValue.build());
          onChanged();
        } else {
          outputsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A list of output bindings that specify how to construct workflow outputs. Bindings can pull node outputs or
       * specify literals. All workflow outputs specified in the interface field must be bound in order for the workflow
       * to be validated. A workflow has an implicit dependency on all of its nodes to execute successfully in order to
       * bind final outputs.
       * Most of these outputs will be Binding's with a BindingData of type OutputReference.  That is, your workflow can
       * just have an output of some constant (`Output(5)`), but usually, the workflow will be pulling
       * outputs from the output of a task.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Binding outputs = 5;</code>
       */
      public Builder addOutputs(flyteidl.core.Literals.Binding value) {
        if (outputsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutputsIsMutable();
          outputs_.add(value);
          onChanged();
        } else {
          outputsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * A list of output bindings that specify how to construct workflow outputs. Bindings can pull node outputs or
       * specify literals. All workflow outputs specified in the interface field must be bound in order for the workflow
       * to be validated. A workflow has an implicit dependency on all of its nodes to execute successfully in order to
       * bind final outputs.
       * Most of these outputs will be Binding's with a BindingData of type OutputReference.  That is, your workflow can
       * just have an output of some constant (`Output(5)`), but usually, the workflow will be pulling
       * outputs from the output of a task.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Binding outputs = 5;</code>
       */
      public Builder addOutputs(
          int index, flyteidl.core.Literals.Binding value) {
        if (outputsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutputsIsMutable();
          outputs_.add(index, value);
          onChanged();
        } else {
          outputsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A list of output bindings that specify how to construct workflow outputs. Bindings can pull node outputs or
       * specify literals. All workflow outputs specified in the interface field must be bound in order for the workflow
       * to be validated. A workflow has an implicit dependency on all of its nodes to execute successfully in order to
       * bind final outputs.
       * Most of these outputs will be Binding's with a BindingData of type OutputReference.  That is, your workflow can
       * just have an output of some constant (`Output(5)`), but usually, the workflow will be pulling
       * outputs from the output of a task.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Binding outputs = 5;</code>
       */
      public Builder addOutputs(
          flyteidl.core.Literals.Binding.Builder builderForValue) {
        if (outputsBuilder_ == null) {
          ensureOutputsIsMutable();
          outputs_.add(builderForValue.build());
          onChanged();
        } else {
          outputsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A list of output bindings that specify how to construct workflow outputs. Bindings can pull node outputs or
       * specify literals. All workflow outputs specified in the interface field must be bound in order for the workflow
       * to be validated. A workflow has an implicit dependency on all of its nodes to execute successfully in order to
       * bind final outputs.
       * Most of these outputs will be Binding's with a BindingData of type OutputReference.  That is, your workflow can
       * just have an output of some constant (`Output(5)`), but usually, the workflow will be pulling
       * outputs from the output of a task.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Binding outputs = 5;</code>
       */
      public Builder addOutputs(
          int index, flyteidl.core.Literals.Binding.Builder builderForValue) {
        if (outputsBuilder_ == null) {
          ensureOutputsIsMutable();
          outputs_.add(index, builderForValue.build());
          onChanged();
        } else {
          outputsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A list of output bindings that specify how to construct workflow outputs. Bindings can pull node outputs or
       * specify literals. All workflow outputs specified in the interface field must be bound in order for the workflow
       * to be validated. A workflow has an implicit dependency on all of its nodes to execute successfully in order to
       * bind final outputs.
       * Most of these outputs will be Binding's with a BindingData of type OutputReference.  That is, your workflow can
       * just have an output of some constant (`Output(5)`), but usually, the workflow will be pulling
       * outputs from the output of a task.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Binding outputs = 5;</code>
       */
      public Builder addAllOutputs(
          java.lang.Iterable<? extends flyteidl.core.Literals.Binding> values) {
        if (outputsBuilder_ == null) {
          ensureOutputsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, outputs_);
          onChanged();
        } else {
          outputsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * A list of output bindings that specify how to construct workflow outputs. Bindings can pull node outputs or
       * specify literals. All workflow outputs specified in the interface field must be bound in order for the workflow
       * to be validated. A workflow has an implicit dependency on all of its nodes to execute successfully in order to
       * bind final outputs.
       * Most of these outputs will be Binding's with a BindingData of type OutputReference.  That is, your workflow can
       * just have an output of some constant (`Output(5)`), but usually, the workflow will be pulling
       * outputs from the output of a task.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Binding outputs = 5;</code>
       */
      public Builder clearOutputs() {
        if (outputsBuilder_ == null) {
          outputs_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          outputsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * A list of output bindings that specify how to construct workflow outputs. Bindings can pull node outputs or
       * specify literals. All workflow outputs specified in the interface field must be bound in order for the workflow
       * to be validated. A workflow has an implicit dependency on all of its nodes to execute successfully in order to
       * bind final outputs.
       * Most of these outputs will be Binding's with a BindingData of type OutputReference.  That is, your workflow can
       * just have an output of some constant (`Output(5)`), but usually, the workflow will be pulling
       * outputs from the output of a task.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Binding outputs = 5;</code>
       */
      public Builder removeOutputs(int index) {
        if (outputsBuilder_ == null) {
          ensureOutputsIsMutable();
          outputs_.remove(index);
          onChanged();
        } else {
          outputsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * A list of output bindings that specify how to construct workflow outputs. Bindings can pull node outputs or
       * specify literals. All workflow outputs specified in the interface field must be bound in order for the workflow
       * to be validated. A workflow has an implicit dependency on all of its nodes to execute successfully in order to
       * bind final outputs.
       * Most of these outputs will be Binding's with a BindingData of type OutputReference.  That is, your workflow can
       * just have an output of some constant (`Output(5)`), but usually, the workflow will be pulling
       * outputs from the output of a task.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Binding outputs = 5;</code>
       */
      public flyteidl.core.Literals.Binding.Builder getOutputsBuilder(
          int index) {
        return getOutputsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * A list of output bindings that specify how to construct workflow outputs. Bindings can pull node outputs or
       * specify literals. All workflow outputs specified in the interface field must be bound in order for the workflow
       * to be validated. A workflow has an implicit dependency on all of its nodes to execute successfully in order to
       * bind final outputs.
       * Most of these outputs will be Binding's with a BindingData of type OutputReference.  That is, your workflow can
       * just have an output of some constant (`Output(5)`), but usually, the workflow will be pulling
       * outputs from the output of a task.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Binding outputs = 5;</code>
       */
      public flyteidl.core.Literals.BindingOrBuilder getOutputsOrBuilder(
          int index) {
        if (outputsBuilder_ == null) {
          return outputs_.get(index);  } else {
          return outputsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * A list of output bindings that specify how to construct workflow outputs. Bindings can pull node outputs or
       * specify literals. All workflow outputs specified in the interface field must be bound in order for the workflow
       * to be validated. A workflow has an implicit dependency on all of its nodes to execute successfully in order to
       * bind final outputs.
       * Most of these outputs will be Binding's with a BindingData of type OutputReference.  That is, your workflow can
       * just have an output of some constant (`Output(5)`), but usually, the workflow will be pulling
       * outputs from the output of a task.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Binding outputs = 5;</code>
       */
      public java.util.List<? extends flyteidl.core.Literals.BindingOrBuilder> 
           getOutputsOrBuilderList() {
        if (outputsBuilder_ != null) {
          return outputsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(outputs_);
        }
      }
      /**
       * <pre>
       * A list of output bindings that specify how to construct workflow outputs. Bindings can pull node outputs or
       * specify literals. All workflow outputs specified in the interface field must be bound in order for the workflow
       * to be validated. A workflow has an implicit dependency on all of its nodes to execute successfully in order to
       * bind final outputs.
       * Most of these outputs will be Binding's with a BindingData of type OutputReference.  That is, your workflow can
       * just have an output of some constant (`Output(5)`), but usually, the workflow will be pulling
       * outputs from the output of a task.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Binding outputs = 5;</code>
       */
      public flyteidl.core.Literals.Binding.Builder addOutputsBuilder() {
        return getOutputsFieldBuilder().addBuilder(
            flyteidl.core.Literals.Binding.getDefaultInstance());
      }
      /**
       * <pre>
       * A list of output bindings that specify how to construct workflow outputs. Bindings can pull node outputs or
       * specify literals. All workflow outputs specified in the interface field must be bound in order for the workflow
       * to be validated. A workflow has an implicit dependency on all of its nodes to execute successfully in order to
       * bind final outputs.
       * Most of these outputs will be Binding's with a BindingData of type OutputReference.  That is, your workflow can
       * just have an output of some constant (`Output(5)`), but usually, the workflow will be pulling
       * outputs from the output of a task.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Binding outputs = 5;</code>
       */
      public flyteidl.core.Literals.Binding.Builder addOutputsBuilder(
          int index) {
        return getOutputsFieldBuilder().addBuilder(
            index, flyteidl.core.Literals.Binding.getDefaultInstance());
      }
      /**
       * <pre>
       * A list of output bindings that specify how to construct workflow outputs. Bindings can pull node outputs or
       * specify literals. All workflow outputs specified in the interface field must be bound in order for the workflow
       * to be validated. A workflow has an implicit dependency on all of its nodes to execute successfully in order to
       * bind final outputs.
       * Most of these outputs will be Binding's with a BindingData of type OutputReference.  That is, your workflow can
       * just have an output of some constant (`Output(5)`), but usually, the workflow will be pulling
       * outputs from the output of a task.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Binding outputs = 5;</code>
       */
      public java.util.List<flyteidl.core.Literals.Binding.Builder> 
           getOutputsBuilderList() {
        return getOutputsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          flyteidl.core.Literals.Binding, flyteidl.core.Literals.Binding.Builder, flyteidl.core.Literals.BindingOrBuilder> 
          getOutputsFieldBuilder() {
        if (outputsBuilder_ == null) {
          outputsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              flyteidl.core.Literals.Binding, flyteidl.core.Literals.Binding.Builder, flyteidl.core.Literals.BindingOrBuilder>(
                  outputs_,
                  ((bitField0_ & 0x00000010) != 0),
                  getParentForChildren(),
                  isClean());
          outputs_ = null;
        }
        return outputsBuilder_;
      }

      private flyteidl.core.Workflow.Node failureNode_;
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Workflow.Node, flyteidl.core.Workflow.Node.Builder, flyteidl.core.Workflow.NodeOrBuilder> failureNodeBuilder_;
      /**
       * <pre>
       *+optional A catch-all node. This node is executed whenever the execution engine determines the workflow has failed.
       * The interface of this node must match the Workflow interface with an additional input named 'error' of type
       * pb.lyft.flyte.core.Error.
       * </pre>
       *
       * <code>.flyteidl.core.Node failure_node = 6;</code>
       */
      public boolean hasFailureNode() {
        return failureNodeBuilder_ != null || failureNode_ != null;
      }
      /**
       * <pre>
       *+optional A catch-all node. This node is executed whenever the execution engine determines the workflow has failed.
       * The interface of this node must match the Workflow interface with an additional input named 'error' of type
       * pb.lyft.flyte.core.Error.
       * </pre>
       *
       * <code>.flyteidl.core.Node failure_node = 6;</code>
       */
      public flyteidl.core.Workflow.Node getFailureNode() {
        if (failureNodeBuilder_ == null) {
          return failureNode_ == null ? flyteidl.core.Workflow.Node.getDefaultInstance() : failureNode_;
        } else {
          return failureNodeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *+optional A catch-all node. This node is executed whenever the execution engine determines the workflow has failed.
       * The interface of this node must match the Workflow interface with an additional input named 'error' of type
       * pb.lyft.flyte.core.Error.
       * </pre>
       *
       * <code>.flyteidl.core.Node failure_node = 6;</code>
       */
      public Builder setFailureNode(flyteidl.core.Workflow.Node value) {
        if (failureNodeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          failureNode_ = value;
          onChanged();
        } else {
          failureNodeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       *+optional A catch-all node. This node is executed whenever the execution engine determines the workflow has failed.
       * The interface of this node must match the Workflow interface with an additional input named 'error' of type
       * pb.lyft.flyte.core.Error.
       * </pre>
       *
       * <code>.flyteidl.core.Node failure_node = 6;</code>
       */
      public Builder setFailureNode(
          flyteidl.core.Workflow.Node.Builder builderForValue) {
        if (failureNodeBuilder_ == null) {
          failureNode_ = builderForValue.build();
          onChanged();
        } else {
          failureNodeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       *+optional A catch-all node. This node is executed whenever the execution engine determines the workflow has failed.
       * The interface of this node must match the Workflow interface with an additional input named 'error' of type
       * pb.lyft.flyte.core.Error.
       * </pre>
       *
       * <code>.flyteidl.core.Node failure_node = 6;</code>
       */
      public Builder mergeFailureNode(flyteidl.core.Workflow.Node value) {
        if (failureNodeBuilder_ == null) {
          if (failureNode_ != null) {
            failureNode_ =
              flyteidl.core.Workflow.Node.newBuilder(failureNode_).mergeFrom(value).buildPartial();
          } else {
            failureNode_ = value;
          }
          onChanged();
        } else {
          failureNodeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       *+optional A catch-all node. This node is executed whenever the execution engine determines the workflow has failed.
       * The interface of this node must match the Workflow interface with an additional input named 'error' of type
       * pb.lyft.flyte.core.Error.
       * </pre>
       *
       * <code>.flyteidl.core.Node failure_node = 6;</code>
       */
      public Builder clearFailureNode() {
        if (failureNodeBuilder_ == null) {
          failureNode_ = null;
          onChanged();
        } else {
          failureNode_ = null;
          failureNodeBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       *+optional A catch-all node. This node is executed whenever the execution engine determines the workflow has failed.
       * The interface of this node must match the Workflow interface with an additional input named 'error' of type
       * pb.lyft.flyte.core.Error.
       * </pre>
       *
       * <code>.flyteidl.core.Node failure_node = 6;</code>
       */
      public flyteidl.core.Workflow.Node.Builder getFailureNodeBuilder() {
        
        onChanged();
        return getFailureNodeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *+optional A catch-all node. This node is executed whenever the execution engine determines the workflow has failed.
       * The interface of this node must match the Workflow interface with an additional input named 'error' of type
       * pb.lyft.flyte.core.Error.
       * </pre>
       *
       * <code>.flyteidl.core.Node failure_node = 6;</code>
       */
      public flyteidl.core.Workflow.NodeOrBuilder getFailureNodeOrBuilder() {
        if (failureNodeBuilder_ != null) {
          return failureNodeBuilder_.getMessageOrBuilder();
        } else {
          return failureNode_ == null ?
              flyteidl.core.Workflow.Node.getDefaultInstance() : failureNode_;
        }
      }
      /**
       * <pre>
       *+optional A catch-all node. This node is executed whenever the execution engine determines the workflow has failed.
       * The interface of this node must match the Workflow interface with an additional input named 'error' of type
       * pb.lyft.flyte.core.Error.
       * </pre>
       *
       * <code>.flyteidl.core.Node failure_node = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Workflow.Node, flyteidl.core.Workflow.Node.Builder, flyteidl.core.Workflow.NodeOrBuilder> 
          getFailureNodeFieldBuilder() {
        if (failureNodeBuilder_ == null) {
          failureNodeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              flyteidl.core.Workflow.Node, flyteidl.core.Workflow.Node.Builder, flyteidl.core.Workflow.NodeOrBuilder>(
                  getFailureNode(),
                  getParentForChildren(),
                  isClean());
          failureNode_ = null;
        }
        return failureNodeBuilder_;
      }

      private flyteidl.core.Workflow.WorkflowMetadataDefaults metadataDefaults_;
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Workflow.WorkflowMetadataDefaults, flyteidl.core.Workflow.WorkflowMetadataDefaults.Builder, flyteidl.core.Workflow.WorkflowMetadataDefaultsOrBuilder> metadataDefaultsBuilder_;
      /**
       * <pre>
       * workflow defaults
       * </pre>
       *
       * <code>.flyteidl.core.WorkflowMetadataDefaults metadata_defaults = 7;</code>
       */
      public boolean hasMetadataDefaults() {
        return metadataDefaultsBuilder_ != null || metadataDefaults_ != null;
      }
      /**
       * <pre>
       * workflow defaults
       * </pre>
       *
       * <code>.flyteidl.core.WorkflowMetadataDefaults metadata_defaults = 7;</code>
       */
      public flyteidl.core.Workflow.WorkflowMetadataDefaults getMetadataDefaults() {
        if (metadataDefaultsBuilder_ == null) {
          return metadataDefaults_ == null ? flyteidl.core.Workflow.WorkflowMetadataDefaults.getDefaultInstance() : metadataDefaults_;
        } else {
          return metadataDefaultsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * workflow defaults
       * </pre>
       *
       * <code>.flyteidl.core.WorkflowMetadataDefaults metadata_defaults = 7;</code>
       */
      public Builder setMetadataDefaults(flyteidl.core.Workflow.WorkflowMetadataDefaults value) {
        if (metadataDefaultsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          metadataDefaults_ = value;
          onChanged();
        } else {
          metadataDefaultsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * workflow defaults
       * </pre>
       *
       * <code>.flyteidl.core.WorkflowMetadataDefaults metadata_defaults = 7;</code>
       */
      public Builder setMetadataDefaults(
          flyteidl.core.Workflow.WorkflowMetadataDefaults.Builder builderForValue) {
        if (metadataDefaultsBuilder_ == null) {
          metadataDefaults_ = builderForValue.build();
          onChanged();
        } else {
          metadataDefaultsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * workflow defaults
       * </pre>
       *
       * <code>.flyteidl.core.WorkflowMetadataDefaults metadata_defaults = 7;</code>
       */
      public Builder mergeMetadataDefaults(flyteidl.core.Workflow.WorkflowMetadataDefaults value) {
        if (metadataDefaultsBuilder_ == null) {
          if (metadataDefaults_ != null) {
            metadataDefaults_ =
              flyteidl.core.Workflow.WorkflowMetadataDefaults.newBuilder(metadataDefaults_).mergeFrom(value).buildPartial();
          } else {
            metadataDefaults_ = value;
          }
          onChanged();
        } else {
          metadataDefaultsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * workflow defaults
       * </pre>
       *
       * <code>.flyteidl.core.WorkflowMetadataDefaults metadata_defaults = 7;</code>
       */
      public Builder clearMetadataDefaults() {
        if (metadataDefaultsBuilder_ == null) {
          metadataDefaults_ = null;
          onChanged();
        } else {
          metadataDefaults_ = null;
          metadataDefaultsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * workflow defaults
       * </pre>
       *
       * <code>.flyteidl.core.WorkflowMetadataDefaults metadata_defaults = 7;</code>
       */
      public flyteidl.core.Workflow.WorkflowMetadataDefaults.Builder getMetadataDefaultsBuilder() {
        
        onChanged();
        return getMetadataDefaultsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * workflow defaults
       * </pre>
       *
       * <code>.flyteidl.core.WorkflowMetadataDefaults metadata_defaults = 7;</code>
       */
      public flyteidl.core.Workflow.WorkflowMetadataDefaultsOrBuilder getMetadataDefaultsOrBuilder() {
        if (metadataDefaultsBuilder_ != null) {
          return metadataDefaultsBuilder_.getMessageOrBuilder();
        } else {
          return metadataDefaults_ == null ?
              flyteidl.core.Workflow.WorkflowMetadataDefaults.getDefaultInstance() : metadataDefaults_;
        }
      }
      /**
       * <pre>
       * workflow defaults
       * </pre>
       *
       * <code>.flyteidl.core.WorkflowMetadataDefaults metadata_defaults = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Workflow.WorkflowMetadataDefaults, flyteidl.core.Workflow.WorkflowMetadataDefaults.Builder, flyteidl.core.Workflow.WorkflowMetadataDefaultsOrBuilder> 
          getMetadataDefaultsFieldBuilder() {
        if (metadataDefaultsBuilder_ == null) {
          metadataDefaultsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              flyteidl.core.Workflow.WorkflowMetadataDefaults, flyteidl.core.Workflow.WorkflowMetadataDefaults.Builder, flyteidl.core.Workflow.WorkflowMetadataDefaultsOrBuilder>(
                  getMetadataDefaults(),
                  getParentForChildren(),
                  isClean());
          metadataDefaults_ = null;
        }
        return metadataDefaultsBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flyteidl.core.WorkflowTemplate)
    }

    // @@protoc_insertion_point(class_scope:flyteidl.core.WorkflowTemplate)
    private static final flyteidl.core.Workflow.WorkflowTemplate DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new flyteidl.core.Workflow.WorkflowTemplate();
    }

    public static flyteidl.core.Workflow.WorkflowTemplate getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<WorkflowTemplate>
        PARSER = new com.google.protobuf.AbstractParser<WorkflowTemplate>() {
      @java.lang.Override
      public WorkflowTemplate parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new WorkflowTemplate(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<WorkflowTemplate> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<WorkflowTemplate> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public flyteidl.core.Workflow.WorkflowTemplate getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TaskNodeOverridesOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flyteidl.core.TaskNodeOverrides)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * A customizable interface to convey resources requested for a task container. 
     * </pre>
     *
     * <code>.flyteidl.core.Resources resources = 1;</code>
     */
    boolean hasResources();
    /**
     * <pre>
     * A customizable interface to convey resources requested for a task container. 
     * </pre>
     *
     * <code>.flyteidl.core.Resources resources = 1;</code>
     */
    flyteidl.core.Tasks.Resources getResources();
    /**
     * <pre>
     * A customizable interface to convey resources requested for a task container. 
     * </pre>
     *
     * <code>.flyteidl.core.Resources resources = 1;</code>
     */
    flyteidl.core.Tasks.ResourcesOrBuilder getResourcesOrBuilder();
  }
  /**
   * <pre>
   * Optional task node overrides that will be applied at task execution time.
   * </pre>
   *
   * Protobuf type {@code flyteidl.core.TaskNodeOverrides}
   */
  public  static final class TaskNodeOverrides extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flyteidl.core.TaskNodeOverrides)
      TaskNodeOverridesOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use TaskNodeOverrides.newBuilder() to construct.
    private TaskNodeOverrides(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TaskNodeOverrides() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private TaskNodeOverrides(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              flyteidl.core.Tasks.Resources.Builder subBuilder = null;
              if (resources_ != null) {
                subBuilder = resources_.toBuilder();
              }
              resources_ = input.readMessage(flyteidl.core.Tasks.Resources.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(resources_);
                resources_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return flyteidl.core.Workflow.internal_static_flyteidl_core_TaskNodeOverrides_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return flyteidl.core.Workflow.internal_static_flyteidl_core_TaskNodeOverrides_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              flyteidl.core.Workflow.TaskNodeOverrides.class, flyteidl.core.Workflow.TaskNodeOverrides.Builder.class);
    }

    public static final int RESOURCES_FIELD_NUMBER = 1;
    private flyteidl.core.Tasks.Resources resources_;
    /**
     * <pre>
     * A customizable interface to convey resources requested for a task container. 
     * </pre>
     *
     * <code>.flyteidl.core.Resources resources = 1;</code>
     */
    public boolean hasResources() {
      return resources_ != null;
    }
    /**
     * <pre>
     * A customizable interface to convey resources requested for a task container. 
     * </pre>
     *
     * <code>.flyteidl.core.Resources resources = 1;</code>
     */
    public flyteidl.core.Tasks.Resources getResources() {
      return resources_ == null ? flyteidl.core.Tasks.Resources.getDefaultInstance() : resources_;
    }
    /**
     * <pre>
     * A customizable interface to convey resources requested for a task container. 
     * </pre>
     *
     * <code>.flyteidl.core.Resources resources = 1;</code>
     */
    public flyteidl.core.Tasks.ResourcesOrBuilder getResourcesOrBuilder() {
      return getResources();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (resources_ != null) {
        output.writeMessage(1, getResources());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (resources_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getResources());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof flyteidl.core.Workflow.TaskNodeOverrides)) {
        return super.equals(obj);
      }
      flyteidl.core.Workflow.TaskNodeOverrides other = (flyteidl.core.Workflow.TaskNodeOverrides) obj;

      if (hasResources() != other.hasResources()) return false;
      if (hasResources()) {
        if (!getResources()
            .equals(other.getResources())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasResources()) {
        hash = (37 * hash) + RESOURCES_FIELD_NUMBER;
        hash = (53 * hash) + getResources().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static flyteidl.core.Workflow.TaskNodeOverrides parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Workflow.TaskNodeOverrides parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Workflow.TaskNodeOverrides parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Workflow.TaskNodeOverrides parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Workflow.TaskNodeOverrides parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Workflow.TaskNodeOverrides parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Workflow.TaskNodeOverrides parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static flyteidl.core.Workflow.TaskNodeOverrides parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static flyteidl.core.Workflow.TaskNodeOverrides parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static flyteidl.core.Workflow.TaskNodeOverrides parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static flyteidl.core.Workflow.TaskNodeOverrides parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static flyteidl.core.Workflow.TaskNodeOverrides parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(flyteidl.core.Workflow.TaskNodeOverrides prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Optional task node overrides that will be applied at task execution time.
     * </pre>
     *
     * Protobuf type {@code flyteidl.core.TaskNodeOverrides}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flyteidl.core.TaskNodeOverrides)
        flyteidl.core.Workflow.TaskNodeOverridesOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return flyteidl.core.Workflow.internal_static_flyteidl_core_TaskNodeOverrides_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return flyteidl.core.Workflow.internal_static_flyteidl_core_TaskNodeOverrides_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                flyteidl.core.Workflow.TaskNodeOverrides.class, flyteidl.core.Workflow.TaskNodeOverrides.Builder.class);
      }

      // Construct using flyteidl.core.Workflow.TaskNodeOverrides.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (resourcesBuilder_ == null) {
          resources_ = null;
        } else {
          resources_ = null;
          resourcesBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return flyteidl.core.Workflow.internal_static_flyteidl_core_TaskNodeOverrides_descriptor;
      }

      @java.lang.Override
      public flyteidl.core.Workflow.TaskNodeOverrides getDefaultInstanceForType() {
        return flyteidl.core.Workflow.TaskNodeOverrides.getDefaultInstance();
      }

      @java.lang.Override
      public flyteidl.core.Workflow.TaskNodeOverrides build() {
        flyteidl.core.Workflow.TaskNodeOverrides result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public flyteidl.core.Workflow.TaskNodeOverrides buildPartial() {
        flyteidl.core.Workflow.TaskNodeOverrides result = new flyteidl.core.Workflow.TaskNodeOverrides(this);
        if (resourcesBuilder_ == null) {
          result.resources_ = resources_;
        } else {
          result.resources_ = resourcesBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof flyteidl.core.Workflow.TaskNodeOverrides) {
          return mergeFrom((flyteidl.core.Workflow.TaskNodeOverrides)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(flyteidl.core.Workflow.TaskNodeOverrides other) {
        if (other == flyteidl.core.Workflow.TaskNodeOverrides.getDefaultInstance()) return this;
        if (other.hasResources()) {
          mergeResources(other.getResources());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        flyteidl.core.Workflow.TaskNodeOverrides parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (flyteidl.core.Workflow.TaskNodeOverrides) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private flyteidl.core.Tasks.Resources resources_;
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Tasks.Resources, flyteidl.core.Tasks.Resources.Builder, flyteidl.core.Tasks.ResourcesOrBuilder> resourcesBuilder_;
      /**
       * <pre>
       * A customizable interface to convey resources requested for a task container. 
       * </pre>
       *
       * <code>.flyteidl.core.Resources resources = 1;</code>
       */
      public boolean hasResources() {
        return resourcesBuilder_ != null || resources_ != null;
      }
      /**
       * <pre>
       * A customizable interface to convey resources requested for a task container. 
       * </pre>
       *
       * <code>.flyteidl.core.Resources resources = 1;</code>
       */
      public flyteidl.core.Tasks.Resources getResources() {
        if (resourcesBuilder_ == null) {
          return resources_ == null ? flyteidl.core.Tasks.Resources.getDefaultInstance() : resources_;
        } else {
          return resourcesBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * A customizable interface to convey resources requested for a task container. 
       * </pre>
       *
       * <code>.flyteidl.core.Resources resources = 1;</code>
       */
      public Builder setResources(flyteidl.core.Tasks.Resources value) {
        if (resourcesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          resources_ = value;
          onChanged();
        } else {
          resourcesBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * A customizable interface to convey resources requested for a task container. 
       * </pre>
       *
       * <code>.flyteidl.core.Resources resources = 1;</code>
       */
      public Builder setResources(
          flyteidl.core.Tasks.Resources.Builder builderForValue) {
        if (resourcesBuilder_ == null) {
          resources_ = builderForValue.build();
          onChanged();
        } else {
          resourcesBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * A customizable interface to convey resources requested for a task container. 
       * </pre>
       *
       * <code>.flyteidl.core.Resources resources = 1;</code>
       */
      public Builder mergeResources(flyteidl.core.Tasks.Resources value) {
        if (resourcesBuilder_ == null) {
          if (resources_ != null) {
            resources_ =
              flyteidl.core.Tasks.Resources.newBuilder(resources_).mergeFrom(value).buildPartial();
          } else {
            resources_ = value;
          }
          onChanged();
        } else {
          resourcesBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * A customizable interface to convey resources requested for a task container. 
       * </pre>
       *
       * <code>.flyteidl.core.Resources resources = 1;</code>
       */
      public Builder clearResources() {
        if (resourcesBuilder_ == null) {
          resources_ = null;
          onChanged();
        } else {
          resources_ = null;
          resourcesBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * A customizable interface to convey resources requested for a task container. 
       * </pre>
       *
       * <code>.flyteidl.core.Resources resources = 1;</code>
       */
      public flyteidl.core.Tasks.Resources.Builder getResourcesBuilder() {
        
        onChanged();
        return getResourcesFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * A customizable interface to convey resources requested for a task container. 
       * </pre>
       *
       * <code>.flyteidl.core.Resources resources = 1;</code>
       */
      public flyteidl.core.Tasks.ResourcesOrBuilder getResourcesOrBuilder() {
        if (resourcesBuilder_ != null) {
          return resourcesBuilder_.getMessageOrBuilder();
        } else {
          return resources_ == null ?
              flyteidl.core.Tasks.Resources.getDefaultInstance() : resources_;
        }
      }
      /**
       * <pre>
       * A customizable interface to convey resources requested for a task container. 
       * </pre>
       *
       * <code>.flyteidl.core.Resources resources = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Tasks.Resources, flyteidl.core.Tasks.Resources.Builder, flyteidl.core.Tasks.ResourcesOrBuilder> 
          getResourcesFieldBuilder() {
        if (resourcesBuilder_ == null) {
          resourcesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              flyteidl.core.Tasks.Resources, flyteidl.core.Tasks.Resources.Builder, flyteidl.core.Tasks.ResourcesOrBuilder>(
                  getResources(),
                  getParentForChildren(),
                  isClean());
          resources_ = null;
        }
        return resourcesBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flyteidl.core.TaskNodeOverrides)
    }

    // @@protoc_insertion_point(class_scope:flyteidl.core.TaskNodeOverrides)
    private static final flyteidl.core.Workflow.TaskNodeOverrides DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new flyteidl.core.Workflow.TaskNodeOverrides();
    }

    public static flyteidl.core.Workflow.TaskNodeOverrides getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TaskNodeOverrides>
        PARSER = new com.google.protobuf.AbstractParser<TaskNodeOverrides>() {
      @java.lang.Override
      public TaskNodeOverrides parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TaskNodeOverrides(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<TaskNodeOverrides> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TaskNodeOverrides> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public flyteidl.core.Workflow.TaskNodeOverrides getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flyteidl_core_IfBlock_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flyteidl_core_IfBlock_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flyteidl_core_IfElseBlock_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flyteidl_core_IfElseBlock_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flyteidl_core_BranchNode_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flyteidl_core_BranchNode_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flyteidl_core_TaskNode_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flyteidl_core_TaskNode_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flyteidl_core_WorkflowNode_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flyteidl_core_WorkflowNode_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flyteidl_core_ApproveCondition_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flyteidl_core_ApproveCondition_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flyteidl_core_SignalCondition_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flyteidl_core_SignalCondition_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flyteidl_core_SleepCondition_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flyteidl_core_SleepCondition_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flyteidl_core_GateNode_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flyteidl_core_GateNode_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flyteidl_core_NodeMetadata_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flyteidl_core_NodeMetadata_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flyteidl_core_Alias_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flyteidl_core_Alias_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flyteidl_core_Node_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flyteidl_core_Node_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flyteidl_core_WorkflowMetadata_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flyteidl_core_WorkflowMetadata_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flyteidl_core_WorkflowMetadata_TagsEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flyteidl_core_WorkflowMetadata_TagsEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flyteidl_core_WorkflowMetadataDefaults_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flyteidl_core_WorkflowMetadataDefaults_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flyteidl_core_WorkflowTemplate_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flyteidl_core_WorkflowTemplate_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flyteidl_core_TaskNodeOverrides_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flyteidl_core_TaskNodeOverrides_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\034flyteidl/core/workflow.proto\022\rflyteidl" +
      ".core\032\035flyteidl/core/condition.proto\032\035fl" +
      "yteidl/core/execution.proto\032\036flyteidl/co" +
      "re/identifier.proto\032\035flyteidl/core/inter" +
      "face.proto\032\034flyteidl/core/literals.proto" +
      "\032\031flyteidl/core/tasks.proto\032\031flyteidl/co" +
      "re/types.proto\032\034flyteidl/core/security.p" +
      "roto\032\036google/protobuf/duration.proto\"f\n\007" +
      "IfBlock\0223\n\tcondition\030\001 \001(\0132 .flyteidl.co" +
      "re.BooleanExpression\022&\n\tthen_node\030\002 \001(\0132" +
      "\023.flyteidl.core.Node\"\266\001\n\013IfElseBlock\022$\n\004" +
      "case\030\001 \001(\0132\026.flyteidl.core.IfBlock\022%\n\005ot" +
      "her\030\002 \003(\0132\026.flyteidl.core.IfBlock\022(\n\tels" +
      "e_node\030\003 \001(\0132\023.flyteidl.core.NodeH\000\022%\n\005e" +
      "rror\030\004 \001(\0132\024.flyteidl.core.ErrorH\000B\t\n\007de" +
      "fault\"9\n\nBranchNode\022+\n\007if_else\030\001 \001(\0132\032.f" +
      "lyteidl.core.IfElseBlock\"\177\n\010TaskNode\0221\n\014" +
      "reference_id\030\001 \001(\0132\031.flyteidl.core.Ident" +
      "ifierH\000\0223\n\toverrides\030\002 \001(\0132 .flyteidl.co" +
      "re.TaskNodeOverridesB\013\n\treference\"\207\001\n\014Wo" +
      "rkflowNode\0223\n\016launchplan_ref\030\001 \001(\0132\031.fly" +
      "teidl.core.IdentifierH\000\0225\n\020sub_workflow_" +
      "ref\030\002 \001(\0132\031.flyteidl.core.IdentifierH\000B\013" +
      "\n\treference\"%\n\020ApproveCondition\022\021\n\tsigna" +
      "l_id\030\001 \001(\t\"l\n\017SignalCondition\022\021\n\tsignal_" +
      "id\030\001 \001(\t\022(\n\004type\030\002 \001(\0132\032.flyteidl.core.L" +
      "iteralType\022\034\n\024output_variable_name\030\003 \001(\t" +
      "\"=\n\016SleepCondition\022+\n\010duration\030\001 \001(\0132\031.g" +
      "oogle.protobuf.Duration\"\255\001\n\010GateNode\0222\n\007" +
      "approve\030\001 \001(\0132\037.flyteidl.core.ApproveCon" +
      "ditionH\000\0220\n\006signal\030\002 \001(\0132\036.flyteidl.core" +
      ".SignalConditionH\000\022.\n\005sleep\030\003 \001(\0132\035.flyt" +
      "eidl.core.SleepConditionH\000B\013\n\tcondition\"" +
      "\247\001\n\014NodeMetadata\022\014\n\004name\030\001 \001(\t\022*\n\007timeou" +
      "t\030\004 \001(\0132\031.google.protobuf.Duration\022-\n\007re" +
      "tries\030\005 \001(\0132\034.flyteidl.core.RetryStrateg" +
      "y\022\027\n\rinterruptible\030\006 \001(\010H\000B\025\n\023interrupti" +
      "ble_value\"#\n\005Alias\022\013\n\003var\030\001 \001(\t\022\r\n\005alias" +
      "\030\002 \001(\t\"\200\003\n\004Node\022\n\n\002id\030\001 \001(\t\022-\n\010metadata\030" +
      "\002 \001(\0132\033.flyteidl.core.NodeMetadata\022&\n\006in" +
      "puts\030\003 \003(\0132\026.flyteidl.core.Binding\022\031\n\021up" +
      "stream_node_ids\030\004 \003(\t\022,\n\016output_aliases\030" +
      "\005 \003(\0132\024.flyteidl.core.Alias\022,\n\ttask_node" +
      "\030\006 \001(\0132\027.flyteidl.core.TaskNodeH\000\0224\n\rwor" +
      "kflow_node\030\007 \001(\0132\033.flyteidl.core.Workflo" +
      "wNodeH\000\0220\n\013branch_node\030\010 \001(\0132\031.flyteidl." +
      "core.BranchNodeH\000\022,\n\tgate_node\030\t \001(\0132\027.f" +
      "lyteidl.core.GateNodeH\000B\010\n\006target\"\315\002\n\020Wo" +
      "rkflowMetadata\022;\n\022quality_of_service\030\001 \001" +
      "(\0132\037.flyteidl.core.QualityOfService\022C\n\no" +
      "n_failure\030\002 \001(\0162/.flyteidl.core.Workflow" +
      "Metadata.OnFailurePolicy\0227\n\004tags\030\003 \003(\0132)" +
      ".flyteidl.core.WorkflowMetadata.TagsEntr" +
      "y\032+\n\tTagsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001" +
      "(\t:\0028\001\"Q\n\017OnFailurePolicy\022\024\n\020FAIL_IMMEDI" +
      "ATELY\020\000\022(\n$FAIL_AFTER_EXECUTABLE_NODES_C" +
      "OMPLETE\020\001\"1\n\030WorkflowMetadataDefaults\022\025\n" +
      "\rinterruptible\030\001 \001(\010\"\332\002\n\020WorkflowTemplat" +
      "e\022%\n\002id\030\001 \001(\0132\031.flyteidl.core.Identifier" +
      "\0221\n\010metadata\030\002 \001(\0132\037.flyteidl.core.Workf" +
      "lowMetadata\0220\n\tinterface\030\003 \001(\0132\035.flyteid" +
      "l.core.TypedInterface\022\"\n\005nodes\030\004 \003(\0132\023.f" +
      "lyteidl.core.Node\022\'\n\007outputs\030\005 \003(\0132\026.fly" +
      "teidl.core.Binding\022)\n\014failure_node\030\006 \001(\013" +
      "2\023.flyteidl.core.Node\022B\n\021metadata_defaul" +
      "ts\030\007 \001(\0132\'.flyteidl.core.WorkflowMetadat" +
      "aDefaults\"@\n\021TaskNodeOverrides\022+\n\tresour" +
      "ces\030\001 \001(\0132\030.flyteidl.core.ResourcesB6Z4g" +
      "ithub.com/flyteorg/flyteidl/gen/pb-go/fl" +
      "yteidl/coreb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          flyteidl.core.Condition.getDescriptor(),
          flyteidl.core.Execution.getDescriptor(),
          flyteidl.core.IdentifierOuterClass.getDescriptor(),
          flyteidl.core.Interface.getDescriptor(),
          flyteidl.core.Literals.getDescriptor(),
          flyteidl.core.Tasks.getDescriptor(),
          flyteidl.core.Types.getDescriptor(),
          flyteidl.core.Security.getDescriptor(),
          com.google.protobuf.DurationProto.getDescriptor(),
        }, assigner);
    internal_static_flyteidl_core_IfBlock_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_flyteidl_core_IfBlock_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flyteidl_core_IfBlock_descriptor,
        new java.lang.String[] { "Condition", "ThenNode", });
    internal_static_flyteidl_core_IfElseBlock_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_flyteidl_core_IfElseBlock_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flyteidl_core_IfElseBlock_descriptor,
        new java.lang.String[] { "Case", "Other", "ElseNode", "Error", "Default", });
    internal_static_flyteidl_core_BranchNode_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_flyteidl_core_BranchNode_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flyteidl_core_BranchNode_descriptor,
        new java.lang.String[] { "IfElse", });
    internal_static_flyteidl_core_TaskNode_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_flyteidl_core_TaskNode_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flyteidl_core_TaskNode_descriptor,
        new java.lang.String[] { "ReferenceId", "Overrides", "Reference", });
    internal_static_flyteidl_core_WorkflowNode_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_flyteidl_core_WorkflowNode_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flyteidl_core_WorkflowNode_descriptor,
        new java.lang.String[] { "LaunchplanRef", "SubWorkflowRef", "Reference", });
    internal_static_flyteidl_core_ApproveCondition_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_flyteidl_core_ApproveCondition_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flyteidl_core_ApproveCondition_descriptor,
        new java.lang.String[] { "SignalId", });
    internal_static_flyteidl_core_SignalCondition_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_flyteidl_core_SignalCondition_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flyteidl_core_SignalCondition_descriptor,
        new java.lang.String[] { "SignalId", "Type", "OutputVariableName", });
    internal_static_flyteidl_core_SleepCondition_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_flyteidl_core_SleepCondition_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flyteidl_core_SleepCondition_descriptor,
        new java.lang.String[] { "Duration", });
    internal_static_flyteidl_core_GateNode_descriptor =
      getDescriptor().getMessageTypes().get(8);
    internal_static_flyteidl_core_GateNode_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flyteidl_core_GateNode_descriptor,
        new java.lang.String[] { "Approve", "Signal", "Sleep", "Condition", });
    internal_static_flyteidl_core_NodeMetadata_descriptor =
      getDescriptor().getMessageTypes().get(9);
    internal_static_flyteidl_core_NodeMetadata_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flyteidl_core_NodeMetadata_descriptor,
        new java.lang.String[] { "Name", "Timeout", "Retries", "Interruptible", "InterruptibleValue", });
    internal_static_flyteidl_core_Alias_descriptor =
      getDescriptor().getMessageTypes().get(10);
    internal_static_flyteidl_core_Alias_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flyteidl_core_Alias_descriptor,
        new java.lang.String[] { "Var", "Alias", });
    internal_static_flyteidl_core_Node_descriptor =
      getDescriptor().getMessageTypes().get(11);
    internal_static_flyteidl_core_Node_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flyteidl_core_Node_descriptor,
        new java.lang.String[] { "Id", "Metadata", "Inputs", "UpstreamNodeIds", "OutputAliases", "TaskNode", "WorkflowNode", "BranchNode", "GateNode", "Target", });
    internal_static_flyteidl_core_WorkflowMetadata_descriptor =
      getDescriptor().getMessageTypes().get(12);
    internal_static_flyteidl_core_WorkflowMetadata_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flyteidl_core_WorkflowMetadata_descriptor,
        new java.lang.String[] { "QualityOfService", "OnFailure", "Tags", });
    internal_static_flyteidl_core_WorkflowMetadata_TagsEntry_descriptor =
      internal_static_flyteidl_core_WorkflowMetadata_descriptor.getNestedTypes().get(0);
    internal_static_flyteidl_core_WorkflowMetadata_TagsEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flyteidl_core_WorkflowMetadata_TagsEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_flyteidl_core_WorkflowMetadataDefaults_descriptor =
      getDescriptor().getMessageTypes().get(13);
    internal_static_flyteidl_core_WorkflowMetadataDefaults_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flyteidl_core_WorkflowMetadataDefaults_descriptor,
        new java.lang.String[] { "Interruptible", });
    internal_static_flyteidl_core_WorkflowTemplate_descriptor =
      getDescriptor().getMessageTypes().get(14);
    internal_static_flyteidl_core_WorkflowTemplate_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flyteidl_core_WorkflowTemplate_descriptor,
        new java.lang.String[] { "Id", "Metadata", "Interface", "Nodes", "Outputs", "FailureNode", "MetadataDefaults", });
    internal_static_flyteidl_core_TaskNodeOverrides_descriptor =
      getDescriptor().getMessageTypes().get(15);
    internal_static_flyteidl_core_TaskNodeOverrides_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flyteidl_core_TaskNodeOverrides_descriptor,
        new java.lang.String[] { "Resources", });
    flyteidl.core.Condition.getDescriptor();
    flyteidl.core.Execution.getDescriptor();
    flyteidl.core.IdentifierOuterClass.getDescriptor();
    flyteidl.core.Interface.getDescriptor();
    flyteidl.core.Literals.getDescriptor();
    flyteidl.core.Tasks.getDescriptor();
    flyteidl.core.Types.getDescriptor();
    flyteidl.core.Security.getDescriptor();
    com.google.protobuf.DurationProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
