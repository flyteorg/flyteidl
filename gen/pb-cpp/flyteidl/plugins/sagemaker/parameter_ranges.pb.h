// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/plugins/sagemaker/parameter_ranges.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fplugins_2fsagemaker_2fparameter_5franges_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fplugins_2fsagemaker_2fparameter_5franges_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fplugins_2fsagemaker_2fparameter_5franges_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fplugins_2fsagemaker_2fparameter_5franges_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fplugins_2fsagemaker_2fparameter_5franges_2eproto;
namespace flyteidl {
namespace plugins {
namespace sagemaker {
class CategoricalParameterRange;
struct CategoricalParameterRangeDefaultTypeInternal;
extern CategoricalParameterRangeDefaultTypeInternal _CategoricalParameterRange_default_instance_;
class ContinuousParameterRange;
struct ContinuousParameterRangeDefaultTypeInternal;
extern ContinuousParameterRangeDefaultTypeInternal _ContinuousParameterRange_default_instance_;
class HyperparameterScalingType;
struct HyperparameterScalingTypeDefaultTypeInternal;
extern HyperparameterScalingTypeDefaultTypeInternal _HyperparameterScalingType_default_instance_;
class IntegerParameterRange;
struct IntegerParameterRangeDefaultTypeInternal;
extern IntegerParameterRangeDefaultTypeInternal _IntegerParameterRange_default_instance_;
class ParameterRangeOneOf;
struct ParameterRangeOneOfDefaultTypeInternal;
extern ParameterRangeOneOfDefaultTypeInternal _ParameterRangeOneOf_default_instance_;
class ParameterRanges;
struct ParameterRangesDefaultTypeInternal;
extern ParameterRangesDefaultTypeInternal _ParameterRanges_default_instance_;
class ParameterRanges_ParameterRangeMapEntry_DoNotUse;
struct ParameterRanges_ParameterRangeMapEntry_DoNotUseDefaultTypeInternal;
extern ParameterRanges_ParameterRangeMapEntry_DoNotUseDefaultTypeInternal _ParameterRanges_ParameterRangeMapEntry_DoNotUse_default_instance_;
}  // namespace sagemaker
}  // namespace plugins
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> ::flyteidl::plugins::sagemaker::CategoricalParameterRange* Arena::CreateMaybeMessage<::flyteidl::plugins::sagemaker::CategoricalParameterRange>(Arena*);
template<> ::flyteidl::plugins::sagemaker::ContinuousParameterRange* Arena::CreateMaybeMessage<::flyteidl::plugins::sagemaker::ContinuousParameterRange>(Arena*);
template<> ::flyteidl::plugins::sagemaker::HyperparameterScalingType* Arena::CreateMaybeMessage<::flyteidl::plugins::sagemaker::HyperparameterScalingType>(Arena*);
template<> ::flyteidl::plugins::sagemaker::IntegerParameterRange* Arena::CreateMaybeMessage<::flyteidl::plugins::sagemaker::IntegerParameterRange>(Arena*);
template<> ::flyteidl::plugins::sagemaker::ParameterRangeOneOf* Arena::CreateMaybeMessage<::flyteidl::plugins::sagemaker::ParameterRangeOneOf>(Arena*);
template<> ::flyteidl::plugins::sagemaker::ParameterRanges* Arena::CreateMaybeMessage<::flyteidl::plugins::sagemaker::ParameterRanges>(Arena*);
template<> ::flyteidl::plugins::sagemaker::ParameterRanges_ParameterRangeMapEntry_DoNotUse* Arena::CreateMaybeMessage<::flyteidl::plugins::sagemaker::ParameterRanges_ParameterRangeMapEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace flyteidl {
namespace plugins {
namespace sagemaker {

enum HyperparameterScalingType_Value : int {
  HyperparameterScalingType_Value_AUTO = 0,
  HyperparameterScalingType_Value_LINEAR = 1,
  HyperparameterScalingType_Value_LOGARITHMIC = 2,
  HyperparameterScalingType_Value_REVERSELOGARITHMIC = 3,
  HyperparameterScalingType_Value_HyperparameterScalingType_Value_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  HyperparameterScalingType_Value_HyperparameterScalingType_Value_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool HyperparameterScalingType_Value_IsValid(int value);
constexpr HyperparameterScalingType_Value HyperparameterScalingType_Value_Value_MIN = HyperparameterScalingType_Value_AUTO;
constexpr HyperparameterScalingType_Value HyperparameterScalingType_Value_Value_MAX = HyperparameterScalingType_Value_REVERSELOGARITHMIC;
constexpr int HyperparameterScalingType_Value_Value_ARRAYSIZE = HyperparameterScalingType_Value_Value_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HyperparameterScalingType_Value_descriptor();
template<typename T>
inline const std::string& HyperparameterScalingType_Value_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HyperparameterScalingType_Value>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HyperparameterScalingType_Value_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HyperparameterScalingType_Value_descriptor(), enum_t_value);
}
inline bool HyperparameterScalingType_Value_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, HyperparameterScalingType_Value* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HyperparameterScalingType_Value>(
    HyperparameterScalingType_Value_descriptor(), name, value);
}
// ===================================================================

class HyperparameterScalingType final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:flyteidl.plugins.sagemaker.HyperparameterScalingType) */ {
 public:
  inline HyperparameterScalingType() : HyperparameterScalingType(nullptr) {}
  explicit constexpr HyperparameterScalingType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HyperparameterScalingType(const HyperparameterScalingType& from);
  HyperparameterScalingType(HyperparameterScalingType&& from) noexcept
    : HyperparameterScalingType() {
    *this = ::std::move(from);
  }

  inline HyperparameterScalingType& operator=(const HyperparameterScalingType& from) {
    CopyFrom(from);
    return *this;
  }
  inline HyperparameterScalingType& operator=(HyperparameterScalingType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HyperparameterScalingType& default_instance() {
    return *internal_default_instance();
  }
  static inline const HyperparameterScalingType* internal_default_instance() {
    return reinterpret_cast<const HyperparameterScalingType*>(
               &_HyperparameterScalingType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HyperparameterScalingType& a, HyperparameterScalingType& b) {
    a.Swap(&b);
  }
  inline void Swap(HyperparameterScalingType* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HyperparameterScalingType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HyperparameterScalingType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HyperparameterScalingType>(arena);
  }

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.plugins.sagemaker.HyperparameterScalingType";
  }
  protected:
  explicit HyperparameterScalingType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef HyperparameterScalingType_Value Value;
  static constexpr Value AUTO =
    HyperparameterScalingType_Value_AUTO;
  static constexpr Value LINEAR =
    HyperparameterScalingType_Value_LINEAR;
  static constexpr Value LOGARITHMIC =
    HyperparameterScalingType_Value_LOGARITHMIC;
  static constexpr Value REVERSELOGARITHMIC =
    HyperparameterScalingType_Value_REVERSELOGARITHMIC;
  static inline bool Value_IsValid(int value) {
    return HyperparameterScalingType_Value_IsValid(value);
  }
  static constexpr Value Value_MIN =
    HyperparameterScalingType_Value_Value_MIN;
  static constexpr Value Value_MAX =
    HyperparameterScalingType_Value_Value_MAX;
  static constexpr int Value_ARRAYSIZE =
    HyperparameterScalingType_Value_Value_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Value_descriptor() {
    return HyperparameterScalingType_Value_descriptor();
  }
  template<typename T>
  static inline const std::string& Value_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Value>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Value_Name.");
    return HyperparameterScalingType_Value_Name(enum_t_value);
  }
  static inline bool Value_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Value* value) {
    return HyperparameterScalingType_Value_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyteidl.plugins.sagemaker.HyperparameterScalingType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fplugins_2fsagemaker_2fparameter_5franges_2eproto;
};
// -------------------------------------------------------------------

class ContinuousParameterRange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.plugins.sagemaker.ContinuousParameterRange) */ {
 public:
  inline ContinuousParameterRange() : ContinuousParameterRange(nullptr) {}
  ~ContinuousParameterRange() override;
  explicit constexpr ContinuousParameterRange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContinuousParameterRange(const ContinuousParameterRange& from);
  ContinuousParameterRange(ContinuousParameterRange&& from) noexcept
    : ContinuousParameterRange() {
    *this = ::std::move(from);
  }

  inline ContinuousParameterRange& operator=(const ContinuousParameterRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContinuousParameterRange& operator=(ContinuousParameterRange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContinuousParameterRange& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContinuousParameterRange* internal_default_instance() {
    return reinterpret_cast<const ContinuousParameterRange*>(
               &_ContinuousParameterRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ContinuousParameterRange& a, ContinuousParameterRange& b) {
    a.Swap(&b);
  }
  inline void Swap(ContinuousParameterRange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContinuousParameterRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContinuousParameterRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContinuousParameterRange>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContinuousParameterRange* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.plugins.sagemaker.ContinuousParameterRange";
  }
  protected:
  explicit ContinuousParameterRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxValueFieldNumber = 1,
    kMinValueFieldNumber = 2,
    kScalingTypeFieldNumber = 3,
  };
  // double max_value = 1 [json_name = "maxValue"];
  void clear_max_value();
  double max_value() const;
  void set_max_value(double value);
  private:
  double _internal_max_value() const;
  void _internal_set_max_value(double value);
  public:

  // double min_value = 2 [json_name = "minValue"];
  void clear_min_value();
  double min_value() const;
  void set_min_value(double value);
  private:
  double _internal_min_value() const;
  void _internal_set_min_value(double value);
  public:

  // .flyteidl.plugins.sagemaker.HyperparameterScalingType.Value scaling_type = 3 [json_name = "scalingType"];
  void clear_scaling_type();
  ::flyteidl::plugins::sagemaker::HyperparameterScalingType_Value scaling_type() const;
  void set_scaling_type(::flyteidl::plugins::sagemaker::HyperparameterScalingType_Value value);
  private:
  ::flyteidl::plugins::sagemaker::HyperparameterScalingType_Value _internal_scaling_type() const;
  void _internal_set_scaling_type(::flyteidl::plugins::sagemaker::HyperparameterScalingType_Value value);
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.plugins.sagemaker.ContinuousParameterRange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double max_value_;
  double min_value_;
  int scaling_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fplugins_2fsagemaker_2fparameter_5franges_2eproto;
};
// -------------------------------------------------------------------

class IntegerParameterRange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.plugins.sagemaker.IntegerParameterRange) */ {
 public:
  inline IntegerParameterRange() : IntegerParameterRange(nullptr) {}
  ~IntegerParameterRange() override;
  explicit constexpr IntegerParameterRange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IntegerParameterRange(const IntegerParameterRange& from);
  IntegerParameterRange(IntegerParameterRange&& from) noexcept
    : IntegerParameterRange() {
    *this = ::std::move(from);
  }

  inline IntegerParameterRange& operator=(const IntegerParameterRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntegerParameterRange& operator=(IntegerParameterRange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IntegerParameterRange& default_instance() {
    return *internal_default_instance();
  }
  static inline const IntegerParameterRange* internal_default_instance() {
    return reinterpret_cast<const IntegerParameterRange*>(
               &_IntegerParameterRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(IntegerParameterRange& a, IntegerParameterRange& b) {
    a.Swap(&b);
  }
  inline void Swap(IntegerParameterRange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntegerParameterRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IntegerParameterRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IntegerParameterRange>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntegerParameterRange* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.plugins.sagemaker.IntegerParameterRange";
  }
  protected:
  explicit IntegerParameterRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxValueFieldNumber = 1,
    kMinValueFieldNumber = 2,
    kScalingTypeFieldNumber = 3,
  };
  // int64 max_value = 1 [json_name = "maxValue"];
  void clear_max_value();
  int64_t max_value() const;
  void set_max_value(int64_t value);
  private:
  int64_t _internal_max_value() const;
  void _internal_set_max_value(int64_t value);
  public:

  // int64 min_value = 2 [json_name = "minValue"];
  void clear_min_value();
  int64_t min_value() const;
  void set_min_value(int64_t value);
  private:
  int64_t _internal_min_value() const;
  void _internal_set_min_value(int64_t value);
  public:

  // .flyteidl.plugins.sagemaker.HyperparameterScalingType.Value scaling_type = 3 [json_name = "scalingType"];
  void clear_scaling_type();
  ::flyteidl::plugins::sagemaker::HyperparameterScalingType_Value scaling_type() const;
  void set_scaling_type(::flyteidl::plugins::sagemaker::HyperparameterScalingType_Value value);
  private:
  ::flyteidl::plugins::sagemaker::HyperparameterScalingType_Value _internal_scaling_type() const;
  void _internal_set_scaling_type(::flyteidl::plugins::sagemaker::HyperparameterScalingType_Value value);
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.plugins.sagemaker.IntegerParameterRange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t max_value_;
  int64_t min_value_;
  int scaling_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fplugins_2fsagemaker_2fparameter_5franges_2eproto;
};
// -------------------------------------------------------------------

class CategoricalParameterRange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.plugins.sagemaker.CategoricalParameterRange) */ {
 public:
  inline CategoricalParameterRange() : CategoricalParameterRange(nullptr) {}
  ~CategoricalParameterRange() override;
  explicit constexpr CategoricalParameterRange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CategoricalParameterRange(const CategoricalParameterRange& from);
  CategoricalParameterRange(CategoricalParameterRange&& from) noexcept
    : CategoricalParameterRange() {
    *this = ::std::move(from);
  }

  inline CategoricalParameterRange& operator=(const CategoricalParameterRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline CategoricalParameterRange& operator=(CategoricalParameterRange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CategoricalParameterRange& default_instance() {
    return *internal_default_instance();
  }
  static inline const CategoricalParameterRange* internal_default_instance() {
    return reinterpret_cast<const CategoricalParameterRange*>(
               &_CategoricalParameterRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CategoricalParameterRange& a, CategoricalParameterRange& b) {
    a.Swap(&b);
  }
  inline void Swap(CategoricalParameterRange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CategoricalParameterRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CategoricalParameterRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CategoricalParameterRange>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CategoricalParameterRange* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.plugins.sagemaker.CategoricalParameterRange";
  }
  protected:
  explicit CategoricalParameterRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated string values = 1 [json_name = "values"];
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  const std::string& values(int index) const;
  std::string* mutable_values(int index);
  void set_values(int index, const std::string& value);
  void set_values(int index, std::string&& value);
  void set_values(int index, const char* value);
  void set_values(int index, const char* value, size_t size);
  std::string* add_values();
  void add_values(const std::string& value);
  void add_values(std::string&& value);
  void add_values(const char* value);
  void add_values(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_values();
  private:
  const std::string& _internal_values(int index) const;
  std::string* _internal_add_values();
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.plugins.sagemaker.CategoricalParameterRange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fplugins_2fsagemaker_2fparameter_5franges_2eproto;
};
// -------------------------------------------------------------------

class ParameterRangeOneOf final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.plugins.sagemaker.ParameterRangeOneOf) */ {
 public:
  inline ParameterRangeOneOf() : ParameterRangeOneOf(nullptr) {}
  ~ParameterRangeOneOf() override;
  explicit constexpr ParameterRangeOneOf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ParameterRangeOneOf(const ParameterRangeOneOf& from);
  ParameterRangeOneOf(ParameterRangeOneOf&& from) noexcept
    : ParameterRangeOneOf() {
    *this = ::std::move(from);
  }

  inline ParameterRangeOneOf& operator=(const ParameterRangeOneOf& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParameterRangeOneOf& operator=(ParameterRangeOneOf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ParameterRangeOneOf& default_instance() {
    return *internal_default_instance();
  }
  enum ParameterRangeTypeCase {
    kContinuousParameterRange = 1,
    kIntegerParameterRange = 2,
    kCategoricalParameterRange = 3,
    PARAMETER_RANGE_TYPE_NOT_SET = 0,
  };

  static inline const ParameterRangeOneOf* internal_default_instance() {
    return reinterpret_cast<const ParameterRangeOneOf*>(
               &_ParameterRangeOneOf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ParameterRangeOneOf& a, ParameterRangeOneOf& b) {
    a.Swap(&b);
  }
  inline void Swap(ParameterRangeOneOf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParameterRangeOneOf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ParameterRangeOneOf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ParameterRangeOneOf>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParameterRangeOneOf* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.plugins.sagemaker.ParameterRangeOneOf";
  }
  protected:
  explicit ParameterRangeOneOf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContinuousParameterRangeFieldNumber = 1,
    kIntegerParameterRangeFieldNumber = 2,
    kCategoricalParameterRangeFieldNumber = 3,
  };
  // .flyteidl.plugins.sagemaker.ContinuousParameterRange continuous_parameter_range = 1 [json_name = "continuousParameterRange"];
  bool has_continuous_parameter_range() const;
  private:
  bool _internal_has_continuous_parameter_range() const;
  public:
  void clear_continuous_parameter_range();
  const ::flyteidl::plugins::sagemaker::ContinuousParameterRange& continuous_parameter_range() const;
  PROTOBUF_NODISCARD ::flyteidl::plugins::sagemaker::ContinuousParameterRange* release_continuous_parameter_range();
  ::flyteidl::plugins::sagemaker::ContinuousParameterRange* mutable_continuous_parameter_range();
  void set_allocated_continuous_parameter_range(::flyteidl::plugins::sagemaker::ContinuousParameterRange* continuous_parameter_range);
  private:
  const ::flyteidl::plugins::sagemaker::ContinuousParameterRange& _internal_continuous_parameter_range() const;
  ::flyteidl::plugins::sagemaker::ContinuousParameterRange* _internal_mutable_continuous_parameter_range();
  public:
  void unsafe_arena_set_allocated_continuous_parameter_range(
      ::flyteidl::plugins::sagemaker::ContinuousParameterRange* continuous_parameter_range);
  ::flyteidl::plugins::sagemaker::ContinuousParameterRange* unsafe_arena_release_continuous_parameter_range();

  // .flyteidl.plugins.sagemaker.IntegerParameterRange integer_parameter_range = 2 [json_name = "integerParameterRange"];
  bool has_integer_parameter_range() const;
  private:
  bool _internal_has_integer_parameter_range() const;
  public:
  void clear_integer_parameter_range();
  const ::flyteidl::plugins::sagemaker::IntegerParameterRange& integer_parameter_range() const;
  PROTOBUF_NODISCARD ::flyteidl::plugins::sagemaker::IntegerParameterRange* release_integer_parameter_range();
  ::flyteidl::plugins::sagemaker::IntegerParameterRange* mutable_integer_parameter_range();
  void set_allocated_integer_parameter_range(::flyteidl::plugins::sagemaker::IntegerParameterRange* integer_parameter_range);
  private:
  const ::flyteidl::plugins::sagemaker::IntegerParameterRange& _internal_integer_parameter_range() const;
  ::flyteidl::plugins::sagemaker::IntegerParameterRange* _internal_mutable_integer_parameter_range();
  public:
  void unsafe_arena_set_allocated_integer_parameter_range(
      ::flyteidl::plugins::sagemaker::IntegerParameterRange* integer_parameter_range);
  ::flyteidl::plugins::sagemaker::IntegerParameterRange* unsafe_arena_release_integer_parameter_range();

  // .flyteidl.plugins.sagemaker.CategoricalParameterRange categorical_parameter_range = 3 [json_name = "categoricalParameterRange"];
  bool has_categorical_parameter_range() const;
  private:
  bool _internal_has_categorical_parameter_range() const;
  public:
  void clear_categorical_parameter_range();
  const ::flyteidl::plugins::sagemaker::CategoricalParameterRange& categorical_parameter_range() const;
  PROTOBUF_NODISCARD ::flyteidl::plugins::sagemaker::CategoricalParameterRange* release_categorical_parameter_range();
  ::flyteidl::plugins::sagemaker::CategoricalParameterRange* mutable_categorical_parameter_range();
  void set_allocated_categorical_parameter_range(::flyteidl::plugins::sagemaker::CategoricalParameterRange* categorical_parameter_range);
  private:
  const ::flyteidl::plugins::sagemaker::CategoricalParameterRange& _internal_categorical_parameter_range() const;
  ::flyteidl::plugins::sagemaker::CategoricalParameterRange* _internal_mutable_categorical_parameter_range();
  public:
  void unsafe_arena_set_allocated_categorical_parameter_range(
      ::flyteidl::plugins::sagemaker::CategoricalParameterRange* categorical_parameter_range);
  ::flyteidl::plugins::sagemaker::CategoricalParameterRange* unsafe_arena_release_categorical_parameter_range();

  void clear_parameter_range_type();
  ParameterRangeTypeCase parameter_range_type_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.plugins.sagemaker.ParameterRangeOneOf)
 private:
  class _Internal;
  void set_has_continuous_parameter_range();
  void set_has_integer_parameter_range();
  void set_has_categorical_parameter_range();

  inline bool has_parameter_range_type() const;
  inline void clear_has_parameter_range_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ParameterRangeTypeUnion {
    constexpr ParameterRangeTypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::flyteidl::plugins::sagemaker::ContinuousParameterRange* continuous_parameter_range_;
    ::flyteidl::plugins::sagemaker::IntegerParameterRange* integer_parameter_range_;
    ::flyteidl::plugins::sagemaker::CategoricalParameterRange* categorical_parameter_range_;
  } parameter_range_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_flyteidl_2fplugins_2fsagemaker_2fparameter_5franges_2eproto;
};
// -------------------------------------------------------------------

class ParameterRanges_ParameterRangeMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ParameterRanges_ParameterRangeMapEntry_DoNotUse, 
    std::string, ::flyteidl::plugins::sagemaker::ParameterRangeOneOf,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ParameterRanges_ParameterRangeMapEntry_DoNotUse, 
    std::string, ::flyteidl::plugins::sagemaker::ParameterRangeOneOf,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  ParameterRanges_ParameterRangeMapEntry_DoNotUse();
  explicit constexpr ParameterRanges_ParameterRangeMapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ParameterRanges_ParameterRangeMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ParameterRanges_ParameterRangeMapEntry_DoNotUse& other);
  static const ParameterRanges_ParameterRangeMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ParameterRanges_ParameterRangeMapEntry_DoNotUse*>(&_ParameterRanges_ParameterRangeMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "flyteidl.plugins.sagemaker.ParameterRanges.ParameterRangeMapEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class ParameterRanges final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.plugins.sagemaker.ParameterRanges) */ {
 public:
  inline ParameterRanges() : ParameterRanges(nullptr) {}
  ~ParameterRanges() override;
  explicit constexpr ParameterRanges(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ParameterRanges(const ParameterRanges& from);
  ParameterRanges(ParameterRanges&& from) noexcept
    : ParameterRanges() {
    *this = ::std::move(from);
  }

  inline ParameterRanges& operator=(const ParameterRanges& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParameterRanges& operator=(ParameterRanges&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ParameterRanges& default_instance() {
    return *internal_default_instance();
  }
  static inline const ParameterRanges* internal_default_instance() {
    return reinterpret_cast<const ParameterRanges*>(
               &_ParameterRanges_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ParameterRanges& a, ParameterRanges& b) {
    a.Swap(&b);
  }
  inline void Swap(ParameterRanges* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParameterRanges* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ParameterRanges* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ParameterRanges>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParameterRanges* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.plugins.sagemaker.ParameterRanges";
  }
  protected:
  explicit ParameterRanges(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kParameterRangeMapFieldNumber = 1,
  };
  // map<string, .flyteidl.plugins.sagemaker.ParameterRangeOneOf> parameter_range_map = 1 [json_name = "parameterRangeMap"];
  int parameter_range_map_size() const;
  private:
  int _internal_parameter_range_map_size() const;
  public:
  void clear_parameter_range_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flyteidl::plugins::sagemaker::ParameterRangeOneOf >&
      _internal_parameter_range_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flyteidl::plugins::sagemaker::ParameterRangeOneOf >*
      _internal_mutable_parameter_range_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flyteidl::plugins::sagemaker::ParameterRangeOneOf >&
      parameter_range_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flyteidl::plugins::sagemaker::ParameterRangeOneOf >*
      mutable_parameter_range_map();

  // @@protoc_insertion_point(class_scope:flyteidl.plugins.sagemaker.ParameterRanges)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ParameterRanges_ParameterRangeMapEntry_DoNotUse,
      std::string, ::flyteidl::plugins::sagemaker::ParameterRangeOneOf,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> parameter_range_map_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fplugins_2fsagemaker_2fparameter_5franges_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HyperparameterScalingType

// -------------------------------------------------------------------

// ContinuousParameterRange

// double max_value = 1 [json_name = "maxValue"];
inline void ContinuousParameterRange::clear_max_value() {
  max_value_ = 0;
}
inline double ContinuousParameterRange::_internal_max_value() const {
  return max_value_;
}
inline double ContinuousParameterRange::max_value() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.ContinuousParameterRange.max_value)
  return _internal_max_value();
}
inline void ContinuousParameterRange::_internal_set_max_value(double value) {
  
  max_value_ = value;
}
inline void ContinuousParameterRange::set_max_value(double value) {
  _internal_set_max_value(value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.ContinuousParameterRange.max_value)
}

// double min_value = 2 [json_name = "minValue"];
inline void ContinuousParameterRange::clear_min_value() {
  min_value_ = 0;
}
inline double ContinuousParameterRange::_internal_min_value() const {
  return min_value_;
}
inline double ContinuousParameterRange::min_value() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.ContinuousParameterRange.min_value)
  return _internal_min_value();
}
inline void ContinuousParameterRange::_internal_set_min_value(double value) {
  
  min_value_ = value;
}
inline void ContinuousParameterRange::set_min_value(double value) {
  _internal_set_min_value(value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.ContinuousParameterRange.min_value)
}

// .flyteidl.plugins.sagemaker.HyperparameterScalingType.Value scaling_type = 3 [json_name = "scalingType"];
inline void ContinuousParameterRange::clear_scaling_type() {
  scaling_type_ = 0;
}
inline ::flyteidl::plugins::sagemaker::HyperparameterScalingType_Value ContinuousParameterRange::_internal_scaling_type() const {
  return static_cast< ::flyteidl::plugins::sagemaker::HyperparameterScalingType_Value >(scaling_type_);
}
inline ::flyteidl::plugins::sagemaker::HyperparameterScalingType_Value ContinuousParameterRange::scaling_type() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.ContinuousParameterRange.scaling_type)
  return _internal_scaling_type();
}
inline void ContinuousParameterRange::_internal_set_scaling_type(::flyteidl::plugins::sagemaker::HyperparameterScalingType_Value value) {
  
  scaling_type_ = value;
}
inline void ContinuousParameterRange::set_scaling_type(::flyteidl::plugins::sagemaker::HyperparameterScalingType_Value value) {
  _internal_set_scaling_type(value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.ContinuousParameterRange.scaling_type)
}

// -------------------------------------------------------------------

// IntegerParameterRange

// int64 max_value = 1 [json_name = "maxValue"];
inline void IntegerParameterRange::clear_max_value() {
  max_value_ = int64_t{0};
}
inline int64_t IntegerParameterRange::_internal_max_value() const {
  return max_value_;
}
inline int64_t IntegerParameterRange::max_value() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.IntegerParameterRange.max_value)
  return _internal_max_value();
}
inline void IntegerParameterRange::_internal_set_max_value(int64_t value) {
  
  max_value_ = value;
}
inline void IntegerParameterRange::set_max_value(int64_t value) {
  _internal_set_max_value(value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.IntegerParameterRange.max_value)
}

// int64 min_value = 2 [json_name = "minValue"];
inline void IntegerParameterRange::clear_min_value() {
  min_value_ = int64_t{0};
}
inline int64_t IntegerParameterRange::_internal_min_value() const {
  return min_value_;
}
inline int64_t IntegerParameterRange::min_value() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.IntegerParameterRange.min_value)
  return _internal_min_value();
}
inline void IntegerParameterRange::_internal_set_min_value(int64_t value) {
  
  min_value_ = value;
}
inline void IntegerParameterRange::set_min_value(int64_t value) {
  _internal_set_min_value(value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.IntegerParameterRange.min_value)
}

// .flyteidl.plugins.sagemaker.HyperparameterScalingType.Value scaling_type = 3 [json_name = "scalingType"];
inline void IntegerParameterRange::clear_scaling_type() {
  scaling_type_ = 0;
}
inline ::flyteidl::plugins::sagemaker::HyperparameterScalingType_Value IntegerParameterRange::_internal_scaling_type() const {
  return static_cast< ::flyteidl::plugins::sagemaker::HyperparameterScalingType_Value >(scaling_type_);
}
inline ::flyteidl::plugins::sagemaker::HyperparameterScalingType_Value IntegerParameterRange::scaling_type() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.IntegerParameterRange.scaling_type)
  return _internal_scaling_type();
}
inline void IntegerParameterRange::_internal_set_scaling_type(::flyteidl::plugins::sagemaker::HyperparameterScalingType_Value value) {
  
  scaling_type_ = value;
}
inline void IntegerParameterRange::set_scaling_type(::flyteidl::plugins::sagemaker::HyperparameterScalingType_Value value) {
  _internal_set_scaling_type(value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.IntegerParameterRange.scaling_type)
}

// -------------------------------------------------------------------

// CategoricalParameterRange

// repeated string values = 1 [json_name = "values"];
inline int CategoricalParameterRange::_internal_values_size() const {
  return values_.size();
}
inline int CategoricalParameterRange::values_size() const {
  return _internal_values_size();
}
inline void CategoricalParameterRange::clear_values() {
  values_.Clear();
}
inline std::string* CategoricalParameterRange::add_values() {
  std::string* _s = _internal_add_values();
  // @@protoc_insertion_point(field_add_mutable:flyteidl.plugins.sagemaker.CategoricalParameterRange.values)
  return _s;
}
inline const std::string& CategoricalParameterRange::_internal_values(int index) const {
  return values_.Get(index);
}
inline const std::string& CategoricalParameterRange::values(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.CategoricalParameterRange.values)
  return _internal_values(index);
}
inline std::string* CategoricalParameterRange::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.sagemaker.CategoricalParameterRange.values)
  return values_.Mutable(index);
}
inline void CategoricalParameterRange::set_values(int index, const std::string& value) {
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.CategoricalParameterRange.values)
}
inline void CategoricalParameterRange::set_values(int index, std::string&& value) {
  values_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:flyteidl.plugins.sagemaker.CategoricalParameterRange.values)
}
inline void CategoricalParameterRange::set_values(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flyteidl.plugins.sagemaker.CategoricalParameterRange.values)
}
inline void CategoricalParameterRange::set_values(int index, const char* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flyteidl.plugins.sagemaker.CategoricalParameterRange.values)
}
inline std::string* CategoricalParameterRange::_internal_add_values() {
  return values_.Add();
}
inline void CategoricalParameterRange::add_values(const std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flyteidl.plugins.sagemaker.CategoricalParameterRange.values)
}
inline void CategoricalParameterRange::add_values(std::string&& value) {
  values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flyteidl.plugins.sagemaker.CategoricalParameterRange.values)
}
inline void CategoricalParameterRange::add_values(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flyteidl.plugins.sagemaker.CategoricalParameterRange.values)
}
inline void CategoricalParameterRange::add_values(const char* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flyteidl.plugins.sagemaker.CategoricalParameterRange.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CategoricalParameterRange::values() const {
  // @@protoc_insertion_point(field_list:flyteidl.plugins.sagemaker.CategoricalParameterRange.values)
  return values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CategoricalParameterRange::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.plugins.sagemaker.CategoricalParameterRange.values)
  return &values_;
}

// -------------------------------------------------------------------

// ParameterRangeOneOf

// .flyteidl.plugins.sagemaker.ContinuousParameterRange continuous_parameter_range = 1 [json_name = "continuousParameterRange"];
inline bool ParameterRangeOneOf::_internal_has_continuous_parameter_range() const {
  return parameter_range_type_case() == kContinuousParameterRange;
}
inline bool ParameterRangeOneOf::has_continuous_parameter_range() const {
  return _internal_has_continuous_parameter_range();
}
inline void ParameterRangeOneOf::set_has_continuous_parameter_range() {
  _oneof_case_[0] = kContinuousParameterRange;
}
inline void ParameterRangeOneOf::clear_continuous_parameter_range() {
  if (_internal_has_continuous_parameter_range()) {
    if (GetArenaForAllocation() == nullptr) {
      delete parameter_range_type_.continuous_parameter_range_;
    }
    clear_has_parameter_range_type();
  }
}
inline ::flyteidl::plugins::sagemaker::ContinuousParameterRange* ParameterRangeOneOf::release_continuous_parameter_range() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.sagemaker.ParameterRangeOneOf.continuous_parameter_range)
  if (_internal_has_continuous_parameter_range()) {
    clear_has_parameter_range_type();
      ::flyteidl::plugins::sagemaker::ContinuousParameterRange* temp = parameter_range_type_.continuous_parameter_range_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    parameter_range_type_.continuous_parameter_range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::plugins::sagemaker::ContinuousParameterRange& ParameterRangeOneOf::_internal_continuous_parameter_range() const {
  return _internal_has_continuous_parameter_range()
      ? *parameter_range_type_.continuous_parameter_range_
      : reinterpret_cast< ::flyteidl::plugins::sagemaker::ContinuousParameterRange&>(::flyteidl::plugins::sagemaker::_ContinuousParameterRange_default_instance_);
}
inline const ::flyteidl::plugins::sagemaker::ContinuousParameterRange& ParameterRangeOneOf::continuous_parameter_range() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.ParameterRangeOneOf.continuous_parameter_range)
  return _internal_continuous_parameter_range();
}
inline ::flyteidl::plugins::sagemaker::ContinuousParameterRange* ParameterRangeOneOf::unsafe_arena_release_continuous_parameter_range() {
  // @@protoc_insertion_point(field_unsafe_arena_release:flyteidl.plugins.sagemaker.ParameterRangeOneOf.continuous_parameter_range)
  if (_internal_has_continuous_parameter_range()) {
    clear_has_parameter_range_type();
    ::flyteidl::plugins::sagemaker::ContinuousParameterRange* temp = parameter_range_type_.continuous_parameter_range_;
    parameter_range_type_.continuous_parameter_range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ParameterRangeOneOf::unsafe_arena_set_allocated_continuous_parameter_range(::flyteidl::plugins::sagemaker::ContinuousParameterRange* continuous_parameter_range) {
  clear_parameter_range_type();
  if (continuous_parameter_range) {
    set_has_continuous_parameter_range();
    parameter_range_type_.continuous_parameter_range_ = continuous_parameter_range;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.plugins.sagemaker.ParameterRangeOneOf.continuous_parameter_range)
}
inline ::flyteidl::plugins::sagemaker::ContinuousParameterRange* ParameterRangeOneOf::_internal_mutable_continuous_parameter_range() {
  if (!_internal_has_continuous_parameter_range()) {
    clear_parameter_range_type();
    set_has_continuous_parameter_range();
    parameter_range_type_.continuous_parameter_range_ = CreateMaybeMessage< ::flyteidl::plugins::sagemaker::ContinuousParameterRange >(GetArenaForAllocation());
  }
  return parameter_range_type_.continuous_parameter_range_;
}
inline ::flyteidl::plugins::sagemaker::ContinuousParameterRange* ParameterRangeOneOf::mutable_continuous_parameter_range() {
  ::flyteidl::plugins::sagemaker::ContinuousParameterRange* _msg = _internal_mutable_continuous_parameter_range();
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.sagemaker.ParameterRangeOneOf.continuous_parameter_range)
  return _msg;
}

// .flyteidl.plugins.sagemaker.IntegerParameterRange integer_parameter_range = 2 [json_name = "integerParameterRange"];
inline bool ParameterRangeOneOf::_internal_has_integer_parameter_range() const {
  return parameter_range_type_case() == kIntegerParameterRange;
}
inline bool ParameterRangeOneOf::has_integer_parameter_range() const {
  return _internal_has_integer_parameter_range();
}
inline void ParameterRangeOneOf::set_has_integer_parameter_range() {
  _oneof_case_[0] = kIntegerParameterRange;
}
inline void ParameterRangeOneOf::clear_integer_parameter_range() {
  if (_internal_has_integer_parameter_range()) {
    if (GetArenaForAllocation() == nullptr) {
      delete parameter_range_type_.integer_parameter_range_;
    }
    clear_has_parameter_range_type();
  }
}
inline ::flyteidl::plugins::sagemaker::IntegerParameterRange* ParameterRangeOneOf::release_integer_parameter_range() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.sagemaker.ParameterRangeOneOf.integer_parameter_range)
  if (_internal_has_integer_parameter_range()) {
    clear_has_parameter_range_type();
      ::flyteidl::plugins::sagemaker::IntegerParameterRange* temp = parameter_range_type_.integer_parameter_range_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    parameter_range_type_.integer_parameter_range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::plugins::sagemaker::IntegerParameterRange& ParameterRangeOneOf::_internal_integer_parameter_range() const {
  return _internal_has_integer_parameter_range()
      ? *parameter_range_type_.integer_parameter_range_
      : reinterpret_cast< ::flyteidl::plugins::sagemaker::IntegerParameterRange&>(::flyteidl::plugins::sagemaker::_IntegerParameterRange_default_instance_);
}
inline const ::flyteidl::plugins::sagemaker::IntegerParameterRange& ParameterRangeOneOf::integer_parameter_range() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.ParameterRangeOneOf.integer_parameter_range)
  return _internal_integer_parameter_range();
}
inline ::flyteidl::plugins::sagemaker::IntegerParameterRange* ParameterRangeOneOf::unsafe_arena_release_integer_parameter_range() {
  // @@protoc_insertion_point(field_unsafe_arena_release:flyteidl.plugins.sagemaker.ParameterRangeOneOf.integer_parameter_range)
  if (_internal_has_integer_parameter_range()) {
    clear_has_parameter_range_type();
    ::flyteidl::plugins::sagemaker::IntegerParameterRange* temp = parameter_range_type_.integer_parameter_range_;
    parameter_range_type_.integer_parameter_range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ParameterRangeOneOf::unsafe_arena_set_allocated_integer_parameter_range(::flyteidl::plugins::sagemaker::IntegerParameterRange* integer_parameter_range) {
  clear_parameter_range_type();
  if (integer_parameter_range) {
    set_has_integer_parameter_range();
    parameter_range_type_.integer_parameter_range_ = integer_parameter_range;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.plugins.sagemaker.ParameterRangeOneOf.integer_parameter_range)
}
inline ::flyteidl::plugins::sagemaker::IntegerParameterRange* ParameterRangeOneOf::_internal_mutable_integer_parameter_range() {
  if (!_internal_has_integer_parameter_range()) {
    clear_parameter_range_type();
    set_has_integer_parameter_range();
    parameter_range_type_.integer_parameter_range_ = CreateMaybeMessage< ::flyteidl::plugins::sagemaker::IntegerParameterRange >(GetArenaForAllocation());
  }
  return parameter_range_type_.integer_parameter_range_;
}
inline ::flyteidl::plugins::sagemaker::IntegerParameterRange* ParameterRangeOneOf::mutable_integer_parameter_range() {
  ::flyteidl::plugins::sagemaker::IntegerParameterRange* _msg = _internal_mutable_integer_parameter_range();
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.sagemaker.ParameterRangeOneOf.integer_parameter_range)
  return _msg;
}

// .flyteidl.plugins.sagemaker.CategoricalParameterRange categorical_parameter_range = 3 [json_name = "categoricalParameterRange"];
inline bool ParameterRangeOneOf::_internal_has_categorical_parameter_range() const {
  return parameter_range_type_case() == kCategoricalParameterRange;
}
inline bool ParameterRangeOneOf::has_categorical_parameter_range() const {
  return _internal_has_categorical_parameter_range();
}
inline void ParameterRangeOneOf::set_has_categorical_parameter_range() {
  _oneof_case_[0] = kCategoricalParameterRange;
}
inline void ParameterRangeOneOf::clear_categorical_parameter_range() {
  if (_internal_has_categorical_parameter_range()) {
    if (GetArenaForAllocation() == nullptr) {
      delete parameter_range_type_.categorical_parameter_range_;
    }
    clear_has_parameter_range_type();
  }
}
inline ::flyteidl::plugins::sagemaker::CategoricalParameterRange* ParameterRangeOneOf::release_categorical_parameter_range() {
  // @@protoc_insertion_point(field_release:flyteidl.plugins.sagemaker.ParameterRangeOneOf.categorical_parameter_range)
  if (_internal_has_categorical_parameter_range()) {
    clear_has_parameter_range_type();
      ::flyteidl::plugins::sagemaker::CategoricalParameterRange* temp = parameter_range_type_.categorical_parameter_range_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    parameter_range_type_.categorical_parameter_range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::plugins::sagemaker::CategoricalParameterRange& ParameterRangeOneOf::_internal_categorical_parameter_range() const {
  return _internal_has_categorical_parameter_range()
      ? *parameter_range_type_.categorical_parameter_range_
      : reinterpret_cast< ::flyteidl::plugins::sagemaker::CategoricalParameterRange&>(::flyteidl::plugins::sagemaker::_CategoricalParameterRange_default_instance_);
}
inline const ::flyteidl::plugins::sagemaker::CategoricalParameterRange& ParameterRangeOneOf::categorical_parameter_range() const {
  // @@protoc_insertion_point(field_get:flyteidl.plugins.sagemaker.ParameterRangeOneOf.categorical_parameter_range)
  return _internal_categorical_parameter_range();
}
inline ::flyteidl::plugins::sagemaker::CategoricalParameterRange* ParameterRangeOneOf::unsafe_arena_release_categorical_parameter_range() {
  // @@protoc_insertion_point(field_unsafe_arena_release:flyteidl.plugins.sagemaker.ParameterRangeOneOf.categorical_parameter_range)
  if (_internal_has_categorical_parameter_range()) {
    clear_has_parameter_range_type();
    ::flyteidl::plugins::sagemaker::CategoricalParameterRange* temp = parameter_range_type_.categorical_parameter_range_;
    parameter_range_type_.categorical_parameter_range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ParameterRangeOneOf::unsafe_arena_set_allocated_categorical_parameter_range(::flyteidl::plugins::sagemaker::CategoricalParameterRange* categorical_parameter_range) {
  clear_parameter_range_type();
  if (categorical_parameter_range) {
    set_has_categorical_parameter_range();
    parameter_range_type_.categorical_parameter_range_ = categorical_parameter_range;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.plugins.sagemaker.ParameterRangeOneOf.categorical_parameter_range)
}
inline ::flyteidl::plugins::sagemaker::CategoricalParameterRange* ParameterRangeOneOf::_internal_mutable_categorical_parameter_range() {
  if (!_internal_has_categorical_parameter_range()) {
    clear_parameter_range_type();
    set_has_categorical_parameter_range();
    parameter_range_type_.categorical_parameter_range_ = CreateMaybeMessage< ::flyteidl::plugins::sagemaker::CategoricalParameterRange >(GetArenaForAllocation());
  }
  return parameter_range_type_.categorical_parameter_range_;
}
inline ::flyteidl::plugins::sagemaker::CategoricalParameterRange* ParameterRangeOneOf::mutable_categorical_parameter_range() {
  ::flyteidl::plugins::sagemaker::CategoricalParameterRange* _msg = _internal_mutable_categorical_parameter_range();
  // @@protoc_insertion_point(field_mutable:flyteidl.plugins.sagemaker.ParameterRangeOneOf.categorical_parameter_range)
  return _msg;
}

inline bool ParameterRangeOneOf::has_parameter_range_type() const {
  return parameter_range_type_case() != PARAMETER_RANGE_TYPE_NOT_SET;
}
inline void ParameterRangeOneOf::clear_has_parameter_range_type() {
  _oneof_case_[0] = PARAMETER_RANGE_TYPE_NOT_SET;
}
inline ParameterRangeOneOf::ParameterRangeTypeCase ParameterRangeOneOf::parameter_range_type_case() const {
  return ParameterRangeOneOf::ParameterRangeTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ParameterRanges

// map<string, .flyteidl.plugins.sagemaker.ParameterRangeOneOf> parameter_range_map = 1 [json_name = "parameterRangeMap"];
inline int ParameterRanges::_internal_parameter_range_map_size() const {
  return parameter_range_map_.size();
}
inline int ParameterRanges::parameter_range_map_size() const {
  return _internal_parameter_range_map_size();
}
inline void ParameterRanges::clear_parameter_range_map() {
  parameter_range_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flyteidl::plugins::sagemaker::ParameterRangeOneOf >&
ParameterRanges::_internal_parameter_range_map() const {
  return parameter_range_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flyteidl::plugins::sagemaker::ParameterRangeOneOf >&
ParameterRanges::parameter_range_map() const {
  // @@protoc_insertion_point(field_map:flyteidl.plugins.sagemaker.ParameterRanges.parameter_range_map)
  return _internal_parameter_range_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flyteidl::plugins::sagemaker::ParameterRangeOneOf >*
ParameterRanges::_internal_mutable_parameter_range_map() {
  return parameter_range_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::flyteidl::plugins::sagemaker::ParameterRangeOneOf >*
ParameterRanges::mutable_parameter_range_map() {
  // @@protoc_insertion_point(field_mutable_map:flyteidl.plugins.sagemaker.ParameterRanges.parameter_range_map)
  return _internal_mutable_parameter_range_map();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sagemaker
}  // namespace plugins
}  // namespace flyteidl

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::flyteidl::plugins::sagemaker::HyperparameterScalingType_Value> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flyteidl::plugins::sagemaker::HyperparameterScalingType_Value>() {
  return ::flyteidl::plugins::sagemaker::HyperparameterScalingType_Value_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fplugins_2fsagemaker_2fparameter_5franges_2eproto
