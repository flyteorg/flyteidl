// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/execution.proto

#ifndef PROTOBUF_flyteidl_2fadmin_2fexecution_2eproto__INCLUDED
#define PROTOBUF_flyteidl_2fadmin_2fexecution_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "flyteidl/admin/common.pb.h"
#include "flyteidl/core/literals.pb.h"
#include "flyteidl/core/execution.pb.h"
#include "flyteidl/core/identifier.pb.h"
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)

namespace protobuf_flyteidl_2fadmin_2fexecution_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[15];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsExecutionCreateRequestImpl();
void InitDefaultsExecutionCreateRequest();
void InitDefaultsExecutionRelaunchRequestImpl();
void InitDefaultsExecutionRelaunchRequest();
void InitDefaultsExecutionCreateResponseImpl();
void InitDefaultsExecutionCreateResponse();
void InitDefaultsWorkflowExecutionGetRequestImpl();
void InitDefaultsWorkflowExecutionGetRequest();
void InitDefaultsExecutionImpl();
void InitDefaultsExecution();
void InitDefaultsExecutionListImpl();
void InitDefaultsExecutionList();
void InitDefaultsLiteralMapBlobImpl();
void InitDefaultsLiteralMapBlob();
void InitDefaultsExecutionClosureImpl();
void InitDefaultsExecutionClosure();
void InitDefaultsExecutionMetadataImpl();
void InitDefaultsExecutionMetadata();
void InitDefaultsNotificationListImpl();
void InitDefaultsNotificationList();
void InitDefaultsExecutionSpecImpl();
void InitDefaultsExecutionSpec();
void InitDefaultsExecutionTerminateRequestImpl();
void InitDefaultsExecutionTerminateRequest();
void InitDefaultsExecutionTerminateResponseImpl();
void InitDefaultsExecutionTerminateResponse();
void InitDefaultsWorkflowExecutionGetDataRequestImpl();
void InitDefaultsWorkflowExecutionGetDataRequest();
void InitDefaultsWorkflowExecutionGetDataResponseImpl();
void InitDefaultsWorkflowExecutionGetDataResponse();
inline void InitDefaults() {
  InitDefaultsExecutionCreateRequest();
  InitDefaultsExecutionRelaunchRequest();
  InitDefaultsExecutionCreateResponse();
  InitDefaultsWorkflowExecutionGetRequest();
  InitDefaultsExecution();
  InitDefaultsExecutionList();
  InitDefaultsLiteralMapBlob();
  InitDefaultsExecutionClosure();
  InitDefaultsExecutionMetadata();
  InitDefaultsNotificationList();
  InitDefaultsExecutionSpec();
  InitDefaultsExecutionTerminateRequest();
  InitDefaultsExecutionTerminateResponse();
  InitDefaultsWorkflowExecutionGetDataRequest();
  InitDefaultsWorkflowExecutionGetDataResponse();
}
}  // namespace protobuf_flyteidl_2fadmin_2fexecution_2eproto
namespace flyteidl {
namespace admin {
class Execution;
class ExecutionDefaultTypeInternal;
extern ExecutionDefaultTypeInternal _Execution_default_instance_;
class ExecutionClosure;
class ExecutionClosureDefaultTypeInternal;
extern ExecutionClosureDefaultTypeInternal _ExecutionClosure_default_instance_;
class ExecutionCreateRequest;
class ExecutionCreateRequestDefaultTypeInternal;
extern ExecutionCreateRequestDefaultTypeInternal _ExecutionCreateRequest_default_instance_;
class ExecutionCreateResponse;
class ExecutionCreateResponseDefaultTypeInternal;
extern ExecutionCreateResponseDefaultTypeInternal _ExecutionCreateResponse_default_instance_;
class ExecutionList;
class ExecutionListDefaultTypeInternal;
extern ExecutionListDefaultTypeInternal _ExecutionList_default_instance_;
class ExecutionMetadata;
class ExecutionMetadataDefaultTypeInternal;
extern ExecutionMetadataDefaultTypeInternal _ExecutionMetadata_default_instance_;
class ExecutionRelaunchRequest;
class ExecutionRelaunchRequestDefaultTypeInternal;
extern ExecutionRelaunchRequestDefaultTypeInternal _ExecutionRelaunchRequest_default_instance_;
class ExecutionSpec;
class ExecutionSpecDefaultTypeInternal;
extern ExecutionSpecDefaultTypeInternal _ExecutionSpec_default_instance_;
class ExecutionTerminateRequest;
class ExecutionTerminateRequestDefaultTypeInternal;
extern ExecutionTerminateRequestDefaultTypeInternal _ExecutionTerminateRequest_default_instance_;
class ExecutionTerminateResponse;
class ExecutionTerminateResponseDefaultTypeInternal;
extern ExecutionTerminateResponseDefaultTypeInternal _ExecutionTerminateResponse_default_instance_;
class LiteralMapBlob;
class LiteralMapBlobDefaultTypeInternal;
extern LiteralMapBlobDefaultTypeInternal _LiteralMapBlob_default_instance_;
class NotificationList;
class NotificationListDefaultTypeInternal;
extern NotificationListDefaultTypeInternal _NotificationList_default_instance_;
class WorkflowExecutionGetDataRequest;
class WorkflowExecutionGetDataRequestDefaultTypeInternal;
extern WorkflowExecutionGetDataRequestDefaultTypeInternal _WorkflowExecutionGetDataRequest_default_instance_;
class WorkflowExecutionGetDataResponse;
class WorkflowExecutionGetDataResponseDefaultTypeInternal;
extern WorkflowExecutionGetDataResponseDefaultTypeInternal _WorkflowExecutionGetDataResponse_default_instance_;
class WorkflowExecutionGetRequest;
class WorkflowExecutionGetRequestDefaultTypeInternal;
extern WorkflowExecutionGetRequestDefaultTypeInternal _WorkflowExecutionGetRequest_default_instance_;
}  // namespace admin
}  // namespace flyteidl
namespace flyteidl {
namespace admin {

enum ExecutionMetadata_ExecutionMode {
  ExecutionMetadata_ExecutionMode_MANUAL = 0,
  ExecutionMetadata_ExecutionMode_SCHEDULED = 1,
  ExecutionMetadata_ExecutionMode_SYSTEM = 2,
  ExecutionMetadata_ExecutionMode_RELAUNCH = 3,
  ExecutionMetadata_ExecutionMode_CHILD_WORKFLOW = 4,
  ExecutionMetadata_ExecutionMode_ExecutionMetadata_ExecutionMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ExecutionMetadata_ExecutionMode_ExecutionMetadata_ExecutionMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ExecutionMetadata_ExecutionMode_IsValid(int value);
const ExecutionMetadata_ExecutionMode ExecutionMetadata_ExecutionMode_ExecutionMode_MIN = ExecutionMetadata_ExecutionMode_MANUAL;
const ExecutionMetadata_ExecutionMode ExecutionMetadata_ExecutionMode_ExecutionMode_MAX = ExecutionMetadata_ExecutionMode_CHILD_WORKFLOW;
const int ExecutionMetadata_ExecutionMode_ExecutionMode_ARRAYSIZE = ExecutionMetadata_ExecutionMode_ExecutionMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ExecutionMetadata_ExecutionMode_descriptor();
inline const ::std::string& ExecutionMetadata_ExecutionMode_Name(ExecutionMetadata_ExecutionMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ExecutionMetadata_ExecutionMode_descriptor(), value);
}
inline bool ExecutionMetadata_ExecutionMode_Parse(
    const ::std::string& name, ExecutionMetadata_ExecutionMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ExecutionMetadata_ExecutionMode>(
    ExecutionMetadata_ExecutionMode_descriptor(), name, value);
}
// ===================================================================

class ExecutionCreateRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.ExecutionCreateRequest) */ {
 public:
  ExecutionCreateRequest();
  virtual ~ExecutionCreateRequest();

  ExecutionCreateRequest(const ExecutionCreateRequest& from);

  inline ExecutionCreateRequest& operator=(const ExecutionCreateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExecutionCreateRequest(ExecutionCreateRequest&& from) noexcept
    : ExecutionCreateRequest() {
    *this = ::std::move(from);
  }

  inline ExecutionCreateRequest& operator=(ExecutionCreateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExecutionCreateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecutionCreateRequest* internal_default_instance() {
    return reinterpret_cast<const ExecutionCreateRequest*>(
               &_ExecutionCreateRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ExecutionCreateRequest* other);
  friend void swap(ExecutionCreateRequest& a, ExecutionCreateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExecutionCreateRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ExecutionCreateRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ExecutionCreateRequest& from);
  void MergeFrom(const ExecutionCreateRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ExecutionCreateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project = 1;
  void clear_project();
  static const int kProjectFieldNumber = 1;
  const ::std::string& project() const;
  void set_project(const ::std::string& value);
  #if LANG_CXX11
  void set_project(::std::string&& value);
  #endif
  void set_project(const char* value);
  void set_project(const char* value, size_t size);
  ::std::string* mutable_project();
  ::std::string* release_project();
  void set_allocated_project(::std::string* project);

  // string domain = 2;
  void clear_domain();
  static const int kDomainFieldNumber = 2;
  const ::std::string& domain() const;
  void set_domain(const ::std::string& value);
  #if LANG_CXX11
  void set_domain(::std::string&& value);
  #endif
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  ::std::string* mutable_domain();
  ::std::string* release_domain();
  void set_allocated_domain(::std::string* domain);

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .flyteidl.admin.ExecutionSpec spec = 4;
  bool has_spec() const;
  void clear_spec();
  static const int kSpecFieldNumber = 4;
  const ::flyteidl::admin::ExecutionSpec& spec() const;
  ::flyteidl::admin::ExecutionSpec* release_spec();
  ::flyteidl::admin::ExecutionSpec* mutable_spec();
  void set_allocated_spec(::flyteidl::admin::ExecutionSpec* spec);

  // .flyteidl.core.LiteralMap inputs = 5;
  bool has_inputs() const;
  void clear_inputs();
  static const int kInputsFieldNumber = 5;
  const ::flyteidl::core::LiteralMap& inputs() const;
  ::flyteidl::core::LiteralMap* release_inputs();
  ::flyteidl::core::LiteralMap* mutable_inputs();
  void set_allocated_inputs(::flyteidl::core::LiteralMap* inputs);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.ExecutionCreateRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_;
  ::google::protobuf::internal::ArenaStringPtr domain_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::flyteidl::admin::ExecutionSpec* spec_;
  ::flyteidl::core::LiteralMap* inputs_;
  mutable int _cached_size_;
  friend struct ::protobuf_flyteidl_2fadmin_2fexecution_2eproto::TableStruct;
  friend void ::protobuf_flyteidl_2fadmin_2fexecution_2eproto::InitDefaultsExecutionCreateRequestImpl();
};
// -------------------------------------------------------------------

class ExecutionRelaunchRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.ExecutionRelaunchRequest) */ {
 public:
  ExecutionRelaunchRequest();
  virtual ~ExecutionRelaunchRequest();

  ExecutionRelaunchRequest(const ExecutionRelaunchRequest& from);

  inline ExecutionRelaunchRequest& operator=(const ExecutionRelaunchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExecutionRelaunchRequest(ExecutionRelaunchRequest&& from) noexcept
    : ExecutionRelaunchRequest() {
    *this = ::std::move(from);
  }

  inline ExecutionRelaunchRequest& operator=(ExecutionRelaunchRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExecutionRelaunchRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecutionRelaunchRequest* internal_default_instance() {
    return reinterpret_cast<const ExecutionRelaunchRequest*>(
               &_ExecutionRelaunchRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ExecutionRelaunchRequest* other);
  friend void swap(ExecutionRelaunchRequest& a, ExecutionRelaunchRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExecutionRelaunchRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ExecutionRelaunchRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ExecutionRelaunchRequest& from);
  void MergeFrom(const ExecutionRelaunchRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ExecutionRelaunchRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .flyteidl.core.WorkflowExecutionIdentifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::flyteidl::core::WorkflowExecutionIdentifier& id() const;
  ::flyteidl::core::WorkflowExecutionIdentifier* release_id();
  ::flyteidl::core::WorkflowExecutionIdentifier* mutable_id();
  void set_allocated_id(::flyteidl::core::WorkflowExecutionIdentifier* id);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.ExecutionRelaunchRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::flyteidl::core::WorkflowExecutionIdentifier* id_;
  mutable int _cached_size_;
  friend struct ::protobuf_flyteidl_2fadmin_2fexecution_2eproto::TableStruct;
  friend void ::protobuf_flyteidl_2fadmin_2fexecution_2eproto::InitDefaultsExecutionRelaunchRequestImpl();
};
// -------------------------------------------------------------------

class ExecutionCreateResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.ExecutionCreateResponse) */ {
 public:
  ExecutionCreateResponse();
  virtual ~ExecutionCreateResponse();

  ExecutionCreateResponse(const ExecutionCreateResponse& from);

  inline ExecutionCreateResponse& operator=(const ExecutionCreateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExecutionCreateResponse(ExecutionCreateResponse&& from) noexcept
    : ExecutionCreateResponse() {
    *this = ::std::move(from);
  }

  inline ExecutionCreateResponse& operator=(ExecutionCreateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExecutionCreateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecutionCreateResponse* internal_default_instance() {
    return reinterpret_cast<const ExecutionCreateResponse*>(
               &_ExecutionCreateResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ExecutionCreateResponse* other);
  friend void swap(ExecutionCreateResponse& a, ExecutionCreateResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExecutionCreateResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ExecutionCreateResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ExecutionCreateResponse& from);
  void MergeFrom(const ExecutionCreateResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ExecutionCreateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.core.WorkflowExecutionIdentifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::flyteidl::core::WorkflowExecutionIdentifier& id() const;
  ::flyteidl::core::WorkflowExecutionIdentifier* release_id();
  ::flyteidl::core::WorkflowExecutionIdentifier* mutable_id();
  void set_allocated_id(::flyteidl::core::WorkflowExecutionIdentifier* id);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.ExecutionCreateResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::core::WorkflowExecutionIdentifier* id_;
  mutable int _cached_size_;
  friend struct ::protobuf_flyteidl_2fadmin_2fexecution_2eproto::TableStruct;
  friend void ::protobuf_flyteidl_2fadmin_2fexecution_2eproto::InitDefaultsExecutionCreateResponseImpl();
};
// -------------------------------------------------------------------

class WorkflowExecutionGetRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.WorkflowExecutionGetRequest) */ {
 public:
  WorkflowExecutionGetRequest();
  virtual ~WorkflowExecutionGetRequest();

  WorkflowExecutionGetRequest(const WorkflowExecutionGetRequest& from);

  inline WorkflowExecutionGetRequest& operator=(const WorkflowExecutionGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WorkflowExecutionGetRequest(WorkflowExecutionGetRequest&& from) noexcept
    : WorkflowExecutionGetRequest() {
    *this = ::std::move(from);
  }

  inline WorkflowExecutionGetRequest& operator=(WorkflowExecutionGetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WorkflowExecutionGetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkflowExecutionGetRequest* internal_default_instance() {
    return reinterpret_cast<const WorkflowExecutionGetRequest*>(
               &_WorkflowExecutionGetRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(WorkflowExecutionGetRequest* other);
  friend void swap(WorkflowExecutionGetRequest& a, WorkflowExecutionGetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WorkflowExecutionGetRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  WorkflowExecutionGetRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WorkflowExecutionGetRequest& from);
  void MergeFrom(const WorkflowExecutionGetRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WorkflowExecutionGetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.core.WorkflowExecutionIdentifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::flyteidl::core::WorkflowExecutionIdentifier& id() const;
  ::flyteidl::core::WorkflowExecutionIdentifier* release_id();
  ::flyteidl::core::WorkflowExecutionIdentifier* mutable_id();
  void set_allocated_id(::flyteidl::core::WorkflowExecutionIdentifier* id);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.WorkflowExecutionGetRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::core::WorkflowExecutionIdentifier* id_;
  mutable int _cached_size_;
  friend struct ::protobuf_flyteidl_2fadmin_2fexecution_2eproto::TableStruct;
  friend void ::protobuf_flyteidl_2fadmin_2fexecution_2eproto::InitDefaultsWorkflowExecutionGetRequestImpl();
};
// -------------------------------------------------------------------

class Execution : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.Execution) */ {
 public:
  Execution();
  virtual ~Execution();

  Execution(const Execution& from);

  inline Execution& operator=(const Execution& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Execution(Execution&& from) noexcept
    : Execution() {
    *this = ::std::move(from);
  }

  inline Execution& operator=(Execution&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Execution& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Execution* internal_default_instance() {
    return reinterpret_cast<const Execution*>(
               &_Execution_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Execution* other);
  friend void swap(Execution& a, Execution& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Execution* New() const PROTOBUF_FINAL { return New(NULL); }

  Execution* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Execution& from);
  void MergeFrom(const Execution& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Execution* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.core.WorkflowExecutionIdentifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::flyteidl::core::WorkflowExecutionIdentifier& id() const;
  ::flyteidl::core::WorkflowExecutionIdentifier* release_id();
  ::flyteidl::core::WorkflowExecutionIdentifier* mutable_id();
  void set_allocated_id(::flyteidl::core::WorkflowExecutionIdentifier* id);

  // .flyteidl.admin.ExecutionSpec spec = 2;
  bool has_spec() const;
  void clear_spec();
  static const int kSpecFieldNumber = 2;
  const ::flyteidl::admin::ExecutionSpec& spec() const;
  ::flyteidl::admin::ExecutionSpec* release_spec();
  ::flyteidl::admin::ExecutionSpec* mutable_spec();
  void set_allocated_spec(::flyteidl::admin::ExecutionSpec* spec);

  // .flyteidl.admin.ExecutionClosure closure = 3;
  bool has_closure() const;
  void clear_closure();
  static const int kClosureFieldNumber = 3;
  const ::flyteidl::admin::ExecutionClosure& closure() const;
  ::flyteidl::admin::ExecutionClosure* release_closure();
  ::flyteidl::admin::ExecutionClosure* mutable_closure();
  void set_allocated_closure(::flyteidl::admin::ExecutionClosure* closure);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.Execution)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::core::WorkflowExecutionIdentifier* id_;
  ::flyteidl::admin::ExecutionSpec* spec_;
  ::flyteidl::admin::ExecutionClosure* closure_;
  mutable int _cached_size_;
  friend struct ::protobuf_flyteidl_2fadmin_2fexecution_2eproto::TableStruct;
  friend void ::protobuf_flyteidl_2fadmin_2fexecution_2eproto::InitDefaultsExecutionImpl();
};
// -------------------------------------------------------------------

class ExecutionList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.ExecutionList) */ {
 public:
  ExecutionList();
  virtual ~ExecutionList();

  ExecutionList(const ExecutionList& from);

  inline ExecutionList& operator=(const ExecutionList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExecutionList(ExecutionList&& from) noexcept
    : ExecutionList() {
    *this = ::std::move(from);
  }

  inline ExecutionList& operator=(ExecutionList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExecutionList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecutionList* internal_default_instance() {
    return reinterpret_cast<const ExecutionList*>(
               &_ExecutionList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(ExecutionList* other);
  friend void swap(ExecutionList& a, ExecutionList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExecutionList* New() const PROTOBUF_FINAL { return New(NULL); }

  ExecutionList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ExecutionList& from);
  void MergeFrom(const ExecutionList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ExecutionList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .flyteidl.admin.Execution executions = 1;
  int executions_size() const;
  void clear_executions();
  static const int kExecutionsFieldNumber = 1;
  const ::flyteidl::admin::Execution& executions(int index) const;
  ::flyteidl::admin::Execution* mutable_executions(int index);
  ::flyteidl::admin::Execution* add_executions();
  ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::Execution >*
      mutable_executions();
  const ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::Execution >&
      executions() const;

  // string token = 2;
  void clear_token();
  static const int kTokenFieldNumber = 2;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.ExecutionList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::Execution > executions_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  mutable int _cached_size_;
  friend struct ::protobuf_flyteidl_2fadmin_2fexecution_2eproto::TableStruct;
  friend void ::protobuf_flyteidl_2fadmin_2fexecution_2eproto::InitDefaultsExecutionListImpl();
};
// -------------------------------------------------------------------

class LiteralMapBlob : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.LiteralMapBlob) */ {
 public:
  LiteralMapBlob();
  virtual ~LiteralMapBlob();

  LiteralMapBlob(const LiteralMapBlob& from);

  inline LiteralMapBlob& operator=(const LiteralMapBlob& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LiteralMapBlob(LiteralMapBlob&& from) noexcept
    : LiteralMapBlob() {
    *this = ::std::move(from);
  }

  inline LiteralMapBlob& operator=(LiteralMapBlob&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LiteralMapBlob& default_instance();

  enum DataCase {
    kValues = 1,
    kUri = 2,
    DATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LiteralMapBlob* internal_default_instance() {
    return reinterpret_cast<const LiteralMapBlob*>(
               &_LiteralMapBlob_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(LiteralMapBlob* other);
  friend void swap(LiteralMapBlob& a, LiteralMapBlob& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LiteralMapBlob* New() const PROTOBUF_FINAL { return New(NULL); }

  LiteralMapBlob* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LiteralMapBlob& from);
  void MergeFrom(const LiteralMapBlob& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LiteralMapBlob* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.core.LiteralMap values = 1;
  bool has_values() const;
  void clear_values();
  static const int kValuesFieldNumber = 1;
  const ::flyteidl::core::LiteralMap& values() const;
  ::flyteidl::core::LiteralMap* release_values();
  ::flyteidl::core::LiteralMap* mutable_values();
  void set_allocated_values(::flyteidl::core::LiteralMap* values);

  // string uri = 2;
  private:
  bool has_uri() const;
  public:
  void clear_uri();
  static const int kUriFieldNumber = 2;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_uri(::std::string&& value);
  #endif
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.admin.LiteralMapBlob)
 private:
  void set_has_values();
  void set_has_uri();

  inline bool has_data() const;
  void clear_data();
  inline void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union DataUnion {
    DataUnion() {}
    ::flyteidl::core::LiteralMap* values_;
    ::google::protobuf::internal::ArenaStringPtr uri_;
  } data_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_flyteidl_2fadmin_2fexecution_2eproto::TableStruct;
  friend void ::protobuf_flyteidl_2fadmin_2fexecution_2eproto::InitDefaultsLiteralMapBlobImpl();
};
// -------------------------------------------------------------------

class ExecutionClosure : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.ExecutionClosure) */ {
 public:
  ExecutionClosure();
  virtual ~ExecutionClosure();

  ExecutionClosure(const ExecutionClosure& from);

  inline ExecutionClosure& operator=(const ExecutionClosure& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExecutionClosure(ExecutionClosure&& from) noexcept
    : ExecutionClosure() {
    *this = ::std::move(from);
  }

  inline ExecutionClosure& operator=(ExecutionClosure&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExecutionClosure& default_instance();

  enum OutputResultCase {
    kOutputs = 1,
    kError = 2,
    kAbortCause = 10,
    OUTPUT_RESULT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecutionClosure* internal_default_instance() {
    return reinterpret_cast<const ExecutionClosure*>(
               &_ExecutionClosure_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(ExecutionClosure* other);
  friend void swap(ExecutionClosure& a, ExecutionClosure& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExecutionClosure* New() const PROTOBUF_FINAL { return New(NULL); }

  ExecutionClosure* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ExecutionClosure& from);
  void MergeFrom(const ExecutionClosure& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ExecutionClosure* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .flyteidl.admin.Notification notifications = 9;
  int notifications_size() const;
  void clear_notifications();
  static const int kNotificationsFieldNumber = 9;
  const ::flyteidl::admin::Notification& notifications(int index) const;
  ::flyteidl::admin::Notification* mutable_notifications(int index);
  ::flyteidl::admin::Notification* add_notifications();
  ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::Notification >*
      mutable_notifications();
  const ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::Notification >&
      notifications() const;

  // .flyteidl.core.LiteralMap computed_inputs = 3 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_computed_inputs() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_computed_inputs();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kComputedInputsFieldNumber = 3;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::flyteidl::core::LiteralMap& computed_inputs() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::flyteidl::core::LiteralMap* release_computed_inputs();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::flyteidl::core::LiteralMap* mutable_computed_inputs();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_allocated_computed_inputs(::flyteidl::core::LiteralMap* computed_inputs);

  // .google.protobuf.Timestamp started_at = 5;
  bool has_started_at() const;
  void clear_started_at();
  static const int kStartedAtFieldNumber = 5;
  const ::google::protobuf::Timestamp& started_at() const;
  ::google::protobuf::Timestamp* release_started_at();
  ::google::protobuf::Timestamp* mutable_started_at();
  void set_allocated_started_at(::google::protobuf::Timestamp* started_at);

  // .google.protobuf.Duration duration = 6;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 6;
  const ::google::protobuf::Duration& duration() const;
  ::google::protobuf::Duration* release_duration();
  ::google::protobuf::Duration* mutable_duration();
  void set_allocated_duration(::google::protobuf::Duration* duration);

  // .google.protobuf.Timestamp created_at = 7;
  bool has_created_at() const;
  void clear_created_at();
  static const int kCreatedAtFieldNumber = 7;
  const ::google::protobuf::Timestamp& created_at() const;
  ::google::protobuf::Timestamp* release_created_at();
  ::google::protobuf::Timestamp* mutable_created_at();
  void set_allocated_created_at(::google::protobuf::Timestamp* created_at);

  // .google.protobuf.Timestamp updated_at = 8;
  bool has_updated_at() const;
  void clear_updated_at();
  static const int kUpdatedAtFieldNumber = 8;
  const ::google::protobuf::Timestamp& updated_at() const;
  ::google::protobuf::Timestamp* release_updated_at();
  ::google::protobuf::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(::google::protobuf::Timestamp* updated_at);

  // .flyteidl.core.Identifier workflow_id = 11;
  bool has_workflow_id() const;
  void clear_workflow_id();
  static const int kWorkflowIdFieldNumber = 11;
  const ::flyteidl::core::Identifier& workflow_id() const;
  ::flyteidl::core::Identifier* release_workflow_id();
  ::flyteidl::core::Identifier* mutable_workflow_id();
  void set_allocated_workflow_id(::flyteidl::core::Identifier* workflow_id);

  // .flyteidl.core.WorkflowExecution.Phase phase = 4;
  void clear_phase();
  static const int kPhaseFieldNumber = 4;
  ::flyteidl::core::WorkflowExecution_Phase phase() const;
  void set_phase(::flyteidl::core::WorkflowExecution_Phase value);

  // .flyteidl.admin.LiteralMapBlob outputs = 1;
  bool has_outputs() const;
  void clear_outputs();
  static const int kOutputsFieldNumber = 1;
  const ::flyteidl::admin::LiteralMapBlob& outputs() const;
  ::flyteidl::admin::LiteralMapBlob* release_outputs();
  ::flyteidl::admin::LiteralMapBlob* mutable_outputs();
  void set_allocated_outputs(::flyteidl::admin::LiteralMapBlob* outputs);

  // .flyteidl.core.ExecutionError error = 2;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  const ::flyteidl::core::ExecutionError& error() const;
  ::flyteidl::core::ExecutionError* release_error();
  ::flyteidl::core::ExecutionError* mutable_error();
  void set_allocated_error(::flyteidl::core::ExecutionError* error);

  // string abort_cause = 10;
  private:
  bool has_abort_cause() const;
  public:
  void clear_abort_cause();
  static const int kAbortCauseFieldNumber = 10;
  const ::std::string& abort_cause() const;
  void set_abort_cause(const ::std::string& value);
  #if LANG_CXX11
  void set_abort_cause(::std::string&& value);
  #endif
  void set_abort_cause(const char* value);
  void set_abort_cause(const char* value, size_t size);
  ::std::string* mutable_abort_cause();
  ::std::string* release_abort_cause();
  void set_allocated_abort_cause(::std::string* abort_cause);

  OutputResultCase output_result_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.admin.ExecutionClosure)
 private:
  void set_has_outputs();
  void set_has_error();
  void set_has_abort_cause();

  inline bool has_output_result() const;
  void clear_output_result();
  inline void clear_has_output_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::Notification > notifications_;
  ::flyteidl::core::LiteralMap* computed_inputs_;
  ::google::protobuf::Timestamp* started_at_;
  ::google::protobuf::Duration* duration_;
  ::google::protobuf::Timestamp* created_at_;
  ::google::protobuf::Timestamp* updated_at_;
  ::flyteidl::core::Identifier* workflow_id_;
  int phase_;
  union OutputResultUnion {
    OutputResultUnion() {}
    ::flyteidl::admin::LiteralMapBlob* outputs_;
    ::flyteidl::core::ExecutionError* error_;
    ::google::protobuf::internal::ArenaStringPtr abort_cause_;
  } output_result_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_flyteidl_2fadmin_2fexecution_2eproto::TableStruct;
  friend void ::protobuf_flyteidl_2fadmin_2fexecution_2eproto::InitDefaultsExecutionClosureImpl();
};
// -------------------------------------------------------------------

class ExecutionMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.ExecutionMetadata) */ {
 public:
  ExecutionMetadata();
  virtual ~ExecutionMetadata();

  ExecutionMetadata(const ExecutionMetadata& from);

  inline ExecutionMetadata& operator=(const ExecutionMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExecutionMetadata(ExecutionMetadata&& from) noexcept
    : ExecutionMetadata() {
    *this = ::std::move(from);
  }

  inline ExecutionMetadata& operator=(ExecutionMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExecutionMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecutionMetadata* internal_default_instance() {
    return reinterpret_cast<const ExecutionMetadata*>(
               &_ExecutionMetadata_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(ExecutionMetadata* other);
  friend void swap(ExecutionMetadata& a, ExecutionMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExecutionMetadata* New() const PROTOBUF_FINAL { return New(NULL); }

  ExecutionMetadata* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ExecutionMetadata& from);
  void MergeFrom(const ExecutionMetadata& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ExecutionMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ExecutionMetadata_ExecutionMode ExecutionMode;
  static const ExecutionMode MANUAL =
    ExecutionMetadata_ExecutionMode_MANUAL;
  static const ExecutionMode SCHEDULED =
    ExecutionMetadata_ExecutionMode_SCHEDULED;
  static const ExecutionMode SYSTEM =
    ExecutionMetadata_ExecutionMode_SYSTEM;
  static const ExecutionMode RELAUNCH =
    ExecutionMetadata_ExecutionMode_RELAUNCH;
  static const ExecutionMode CHILD_WORKFLOW =
    ExecutionMetadata_ExecutionMode_CHILD_WORKFLOW;
  static inline bool ExecutionMode_IsValid(int value) {
    return ExecutionMetadata_ExecutionMode_IsValid(value);
  }
  static const ExecutionMode ExecutionMode_MIN =
    ExecutionMetadata_ExecutionMode_ExecutionMode_MIN;
  static const ExecutionMode ExecutionMode_MAX =
    ExecutionMetadata_ExecutionMode_ExecutionMode_MAX;
  static const int ExecutionMode_ARRAYSIZE =
    ExecutionMetadata_ExecutionMode_ExecutionMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ExecutionMode_descriptor() {
    return ExecutionMetadata_ExecutionMode_descriptor();
  }
  static inline const ::std::string& ExecutionMode_Name(ExecutionMode value) {
    return ExecutionMetadata_ExecutionMode_Name(value);
  }
  static inline bool ExecutionMode_Parse(const ::std::string& name,
      ExecutionMode* value) {
    return ExecutionMetadata_ExecutionMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string principal = 2;
  void clear_principal();
  static const int kPrincipalFieldNumber = 2;
  const ::std::string& principal() const;
  void set_principal(const ::std::string& value);
  #if LANG_CXX11
  void set_principal(::std::string&& value);
  #endif
  void set_principal(const char* value);
  void set_principal(const char* value, size_t size);
  ::std::string* mutable_principal();
  ::std::string* release_principal();
  void set_allocated_principal(::std::string* principal);

  // .google.protobuf.Timestamp scheduled_at = 4;
  bool has_scheduled_at() const;
  void clear_scheduled_at();
  static const int kScheduledAtFieldNumber = 4;
  const ::google::protobuf::Timestamp& scheduled_at() const;
  ::google::protobuf::Timestamp* release_scheduled_at();
  ::google::protobuf::Timestamp* mutable_scheduled_at();
  void set_allocated_scheduled_at(::google::protobuf::Timestamp* scheduled_at);

  // .flyteidl.core.NodeExecutionIdentifier parent_node_execution = 5;
  bool has_parent_node_execution() const;
  void clear_parent_node_execution();
  static const int kParentNodeExecutionFieldNumber = 5;
  const ::flyteidl::core::NodeExecutionIdentifier& parent_node_execution() const;
  ::flyteidl::core::NodeExecutionIdentifier* release_parent_node_execution();
  ::flyteidl::core::NodeExecutionIdentifier* mutable_parent_node_execution();
  void set_allocated_parent_node_execution(::flyteidl::core::NodeExecutionIdentifier* parent_node_execution);

  // .flyteidl.core.WorkflowExecutionIdentifier reference_execution = 16;
  bool has_reference_execution() const;
  void clear_reference_execution();
  static const int kReferenceExecutionFieldNumber = 16;
  const ::flyteidl::core::WorkflowExecutionIdentifier& reference_execution() const;
  ::flyteidl::core::WorkflowExecutionIdentifier* release_reference_execution();
  ::flyteidl::core::WorkflowExecutionIdentifier* mutable_reference_execution();
  void set_allocated_reference_execution(::flyteidl::core::WorkflowExecutionIdentifier* reference_execution);

  // .flyteidl.admin.ExecutionMetadata.ExecutionMode mode = 1;
  void clear_mode();
  static const int kModeFieldNumber = 1;
  ::flyteidl::admin::ExecutionMetadata_ExecutionMode mode() const;
  void set_mode(::flyteidl::admin::ExecutionMetadata_ExecutionMode value);

  // uint32 nesting = 3;
  void clear_nesting();
  static const int kNestingFieldNumber = 3;
  ::google::protobuf::uint32 nesting() const;
  void set_nesting(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.ExecutionMetadata)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr principal_;
  ::google::protobuf::Timestamp* scheduled_at_;
  ::flyteidl::core::NodeExecutionIdentifier* parent_node_execution_;
  ::flyteidl::core::WorkflowExecutionIdentifier* reference_execution_;
  int mode_;
  ::google::protobuf::uint32 nesting_;
  mutable int _cached_size_;
  friend struct ::protobuf_flyteidl_2fadmin_2fexecution_2eproto::TableStruct;
  friend void ::protobuf_flyteidl_2fadmin_2fexecution_2eproto::InitDefaultsExecutionMetadataImpl();
};
// -------------------------------------------------------------------

class NotificationList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.NotificationList) */ {
 public:
  NotificationList();
  virtual ~NotificationList();

  NotificationList(const NotificationList& from);

  inline NotificationList& operator=(const NotificationList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NotificationList(NotificationList&& from) noexcept
    : NotificationList() {
    *this = ::std::move(from);
  }

  inline NotificationList& operator=(NotificationList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NotificationList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NotificationList* internal_default_instance() {
    return reinterpret_cast<const NotificationList*>(
               &_NotificationList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(NotificationList* other);
  friend void swap(NotificationList& a, NotificationList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NotificationList* New() const PROTOBUF_FINAL { return New(NULL); }

  NotificationList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NotificationList& from);
  void MergeFrom(const NotificationList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NotificationList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .flyteidl.admin.Notification notifications = 1;
  int notifications_size() const;
  void clear_notifications();
  static const int kNotificationsFieldNumber = 1;
  const ::flyteidl::admin::Notification& notifications(int index) const;
  ::flyteidl::admin::Notification* mutable_notifications(int index);
  ::flyteidl::admin::Notification* add_notifications();
  ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::Notification >*
      mutable_notifications();
  const ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::Notification >&
      notifications() const;

  // @@protoc_insertion_point(class_scope:flyteidl.admin.NotificationList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::Notification > notifications_;
  mutable int _cached_size_;
  friend struct ::protobuf_flyteidl_2fadmin_2fexecution_2eproto::TableStruct;
  friend void ::protobuf_flyteidl_2fadmin_2fexecution_2eproto::InitDefaultsNotificationListImpl();
};
// -------------------------------------------------------------------

class ExecutionSpec : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.ExecutionSpec) */ {
 public:
  ExecutionSpec();
  virtual ~ExecutionSpec();

  ExecutionSpec(const ExecutionSpec& from);

  inline ExecutionSpec& operator=(const ExecutionSpec& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExecutionSpec(ExecutionSpec&& from) noexcept
    : ExecutionSpec() {
    *this = ::std::move(from);
  }

  inline ExecutionSpec& operator=(ExecutionSpec&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExecutionSpec& default_instance();

  enum NotificationOverridesCase {
    kNotifications = 5,
    kDisableAll = 6,
    NOTIFICATION_OVERRIDES_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecutionSpec* internal_default_instance() {
    return reinterpret_cast<const ExecutionSpec*>(
               &_ExecutionSpec_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(ExecutionSpec* other);
  friend void swap(ExecutionSpec& a, ExecutionSpec& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExecutionSpec* New() const PROTOBUF_FINAL { return New(NULL); }

  ExecutionSpec* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ExecutionSpec& from);
  void MergeFrom(const ExecutionSpec& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ExecutionSpec* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.core.Identifier launch_plan = 1;
  bool has_launch_plan() const;
  void clear_launch_plan();
  static const int kLaunchPlanFieldNumber = 1;
  const ::flyteidl::core::Identifier& launch_plan() const;
  ::flyteidl::core::Identifier* release_launch_plan();
  ::flyteidl::core::Identifier* mutable_launch_plan();
  void set_allocated_launch_plan(::flyteidl::core::Identifier* launch_plan);

  // .flyteidl.core.LiteralMap inputs = 2 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_inputs() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_inputs();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kInputsFieldNumber = 2;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR const ::flyteidl::core::LiteralMap& inputs() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::flyteidl::core::LiteralMap* release_inputs();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR ::flyteidl::core::LiteralMap* mutable_inputs();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_allocated_inputs(::flyteidl::core::LiteralMap* inputs);

  // .flyteidl.admin.ExecutionMetadata metadata = 3;
  bool has_metadata() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 3;
  const ::flyteidl::admin::ExecutionMetadata& metadata() const;
  ::flyteidl::admin::ExecutionMetadata* release_metadata();
  ::flyteidl::admin::ExecutionMetadata* mutable_metadata();
  void set_allocated_metadata(::flyteidl::admin::ExecutionMetadata* metadata);

  // .flyteidl.admin.Labels labels = 7;
  bool has_labels() const;
  void clear_labels();
  static const int kLabelsFieldNumber = 7;
  const ::flyteidl::admin::Labels& labels() const;
  ::flyteidl::admin::Labels* release_labels();
  ::flyteidl::admin::Labels* mutable_labels();
  void set_allocated_labels(::flyteidl::admin::Labels* labels);

  // .flyteidl.admin.Annotations annotations = 8;
  bool has_annotations() const;
  void clear_annotations();
  static const int kAnnotationsFieldNumber = 8;
  const ::flyteidl::admin::Annotations& annotations() const;
  ::flyteidl::admin::Annotations* release_annotations();
  ::flyteidl::admin::Annotations* mutable_annotations();
  void set_allocated_annotations(::flyteidl::admin::Annotations* annotations);

  // .flyteidl.admin.NotificationList notifications = 5;
  bool has_notifications() const;
  void clear_notifications();
  static const int kNotificationsFieldNumber = 5;
  const ::flyteidl::admin::NotificationList& notifications() const;
  ::flyteidl::admin::NotificationList* release_notifications();
  ::flyteidl::admin::NotificationList* mutable_notifications();
  void set_allocated_notifications(::flyteidl::admin::NotificationList* notifications);

  // bool disable_all = 6;
  private:
  bool has_disable_all() const;
  public:
  void clear_disable_all();
  static const int kDisableAllFieldNumber = 6;
  bool disable_all() const;
  void set_disable_all(bool value);

  NotificationOverridesCase notification_overrides_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.admin.ExecutionSpec)
 private:
  void set_has_notifications();
  void set_has_disable_all();

  inline bool has_notification_overrides() const;
  void clear_notification_overrides();
  inline void clear_has_notification_overrides();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::core::Identifier* launch_plan_;
  ::flyteidl::core::LiteralMap* inputs_;
  ::flyteidl::admin::ExecutionMetadata* metadata_;
  ::flyteidl::admin::Labels* labels_;
  ::flyteidl::admin::Annotations* annotations_;
  union NotificationOverridesUnion {
    NotificationOverridesUnion() {}
    ::flyteidl::admin::NotificationList* notifications_;
    bool disable_all_;
  } notification_overrides_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_flyteidl_2fadmin_2fexecution_2eproto::TableStruct;
  friend void ::protobuf_flyteidl_2fadmin_2fexecution_2eproto::InitDefaultsExecutionSpecImpl();
};
// -------------------------------------------------------------------

class ExecutionTerminateRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.ExecutionTerminateRequest) */ {
 public:
  ExecutionTerminateRequest();
  virtual ~ExecutionTerminateRequest();

  ExecutionTerminateRequest(const ExecutionTerminateRequest& from);

  inline ExecutionTerminateRequest& operator=(const ExecutionTerminateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExecutionTerminateRequest(ExecutionTerminateRequest&& from) noexcept
    : ExecutionTerminateRequest() {
    *this = ::std::move(from);
  }

  inline ExecutionTerminateRequest& operator=(ExecutionTerminateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExecutionTerminateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecutionTerminateRequest* internal_default_instance() {
    return reinterpret_cast<const ExecutionTerminateRequest*>(
               &_ExecutionTerminateRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(ExecutionTerminateRequest* other);
  friend void swap(ExecutionTerminateRequest& a, ExecutionTerminateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExecutionTerminateRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ExecutionTerminateRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ExecutionTerminateRequest& from);
  void MergeFrom(const ExecutionTerminateRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ExecutionTerminateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string cause = 2;
  void clear_cause();
  static const int kCauseFieldNumber = 2;
  const ::std::string& cause() const;
  void set_cause(const ::std::string& value);
  #if LANG_CXX11
  void set_cause(::std::string&& value);
  #endif
  void set_cause(const char* value);
  void set_cause(const char* value, size_t size);
  ::std::string* mutable_cause();
  ::std::string* release_cause();
  void set_allocated_cause(::std::string* cause);

  // .flyteidl.core.WorkflowExecutionIdentifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::flyteidl::core::WorkflowExecutionIdentifier& id() const;
  ::flyteidl::core::WorkflowExecutionIdentifier* release_id();
  ::flyteidl::core::WorkflowExecutionIdentifier* mutable_id();
  void set_allocated_id(::flyteidl::core::WorkflowExecutionIdentifier* id);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.ExecutionTerminateRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cause_;
  ::flyteidl::core::WorkflowExecutionIdentifier* id_;
  mutable int _cached_size_;
  friend struct ::protobuf_flyteidl_2fadmin_2fexecution_2eproto::TableStruct;
  friend void ::protobuf_flyteidl_2fadmin_2fexecution_2eproto::InitDefaultsExecutionTerminateRequestImpl();
};
// -------------------------------------------------------------------

class ExecutionTerminateResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.ExecutionTerminateResponse) */ {
 public:
  ExecutionTerminateResponse();
  virtual ~ExecutionTerminateResponse();

  ExecutionTerminateResponse(const ExecutionTerminateResponse& from);

  inline ExecutionTerminateResponse& operator=(const ExecutionTerminateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExecutionTerminateResponse(ExecutionTerminateResponse&& from) noexcept
    : ExecutionTerminateResponse() {
    *this = ::std::move(from);
  }

  inline ExecutionTerminateResponse& operator=(ExecutionTerminateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExecutionTerminateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecutionTerminateResponse* internal_default_instance() {
    return reinterpret_cast<const ExecutionTerminateResponse*>(
               &_ExecutionTerminateResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(ExecutionTerminateResponse* other);
  friend void swap(ExecutionTerminateResponse& a, ExecutionTerminateResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExecutionTerminateResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ExecutionTerminateResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ExecutionTerminateResponse& from);
  void MergeFrom(const ExecutionTerminateResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ExecutionTerminateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyteidl.admin.ExecutionTerminateResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_flyteidl_2fadmin_2fexecution_2eproto::TableStruct;
  friend void ::protobuf_flyteidl_2fadmin_2fexecution_2eproto::InitDefaultsExecutionTerminateResponseImpl();
};
// -------------------------------------------------------------------

class WorkflowExecutionGetDataRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.WorkflowExecutionGetDataRequest) */ {
 public:
  WorkflowExecutionGetDataRequest();
  virtual ~WorkflowExecutionGetDataRequest();

  WorkflowExecutionGetDataRequest(const WorkflowExecutionGetDataRequest& from);

  inline WorkflowExecutionGetDataRequest& operator=(const WorkflowExecutionGetDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WorkflowExecutionGetDataRequest(WorkflowExecutionGetDataRequest&& from) noexcept
    : WorkflowExecutionGetDataRequest() {
    *this = ::std::move(from);
  }

  inline WorkflowExecutionGetDataRequest& operator=(WorkflowExecutionGetDataRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WorkflowExecutionGetDataRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkflowExecutionGetDataRequest* internal_default_instance() {
    return reinterpret_cast<const WorkflowExecutionGetDataRequest*>(
               &_WorkflowExecutionGetDataRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(WorkflowExecutionGetDataRequest* other);
  friend void swap(WorkflowExecutionGetDataRequest& a, WorkflowExecutionGetDataRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WorkflowExecutionGetDataRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  WorkflowExecutionGetDataRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WorkflowExecutionGetDataRequest& from);
  void MergeFrom(const WorkflowExecutionGetDataRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WorkflowExecutionGetDataRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.core.WorkflowExecutionIdentifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::flyteidl::core::WorkflowExecutionIdentifier& id() const;
  ::flyteidl::core::WorkflowExecutionIdentifier* release_id();
  ::flyteidl::core::WorkflowExecutionIdentifier* mutable_id();
  void set_allocated_id(::flyteidl::core::WorkflowExecutionIdentifier* id);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.WorkflowExecutionGetDataRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::core::WorkflowExecutionIdentifier* id_;
  mutable int _cached_size_;
  friend struct ::protobuf_flyteidl_2fadmin_2fexecution_2eproto::TableStruct;
  friend void ::protobuf_flyteidl_2fadmin_2fexecution_2eproto::InitDefaultsWorkflowExecutionGetDataRequestImpl();
};
// -------------------------------------------------------------------

class WorkflowExecutionGetDataResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.WorkflowExecutionGetDataResponse) */ {
 public:
  WorkflowExecutionGetDataResponse();
  virtual ~WorkflowExecutionGetDataResponse();

  WorkflowExecutionGetDataResponse(const WorkflowExecutionGetDataResponse& from);

  inline WorkflowExecutionGetDataResponse& operator=(const WorkflowExecutionGetDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WorkflowExecutionGetDataResponse(WorkflowExecutionGetDataResponse&& from) noexcept
    : WorkflowExecutionGetDataResponse() {
    *this = ::std::move(from);
  }

  inline WorkflowExecutionGetDataResponse& operator=(WorkflowExecutionGetDataResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WorkflowExecutionGetDataResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkflowExecutionGetDataResponse* internal_default_instance() {
    return reinterpret_cast<const WorkflowExecutionGetDataResponse*>(
               &_WorkflowExecutionGetDataResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(WorkflowExecutionGetDataResponse* other);
  friend void swap(WorkflowExecutionGetDataResponse& a, WorkflowExecutionGetDataResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WorkflowExecutionGetDataResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  WorkflowExecutionGetDataResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WorkflowExecutionGetDataResponse& from);
  void MergeFrom(const WorkflowExecutionGetDataResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WorkflowExecutionGetDataResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.admin.UrlBlob outputs = 1;
  bool has_outputs() const;
  void clear_outputs();
  static const int kOutputsFieldNumber = 1;
  const ::flyteidl::admin::UrlBlob& outputs() const;
  ::flyteidl::admin::UrlBlob* release_outputs();
  ::flyteidl::admin::UrlBlob* mutable_outputs();
  void set_allocated_outputs(::flyteidl::admin::UrlBlob* outputs);

  // .flyteidl.admin.UrlBlob inputs = 2;
  bool has_inputs() const;
  void clear_inputs();
  static const int kInputsFieldNumber = 2;
  const ::flyteidl::admin::UrlBlob& inputs() const;
  ::flyteidl::admin::UrlBlob* release_inputs();
  ::flyteidl::admin::UrlBlob* mutable_inputs();
  void set_allocated_inputs(::flyteidl::admin::UrlBlob* inputs);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.WorkflowExecutionGetDataResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::admin::UrlBlob* outputs_;
  ::flyteidl::admin::UrlBlob* inputs_;
  mutable int _cached_size_;
  friend struct ::protobuf_flyteidl_2fadmin_2fexecution_2eproto::TableStruct;
  friend void ::protobuf_flyteidl_2fadmin_2fexecution_2eproto::InitDefaultsWorkflowExecutionGetDataResponseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ExecutionCreateRequest

// string project = 1;
inline void ExecutionCreateRequest::clear_project() {
  project_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExecutionCreateRequest::project() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ExecutionCreateRequest.project)
  return project_.GetNoArena();
}
inline void ExecutionCreateRequest::set_project(const ::std::string& value) {
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.ExecutionCreateRequest.project)
}
#if LANG_CXX11
inline void ExecutionCreateRequest::set_project(::std::string&& value) {
  
  project_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.ExecutionCreateRequest.project)
}
#endif
inline void ExecutionCreateRequest::set_project(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.ExecutionCreateRequest.project)
}
inline void ExecutionCreateRequest::set_project(const char* value, size_t size) {
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.ExecutionCreateRequest.project)
}
inline ::std::string* ExecutionCreateRequest::mutable_project() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ExecutionCreateRequest.project)
  return project_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExecutionCreateRequest::release_project() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ExecutionCreateRequest.project)
  
  return project_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExecutionCreateRequest::set_allocated_project(::std::string* project) {
  if (project != NULL) {
    
  } else {
    
  }
  project_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ExecutionCreateRequest.project)
}

// string domain = 2;
inline void ExecutionCreateRequest::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExecutionCreateRequest::domain() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ExecutionCreateRequest.domain)
  return domain_.GetNoArena();
}
inline void ExecutionCreateRequest::set_domain(const ::std::string& value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.ExecutionCreateRequest.domain)
}
#if LANG_CXX11
inline void ExecutionCreateRequest::set_domain(::std::string&& value) {
  
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.ExecutionCreateRequest.domain)
}
#endif
inline void ExecutionCreateRequest::set_domain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.ExecutionCreateRequest.domain)
}
inline void ExecutionCreateRequest::set_domain(const char* value, size_t size) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.ExecutionCreateRequest.domain)
}
inline ::std::string* ExecutionCreateRequest::mutable_domain() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ExecutionCreateRequest.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExecutionCreateRequest::release_domain() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ExecutionCreateRequest.domain)
  
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExecutionCreateRequest::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    
  } else {
    
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ExecutionCreateRequest.domain)
}

// string name = 3;
inline void ExecutionCreateRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExecutionCreateRequest::name() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ExecutionCreateRequest.name)
  return name_.GetNoArena();
}
inline void ExecutionCreateRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.ExecutionCreateRequest.name)
}
#if LANG_CXX11
inline void ExecutionCreateRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.ExecutionCreateRequest.name)
}
#endif
inline void ExecutionCreateRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.ExecutionCreateRequest.name)
}
inline void ExecutionCreateRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.ExecutionCreateRequest.name)
}
inline ::std::string* ExecutionCreateRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ExecutionCreateRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExecutionCreateRequest::release_name() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ExecutionCreateRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExecutionCreateRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ExecutionCreateRequest.name)
}

// .flyteidl.admin.ExecutionSpec spec = 4;
inline bool ExecutionCreateRequest::has_spec() const {
  return this != internal_default_instance() && spec_ != NULL;
}
inline void ExecutionCreateRequest::clear_spec() {
  if (GetArenaNoVirtual() == NULL && spec_ != NULL) {
    delete spec_;
  }
  spec_ = NULL;
}
inline const ::flyteidl::admin::ExecutionSpec& ExecutionCreateRequest::spec() const {
  const ::flyteidl::admin::ExecutionSpec* p = spec_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.ExecutionCreateRequest.spec)
  return p != NULL ? *p : *reinterpret_cast<const ::flyteidl::admin::ExecutionSpec*>(
      &::flyteidl::admin::_ExecutionSpec_default_instance_);
}
inline ::flyteidl::admin::ExecutionSpec* ExecutionCreateRequest::release_spec() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ExecutionCreateRequest.spec)
  
  ::flyteidl::admin::ExecutionSpec* temp = spec_;
  spec_ = NULL;
  return temp;
}
inline ::flyteidl::admin::ExecutionSpec* ExecutionCreateRequest::mutable_spec() {
  
  if (spec_ == NULL) {
    spec_ = new ::flyteidl::admin::ExecutionSpec;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ExecutionCreateRequest.spec)
  return spec_;
}
inline void ExecutionCreateRequest::set_allocated_spec(::flyteidl::admin::ExecutionSpec* spec) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete spec_;
  }
  if (spec) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      spec = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, spec, submessage_arena);
    }
    
  } else {
    
  }
  spec_ = spec;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ExecutionCreateRequest.spec)
}

// .flyteidl.core.LiteralMap inputs = 5;
inline bool ExecutionCreateRequest::has_inputs() const {
  return this != internal_default_instance() && inputs_ != NULL;
}
inline const ::flyteidl::core::LiteralMap& ExecutionCreateRequest::inputs() const {
  const ::flyteidl::core::LiteralMap* p = inputs_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.ExecutionCreateRequest.inputs)
  return p != NULL ? *p : *reinterpret_cast<const ::flyteidl::core::LiteralMap*>(
      &::flyteidl::core::_LiteralMap_default_instance_);
}
inline ::flyteidl::core::LiteralMap* ExecutionCreateRequest::release_inputs() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ExecutionCreateRequest.inputs)
  
  ::flyteidl::core::LiteralMap* temp = inputs_;
  inputs_ = NULL;
  return temp;
}
inline ::flyteidl::core::LiteralMap* ExecutionCreateRequest::mutable_inputs() {
  
  if (inputs_ == NULL) {
    inputs_ = new ::flyteidl::core::LiteralMap;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ExecutionCreateRequest.inputs)
  return inputs_;
}
inline void ExecutionCreateRequest::set_allocated_inputs(::flyteidl::core::LiteralMap* inputs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(inputs_);
  }
  if (inputs) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      inputs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, inputs, submessage_arena);
    }
    
  } else {
    
  }
  inputs_ = inputs;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ExecutionCreateRequest.inputs)
}

// -------------------------------------------------------------------

// ExecutionRelaunchRequest

// .flyteidl.core.WorkflowExecutionIdentifier id = 1;
inline bool ExecutionRelaunchRequest::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::flyteidl::core::WorkflowExecutionIdentifier& ExecutionRelaunchRequest::id() const {
  const ::flyteidl::core::WorkflowExecutionIdentifier* p = id_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.ExecutionRelaunchRequest.id)
  return p != NULL ? *p : *reinterpret_cast<const ::flyteidl::core::WorkflowExecutionIdentifier*>(
      &::flyteidl::core::_WorkflowExecutionIdentifier_default_instance_);
}
inline ::flyteidl::core::WorkflowExecutionIdentifier* ExecutionRelaunchRequest::release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ExecutionRelaunchRequest.id)
  
  ::flyteidl::core::WorkflowExecutionIdentifier* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::flyteidl::core::WorkflowExecutionIdentifier* ExecutionRelaunchRequest::mutable_id() {
  
  if (id_ == NULL) {
    id_ = new ::flyteidl::core::WorkflowExecutionIdentifier;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ExecutionRelaunchRequest.id)
  return id_;
}
inline void ExecutionRelaunchRequest::set_allocated_id(::flyteidl::core::WorkflowExecutionIdentifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ExecutionRelaunchRequest.id)
}

// string name = 3;
inline void ExecutionRelaunchRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExecutionRelaunchRequest::name() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ExecutionRelaunchRequest.name)
  return name_.GetNoArena();
}
inline void ExecutionRelaunchRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.ExecutionRelaunchRequest.name)
}
#if LANG_CXX11
inline void ExecutionRelaunchRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.ExecutionRelaunchRequest.name)
}
#endif
inline void ExecutionRelaunchRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.ExecutionRelaunchRequest.name)
}
inline void ExecutionRelaunchRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.ExecutionRelaunchRequest.name)
}
inline ::std::string* ExecutionRelaunchRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ExecutionRelaunchRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExecutionRelaunchRequest::release_name() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ExecutionRelaunchRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExecutionRelaunchRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ExecutionRelaunchRequest.name)
}

// -------------------------------------------------------------------

// ExecutionCreateResponse

// .flyteidl.core.WorkflowExecutionIdentifier id = 1;
inline bool ExecutionCreateResponse::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::flyteidl::core::WorkflowExecutionIdentifier& ExecutionCreateResponse::id() const {
  const ::flyteidl::core::WorkflowExecutionIdentifier* p = id_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.ExecutionCreateResponse.id)
  return p != NULL ? *p : *reinterpret_cast<const ::flyteidl::core::WorkflowExecutionIdentifier*>(
      &::flyteidl::core::_WorkflowExecutionIdentifier_default_instance_);
}
inline ::flyteidl::core::WorkflowExecutionIdentifier* ExecutionCreateResponse::release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ExecutionCreateResponse.id)
  
  ::flyteidl::core::WorkflowExecutionIdentifier* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::flyteidl::core::WorkflowExecutionIdentifier* ExecutionCreateResponse::mutable_id() {
  
  if (id_ == NULL) {
    id_ = new ::flyteidl::core::WorkflowExecutionIdentifier;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ExecutionCreateResponse.id)
  return id_;
}
inline void ExecutionCreateResponse::set_allocated_id(::flyteidl::core::WorkflowExecutionIdentifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ExecutionCreateResponse.id)
}

// -------------------------------------------------------------------

// WorkflowExecutionGetRequest

// .flyteidl.core.WorkflowExecutionIdentifier id = 1;
inline bool WorkflowExecutionGetRequest::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::flyteidl::core::WorkflowExecutionIdentifier& WorkflowExecutionGetRequest::id() const {
  const ::flyteidl::core::WorkflowExecutionIdentifier* p = id_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.WorkflowExecutionGetRequest.id)
  return p != NULL ? *p : *reinterpret_cast<const ::flyteidl::core::WorkflowExecutionIdentifier*>(
      &::flyteidl::core::_WorkflowExecutionIdentifier_default_instance_);
}
inline ::flyteidl::core::WorkflowExecutionIdentifier* WorkflowExecutionGetRequest::release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.WorkflowExecutionGetRequest.id)
  
  ::flyteidl::core::WorkflowExecutionIdentifier* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::flyteidl::core::WorkflowExecutionIdentifier* WorkflowExecutionGetRequest::mutable_id() {
  
  if (id_ == NULL) {
    id_ = new ::flyteidl::core::WorkflowExecutionIdentifier;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.WorkflowExecutionGetRequest.id)
  return id_;
}
inline void WorkflowExecutionGetRequest::set_allocated_id(::flyteidl::core::WorkflowExecutionIdentifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.WorkflowExecutionGetRequest.id)
}

// -------------------------------------------------------------------

// Execution

// .flyteidl.core.WorkflowExecutionIdentifier id = 1;
inline bool Execution::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::flyteidl::core::WorkflowExecutionIdentifier& Execution::id() const {
  const ::flyteidl::core::WorkflowExecutionIdentifier* p = id_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.Execution.id)
  return p != NULL ? *p : *reinterpret_cast<const ::flyteidl::core::WorkflowExecutionIdentifier*>(
      &::flyteidl::core::_WorkflowExecutionIdentifier_default_instance_);
}
inline ::flyteidl::core::WorkflowExecutionIdentifier* Execution::release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Execution.id)
  
  ::flyteidl::core::WorkflowExecutionIdentifier* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::flyteidl::core::WorkflowExecutionIdentifier* Execution::mutable_id() {
  
  if (id_ == NULL) {
    id_ = new ::flyteidl::core::WorkflowExecutionIdentifier;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Execution.id)
  return id_;
}
inline void Execution::set_allocated_id(::flyteidl::core::WorkflowExecutionIdentifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Execution.id)
}

// .flyteidl.admin.ExecutionSpec spec = 2;
inline bool Execution::has_spec() const {
  return this != internal_default_instance() && spec_ != NULL;
}
inline void Execution::clear_spec() {
  if (GetArenaNoVirtual() == NULL && spec_ != NULL) {
    delete spec_;
  }
  spec_ = NULL;
}
inline const ::flyteidl::admin::ExecutionSpec& Execution::spec() const {
  const ::flyteidl::admin::ExecutionSpec* p = spec_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.Execution.spec)
  return p != NULL ? *p : *reinterpret_cast<const ::flyteidl::admin::ExecutionSpec*>(
      &::flyteidl::admin::_ExecutionSpec_default_instance_);
}
inline ::flyteidl::admin::ExecutionSpec* Execution::release_spec() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Execution.spec)
  
  ::flyteidl::admin::ExecutionSpec* temp = spec_;
  spec_ = NULL;
  return temp;
}
inline ::flyteidl::admin::ExecutionSpec* Execution::mutable_spec() {
  
  if (spec_ == NULL) {
    spec_ = new ::flyteidl::admin::ExecutionSpec;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Execution.spec)
  return spec_;
}
inline void Execution::set_allocated_spec(::flyteidl::admin::ExecutionSpec* spec) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete spec_;
  }
  if (spec) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      spec = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, spec, submessage_arena);
    }
    
  } else {
    
  }
  spec_ = spec;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Execution.spec)
}

// .flyteidl.admin.ExecutionClosure closure = 3;
inline bool Execution::has_closure() const {
  return this != internal_default_instance() && closure_ != NULL;
}
inline void Execution::clear_closure() {
  if (GetArenaNoVirtual() == NULL && closure_ != NULL) {
    delete closure_;
  }
  closure_ = NULL;
}
inline const ::flyteidl::admin::ExecutionClosure& Execution::closure() const {
  const ::flyteidl::admin::ExecutionClosure* p = closure_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.Execution.closure)
  return p != NULL ? *p : *reinterpret_cast<const ::flyteidl::admin::ExecutionClosure*>(
      &::flyteidl::admin::_ExecutionClosure_default_instance_);
}
inline ::flyteidl::admin::ExecutionClosure* Execution::release_closure() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Execution.closure)
  
  ::flyteidl::admin::ExecutionClosure* temp = closure_;
  closure_ = NULL;
  return temp;
}
inline ::flyteidl::admin::ExecutionClosure* Execution::mutable_closure() {
  
  if (closure_ == NULL) {
    closure_ = new ::flyteidl::admin::ExecutionClosure;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Execution.closure)
  return closure_;
}
inline void Execution::set_allocated_closure(::flyteidl::admin::ExecutionClosure* closure) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete closure_;
  }
  if (closure) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      closure = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, closure, submessage_arena);
    }
    
  } else {
    
  }
  closure_ = closure;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Execution.closure)
}

// -------------------------------------------------------------------

// ExecutionList

// repeated .flyteidl.admin.Execution executions = 1;
inline int ExecutionList::executions_size() const {
  return executions_.size();
}
inline void ExecutionList::clear_executions() {
  executions_.Clear();
}
inline const ::flyteidl::admin::Execution& ExecutionList::executions(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ExecutionList.executions)
  return executions_.Get(index);
}
inline ::flyteidl::admin::Execution* ExecutionList::mutable_executions(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ExecutionList.executions)
  return executions_.Mutable(index);
}
inline ::flyteidl::admin::Execution* ExecutionList::add_executions() {
  // @@protoc_insertion_point(field_add:flyteidl.admin.ExecutionList.executions)
  return executions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::Execution >*
ExecutionList::mutable_executions() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.admin.ExecutionList.executions)
  return &executions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::Execution >&
ExecutionList::executions() const {
  // @@protoc_insertion_point(field_list:flyteidl.admin.ExecutionList.executions)
  return executions_;
}

// string token = 2;
inline void ExecutionList::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExecutionList::token() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ExecutionList.token)
  return token_.GetNoArena();
}
inline void ExecutionList::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.ExecutionList.token)
}
#if LANG_CXX11
inline void ExecutionList::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.ExecutionList.token)
}
#endif
inline void ExecutionList::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.ExecutionList.token)
}
inline void ExecutionList::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.ExecutionList.token)
}
inline ::std::string* ExecutionList::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ExecutionList.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExecutionList::release_token() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ExecutionList.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExecutionList::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ExecutionList.token)
}

// -------------------------------------------------------------------

// LiteralMapBlob

// .flyteidl.core.LiteralMap values = 1;
inline bool LiteralMapBlob::has_values() const {
  return data_case() == kValues;
}
inline void LiteralMapBlob::set_has_values() {
  _oneof_case_[0] = kValues;
}
inline ::flyteidl::core::LiteralMap* LiteralMapBlob::release_values() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LiteralMapBlob.values)
  if (has_values()) {
    clear_has_data();
      ::flyteidl::core::LiteralMap* temp = data_.values_;
    data_.values_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::flyteidl::core::LiteralMap& LiteralMapBlob::values() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.LiteralMapBlob.values)
  return has_values()
      ? *data_.values_
      : *reinterpret_cast< ::flyteidl::core::LiteralMap*>(&::flyteidl::core::_LiteralMap_default_instance_);
}
inline ::flyteidl::core::LiteralMap* LiteralMapBlob::mutable_values() {
  if (!has_values()) {
    clear_data();
    set_has_values();
    data_.values_ = new ::flyteidl::core::LiteralMap;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LiteralMapBlob.values)
  return data_.values_;
}

// string uri = 2;
inline bool LiteralMapBlob::has_uri() const {
  return data_case() == kUri;
}
inline void LiteralMapBlob::set_has_uri() {
  _oneof_case_[0] = kUri;
}
inline void LiteralMapBlob::clear_uri() {
  if (has_uri()) {
    data_.uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_data();
  }
}
inline const ::std::string& LiteralMapBlob::uri() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.LiteralMapBlob.uri)
  if (has_uri()) {
    return data_.uri_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void LiteralMapBlob::set_uri(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flyteidl.admin.LiteralMapBlob.uri)
  if (!has_uri()) {
    clear_data();
    set_has_uri();
    data_.uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.LiteralMapBlob.uri)
}
#if LANG_CXX11
inline void LiteralMapBlob::set_uri(::std::string&& value) {
  // @@protoc_insertion_point(field_set:flyteidl.admin.LiteralMapBlob.uri)
  if (!has_uri()) {
    clear_data();
    set_has_uri();
    data_.uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.LiteralMapBlob.uri)
}
#endif
inline void LiteralMapBlob::set_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_uri()) {
    clear_data();
    set_has_uri();
    data_.uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.LiteralMapBlob.uri)
}
inline void LiteralMapBlob::set_uri(const char* value, size_t size) {
  if (!has_uri()) {
    clear_data();
    set_has_uri();
    data_.uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.LiteralMapBlob.uri)
}
inline ::std::string* LiteralMapBlob::mutable_uri() {
  if (!has_uri()) {
    clear_data();
    set_has_uri();
    data_.uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.LiteralMapBlob.uri)
  return data_.uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LiteralMapBlob::release_uri() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.LiteralMapBlob.uri)
  if (has_uri()) {
    clear_has_data();
    return data_.uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void LiteralMapBlob::set_allocated_uri(::std::string* uri) {
  if (!has_uri()) {
    data_.uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_data();
  if (uri != NULL) {
    set_has_uri();
    data_.uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        uri);
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LiteralMapBlob.uri)
}

inline bool LiteralMapBlob::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void LiteralMapBlob::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline LiteralMapBlob::DataCase LiteralMapBlob::data_case() const {
  return LiteralMapBlob::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ExecutionClosure

// .flyteidl.admin.LiteralMapBlob outputs = 1;
inline bool ExecutionClosure::has_outputs() const {
  return output_result_case() == kOutputs;
}
inline void ExecutionClosure::set_has_outputs() {
  _oneof_case_[0] = kOutputs;
}
inline void ExecutionClosure::clear_outputs() {
  if (has_outputs()) {
    delete output_result_.outputs_;
    clear_has_output_result();
  }
}
inline ::flyteidl::admin::LiteralMapBlob* ExecutionClosure::release_outputs() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ExecutionClosure.outputs)
  if (has_outputs()) {
    clear_has_output_result();
      ::flyteidl::admin::LiteralMapBlob* temp = output_result_.outputs_;
    output_result_.outputs_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::flyteidl::admin::LiteralMapBlob& ExecutionClosure::outputs() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ExecutionClosure.outputs)
  return has_outputs()
      ? *output_result_.outputs_
      : *reinterpret_cast< ::flyteidl::admin::LiteralMapBlob*>(&::flyteidl::admin::_LiteralMapBlob_default_instance_);
}
inline ::flyteidl::admin::LiteralMapBlob* ExecutionClosure::mutable_outputs() {
  if (!has_outputs()) {
    clear_output_result();
    set_has_outputs();
    output_result_.outputs_ = new ::flyteidl::admin::LiteralMapBlob;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ExecutionClosure.outputs)
  return output_result_.outputs_;
}

// .flyteidl.core.ExecutionError error = 2;
inline bool ExecutionClosure::has_error() const {
  return output_result_case() == kError;
}
inline void ExecutionClosure::set_has_error() {
  _oneof_case_[0] = kError;
}
inline ::flyteidl::core::ExecutionError* ExecutionClosure::release_error() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ExecutionClosure.error)
  if (has_error()) {
    clear_has_output_result();
      ::flyteidl::core::ExecutionError* temp = output_result_.error_;
    output_result_.error_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::flyteidl::core::ExecutionError& ExecutionClosure::error() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ExecutionClosure.error)
  return has_error()
      ? *output_result_.error_
      : *reinterpret_cast< ::flyteidl::core::ExecutionError*>(&::flyteidl::core::_ExecutionError_default_instance_);
}
inline ::flyteidl::core::ExecutionError* ExecutionClosure::mutable_error() {
  if (!has_error()) {
    clear_output_result();
    set_has_error();
    output_result_.error_ = new ::flyteidl::core::ExecutionError;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ExecutionClosure.error)
  return output_result_.error_;
}

// string abort_cause = 10;
inline bool ExecutionClosure::has_abort_cause() const {
  return output_result_case() == kAbortCause;
}
inline void ExecutionClosure::set_has_abort_cause() {
  _oneof_case_[0] = kAbortCause;
}
inline void ExecutionClosure::clear_abort_cause() {
  if (has_abort_cause()) {
    output_result_.abort_cause_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_output_result();
  }
}
inline const ::std::string& ExecutionClosure::abort_cause() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ExecutionClosure.abort_cause)
  if (has_abort_cause()) {
    return output_result_.abort_cause_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void ExecutionClosure::set_abort_cause(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flyteidl.admin.ExecutionClosure.abort_cause)
  if (!has_abort_cause()) {
    clear_output_result();
    set_has_abort_cause();
    output_result_.abort_cause_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  output_result_.abort_cause_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.ExecutionClosure.abort_cause)
}
#if LANG_CXX11
inline void ExecutionClosure::set_abort_cause(::std::string&& value) {
  // @@protoc_insertion_point(field_set:flyteidl.admin.ExecutionClosure.abort_cause)
  if (!has_abort_cause()) {
    clear_output_result();
    set_has_abort_cause();
    output_result_.abort_cause_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  output_result_.abort_cause_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.ExecutionClosure.abort_cause)
}
#endif
inline void ExecutionClosure::set_abort_cause(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_abort_cause()) {
    clear_output_result();
    set_has_abort_cause();
    output_result_.abort_cause_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  output_result_.abort_cause_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.ExecutionClosure.abort_cause)
}
inline void ExecutionClosure::set_abort_cause(const char* value, size_t size) {
  if (!has_abort_cause()) {
    clear_output_result();
    set_has_abort_cause();
    output_result_.abort_cause_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  output_result_.abort_cause_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.ExecutionClosure.abort_cause)
}
inline ::std::string* ExecutionClosure::mutable_abort_cause() {
  if (!has_abort_cause()) {
    clear_output_result();
    set_has_abort_cause();
    output_result_.abort_cause_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ExecutionClosure.abort_cause)
  return output_result_.abort_cause_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExecutionClosure::release_abort_cause() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ExecutionClosure.abort_cause)
  if (has_abort_cause()) {
    clear_has_output_result();
    return output_result_.abort_cause_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void ExecutionClosure::set_allocated_abort_cause(::std::string* abort_cause) {
  if (!has_abort_cause()) {
    output_result_.abort_cause_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_output_result();
  if (abort_cause != NULL) {
    set_has_abort_cause();
    output_result_.abort_cause_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        abort_cause);
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ExecutionClosure.abort_cause)
}

// .flyteidl.core.LiteralMap computed_inputs = 3 [deprecated = true];
inline bool ExecutionClosure::has_computed_inputs() const {
  return this != internal_default_instance() && computed_inputs_ != NULL;
}
inline const ::flyteidl::core::LiteralMap& ExecutionClosure::computed_inputs() const {
  const ::flyteidl::core::LiteralMap* p = computed_inputs_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.ExecutionClosure.computed_inputs)
  return p != NULL ? *p : *reinterpret_cast<const ::flyteidl::core::LiteralMap*>(
      &::flyteidl::core::_LiteralMap_default_instance_);
}
inline ::flyteidl::core::LiteralMap* ExecutionClosure::release_computed_inputs() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ExecutionClosure.computed_inputs)
  
  ::flyteidl::core::LiteralMap* temp = computed_inputs_;
  computed_inputs_ = NULL;
  return temp;
}
inline ::flyteidl::core::LiteralMap* ExecutionClosure::mutable_computed_inputs() {
  
  if (computed_inputs_ == NULL) {
    computed_inputs_ = new ::flyteidl::core::LiteralMap;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ExecutionClosure.computed_inputs)
  return computed_inputs_;
}
inline void ExecutionClosure::set_allocated_computed_inputs(::flyteidl::core::LiteralMap* computed_inputs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(computed_inputs_);
  }
  if (computed_inputs) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      computed_inputs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, computed_inputs, submessage_arena);
    }
    
  } else {
    
  }
  computed_inputs_ = computed_inputs;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ExecutionClosure.computed_inputs)
}

// .flyteidl.core.WorkflowExecution.Phase phase = 4;
inline void ExecutionClosure::clear_phase() {
  phase_ = 0;
}
inline ::flyteidl::core::WorkflowExecution_Phase ExecutionClosure::phase() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ExecutionClosure.phase)
  return static_cast< ::flyteidl::core::WorkflowExecution_Phase >(phase_);
}
inline void ExecutionClosure::set_phase(::flyteidl::core::WorkflowExecution_Phase value) {
  
  phase_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.admin.ExecutionClosure.phase)
}

// .google.protobuf.Timestamp started_at = 5;
inline bool ExecutionClosure::has_started_at() const {
  return this != internal_default_instance() && started_at_ != NULL;
}
inline const ::google::protobuf::Timestamp& ExecutionClosure::started_at() const {
  const ::google::protobuf::Timestamp* p = started_at_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.ExecutionClosure.started_at)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* ExecutionClosure::release_started_at() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ExecutionClosure.started_at)
  
  ::google::protobuf::Timestamp* temp = started_at_;
  started_at_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* ExecutionClosure::mutable_started_at() {
  
  if (started_at_ == NULL) {
    started_at_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ExecutionClosure.started_at)
  return started_at_;
}
inline void ExecutionClosure::set_allocated_started_at(::google::protobuf::Timestamp* started_at) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(started_at_);
  }
  if (started_at) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(started_at)->GetArena();
    if (message_arena != submessage_arena) {
      started_at = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, started_at, submessage_arena);
    }
    
  } else {
    
  }
  started_at_ = started_at;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ExecutionClosure.started_at)
}

// .google.protobuf.Duration duration = 6;
inline bool ExecutionClosure::has_duration() const {
  return this != internal_default_instance() && duration_ != NULL;
}
inline const ::google::protobuf::Duration& ExecutionClosure::duration() const {
  const ::google::protobuf::Duration* p = duration_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.ExecutionClosure.duration)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* ExecutionClosure::release_duration() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ExecutionClosure.duration)
  
  ::google::protobuf::Duration* temp = duration_;
  duration_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* ExecutionClosure::mutable_duration() {
  
  if (duration_ == NULL) {
    duration_ = new ::google::protobuf::Duration;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ExecutionClosure.duration)
  return duration_;
}
inline void ExecutionClosure::set_allocated_duration(::google::protobuf::Duration* duration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(duration_);
  }
  if (duration) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(duration)->GetArena();
    if (message_arena != submessage_arena) {
      duration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, duration, submessage_arena);
    }
    
  } else {
    
  }
  duration_ = duration;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ExecutionClosure.duration)
}

// .google.protobuf.Timestamp created_at = 7;
inline bool ExecutionClosure::has_created_at() const {
  return this != internal_default_instance() && created_at_ != NULL;
}
inline const ::google::protobuf::Timestamp& ExecutionClosure::created_at() const {
  const ::google::protobuf::Timestamp* p = created_at_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.ExecutionClosure.created_at)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* ExecutionClosure::release_created_at() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ExecutionClosure.created_at)
  
  ::google::protobuf::Timestamp* temp = created_at_;
  created_at_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* ExecutionClosure::mutable_created_at() {
  
  if (created_at_ == NULL) {
    created_at_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ExecutionClosure.created_at)
  return created_at_;
}
inline void ExecutionClosure::set_allocated_created_at(::google::protobuf::Timestamp* created_at) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ExecutionClosure.created_at)
}

// .google.protobuf.Timestamp updated_at = 8;
inline bool ExecutionClosure::has_updated_at() const {
  return this != internal_default_instance() && updated_at_ != NULL;
}
inline const ::google::protobuf::Timestamp& ExecutionClosure::updated_at() const {
  const ::google::protobuf::Timestamp* p = updated_at_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.ExecutionClosure.updated_at)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* ExecutionClosure::release_updated_at() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ExecutionClosure.updated_at)
  
  ::google::protobuf::Timestamp* temp = updated_at_;
  updated_at_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* ExecutionClosure::mutable_updated_at() {
  
  if (updated_at_ == NULL) {
    updated_at_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ExecutionClosure.updated_at)
  return updated_at_;
}
inline void ExecutionClosure::set_allocated_updated_at(::google::protobuf::Timestamp* updated_at) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(updated_at_);
  }
  if (updated_at) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(updated_at)->GetArena();
    if (message_arena != submessage_arena) {
      updated_at = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, updated_at, submessage_arena);
    }
    
  } else {
    
  }
  updated_at_ = updated_at;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ExecutionClosure.updated_at)
}

// repeated .flyteidl.admin.Notification notifications = 9;
inline int ExecutionClosure::notifications_size() const {
  return notifications_.size();
}
inline const ::flyteidl::admin::Notification& ExecutionClosure::notifications(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ExecutionClosure.notifications)
  return notifications_.Get(index);
}
inline ::flyteidl::admin::Notification* ExecutionClosure::mutable_notifications(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ExecutionClosure.notifications)
  return notifications_.Mutable(index);
}
inline ::flyteidl::admin::Notification* ExecutionClosure::add_notifications() {
  // @@protoc_insertion_point(field_add:flyteidl.admin.ExecutionClosure.notifications)
  return notifications_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::Notification >*
ExecutionClosure::mutable_notifications() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.admin.ExecutionClosure.notifications)
  return &notifications_;
}
inline const ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::Notification >&
ExecutionClosure::notifications() const {
  // @@protoc_insertion_point(field_list:flyteidl.admin.ExecutionClosure.notifications)
  return notifications_;
}

// .flyteidl.core.Identifier workflow_id = 11;
inline bool ExecutionClosure::has_workflow_id() const {
  return this != internal_default_instance() && workflow_id_ != NULL;
}
inline const ::flyteidl::core::Identifier& ExecutionClosure::workflow_id() const {
  const ::flyteidl::core::Identifier* p = workflow_id_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.ExecutionClosure.workflow_id)
  return p != NULL ? *p : *reinterpret_cast<const ::flyteidl::core::Identifier*>(
      &::flyteidl::core::_Identifier_default_instance_);
}
inline ::flyteidl::core::Identifier* ExecutionClosure::release_workflow_id() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ExecutionClosure.workflow_id)
  
  ::flyteidl::core::Identifier* temp = workflow_id_;
  workflow_id_ = NULL;
  return temp;
}
inline ::flyteidl::core::Identifier* ExecutionClosure::mutable_workflow_id() {
  
  if (workflow_id_ == NULL) {
    workflow_id_ = new ::flyteidl::core::Identifier;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ExecutionClosure.workflow_id)
  return workflow_id_;
}
inline void ExecutionClosure::set_allocated_workflow_id(::flyteidl::core::Identifier* workflow_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(workflow_id_);
  }
  if (workflow_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      workflow_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, workflow_id, submessage_arena);
    }
    
  } else {
    
  }
  workflow_id_ = workflow_id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ExecutionClosure.workflow_id)
}

inline bool ExecutionClosure::has_output_result() const {
  return output_result_case() != OUTPUT_RESULT_NOT_SET;
}
inline void ExecutionClosure::clear_has_output_result() {
  _oneof_case_[0] = OUTPUT_RESULT_NOT_SET;
}
inline ExecutionClosure::OutputResultCase ExecutionClosure::output_result_case() const {
  return ExecutionClosure::OutputResultCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ExecutionMetadata

// .flyteidl.admin.ExecutionMetadata.ExecutionMode mode = 1;
inline void ExecutionMetadata::clear_mode() {
  mode_ = 0;
}
inline ::flyteidl::admin::ExecutionMetadata_ExecutionMode ExecutionMetadata::mode() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ExecutionMetadata.mode)
  return static_cast< ::flyteidl::admin::ExecutionMetadata_ExecutionMode >(mode_);
}
inline void ExecutionMetadata::set_mode(::flyteidl::admin::ExecutionMetadata_ExecutionMode value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.admin.ExecutionMetadata.mode)
}

// string principal = 2;
inline void ExecutionMetadata::clear_principal() {
  principal_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExecutionMetadata::principal() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ExecutionMetadata.principal)
  return principal_.GetNoArena();
}
inline void ExecutionMetadata::set_principal(const ::std::string& value) {
  
  principal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.ExecutionMetadata.principal)
}
#if LANG_CXX11
inline void ExecutionMetadata::set_principal(::std::string&& value) {
  
  principal_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.ExecutionMetadata.principal)
}
#endif
inline void ExecutionMetadata::set_principal(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  principal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.ExecutionMetadata.principal)
}
inline void ExecutionMetadata::set_principal(const char* value, size_t size) {
  
  principal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.ExecutionMetadata.principal)
}
inline ::std::string* ExecutionMetadata::mutable_principal() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ExecutionMetadata.principal)
  return principal_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExecutionMetadata::release_principal() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ExecutionMetadata.principal)
  
  return principal_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExecutionMetadata::set_allocated_principal(::std::string* principal) {
  if (principal != NULL) {
    
  } else {
    
  }
  principal_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), principal);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ExecutionMetadata.principal)
}

// uint32 nesting = 3;
inline void ExecutionMetadata::clear_nesting() {
  nesting_ = 0u;
}
inline ::google::protobuf::uint32 ExecutionMetadata::nesting() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ExecutionMetadata.nesting)
  return nesting_;
}
inline void ExecutionMetadata::set_nesting(::google::protobuf::uint32 value) {
  
  nesting_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.admin.ExecutionMetadata.nesting)
}

// .google.protobuf.Timestamp scheduled_at = 4;
inline bool ExecutionMetadata::has_scheduled_at() const {
  return this != internal_default_instance() && scheduled_at_ != NULL;
}
inline const ::google::protobuf::Timestamp& ExecutionMetadata::scheduled_at() const {
  const ::google::protobuf::Timestamp* p = scheduled_at_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.ExecutionMetadata.scheduled_at)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* ExecutionMetadata::release_scheduled_at() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ExecutionMetadata.scheduled_at)
  
  ::google::protobuf::Timestamp* temp = scheduled_at_;
  scheduled_at_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* ExecutionMetadata::mutable_scheduled_at() {
  
  if (scheduled_at_ == NULL) {
    scheduled_at_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ExecutionMetadata.scheduled_at)
  return scheduled_at_;
}
inline void ExecutionMetadata::set_allocated_scheduled_at(::google::protobuf::Timestamp* scheduled_at) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(scheduled_at_);
  }
  if (scheduled_at) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(scheduled_at)->GetArena();
    if (message_arena != submessage_arena) {
      scheduled_at = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scheduled_at, submessage_arena);
    }
    
  } else {
    
  }
  scheduled_at_ = scheduled_at;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ExecutionMetadata.scheduled_at)
}

// .flyteidl.core.NodeExecutionIdentifier parent_node_execution = 5;
inline bool ExecutionMetadata::has_parent_node_execution() const {
  return this != internal_default_instance() && parent_node_execution_ != NULL;
}
inline const ::flyteidl::core::NodeExecutionIdentifier& ExecutionMetadata::parent_node_execution() const {
  const ::flyteidl::core::NodeExecutionIdentifier* p = parent_node_execution_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.ExecutionMetadata.parent_node_execution)
  return p != NULL ? *p : *reinterpret_cast<const ::flyteidl::core::NodeExecutionIdentifier*>(
      &::flyteidl::core::_NodeExecutionIdentifier_default_instance_);
}
inline ::flyteidl::core::NodeExecutionIdentifier* ExecutionMetadata::release_parent_node_execution() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ExecutionMetadata.parent_node_execution)
  
  ::flyteidl::core::NodeExecutionIdentifier* temp = parent_node_execution_;
  parent_node_execution_ = NULL;
  return temp;
}
inline ::flyteidl::core::NodeExecutionIdentifier* ExecutionMetadata::mutable_parent_node_execution() {
  
  if (parent_node_execution_ == NULL) {
    parent_node_execution_ = new ::flyteidl::core::NodeExecutionIdentifier;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ExecutionMetadata.parent_node_execution)
  return parent_node_execution_;
}
inline void ExecutionMetadata::set_allocated_parent_node_execution(::flyteidl::core::NodeExecutionIdentifier* parent_node_execution) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(parent_node_execution_);
  }
  if (parent_node_execution) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parent_node_execution = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parent_node_execution, submessage_arena);
    }
    
  } else {
    
  }
  parent_node_execution_ = parent_node_execution;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ExecutionMetadata.parent_node_execution)
}

// .flyteidl.core.WorkflowExecutionIdentifier reference_execution = 16;
inline bool ExecutionMetadata::has_reference_execution() const {
  return this != internal_default_instance() && reference_execution_ != NULL;
}
inline const ::flyteidl::core::WorkflowExecutionIdentifier& ExecutionMetadata::reference_execution() const {
  const ::flyteidl::core::WorkflowExecutionIdentifier* p = reference_execution_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.ExecutionMetadata.reference_execution)
  return p != NULL ? *p : *reinterpret_cast<const ::flyteidl::core::WorkflowExecutionIdentifier*>(
      &::flyteidl::core::_WorkflowExecutionIdentifier_default_instance_);
}
inline ::flyteidl::core::WorkflowExecutionIdentifier* ExecutionMetadata::release_reference_execution() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ExecutionMetadata.reference_execution)
  
  ::flyteidl::core::WorkflowExecutionIdentifier* temp = reference_execution_;
  reference_execution_ = NULL;
  return temp;
}
inline ::flyteidl::core::WorkflowExecutionIdentifier* ExecutionMetadata::mutable_reference_execution() {
  
  if (reference_execution_ == NULL) {
    reference_execution_ = new ::flyteidl::core::WorkflowExecutionIdentifier;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ExecutionMetadata.reference_execution)
  return reference_execution_;
}
inline void ExecutionMetadata::set_allocated_reference_execution(::flyteidl::core::WorkflowExecutionIdentifier* reference_execution) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(reference_execution_);
  }
  if (reference_execution) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      reference_execution = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reference_execution, submessage_arena);
    }
    
  } else {
    
  }
  reference_execution_ = reference_execution;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ExecutionMetadata.reference_execution)
}

// -------------------------------------------------------------------

// NotificationList

// repeated .flyteidl.admin.Notification notifications = 1;
inline int NotificationList::notifications_size() const {
  return notifications_.size();
}
inline const ::flyteidl::admin::Notification& NotificationList::notifications(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.NotificationList.notifications)
  return notifications_.Get(index);
}
inline ::flyteidl::admin::Notification* NotificationList::mutable_notifications(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.NotificationList.notifications)
  return notifications_.Mutable(index);
}
inline ::flyteidl::admin::Notification* NotificationList::add_notifications() {
  // @@protoc_insertion_point(field_add:flyteidl.admin.NotificationList.notifications)
  return notifications_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::Notification >*
NotificationList::mutable_notifications() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.admin.NotificationList.notifications)
  return &notifications_;
}
inline const ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::Notification >&
NotificationList::notifications() const {
  // @@protoc_insertion_point(field_list:flyteidl.admin.NotificationList.notifications)
  return notifications_;
}

// -------------------------------------------------------------------

// ExecutionSpec

// .flyteidl.core.Identifier launch_plan = 1;
inline bool ExecutionSpec::has_launch_plan() const {
  return this != internal_default_instance() && launch_plan_ != NULL;
}
inline const ::flyteidl::core::Identifier& ExecutionSpec::launch_plan() const {
  const ::flyteidl::core::Identifier* p = launch_plan_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.ExecutionSpec.launch_plan)
  return p != NULL ? *p : *reinterpret_cast<const ::flyteidl::core::Identifier*>(
      &::flyteidl::core::_Identifier_default_instance_);
}
inline ::flyteidl::core::Identifier* ExecutionSpec::release_launch_plan() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ExecutionSpec.launch_plan)
  
  ::flyteidl::core::Identifier* temp = launch_plan_;
  launch_plan_ = NULL;
  return temp;
}
inline ::flyteidl::core::Identifier* ExecutionSpec::mutable_launch_plan() {
  
  if (launch_plan_ == NULL) {
    launch_plan_ = new ::flyteidl::core::Identifier;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ExecutionSpec.launch_plan)
  return launch_plan_;
}
inline void ExecutionSpec::set_allocated_launch_plan(::flyteidl::core::Identifier* launch_plan) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(launch_plan_);
  }
  if (launch_plan) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      launch_plan = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, launch_plan, submessage_arena);
    }
    
  } else {
    
  }
  launch_plan_ = launch_plan;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ExecutionSpec.launch_plan)
}

// .flyteidl.core.LiteralMap inputs = 2 [deprecated = true];
inline bool ExecutionSpec::has_inputs() const {
  return this != internal_default_instance() && inputs_ != NULL;
}
inline const ::flyteidl::core::LiteralMap& ExecutionSpec::inputs() const {
  const ::flyteidl::core::LiteralMap* p = inputs_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.ExecutionSpec.inputs)
  return p != NULL ? *p : *reinterpret_cast<const ::flyteidl::core::LiteralMap*>(
      &::flyteidl::core::_LiteralMap_default_instance_);
}
inline ::flyteidl::core::LiteralMap* ExecutionSpec::release_inputs() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ExecutionSpec.inputs)
  
  ::flyteidl::core::LiteralMap* temp = inputs_;
  inputs_ = NULL;
  return temp;
}
inline ::flyteidl::core::LiteralMap* ExecutionSpec::mutable_inputs() {
  
  if (inputs_ == NULL) {
    inputs_ = new ::flyteidl::core::LiteralMap;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ExecutionSpec.inputs)
  return inputs_;
}
inline void ExecutionSpec::set_allocated_inputs(::flyteidl::core::LiteralMap* inputs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(inputs_);
  }
  if (inputs) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      inputs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, inputs, submessage_arena);
    }
    
  } else {
    
  }
  inputs_ = inputs;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ExecutionSpec.inputs)
}

// .flyteidl.admin.ExecutionMetadata metadata = 3;
inline bool ExecutionSpec::has_metadata() const {
  return this != internal_default_instance() && metadata_ != NULL;
}
inline void ExecutionSpec::clear_metadata() {
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) {
    delete metadata_;
  }
  metadata_ = NULL;
}
inline const ::flyteidl::admin::ExecutionMetadata& ExecutionSpec::metadata() const {
  const ::flyteidl::admin::ExecutionMetadata* p = metadata_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.ExecutionSpec.metadata)
  return p != NULL ? *p : *reinterpret_cast<const ::flyteidl::admin::ExecutionMetadata*>(
      &::flyteidl::admin::_ExecutionMetadata_default_instance_);
}
inline ::flyteidl::admin::ExecutionMetadata* ExecutionSpec::release_metadata() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ExecutionSpec.metadata)
  
  ::flyteidl::admin::ExecutionMetadata* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
inline ::flyteidl::admin::ExecutionMetadata* ExecutionSpec::mutable_metadata() {
  
  if (metadata_ == NULL) {
    metadata_ = new ::flyteidl::admin::ExecutionMetadata;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ExecutionSpec.metadata)
  return metadata_;
}
inline void ExecutionSpec::set_allocated_metadata(::flyteidl::admin::ExecutionMetadata* metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete metadata_;
  }
  if (metadata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      metadata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ExecutionSpec.metadata)
}

// .flyteidl.admin.NotificationList notifications = 5;
inline bool ExecutionSpec::has_notifications() const {
  return notification_overrides_case() == kNotifications;
}
inline void ExecutionSpec::set_has_notifications() {
  _oneof_case_[0] = kNotifications;
}
inline void ExecutionSpec::clear_notifications() {
  if (has_notifications()) {
    delete notification_overrides_.notifications_;
    clear_has_notification_overrides();
  }
}
inline ::flyteidl::admin::NotificationList* ExecutionSpec::release_notifications() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ExecutionSpec.notifications)
  if (has_notifications()) {
    clear_has_notification_overrides();
      ::flyteidl::admin::NotificationList* temp = notification_overrides_.notifications_;
    notification_overrides_.notifications_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::flyteidl::admin::NotificationList& ExecutionSpec::notifications() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ExecutionSpec.notifications)
  return has_notifications()
      ? *notification_overrides_.notifications_
      : *reinterpret_cast< ::flyteidl::admin::NotificationList*>(&::flyteidl::admin::_NotificationList_default_instance_);
}
inline ::flyteidl::admin::NotificationList* ExecutionSpec::mutable_notifications() {
  if (!has_notifications()) {
    clear_notification_overrides();
    set_has_notifications();
    notification_overrides_.notifications_ = new ::flyteidl::admin::NotificationList;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ExecutionSpec.notifications)
  return notification_overrides_.notifications_;
}

// bool disable_all = 6;
inline bool ExecutionSpec::has_disable_all() const {
  return notification_overrides_case() == kDisableAll;
}
inline void ExecutionSpec::set_has_disable_all() {
  _oneof_case_[0] = kDisableAll;
}
inline void ExecutionSpec::clear_disable_all() {
  if (has_disable_all()) {
    notification_overrides_.disable_all_ = false;
    clear_has_notification_overrides();
  }
}
inline bool ExecutionSpec::disable_all() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ExecutionSpec.disable_all)
  if (has_disable_all()) {
    return notification_overrides_.disable_all_;
  }
  return false;
}
inline void ExecutionSpec::set_disable_all(bool value) {
  if (!has_disable_all()) {
    clear_notification_overrides();
    set_has_disable_all();
  }
  notification_overrides_.disable_all_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.admin.ExecutionSpec.disable_all)
}

// .flyteidl.admin.Labels labels = 7;
inline bool ExecutionSpec::has_labels() const {
  return this != internal_default_instance() && labels_ != NULL;
}
inline const ::flyteidl::admin::Labels& ExecutionSpec::labels() const {
  const ::flyteidl::admin::Labels* p = labels_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.ExecutionSpec.labels)
  return p != NULL ? *p : *reinterpret_cast<const ::flyteidl::admin::Labels*>(
      &::flyteidl::admin::_Labels_default_instance_);
}
inline ::flyteidl::admin::Labels* ExecutionSpec::release_labels() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ExecutionSpec.labels)
  
  ::flyteidl::admin::Labels* temp = labels_;
  labels_ = NULL;
  return temp;
}
inline ::flyteidl::admin::Labels* ExecutionSpec::mutable_labels() {
  
  if (labels_ == NULL) {
    labels_ = new ::flyteidl::admin::Labels;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ExecutionSpec.labels)
  return labels_;
}
inline void ExecutionSpec::set_allocated_labels(::flyteidl::admin::Labels* labels) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(labels_);
  }
  if (labels) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      labels = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, labels, submessage_arena);
    }
    
  } else {
    
  }
  labels_ = labels;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ExecutionSpec.labels)
}

// .flyteidl.admin.Annotations annotations = 8;
inline bool ExecutionSpec::has_annotations() const {
  return this != internal_default_instance() && annotations_ != NULL;
}
inline const ::flyteidl::admin::Annotations& ExecutionSpec::annotations() const {
  const ::flyteidl::admin::Annotations* p = annotations_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.ExecutionSpec.annotations)
  return p != NULL ? *p : *reinterpret_cast<const ::flyteidl::admin::Annotations*>(
      &::flyteidl::admin::_Annotations_default_instance_);
}
inline ::flyteidl::admin::Annotations* ExecutionSpec::release_annotations() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ExecutionSpec.annotations)
  
  ::flyteidl::admin::Annotations* temp = annotations_;
  annotations_ = NULL;
  return temp;
}
inline ::flyteidl::admin::Annotations* ExecutionSpec::mutable_annotations() {
  
  if (annotations_ == NULL) {
    annotations_ = new ::flyteidl::admin::Annotations;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ExecutionSpec.annotations)
  return annotations_;
}
inline void ExecutionSpec::set_allocated_annotations(::flyteidl::admin::Annotations* annotations) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(annotations_);
  }
  if (annotations) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      annotations = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, annotations, submessage_arena);
    }
    
  } else {
    
  }
  annotations_ = annotations;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ExecutionSpec.annotations)
}

inline bool ExecutionSpec::has_notification_overrides() const {
  return notification_overrides_case() != NOTIFICATION_OVERRIDES_NOT_SET;
}
inline void ExecutionSpec::clear_has_notification_overrides() {
  _oneof_case_[0] = NOTIFICATION_OVERRIDES_NOT_SET;
}
inline ExecutionSpec::NotificationOverridesCase ExecutionSpec::notification_overrides_case() const {
  return ExecutionSpec::NotificationOverridesCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ExecutionTerminateRequest

// .flyteidl.core.WorkflowExecutionIdentifier id = 1;
inline bool ExecutionTerminateRequest::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::flyteidl::core::WorkflowExecutionIdentifier& ExecutionTerminateRequest::id() const {
  const ::flyteidl::core::WorkflowExecutionIdentifier* p = id_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.ExecutionTerminateRequest.id)
  return p != NULL ? *p : *reinterpret_cast<const ::flyteidl::core::WorkflowExecutionIdentifier*>(
      &::flyteidl::core::_WorkflowExecutionIdentifier_default_instance_);
}
inline ::flyteidl::core::WorkflowExecutionIdentifier* ExecutionTerminateRequest::release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ExecutionTerminateRequest.id)
  
  ::flyteidl::core::WorkflowExecutionIdentifier* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::flyteidl::core::WorkflowExecutionIdentifier* ExecutionTerminateRequest::mutable_id() {
  
  if (id_ == NULL) {
    id_ = new ::flyteidl::core::WorkflowExecutionIdentifier;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ExecutionTerminateRequest.id)
  return id_;
}
inline void ExecutionTerminateRequest::set_allocated_id(::flyteidl::core::WorkflowExecutionIdentifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ExecutionTerminateRequest.id)
}

// string cause = 2;
inline void ExecutionTerminateRequest::clear_cause() {
  cause_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExecutionTerminateRequest::cause() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ExecutionTerminateRequest.cause)
  return cause_.GetNoArena();
}
inline void ExecutionTerminateRequest::set_cause(const ::std::string& value) {
  
  cause_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.ExecutionTerminateRequest.cause)
}
#if LANG_CXX11
inline void ExecutionTerminateRequest::set_cause(::std::string&& value) {
  
  cause_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.ExecutionTerminateRequest.cause)
}
#endif
inline void ExecutionTerminateRequest::set_cause(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cause_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.ExecutionTerminateRequest.cause)
}
inline void ExecutionTerminateRequest::set_cause(const char* value, size_t size) {
  
  cause_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.ExecutionTerminateRequest.cause)
}
inline ::std::string* ExecutionTerminateRequest::mutable_cause() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ExecutionTerminateRequest.cause)
  return cause_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExecutionTerminateRequest::release_cause() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ExecutionTerminateRequest.cause)
  
  return cause_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExecutionTerminateRequest::set_allocated_cause(::std::string* cause) {
  if (cause != NULL) {
    
  } else {
    
  }
  cause_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cause);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ExecutionTerminateRequest.cause)
}

// -------------------------------------------------------------------

// ExecutionTerminateResponse

// -------------------------------------------------------------------

// WorkflowExecutionGetDataRequest

// .flyteidl.core.WorkflowExecutionIdentifier id = 1;
inline bool WorkflowExecutionGetDataRequest::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::flyteidl::core::WorkflowExecutionIdentifier& WorkflowExecutionGetDataRequest::id() const {
  const ::flyteidl::core::WorkflowExecutionIdentifier* p = id_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.WorkflowExecutionGetDataRequest.id)
  return p != NULL ? *p : *reinterpret_cast<const ::flyteidl::core::WorkflowExecutionIdentifier*>(
      &::flyteidl::core::_WorkflowExecutionIdentifier_default_instance_);
}
inline ::flyteidl::core::WorkflowExecutionIdentifier* WorkflowExecutionGetDataRequest::release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.WorkflowExecutionGetDataRequest.id)
  
  ::flyteidl::core::WorkflowExecutionIdentifier* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::flyteidl::core::WorkflowExecutionIdentifier* WorkflowExecutionGetDataRequest::mutable_id() {
  
  if (id_ == NULL) {
    id_ = new ::flyteidl::core::WorkflowExecutionIdentifier;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.WorkflowExecutionGetDataRequest.id)
  return id_;
}
inline void WorkflowExecutionGetDataRequest::set_allocated_id(::flyteidl::core::WorkflowExecutionIdentifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.WorkflowExecutionGetDataRequest.id)
}

// -------------------------------------------------------------------

// WorkflowExecutionGetDataResponse

// .flyteidl.admin.UrlBlob outputs = 1;
inline bool WorkflowExecutionGetDataResponse::has_outputs() const {
  return this != internal_default_instance() && outputs_ != NULL;
}
inline const ::flyteidl::admin::UrlBlob& WorkflowExecutionGetDataResponse::outputs() const {
  const ::flyteidl::admin::UrlBlob* p = outputs_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.WorkflowExecutionGetDataResponse.outputs)
  return p != NULL ? *p : *reinterpret_cast<const ::flyteidl::admin::UrlBlob*>(
      &::flyteidl::admin::_UrlBlob_default_instance_);
}
inline ::flyteidl::admin::UrlBlob* WorkflowExecutionGetDataResponse::release_outputs() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.WorkflowExecutionGetDataResponse.outputs)
  
  ::flyteidl::admin::UrlBlob* temp = outputs_;
  outputs_ = NULL;
  return temp;
}
inline ::flyteidl::admin::UrlBlob* WorkflowExecutionGetDataResponse::mutable_outputs() {
  
  if (outputs_ == NULL) {
    outputs_ = new ::flyteidl::admin::UrlBlob;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.WorkflowExecutionGetDataResponse.outputs)
  return outputs_;
}
inline void WorkflowExecutionGetDataResponse::set_allocated_outputs(::flyteidl::admin::UrlBlob* outputs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(outputs_);
  }
  if (outputs) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      outputs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, outputs, submessage_arena);
    }
    
  } else {
    
  }
  outputs_ = outputs;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.WorkflowExecutionGetDataResponse.outputs)
}

// .flyteidl.admin.UrlBlob inputs = 2;
inline bool WorkflowExecutionGetDataResponse::has_inputs() const {
  return this != internal_default_instance() && inputs_ != NULL;
}
inline const ::flyteidl::admin::UrlBlob& WorkflowExecutionGetDataResponse::inputs() const {
  const ::flyteidl::admin::UrlBlob* p = inputs_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.WorkflowExecutionGetDataResponse.inputs)
  return p != NULL ? *p : *reinterpret_cast<const ::flyteidl::admin::UrlBlob*>(
      &::flyteidl::admin::_UrlBlob_default_instance_);
}
inline ::flyteidl::admin::UrlBlob* WorkflowExecutionGetDataResponse::release_inputs() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.WorkflowExecutionGetDataResponse.inputs)
  
  ::flyteidl::admin::UrlBlob* temp = inputs_;
  inputs_ = NULL;
  return temp;
}
inline ::flyteidl::admin::UrlBlob* WorkflowExecutionGetDataResponse::mutable_inputs() {
  
  if (inputs_ == NULL) {
    inputs_ = new ::flyteidl::admin::UrlBlob;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.WorkflowExecutionGetDataResponse.inputs)
  return inputs_;
}
inline void WorkflowExecutionGetDataResponse::set_allocated_inputs(::flyteidl::admin::UrlBlob* inputs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(inputs_);
  }
  if (inputs) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      inputs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, inputs, submessage_arena);
    }
    
  } else {
    
  }
  inputs_ = inputs;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.WorkflowExecutionGetDataResponse.inputs)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace admin
}  // namespace flyteidl

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::flyteidl::admin::ExecutionMetadata_ExecutionMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flyteidl::admin::ExecutionMetadata_ExecutionMode>() {
  return ::flyteidl::admin::ExecutionMetadata_ExecutionMode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_flyteidl_2fadmin_2fexecution_2eproto__INCLUDED
