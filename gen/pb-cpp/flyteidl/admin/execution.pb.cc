// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/execution.proto

#include "flyteidl/admin/execution.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace flyteidl {
namespace admin {
constexpr ExecutionCreateRequest::ExecutionCreateRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : project_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , domain_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , spec_(nullptr)
  , inputs_(nullptr){}
struct ExecutionCreateRequestDefaultTypeInternal {
  constexpr ExecutionCreateRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExecutionCreateRequestDefaultTypeInternal() {}
  union {
    ExecutionCreateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExecutionCreateRequestDefaultTypeInternal _ExecutionCreateRequest_default_instance_;
constexpr ExecutionRelaunchRequest::ExecutionRelaunchRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(nullptr){}
struct ExecutionRelaunchRequestDefaultTypeInternal {
  constexpr ExecutionRelaunchRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExecutionRelaunchRequestDefaultTypeInternal() {}
  union {
    ExecutionRelaunchRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExecutionRelaunchRequestDefaultTypeInternal _ExecutionRelaunchRequest_default_instance_;
constexpr ExecutionRecoverRequest::ExecutionRecoverRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(nullptr)
  , metadata_(nullptr){}
struct ExecutionRecoverRequestDefaultTypeInternal {
  constexpr ExecutionRecoverRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExecutionRecoverRequestDefaultTypeInternal() {}
  union {
    ExecutionRecoverRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExecutionRecoverRequestDefaultTypeInternal _ExecutionRecoverRequest_default_instance_;
constexpr ExecutionCreateResponse::ExecutionCreateResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(nullptr){}
struct ExecutionCreateResponseDefaultTypeInternal {
  constexpr ExecutionCreateResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExecutionCreateResponseDefaultTypeInternal() {}
  union {
    ExecutionCreateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExecutionCreateResponseDefaultTypeInternal _ExecutionCreateResponse_default_instance_;
constexpr WorkflowExecutionGetRequest::WorkflowExecutionGetRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(nullptr){}
struct WorkflowExecutionGetRequestDefaultTypeInternal {
  constexpr WorkflowExecutionGetRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WorkflowExecutionGetRequestDefaultTypeInternal() {}
  union {
    WorkflowExecutionGetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WorkflowExecutionGetRequestDefaultTypeInternal _WorkflowExecutionGetRequest_default_instance_;
constexpr Execution::Execution(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(nullptr)
  , spec_(nullptr)
  , closure_(nullptr){}
struct ExecutionDefaultTypeInternal {
  constexpr ExecutionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExecutionDefaultTypeInternal() {}
  union {
    Execution _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExecutionDefaultTypeInternal _Execution_default_instance_;
constexpr ExecutionList::ExecutionList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : executions_()
  , token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ExecutionListDefaultTypeInternal {
  constexpr ExecutionListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExecutionListDefaultTypeInternal() {}
  union {
    ExecutionList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExecutionListDefaultTypeInternal _ExecutionList_default_instance_;
constexpr LiteralMapBlob::LiteralMapBlob(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct LiteralMapBlobDefaultTypeInternal {
  constexpr LiteralMapBlobDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LiteralMapBlobDefaultTypeInternal() {}
  union {
    LiteralMapBlob _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LiteralMapBlobDefaultTypeInternal _LiteralMapBlob_default_instance_;
constexpr AbortMetadata::AbortMetadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cause_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , principal_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AbortMetadataDefaultTypeInternal {
  constexpr AbortMetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AbortMetadataDefaultTypeInternal() {}
  union {
    AbortMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AbortMetadataDefaultTypeInternal _AbortMetadata_default_instance_;
constexpr ExecutionClosure::ExecutionClosure(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : notifications_()
  , computed_inputs_(nullptr)
  , started_at_(nullptr)
  , duration_(nullptr)
  , created_at_(nullptr)
  , updated_at_(nullptr)
  , workflow_id_(nullptr)
  , state_change_details_(nullptr)
  , phase_(0)

  , _oneof_case_{}{}
struct ExecutionClosureDefaultTypeInternal {
  constexpr ExecutionClosureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExecutionClosureDefaultTypeInternal() {}
  union {
    ExecutionClosure _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExecutionClosureDefaultTypeInternal _ExecutionClosure_default_instance_;
constexpr SystemMetadata::SystemMetadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : execution_cluster_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SystemMetadataDefaultTypeInternal {
  constexpr SystemMetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SystemMetadataDefaultTypeInternal() {}
  union {
    SystemMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SystemMetadataDefaultTypeInternal _SystemMetadata_default_instance_;
constexpr ExecutionMetadata::ExecutionMetadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : principal_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , scheduled_at_(nullptr)
  , parent_node_execution_(nullptr)
  , reference_execution_(nullptr)
  , system_metadata_(nullptr)
  , mode_(0)

  , nesting_(0u){}
struct ExecutionMetadataDefaultTypeInternal {
  constexpr ExecutionMetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExecutionMetadataDefaultTypeInternal() {}
  union {
    ExecutionMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExecutionMetadataDefaultTypeInternal _ExecutionMetadata_default_instance_;
constexpr NotificationList::NotificationList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : notifications_(){}
struct NotificationListDefaultTypeInternal {
  constexpr NotificationListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NotificationListDefaultTypeInternal() {}
  union {
    NotificationList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NotificationListDefaultTypeInternal _NotificationList_default_instance_;
constexpr ExecutionSpec::ExecutionSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : launch_plan_(nullptr)
  , inputs_(nullptr)
  , metadata_(nullptr)
  , labels_(nullptr)
  , annotations_(nullptr)
  , security_context_(nullptr)
  , auth_role_(nullptr)
  , quality_of_service_(nullptr)
  , raw_output_data_config_(nullptr)
  , cluster_assignment_(nullptr)
  , max_parallelism_(0)
  , _oneof_case_{}{}
struct ExecutionSpecDefaultTypeInternal {
  constexpr ExecutionSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExecutionSpecDefaultTypeInternal() {}
  union {
    ExecutionSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExecutionSpecDefaultTypeInternal _ExecutionSpec_default_instance_;
constexpr ExecutionTerminateRequest::ExecutionTerminateRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cause_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(nullptr){}
struct ExecutionTerminateRequestDefaultTypeInternal {
  constexpr ExecutionTerminateRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExecutionTerminateRequestDefaultTypeInternal() {}
  union {
    ExecutionTerminateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExecutionTerminateRequestDefaultTypeInternal _ExecutionTerminateRequest_default_instance_;
constexpr ExecutionTerminateResponse::ExecutionTerminateResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ExecutionTerminateResponseDefaultTypeInternal {
  constexpr ExecutionTerminateResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExecutionTerminateResponseDefaultTypeInternal() {}
  union {
    ExecutionTerminateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExecutionTerminateResponseDefaultTypeInternal _ExecutionTerminateResponse_default_instance_;
constexpr WorkflowExecutionGetDataRequest::WorkflowExecutionGetDataRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(nullptr){}
struct WorkflowExecutionGetDataRequestDefaultTypeInternal {
  constexpr WorkflowExecutionGetDataRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WorkflowExecutionGetDataRequestDefaultTypeInternal() {}
  union {
    WorkflowExecutionGetDataRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WorkflowExecutionGetDataRequestDefaultTypeInternal _WorkflowExecutionGetDataRequest_default_instance_;
constexpr WorkflowExecutionGetDataResponse::WorkflowExecutionGetDataResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : outputs_(nullptr)
  , inputs_(nullptr)
  , full_inputs_(nullptr)
  , full_outputs_(nullptr){}
struct WorkflowExecutionGetDataResponseDefaultTypeInternal {
  constexpr WorkflowExecutionGetDataResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WorkflowExecutionGetDataResponseDefaultTypeInternal() {}
  union {
    WorkflowExecutionGetDataResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WorkflowExecutionGetDataResponseDefaultTypeInternal _WorkflowExecutionGetDataResponse_default_instance_;
constexpr ExecutionUpdateRequest::ExecutionUpdateRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(nullptr)
  , state_(0)
{}
struct ExecutionUpdateRequestDefaultTypeInternal {
  constexpr ExecutionUpdateRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExecutionUpdateRequestDefaultTypeInternal() {}
  union {
    ExecutionUpdateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExecutionUpdateRequestDefaultTypeInternal _ExecutionUpdateRequest_default_instance_;
constexpr ExecutionStateChangeDetails::ExecutionStateChangeDetails(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : principal_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , occurred_at_(nullptr)
  , state_(0)
{}
struct ExecutionStateChangeDetailsDefaultTypeInternal {
  constexpr ExecutionStateChangeDetailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExecutionStateChangeDetailsDefaultTypeInternal() {}
  union {
    ExecutionStateChangeDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExecutionStateChangeDetailsDefaultTypeInternal _ExecutionStateChangeDetails_default_instance_;
constexpr ExecutionUpdateResponse::ExecutionUpdateResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ExecutionUpdateResponseDefaultTypeInternal {
  constexpr ExecutionUpdateResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExecutionUpdateResponseDefaultTypeInternal() {}
  union {
    ExecutionUpdateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExecutionUpdateResponseDefaultTypeInternal _ExecutionUpdateResponse_default_instance_;
}  // namespace admin
}  // namespace flyteidl
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_flyteidl_2fadmin_2fexecution_2eproto[21];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_flyteidl_2fadmin_2fexecution_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fadmin_2fexecution_2eproto = nullptr;

const uint32_t TableStruct_flyteidl_2fadmin_2fexecution_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionCreateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionCreateRequest, project_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionCreateRequest, domain_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionCreateRequest, name_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionCreateRequest, spec_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionCreateRequest, inputs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionRelaunchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionRelaunchRequest, id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionRelaunchRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionRecoverRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionRecoverRequest, id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionRecoverRequest, name_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionRecoverRequest, metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionCreateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionCreateResponse, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowExecutionGetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowExecutionGetRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Execution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Execution, id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Execution, spec_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Execution, closure_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionList, executions_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionList, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LiteralMapBlob, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LiteralMapBlob, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LiteralMapBlob, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::AbortMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::AbortMetadata, cause_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::AbortMetadata, principal_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionClosure, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionClosure, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionClosure, computed_inputs_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionClosure, phase_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionClosure, started_at_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionClosure, duration_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionClosure, created_at_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionClosure, updated_at_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionClosure, notifications_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionClosure, workflow_id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionClosure, state_change_details_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionClosure, output_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::SystemMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::SystemMetadata, execution_cluster_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionMetadata, mode_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionMetadata, principal_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionMetadata, nesting_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionMetadata, scheduled_at_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionMetadata, parent_node_execution_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionMetadata, reference_execution_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionMetadata, system_metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NotificationList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NotificationList, notifications_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionSpec, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionSpec, launch_plan_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionSpec, inputs_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionSpec, metadata_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionSpec, labels_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionSpec, annotations_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionSpec, security_context_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionSpec, auth_role_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionSpec, quality_of_service_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionSpec, max_parallelism_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionSpec, raw_output_data_config_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionSpec, cluster_assignment_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionSpec, notification_overrides_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionTerminateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionTerminateRequest, id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionTerminateRequest, cause_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionTerminateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowExecutionGetDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowExecutionGetDataRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowExecutionGetDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowExecutionGetDataResponse, outputs_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowExecutionGetDataResponse, inputs_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowExecutionGetDataResponse, full_inputs_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowExecutionGetDataResponse, full_outputs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionUpdateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionUpdateRequest, id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionUpdateRequest, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionStateChangeDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionStateChangeDetails, state_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionStateChangeDetails, occurred_at_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionStateChangeDetails, principal_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ExecutionUpdateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::flyteidl::admin::ExecutionCreateRequest)},
  { 11, -1, -1, sizeof(::flyteidl::admin::ExecutionRelaunchRequest)},
  { 19, -1, -1, sizeof(::flyteidl::admin::ExecutionRecoverRequest)},
  { 28, -1, -1, sizeof(::flyteidl::admin::ExecutionCreateResponse)},
  { 35, -1, -1, sizeof(::flyteidl::admin::WorkflowExecutionGetRequest)},
  { 42, -1, -1, sizeof(::flyteidl::admin::Execution)},
  { 51, -1, -1, sizeof(::flyteidl::admin::ExecutionList)},
  { 59, -1, -1, sizeof(::flyteidl::admin::LiteralMapBlob)},
  { 68, -1, -1, sizeof(::flyteidl::admin::AbortMetadata)},
  { 76, -1, -1, sizeof(::flyteidl::admin::ExecutionClosure)},
  { 97, -1, -1, sizeof(::flyteidl::admin::SystemMetadata)},
  { 104, -1, -1, sizeof(::flyteidl::admin::ExecutionMetadata)},
  { 117, -1, -1, sizeof(::flyteidl::admin::NotificationList)},
  { 124, -1, -1, sizeof(::flyteidl::admin::ExecutionSpec)},
  { 144, -1, -1, sizeof(::flyteidl::admin::ExecutionTerminateRequest)},
  { 152, -1, -1, sizeof(::flyteidl::admin::ExecutionTerminateResponse)},
  { 158, -1, -1, sizeof(::flyteidl::admin::WorkflowExecutionGetDataRequest)},
  { 165, -1, -1, sizeof(::flyteidl::admin::WorkflowExecutionGetDataResponse)},
  { 175, -1, -1, sizeof(::flyteidl::admin::ExecutionUpdateRequest)},
  { 183, -1, -1, sizeof(::flyteidl::admin::ExecutionStateChangeDetails)},
  { 192, -1, -1, sizeof(::flyteidl::admin::ExecutionUpdateResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_ExecutionCreateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_ExecutionRelaunchRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_ExecutionRecoverRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_ExecutionCreateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_WorkflowExecutionGetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_Execution_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_ExecutionList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_LiteralMapBlob_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_AbortMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_ExecutionClosure_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_SystemMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_ExecutionMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_NotificationList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_ExecutionSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_ExecutionTerminateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_ExecutionTerminateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_WorkflowExecutionGetDataRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_WorkflowExecutionGetDataResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_ExecutionUpdateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_ExecutionStateChangeDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_ExecutionUpdateResponse_default_instance_),
};

const char descriptor_table_protodef_flyteidl_2fadmin_2fexecution_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036flyteidl/admin/execution.proto\022\016flytei"
  "dl.admin\032\'flyteidl/admin/cluster_assignm"
  "ent.proto\032\033flyteidl/admin/common.proto\032\034"
  "flyteidl/core/literals.proto\032\035flyteidl/c"
  "ore/execution.proto\032\036flyteidl/core/ident"
  "ifier.proto\032\034flyteidl/core/security.prot"
  "o\032\036google/protobuf/duration.proto\032\037googl"
  "e/protobuf/timestamp.proto\"\304\001\n\026Execution"
  "CreateRequest\022\030\n\007project\030\001 \001(\tR\007project\022"
  "\026\n\006domain\030\002 \001(\tR\006domain\022\022\n\004name\030\003 \001(\tR\004n"
  "ame\0221\n\004spec\030\004 \001(\0132\035.flyteidl.admin.Execu"
  "tionSpecR\004spec\0221\n\006inputs\030\005 \001(\0132\031.flyteid"
  "l.core.LiteralMapR\006inputs\"j\n\030ExecutionRe"
  "launchRequest\022:\n\002id\030\001 \001(\0132*.flyteidl.cor"
  "e.WorkflowExecutionIdentifierR\002id\022\022\n\004nam"
  "e\030\003 \001(\tR\004name\"\250\001\n\027ExecutionRecoverReques"
  "t\022:\n\002id\030\001 \001(\0132*.flyteidl.core.WorkflowEx"
  "ecutionIdentifierR\002id\022\022\n\004name\030\002 \001(\tR\004nam"
  "e\022=\n\010metadata\030\003 \001(\0132!.flyteidl.admin.Exe"
  "cutionMetadataR\010metadata\"U\n\027ExecutionCre"
  "ateResponse\022:\n\002id\030\001 \001(\0132*.flyteidl.core."
  "WorkflowExecutionIdentifierR\002id\"Y\n\033Workf"
  "lowExecutionGetRequest\022:\n\002id\030\001 \001(\0132*.fly"
  "teidl.core.WorkflowExecutionIdentifierR\002"
  "id\"\266\001\n\tExecution\022:\n\002id\030\001 \001(\0132*.flyteidl."
  "core.WorkflowExecutionIdentifierR\002id\0221\n\004"
  "spec\030\002 \001(\0132\035.flyteidl.admin.ExecutionSpe"
  "cR\004spec\022:\n\007closure\030\003 \001(\0132 .flyteidl.admi"
  "n.ExecutionClosureR\007closure\"`\n\rExecution"
  "List\0229\n\nexecutions\030\001 \003(\0132\031.flyteidl.admi"
  "n.ExecutionR\nexecutions\022\024\n\005token\030\002 \001(\tR\005"
  "token\"e\n\016LiteralMapBlob\0227\n\006values\030\001 \001(\0132"
  "\031.flyteidl.core.LiteralMapB\002\030\001H\000R\006values"
  "\022\022\n\003uri\030\002 \001(\tH\000R\003uriB\006\n\004data\"C\n\rAbortMet"
  "adata\022\024\n\005cause\030\001 \001(\tR\005cause\022\034\n\tprincipal"
  "\030\002 \001(\tR\tprincipal\"\230\007\n\020ExecutionClosure\022>"
  "\n\007outputs\030\001 \001(\0132\036.flyteidl.admin.Literal"
  "MapBlobB\002\030\001H\000R\007outputs\0225\n\005error\030\002 \001(\0132\035."
  "flyteidl.core.ExecutionErrorH\000R\005error\022%\n"
  "\013abort_cause\030\n \001(\tB\002\030\001H\000R\nabortCause\022F\n\016"
  "abort_metadata\030\014 \001(\0132\035.flyteidl.admin.Ab"
  "ortMetadataH\000R\rabortMetadata\022@\n\013output_d"
  "ata\030\r \001(\0132\031.flyteidl.core.LiteralMapB\002\030\001"
  "H\000R\noutputData\022F\n\017computed_inputs\030\003 \001(\0132"
  "\031.flyteidl.core.LiteralMapB\002\030\001R\016computed"
  "Inputs\022<\n\005phase\030\004 \001(\0162&.flyteidl.core.Wo"
  "rkflowExecution.PhaseR\005phase\0229\n\nstarted_"
  "at\030\005 \001(\0132\032.google.protobuf.TimestampR\tst"
  "artedAt\0225\n\010duration\030\006 \001(\0132\031.google.proto"
  "buf.DurationR\010duration\0229\n\ncreated_at\030\007 \001"
  "(\0132\032.google.protobuf.TimestampR\tcreatedA"
  "t\0229\n\nupdated_at\030\010 \001(\0132\032.google.protobuf."
  "TimestampR\tupdatedAt\022B\n\rnotifications\030\t "
  "\003(\0132\034.flyteidl.admin.NotificationR\rnotif"
  "ications\022:\n\013workflow_id\030\013 \001(\0132\031.flyteidl"
  ".core.IdentifierR\nworkflowId\022]\n\024state_ch"
  "ange_details\030\016 \001(\0132+.flyteidl.admin.Exec"
  "utionStateChangeDetailsR\022stateChangeDeta"
  "ilsB\017\n\routput_result\"=\n\016SystemMetadata\022+"
  "\n\021execution_cluster\030\001 \001(\tR\020executionClus"
  "ter\"\272\004\n\021ExecutionMetadata\022C\n\004mode\030\001 \001(\0162"
  "/.flyteidl.admin.ExecutionMetadata.Execu"
  "tionModeR\004mode\022\034\n\tprincipal\030\002 \001(\tR\tprinc"
  "ipal\022\030\n\007nesting\030\003 \001(\rR\007nesting\022=\n\014schedu"
  "led_at\030\004 \001(\0132\032.google.protobuf.Timestamp"
  "R\013scheduledAt\022Z\n\025parent_node_execution\030\005"
  " \001(\0132&.flyteidl.core.NodeExecutionIdenti"
  "fierR\023parentNodeExecution\022[\n\023reference_e"
  "xecution\030\020 \001(\0132*.flyteidl.core.WorkflowE"
  "xecutionIdentifierR\022referenceExecution\022G"
  "\n\017system_metadata\030\021 \001(\0132\036.flyteidl.admin"
  ".SystemMetadataR\016systemMetadata\"g\n\rExecu"
  "tionMode\022\n\n\006MANUAL\020\000\022\r\n\tSCHEDULED\020\001\022\n\n\006S"
  "YSTEM\020\002\022\014\n\010RELAUNCH\020\003\022\022\n\016CHILD_WORKFLOW\020"
  "\004\022\r\n\tRECOVERED\020\005\"V\n\020NotificationList\022B\n\r"
  "notifications\030\001 \003(\0132\034.flyteidl.admin.Not"
  "ificationR\rnotifications\"\347\006\n\rExecutionSp"
  "ec\022:\n\013launch_plan\030\001 \001(\0132\031.flyteidl.core."
  "IdentifierR\nlaunchPlan\0225\n\006inputs\030\002 \001(\0132\031"
  ".flyteidl.core.LiteralMapB\002\030\001R\006inputs\022=\n"
  "\010metadata\030\003 \001(\0132!.flyteidl.admin.Executi"
  "onMetadataR\010metadata\022H\n\rnotifications\030\005 "
  "\001(\0132 .flyteidl.admin.NotificationListH\000R"
  "\rnotifications\022!\n\013disable_all\030\006 \001(\010H\000R\nd"
  "isableAll\022.\n\006labels\030\007 \001(\0132\026.flyteidl.adm"
  "in.LabelsR\006labels\022=\n\013annotations\030\010 \001(\0132\033"
  ".flyteidl.admin.AnnotationsR\013annotations"
  "\022I\n\020security_context\030\n \001(\0132\036.flyteidl.co"
  "re.SecurityContextR\017securityContext\0229\n\ta"
  "uth_role\030\020 \001(\0132\030.flyteidl.admin.AuthRole"
  "B\002\030\001R\010authRole\022M\n\022quality_of_service\030\021 \001"
  "(\0132\037.flyteidl.core.QualityOfServiceR\020qua"
  "lityOfService\022\'\n\017max_parallelism\030\022 \001(\005R\016"
  "maxParallelism\022X\n\026raw_output_data_config"
  "\030\023 \001(\0132#.flyteidl.admin.RawOutputDataCon"
  "figR\023rawOutputDataConfig\022P\n\022cluster_assi"
  "gnment\030\024 \001(\0132!.flyteidl.admin.ClusterAss"
  "ignmentR\021clusterAssignmentB\030\n\026notificati"
  "on_overridesJ\004\010\004\020\005\"m\n\031ExecutionTerminate"
  "Request\022:\n\002id\030\001 \001(\0132*.flyteidl.core.Work"
  "flowExecutionIdentifierR\002id\022\024\n\005cause\030\002 \001"
  "(\tR\005cause\"\034\n\032ExecutionTerminateResponse\""
  "]\n\037WorkflowExecutionGetDataRequest\022:\n\002id"
  "\030\001 \001(\0132*.flyteidl.core.WorkflowExecution"
  "IdentifierR\002id\"\210\002\n WorkflowExecutionGetD"
  "ataResponse\0225\n\007outputs\030\001 \001(\0132\027.flyteidl."
  "admin.UrlBlobB\002\030\001R\007outputs\0223\n\006inputs\030\002 \001"
  "(\0132\027.flyteidl.admin.UrlBlobB\002\030\001R\006inputs\022"
  ":\n\013full_inputs\030\003 \001(\0132\031.flyteidl.core.Lit"
  "eralMapR\nfullInputs\022<\n\014full_outputs\030\004 \001("
  "\0132\031.flyteidl.core.LiteralMapR\013fullOutput"
  "s\"\212\001\n\026ExecutionUpdateRequest\022:\n\002id\030\001 \001(\013"
  "2*.flyteidl.core.WorkflowExecutionIdenti"
  "fierR\002id\0224\n\005state\030\002 \001(\0162\036.flyteidl.admin"
  ".ExecutionStateR\005state\"\256\001\n\033ExecutionStat"
  "eChangeDetails\0224\n\005state\030\001 \001(\0162\036.flyteidl"
  ".admin.ExecutionStateR\005state\022;\n\013occurred"
  "_at\030\002 \001(\0132\032.google.protobuf.TimestampR\no"
  "ccurredAt\022\034\n\tprincipal\030\003 \001(\tR\tprincipal\""
  "\031\n\027ExecutionUpdateResponse*>\n\016ExecutionS"
  "tate\022\024\n\020EXECUTION_ACTIVE\020\000\022\026\n\022EXECUTION_"
  "ARCHIVED\020\001B\267\001\n\022com.flyteidl.adminB\016Execu"
  "tionProtoH\002Z5github.com/flyteorg/flyteid"
  "l/gen/pb-go/flyteidl/admin\370\001\000\242\002\003FAX\252\002\016Fl"
  "yteidl.Admin\312\002\016Flyteidl\\Admin\342\002\032Flyteidl"
  "\\Admin\\GPBMetadata\352\002\017Flyteidl::Adminb\006pr"
  "oto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_flyteidl_2fadmin_2fexecution_2eproto_deps[8] = {
  &::descriptor_table_flyteidl_2fadmin_2fcluster_5fassignment_2eproto,
  &::descriptor_table_flyteidl_2fadmin_2fcommon_2eproto,
  &::descriptor_table_flyteidl_2fcore_2fexecution_2eproto,
  &::descriptor_table_flyteidl_2fcore_2fidentifier_2eproto,
  &::descriptor_table_flyteidl_2fcore_2fliterals_2eproto,
  &::descriptor_table_flyteidl_2fcore_2fsecurity_2eproto,
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_flyteidl_2fadmin_2fexecution_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fadmin_2fexecution_2eproto = {
  false, false, 5044, descriptor_table_protodef_flyteidl_2fadmin_2fexecution_2eproto, "flyteidl/admin/execution.proto", 
  &descriptor_table_flyteidl_2fadmin_2fexecution_2eproto_once, descriptor_table_flyteidl_2fadmin_2fexecution_2eproto_deps, 8, 21,
  schemas, file_default_instances, TableStruct_flyteidl_2fadmin_2fexecution_2eproto::offsets,
  file_level_metadata_flyteidl_2fadmin_2fexecution_2eproto, file_level_enum_descriptors_flyteidl_2fadmin_2fexecution_2eproto, file_level_service_descriptors_flyteidl_2fadmin_2fexecution_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_flyteidl_2fadmin_2fexecution_2eproto_getter() {
  return &descriptor_table_flyteidl_2fadmin_2fexecution_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_flyteidl_2fadmin_2fexecution_2eproto(&descriptor_table_flyteidl_2fadmin_2fexecution_2eproto);
namespace flyteidl {
namespace admin {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ExecutionMetadata_ExecutionMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_flyteidl_2fadmin_2fexecution_2eproto);
  return file_level_enum_descriptors_flyteidl_2fadmin_2fexecution_2eproto[0];
}
bool ExecutionMetadata_ExecutionMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ExecutionMetadata_ExecutionMode ExecutionMetadata::MANUAL;
constexpr ExecutionMetadata_ExecutionMode ExecutionMetadata::SCHEDULED;
constexpr ExecutionMetadata_ExecutionMode ExecutionMetadata::SYSTEM;
constexpr ExecutionMetadata_ExecutionMode ExecutionMetadata::RELAUNCH;
constexpr ExecutionMetadata_ExecutionMode ExecutionMetadata::CHILD_WORKFLOW;
constexpr ExecutionMetadata_ExecutionMode ExecutionMetadata::RECOVERED;
constexpr ExecutionMetadata_ExecutionMode ExecutionMetadata::ExecutionMode_MIN;
constexpr ExecutionMetadata_ExecutionMode ExecutionMetadata::ExecutionMode_MAX;
constexpr int ExecutionMetadata::ExecutionMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ExecutionState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_flyteidl_2fadmin_2fexecution_2eproto);
  return file_level_enum_descriptors_flyteidl_2fadmin_2fexecution_2eproto[1];
}
bool ExecutionState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ExecutionCreateRequest::_Internal {
 public:
  static const ::flyteidl::admin::ExecutionSpec& spec(const ExecutionCreateRequest* msg);
  static const ::flyteidl::core::LiteralMap& inputs(const ExecutionCreateRequest* msg);
};

const ::flyteidl::admin::ExecutionSpec&
ExecutionCreateRequest::_Internal::spec(const ExecutionCreateRequest* msg) {
  return *msg->spec_;
}
const ::flyteidl::core::LiteralMap&
ExecutionCreateRequest::_Internal::inputs(const ExecutionCreateRequest* msg) {
  return *msg->inputs_;
}
void ExecutionCreateRequest::clear_inputs() {
  if (GetArenaForAllocation() == nullptr && inputs_ != nullptr) {
    delete inputs_;
  }
  inputs_ = nullptr;
}
ExecutionCreateRequest::ExecutionCreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.ExecutionCreateRequest)
}
ExecutionCreateRequest::ExecutionCreateRequest(const ExecutionCreateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  project_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    project_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_project().empty()) {
    project_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_project(), 
      GetArenaForAllocation());
  }
  domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_domain().empty()) {
    domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_domain(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_spec()) {
    spec_ = new ::flyteidl::admin::ExecutionSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from._internal_has_inputs()) {
    inputs_ = new ::flyteidl::core::LiteralMap(*from.inputs_);
  } else {
    inputs_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.ExecutionCreateRequest)
}

inline void ExecutionCreateRequest::SharedCtor() {
project_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  project_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&spec_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&inputs_) -
    reinterpret_cast<char*>(&spec_)) + sizeof(inputs_));
}

ExecutionCreateRequest::~ExecutionCreateRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.ExecutionCreateRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExecutionCreateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  project_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  domain_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete inputs_;
}

void ExecutionCreateRequest::ArenaDtor(void* object) {
  ExecutionCreateRequest* _this = reinterpret_cast< ExecutionCreateRequest* >(object);
  (void)_this;
}
void ExecutionCreateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExecutionCreateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExecutionCreateRequest::InternalSwap(ExecutionCreateRequest* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ExecutionCreateRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fexecution_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fexecution_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fexecution_2eproto[0]);
}

// ===================================================================

class ExecutionRelaunchRequest::_Internal {
 public:
  static const ::flyteidl::core::WorkflowExecutionIdentifier& id(const ExecutionRelaunchRequest* msg);
};

const ::flyteidl::core::WorkflowExecutionIdentifier&
ExecutionRelaunchRequest::_Internal::id(const ExecutionRelaunchRequest* msg) {
  return *msg->id_;
}
void ExecutionRelaunchRequest::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
ExecutionRelaunchRequest::ExecutionRelaunchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.ExecutionRelaunchRequest)
}
ExecutionRelaunchRequest::ExecutionRelaunchRequest(const ExecutionRelaunchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_id()) {
    id_ = new ::flyteidl::core::WorkflowExecutionIdentifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.ExecutionRelaunchRequest)
}

inline void ExecutionRelaunchRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
id_ = nullptr;
}

ExecutionRelaunchRequest::~ExecutionRelaunchRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.ExecutionRelaunchRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExecutionRelaunchRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
}

void ExecutionRelaunchRequest::ArenaDtor(void* object) {
  ExecutionRelaunchRequest* _this = reinterpret_cast< ExecutionRelaunchRequest* >(object);
  (void)_this;
}
void ExecutionRelaunchRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExecutionRelaunchRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExecutionRelaunchRequest::InternalSwap(ExecutionRelaunchRequest* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ExecutionRelaunchRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fexecution_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fexecution_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fexecution_2eproto[1]);
}

// ===================================================================

class ExecutionRecoverRequest::_Internal {
 public:
  static const ::flyteidl::core::WorkflowExecutionIdentifier& id(const ExecutionRecoverRequest* msg);
  static const ::flyteidl::admin::ExecutionMetadata& metadata(const ExecutionRecoverRequest* msg);
};

const ::flyteidl::core::WorkflowExecutionIdentifier&
ExecutionRecoverRequest::_Internal::id(const ExecutionRecoverRequest* msg) {
  return *msg->id_;
}
const ::flyteidl::admin::ExecutionMetadata&
ExecutionRecoverRequest::_Internal::metadata(const ExecutionRecoverRequest* msg) {
  return *msg->metadata_;
}
void ExecutionRecoverRequest::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
ExecutionRecoverRequest::ExecutionRecoverRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.ExecutionRecoverRequest)
}
ExecutionRecoverRequest::ExecutionRecoverRequest(const ExecutionRecoverRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_id()) {
    id_ = new ::flyteidl::core::WorkflowExecutionIdentifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::flyteidl::admin::ExecutionMetadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.ExecutionRecoverRequest)
}

inline void ExecutionRecoverRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&metadata_) -
    reinterpret_cast<char*>(&id_)) + sizeof(metadata_));
}

ExecutionRecoverRequest::~ExecutionRecoverRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.ExecutionRecoverRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExecutionRecoverRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete metadata_;
}

void ExecutionRecoverRequest::ArenaDtor(void* object) {
  ExecutionRecoverRequest* _this = reinterpret_cast< ExecutionRecoverRequest* >(object);
  (void)_this;
}
void ExecutionRecoverRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExecutionRecoverRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExecutionRecoverRequest::InternalSwap(ExecutionRecoverRequest* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ExecutionRecoverRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fexecution_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fexecution_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fexecution_2eproto[2]);
}

// ===================================================================

class ExecutionCreateResponse::_Internal {
 public:
  static const ::flyteidl::core::WorkflowExecutionIdentifier& id(const ExecutionCreateResponse* msg);
};

const ::flyteidl::core::WorkflowExecutionIdentifier&
ExecutionCreateResponse::_Internal::id(const ExecutionCreateResponse* msg) {
  return *msg->id_;
}
void ExecutionCreateResponse::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
ExecutionCreateResponse::ExecutionCreateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.ExecutionCreateResponse)
}
ExecutionCreateResponse::ExecutionCreateResponse(const ExecutionCreateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::flyteidl::core::WorkflowExecutionIdentifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.ExecutionCreateResponse)
}

inline void ExecutionCreateResponse::SharedCtor() {
id_ = nullptr;
}

ExecutionCreateResponse::~ExecutionCreateResponse() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.ExecutionCreateResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExecutionCreateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
}

void ExecutionCreateResponse::ArenaDtor(void* object) {
  ExecutionCreateResponse* _this = reinterpret_cast< ExecutionCreateResponse* >(object);
  (void)_this;
}
void ExecutionCreateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExecutionCreateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExecutionCreateResponse::InternalSwap(ExecutionCreateResponse* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ExecutionCreateResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fexecution_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fexecution_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fexecution_2eproto[3]);
}

// ===================================================================

class WorkflowExecutionGetRequest::_Internal {
 public:
  static const ::flyteidl::core::WorkflowExecutionIdentifier& id(const WorkflowExecutionGetRequest* msg);
};

const ::flyteidl::core::WorkflowExecutionIdentifier&
WorkflowExecutionGetRequest::_Internal::id(const WorkflowExecutionGetRequest* msg) {
  return *msg->id_;
}
void WorkflowExecutionGetRequest::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
WorkflowExecutionGetRequest::WorkflowExecutionGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.WorkflowExecutionGetRequest)
}
WorkflowExecutionGetRequest::WorkflowExecutionGetRequest(const WorkflowExecutionGetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::flyteidl::core::WorkflowExecutionIdentifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.WorkflowExecutionGetRequest)
}

inline void WorkflowExecutionGetRequest::SharedCtor() {
id_ = nullptr;
}

WorkflowExecutionGetRequest::~WorkflowExecutionGetRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.WorkflowExecutionGetRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WorkflowExecutionGetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
}

void WorkflowExecutionGetRequest::ArenaDtor(void* object) {
  WorkflowExecutionGetRequest* _this = reinterpret_cast< WorkflowExecutionGetRequest* >(object);
  (void)_this;
}
void WorkflowExecutionGetRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkflowExecutionGetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WorkflowExecutionGetRequest::InternalSwap(WorkflowExecutionGetRequest* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata WorkflowExecutionGetRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fexecution_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fexecution_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fexecution_2eproto[4]);
}

// ===================================================================

class Execution::_Internal {
 public:
  static const ::flyteidl::core::WorkflowExecutionIdentifier& id(const Execution* msg);
  static const ::flyteidl::admin::ExecutionSpec& spec(const Execution* msg);
  static const ::flyteidl::admin::ExecutionClosure& closure(const Execution* msg);
};

const ::flyteidl::core::WorkflowExecutionIdentifier&
Execution::_Internal::id(const Execution* msg) {
  return *msg->id_;
}
const ::flyteidl::admin::ExecutionSpec&
Execution::_Internal::spec(const Execution* msg) {
  return *msg->spec_;
}
const ::flyteidl::admin::ExecutionClosure&
Execution::_Internal::closure(const Execution* msg) {
  return *msg->closure_;
}
void Execution::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
Execution::Execution(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.Execution)
}
Execution::Execution(const Execution& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::flyteidl::core::WorkflowExecutionIdentifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_spec()) {
    spec_ = new ::flyteidl::admin::ExecutionSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from._internal_has_closure()) {
    closure_ = new ::flyteidl::admin::ExecutionClosure(*from.closure_);
  } else {
    closure_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.Execution)
}

inline void Execution::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&closure_) -
    reinterpret_cast<char*>(&id_)) + sizeof(closure_));
}

Execution::~Execution() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.Execution)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Execution::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete closure_;
}

void Execution::ArenaDtor(void* object) {
  Execution* _this = reinterpret_cast< Execution* >(object);
  (void)_this;
}
void Execution::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Execution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Execution::InternalSwap(Execution* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata Execution::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fexecution_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fexecution_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fexecution_2eproto[5]);
}

// ===================================================================

class ExecutionList::_Internal {
 public:
};

ExecutionList::ExecutionList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  executions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.ExecutionList)
}
ExecutionList::ExecutionList(const ExecutionList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      executions_(from.executions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.ExecutionList)
}

inline void ExecutionList::SharedCtor() {
token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ExecutionList::~ExecutionList() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.ExecutionList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExecutionList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ExecutionList::ArenaDtor(void* object) {
  ExecutionList* _this = reinterpret_cast< ExecutionList* >(object);
  (void)_this;
}
void ExecutionList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExecutionList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExecutionList::InternalSwap(ExecutionList* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ExecutionList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fexecution_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fexecution_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fexecution_2eproto[6]);
}

// ===================================================================

class LiteralMapBlob::_Internal {
 public:
  static const ::flyteidl::core::LiteralMap& values(const LiteralMapBlob* msg);
};

const ::flyteidl::core::LiteralMap&
LiteralMapBlob::_Internal::values(const LiteralMapBlob* msg) {
  return *msg->data_.values_;
}
void LiteralMapBlob::set_allocated_values(::flyteidl::core::LiteralMap* values) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (values) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(values));
    if (message_arena != submessage_arena) {
      values = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, values, submessage_arena);
    }
    set_has_values();
    data_.values_ = values;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.LiteralMapBlob.values)
}
void LiteralMapBlob::clear_values() {
  if (_internal_has_values()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.values_;
    }
    clear_has_data();
  }
}
LiteralMapBlob::LiteralMapBlob(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.LiteralMapBlob)
}
LiteralMapBlob::LiteralMapBlob(const LiteralMapBlob& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_data();
  switch (from.data_case()) {
    case kValues: {
      _internal_mutable_values()->::flyteidl::core::LiteralMap::MergeFrom(from._internal_values());
      break;
    }
    case kUri: {
      _internal_set_uri(from._internal_uri());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.LiteralMapBlob)
}

inline void LiteralMapBlob::SharedCtor() {
clear_has_data();
}

LiteralMapBlob::~LiteralMapBlob() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.LiteralMapBlob)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LiteralMapBlob::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_data()) {
    clear_data();
  }
}

void LiteralMapBlob::ArenaDtor(void* object) {
  LiteralMapBlob* _this = reinterpret_cast< LiteralMapBlob* >(object);
  (void)_this;
}
void LiteralMapBlob::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LiteralMapBlob::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LiteralMapBlob::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.admin.LiteralMapBlob)
  switch (data_case()) {
    case kValues: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.values_;
      }
      break;
    }
    case kUri: {
      data_.uri_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void LiteralMapBlob::InternalSwap(LiteralMapBlob* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata LiteralMapBlob::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fexecution_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fexecution_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fexecution_2eproto[7]);
}

// ===================================================================

class AbortMetadata::_Internal {
 public:
};

AbortMetadata::AbortMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.AbortMetadata)
}
AbortMetadata::AbortMetadata(const AbortMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cause_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cause_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cause().empty()) {
    cause_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cause(), 
      GetArenaForAllocation());
  }
  principal_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    principal_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_principal().empty()) {
    principal_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_principal(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.AbortMetadata)
}

inline void AbortMetadata::SharedCtor() {
cause_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cause_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
principal_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  principal_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AbortMetadata::~AbortMetadata() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.AbortMetadata)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AbortMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  cause_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  principal_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AbortMetadata::ArenaDtor(void* object) {
  AbortMetadata* _this = reinterpret_cast< AbortMetadata* >(object);
  (void)_this;
}
void AbortMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AbortMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AbortMetadata::InternalSwap(AbortMetadata* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata AbortMetadata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fexecution_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fexecution_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fexecution_2eproto[8]);
}

// ===================================================================

class ExecutionClosure::_Internal {
 public:
  static const ::flyteidl::admin::LiteralMapBlob& outputs(const ExecutionClosure* msg);
  static const ::flyteidl::core::ExecutionError& error(const ExecutionClosure* msg);
  static const ::flyteidl::admin::AbortMetadata& abort_metadata(const ExecutionClosure* msg);
  static const ::flyteidl::core::LiteralMap& output_data(const ExecutionClosure* msg);
  static const ::flyteidl::core::LiteralMap& computed_inputs(const ExecutionClosure* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& started_at(const ExecutionClosure* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& duration(const ExecutionClosure* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const ExecutionClosure* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated_at(const ExecutionClosure* msg);
  static const ::flyteidl::core::Identifier& workflow_id(const ExecutionClosure* msg);
  static const ::flyteidl::admin::ExecutionStateChangeDetails& state_change_details(const ExecutionClosure* msg);
};

const ::flyteidl::admin::LiteralMapBlob&
ExecutionClosure::_Internal::outputs(const ExecutionClosure* msg) {
  return *msg->output_result_.outputs_;
}
const ::flyteidl::core::ExecutionError&
ExecutionClosure::_Internal::error(const ExecutionClosure* msg) {
  return *msg->output_result_.error_;
}
const ::flyteidl::admin::AbortMetadata&
ExecutionClosure::_Internal::abort_metadata(const ExecutionClosure* msg) {
  return *msg->output_result_.abort_metadata_;
}
const ::flyteidl::core::LiteralMap&
ExecutionClosure::_Internal::output_data(const ExecutionClosure* msg) {
  return *msg->output_result_.output_data_;
}
const ::flyteidl::core::LiteralMap&
ExecutionClosure::_Internal::computed_inputs(const ExecutionClosure* msg) {
  return *msg->computed_inputs_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ExecutionClosure::_Internal::started_at(const ExecutionClosure* msg) {
  return *msg->started_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
ExecutionClosure::_Internal::duration(const ExecutionClosure* msg) {
  return *msg->duration_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ExecutionClosure::_Internal::created_at(const ExecutionClosure* msg) {
  return *msg->created_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ExecutionClosure::_Internal::updated_at(const ExecutionClosure* msg) {
  return *msg->updated_at_;
}
const ::flyteidl::core::Identifier&
ExecutionClosure::_Internal::workflow_id(const ExecutionClosure* msg) {
  return *msg->workflow_id_;
}
const ::flyteidl::admin::ExecutionStateChangeDetails&
ExecutionClosure::_Internal::state_change_details(const ExecutionClosure* msg) {
  return *msg->state_change_details_;
}
void ExecutionClosure::set_allocated_outputs(::flyteidl::admin::LiteralMapBlob* outputs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_output_result();
  if (outputs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::admin::LiteralMapBlob>::GetOwningArena(outputs);
    if (message_arena != submessage_arena) {
      outputs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, outputs, submessage_arena);
    }
    set_has_outputs();
    output_result_.outputs_ = outputs;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ExecutionClosure.outputs)
}
void ExecutionClosure::set_allocated_error(::flyteidl::core::ExecutionError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_output_result();
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error));
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    output_result_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ExecutionClosure.error)
}
void ExecutionClosure::clear_error() {
  if (_internal_has_error()) {
    if (GetArenaForAllocation() == nullptr) {
      delete output_result_.error_;
    }
    clear_has_output_result();
  }
}
void ExecutionClosure::set_allocated_abort_metadata(::flyteidl::admin::AbortMetadata* abort_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_output_result();
  if (abort_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::admin::AbortMetadata>::GetOwningArena(abort_metadata);
    if (message_arena != submessage_arena) {
      abort_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, abort_metadata, submessage_arena);
    }
    set_has_abort_metadata();
    output_result_.abort_metadata_ = abort_metadata;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ExecutionClosure.abort_metadata)
}
void ExecutionClosure::set_allocated_output_data(::flyteidl::core::LiteralMap* output_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_output_result();
  if (output_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_data));
    if (message_arena != submessage_arena) {
      output_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output_data, submessage_arena);
    }
    set_has_output_data();
    output_result_.output_data_ = output_data;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ExecutionClosure.output_data)
}
void ExecutionClosure::clear_output_data() {
  if (_internal_has_output_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete output_result_.output_data_;
    }
    clear_has_output_result();
  }
}
void ExecutionClosure::clear_computed_inputs() {
  if (GetArenaForAllocation() == nullptr && computed_inputs_ != nullptr) {
    delete computed_inputs_;
  }
  computed_inputs_ = nullptr;
}
void ExecutionClosure::clear_started_at() {
  if (GetArenaForAllocation() == nullptr && started_at_ != nullptr) {
    delete started_at_;
  }
  started_at_ = nullptr;
}
void ExecutionClosure::clear_duration() {
  if (GetArenaForAllocation() == nullptr && duration_ != nullptr) {
    delete duration_;
  }
  duration_ = nullptr;
}
void ExecutionClosure::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void ExecutionClosure::clear_updated_at() {
  if (GetArenaForAllocation() == nullptr && updated_at_ != nullptr) {
    delete updated_at_;
  }
  updated_at_ = nullptr;
}
void ExecutionClosure::clear_notifications() {
  notifications_.Clear();
}
void ExecutionClosure::clear_workflow_id() {
  if (GetArenaForAllocation() == nullptr && workflow_id_ != nullptr) {
    delete workflow_id_;
  }
  workflow_id_ = nullptr;
}
ExecutionClosure::ExecutionClosure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  notifications_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.ExecutionClosure)
}
ExecutionClosure::ExecutionClosure(const ExecutionClosure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      notifications_(from.notifications_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_computed_inputs()) {
    computed_inputs_ = new ::flyteidl::core::LiteralMap(*from.computed_inputs_);
  } else {
    computed_inputs_ = nullptr;
  }
  if (from._internal_has_started_at()) {
    started_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.started_at_);
  } else {
    started_at_ = nullptr;
  }
  if (from._internal_has_duration()) {
    duration_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.duration_);
  } else {
    duration_ = nullptr;
  }
  if (from._internal_has_created_at()) {
    created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from._internal_has_updated_at()) {
    updated_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.updated_at_);
  } else {
    updated_at_ = nullptr;
  }
  if (from._internal_has_workflow_id()) {
    workflow_id_ = new ::flyteidl::core::Identifier(*from.workflow_id_);
  } else {
    workflow_id_ = nullptr;
  }
  if (from._internal_has_state_change_details()) {
    state_change_details_ = new ::flyteidl::admin::ExecutionStateChangeDetails(*from.state_change_details_);
  } else {
    state_change_details_ = nullptr;
  }
  phase_ = from.phase_;
  clear_has_output_result();
  switch (from.output_result_case()) {
    case kOutputs: {
      _internal_mutable_outputs()->::flyteidl::admin::LiteralMapBlob::MergeFrom(from._internal_outputs());
      break;
    }
    case kError: {
      _internal_mutable_error()->::flyteidl::core::ExecutionError::MergeFrom(from._internal_error());
      break;
    }
    case kAbortCause: {
      _internal_set_abort_cause(from._internal_abort_cause());
      break;
    }
    case kAbortMetadata: {
      _internal_mutable_abort_metadata()->::flyteidl::admin::AbortMetadata::MergeFrom(from._internal_abort_metadata());
      break;
    }
    case kOutputData: {
      _internal_mutable_output_data()->::flyteidl::core::LiteralMap::MergeFrom(from._internal_output_data());
      break;
    }
    case OUTPUT_RESULT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.ExecutionClosure)
}

inline void ExecutionClosure::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&computed_inputs_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&phase_) -
    reinterpret_cast<char*>(&computed_inputs_)) + sizeof(phase_));
clear_has_output_result();
}

ExecutionClosure::~ExecutionClosure() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.ExecutionClosure)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExecutionClosure::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete computed_inputs_;
  if (this != internal_default_instance()) delete started_at_;
  if (this != internal_default_instance()) delete duration_;
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete updated_at_;
  if (this != internal_default_instance()) delete workflow_id_;
  if (this != internal_default_instance()) delete state_change_details_;
  if (has_output_result()) {
    clear_output_result();
  }
}

void ExecutionClosure::ArenaDtor(void* object) {
  ExecutionClosure* _this = reinterpret_cast< ExecutionClosure* >(object);
  (void)_this;
}
void ExecutionClosure::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExecutionClosure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExecutionClosure::clear_output_result() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.admin.ExecutionClosure)
  switch (output_result_case()) {
    case kOutputs: {
      if (GetArenaForAllocation() == nullptr) {
        delete output_result_.outputs_;
      }
      break;
    }
    case kError: {
      if (GetArenaForAllocation() == nullptr) {
        delete output_result_.error_;
      }
      break;
    }
    case kAbortCause: {
      output_result_.abort_cause_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kAbortMetadata: {
      if (GetArenaForAllocation() == nullptr) {
        delete output_result_.abort_metadata_;
      }
      break;
    }
    case kOutputData: {
      if (GetArenaForAllocation() == nullptr) {
        delete output_result_.output_data_;
      }
      break;
    }
    case OUTPUT_RESULT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OUTPUT_RESULT_NOT_SET;
}


void ExecutionClosure::InternalSwap(ExecutionClosure* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ExecutionClosure::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fexecution_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fexecution_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fexecution_2eproto[9]);
}

// ===================================================================

class SystemMetadata::_Internal {
 public:
};

SystemMetadata::SystemMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.SystemMetadata)
}
SystemMetadata::SystemMetadata(const SystemMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  execution_cluster_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    execution_cluster_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_execution_cluster().empty()) {
    execution_cluster_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_execution_cluster(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.SystemMetadata)
}

inline void SystemMetadata::SharedCtor() {
execution_cluster_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  execution_cluster_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SystemMetadata::~SystemMetadata() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.SystemMetadata)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SystemMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  execution_cluster_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SystemMetadata::ArenaDtor(void* object) {
  SystemMetadata* _this = reinterpret_cast< SystemMetadata* >(object);
  (void)_this;
}
void SystemMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SystemMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SystemMetadata::InternalSwap(SystemMetadata* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata SystemMetadata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fexecution_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fexecution_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fexecution_2eproto[10]);
}

// ===================================================================

class ExecutionMetadata::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& scheduled_at(const ExecutionMetadata* msg);
  static const ::flyteidl::core::NodeExecutionIdentifier& parent_node_execution(const ExecutionMetadata* msg);
  static const ::flyteidl::core::WorkflowExecutionIdentifier& reference_execution(const ExecutionMetadata* msg);
  static const ::flyteidl::admin::SystemMetadata& system_metadata(const ExecutionMetadata* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ExecutionMetadata::_Internal::scheduled_at(const ExecutionMetadata* msg) {
  return *msg->scheduled_at_;
}
const ::flyteidl::core::NodeExecutionIdentifier&
ExecutionMetadata::_Internal::parent_node_execution(const ExecutionMetadata* msg) {
  return *msg->parent_node_execution_;
}
const ::flyteidl::core::WorkflowExecutionIdentifier&
ExecutionMetadata::_Internal::reference_execution(const ExecutionMetadata* msg) {
  return *msg->reference_execution_;
}
const ::flyteidl::admin::SystemMetadata&
ExecutionMetadata::_Internal::system_metadata(const ExecutionMetadata* msg) {
  return *msg->system_metadata_;
}
void ExecutionMetadata::clear_scheduled_at() {
  if (GetArenaForAllocation() == nullptr && scheduled_at_ != nullptr) {
    delete scheduled_at_;
  }
  scheduled_at_ = nullptr;
}
void ExecutionMetadata::clear_parent_node_execution() {
  if (GetArenaForAllocation() == nullptr && parent_node_execution_ != nullptr) {
    delete parent_node_execution_;
  }
  parent_node_execution_ = nullptr;
}
void ExecutionMetadata::clear_reference_execution() {
  if (GetArenaForAllocation() == nullptr && reference_execution_ != nullptr) {
    delete reference_execution_;
  }
  reference_execution_ = nullptr;
}
ExecutionMetadata::ExecutionMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.ExecutionMetadata)
}
ExecutionMetadata::ExecutionMetadata(const ExecutionMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  principal_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    principal_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_principal().empty()) {
    principal_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_principal(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_scheduled_at()) {
    scheduled_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.scheduled_at_);
  } else {
    scheduled_at_ = nullptr;
  }
  if (from._internal_has_parent_node_execution()) {
    parent_node_execution_ = new ::flyteidl::core::NodeExecutionIdentifier(*from.parent_node_execution_);
  } else {
    parent_node_execution_ = nullptr;
  }
  if (from._internal_has_reference_execution()) {
    reference_execution_ = new ::flyteidl::core::WorkflowExecutionIdentifier(*from.reference_execution_);
  } else {
    reference_execution_ = nullptr;
  }
  if (from._internal_has_system_metadata()) {
    system_metadata_ = new ::flyteidl::admin::SystemMetadata(*from.system_metadata_);
  } else {
    system_metadata_ = nullptr;
  }
  ::memcpy(&mode_, &from.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&nesting_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(nesting_));
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.ExecutionMetadata)
}

inline void ExecutionMetadata::SharedCtor() {
principal_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  principal_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&scheduled_at_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nesting_) -
    reinterpret_cast<char*>(&scheduled_at_)) + sizeof(nesting_));
}

ExecutionMetadata::~ExecutionMetadata() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.ExecutionMetadata)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExecutionMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  principal_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete scheduled_at_;
  if (this != internal_default_instance()) delete parent_node_execution_;
  if (this != internal_default_instance()) delete reference_execution_;
  if (this != internal_default_instance()) delete system_metadata_;
}

void ExecutionMetadata::ArenaDtor(void* object) {
  ExecutionMetadata* _this = reinterpret_cast< ExecutionMetadata* >(object);
  (void)_this;
}
void ExecutionMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExecutionMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExecutionMetadata::InternalSwap(ExecutionMetadata* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ExecutionMetadata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fexecution_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fexecution_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fexecution_2eproto[11]);
}

// ===================================================================

class NotificationList::_Internal {
 public:
};

void NotificationList::clear_notifications() {
  notifications_.Clear();
}
NotificationList::NotificationList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  notifications_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.NotificationList)
}
NotificationList::NotificationList(const NotificationList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      notifications_(from.notifications_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.NotificationList)
}

inline void NotificationList::SharedCtor() {
}

NotificationList::~NotificationList() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.NotificationList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NotificationList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NotificationList::ArenaDtor(void* object) {
  NotificationList* _this = reinterpret_cast< NotificationList* >(object);
  (void)_this;
}
void NotificationList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NotificationList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NotificationList::InternalSwap(NotificationList* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata NotificationList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fexecution_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fexecution_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fexecution_2eproto[12]);
}

// ===================================================================

class ExecutionSpec::_Internal {
 public:
  static const ::flyteidl::core::Identifier& launch_plan(const ExecutionSpec* msg);
  static const ::flyteidl::core::LiteralMap& inputs(const ExecutionSpec* msg);
  static const ::flyteidl::admin::ExecutionMetadata& metadata(const ExecutionSpec* msg);
  static const ::flyteidl::admin::NotificationList& notifications(const ExecutionSpec* msg);
  static const ::flyteidl::admin::Labels& labels(const ExecutionSpec* msg);
  static const ::flyteidl::admin::Annotations& annotations(const ExecutionSpec* msg);
  static const ::flyteidl::core::SecurityContext& security_context(const ExecutionSpec* msg);
  static const ::flyteidl::admin::AuthRole& auth_role(const ExecutionSpec* msg);
  static const ::flyteidl::core::QualityOfService& quality_of_service(const ExecutionSpec* msg);
  static const ::flyteidl::admin::RawOutputDataConfig& raw_output_data_config(const ExecutionSpec* msg);
  static const ::flyteidl::admin::ClusterAssignment& cluster_assignment(const ExecutionSpec* msg);
};

const ::flyteidl::core::Identifier&
ExecutionSpec::_Internal::launch_plan(const ExecutionSpec* msg) {
  return *msg->launch_plan_;
}
const ::flyteidl::core::LiteralMap&
ExecutionSpec::_Internal::inputs(const ExecutionSpec* msg) {
  return *msg->inputs_;
}
const ::flyteidl::admin::ExecutionMetadata&
ExecutionSpec::_Internal::metadata(const ExecutionSpec* msg) {
  return *msg->metadata_;
}
const ::flyteidl::admin::NotificationList&
ExecutionSpec::_Internal::notifications(const ExecutionSpec* msg) {
  return *msg->notification_overrides_.notifications_;
}
const ::flyteidl::admin::Labels&
ExecutionSpec::_Internal::labels(const ExecutionSpec* msg) {
  return *msg->labels_;
}
const ::flyteidl::admin::Annotations&
ExecutionSpec::_Internal::annotations(const ExecutionSpec* msg) {
  return *msg->annotations_;
}
const ::flyteidl::core::SecurityContext&
ExecutionSpec::_Internal::security_context(const ExecutionSpec* msg) {
  return *msg->security_context_;
}
const ::flyteidl::admin::AuthRole&
ExecutionSpec::_Internal::auth_role(const ExecutionSpec* msg) {
  return *msg->auth_role_;
}
const ::flyteidl::core::QualityOfService&
ExecutionSpec::_Internal::quality_of_service(const ExecutionSpec* msg) {
  return *msg->quality_of_service_;
}
const ::flyteidl::admin::RawOutputDataConfig&
ExecutionSpec::_Internal::raw_output_data_config(const ExecutionSpec* msg) {
  return *msg->raw_output_data_config_;
}
const ::flyteidl::admin::ClusterAssignment&
ExecutionSpec::_Internal::cluster_assignment(const ExecutionSpec* msg) {
  return *msg->cluster_assignment_;
}
void ExecutionSpec::clear_launch_plan() {
  if (GetArenaForAllocation() == nullptr && launch_plan_ != nullptr) {
    delete launch_plan_;
  }
  launch_plan_ = nullptr;
}
void ExecutionSpec::clear_inputs() {
  if (GetArenaForAllocation() == nullptr && inputs_ != nullptr) {
    delete inputs_;
  }
  inputs_ = nullptr;
}
void ExecutionSpec::set_allocated_notifications(::flyteidl::admin::NotificationList* notifications) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_notification_overrides();
  if (notifications) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::admin::NotificationList>::GetOwningArena(notifications);
    if (message_arena != submessage_arena) {
      notifications = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, notifications, submessage_arena);
    }
    set_has_notifications();
    notification_overrides_.notifications_ = notifications;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ExecutionSpec.notifications)
}
void ExecutionSpec::clear_labels() {
  if (GetArenaForAllocation() == nullptr && labels_ != nullptr) {
    delete labels_;
  }
  labels_ = nullptr;
}
void ExecutionSpec::clear_annotations() {
  if (GetArenaForAllocation() == nullptr && annotations_ != nullptr) {
    delete annotations_;
  }
  annotations_ = nullptr;
}
void ExecutionSpec::clear_security_context() {
  if (GetArenaForAllocation() == nullptr && security_context_ != nullptr) {
    delete security_context_;
  }
  security_context_ = nullptr;
}
void ExecutionSpec::clear_auth_role() {
  if (GetArenaForAllocation() == nullptr && auth_role_ != nullptr) {
    delete auth_role_;
  }
  auth_role_ = nullptr;
}
void ExecutionSpec::clear_quality_of_service() {
  if (GetArenaForAllocation() == nullptr && quality_of_service_ != nullptr) {
    delete quality_of_service_;
  }
  quality_of_service_ = nullptr;
}
void ExecutionSpec::clear_raw_output_data_config() {
  if (GetArenaForAllocation() == nullptr && raw_output_data_config_ != nullptr) {
    delete raw_output_data_config_;
  }
  raw_output_data_config_ = nullptr;
}
void ExecutionSpec::clear_cluster_assignment() {
  if (GetArenaForAllocation() == nullptr && cluster_assignment_ != nullptr) {
    delete cluster_assignment_;
  }
  cluster_assignment_ = nullptr;
}
ExecutionSpec::ExecutionSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.ExecutionSpec)
}
ExecutionSpec::ExecutionSpec(const ExecutionSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_launch_plan()) {
    launch_plan_ = new ::flyteidl::core::Identifier(*from.launch_plan_);
  } else {
    launch_plan_ = nullptr;
  }
  if (from._internal_has_inputs()) {
    inputs_ = new ::flyteidl::core::LiteralMap(*from.inputs_);
  } else {
    inputs_ = nullptr;
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::flyteidl::admin::ExecutionMetadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_labels()) {
    labels_ = new ::flyteidl::admin::Labels(*from.labels_);
  } else {
    labels_ = nullptr;
  }
  if (from._internal_has_annotations()) {
    annotations_ = new ::flyteidl::admin::Annotations(*from.annotations_);
  } else {
    annotations_ = nullptr;
  }
  if (from._internal_has_security_context()) {
    security_context_ = new ::flyteidl::core::SecurityContext(*from.security_context_);
  } else {
    security_context_ = nullptr;
  }
  if (from._internal_has_auth_role()) {
    auth_role_ = new ::flyteidl::admin::AuthRole(*from.auth_role_);
  } else {
    auth_role_ = nullptr;
  }
  if (from._internal_has_quality_of_service()) {
    quality_of_service_ = new ::flyteidl::core::QualityOfService(*from.quality_of_service_);
  } else {
    quality_of_service_ = nullptr;
  }
  if (from._internal_has_raw_output_data_config()) {
    raw_output_data_config_ = new ::flyteidl::admin::RawOutputDataConfig(*from.raw_output_data_config_);
  } else {
    raw_output_data_config_ = nullptr;
  }
  if (from._internal_has_cluster_assignment()) {
    cluster_assignment_ = new ::flyteidl::admin::ClusterAssignment(*from.cluster_assignment_);
  } else {
    cluster_assignment_ = nullptr;
  }
  max_parallelism_ = from.max_parallelism_;
  clear_has_notification_overrides();
  switch (from.notification_overrides_case()) {
    case kNotifications: {
      _internal_mutable_notifications()->::flyteidl::admin::NotificationList::MergeFrom(from._internal_notifications());
      break;
    }
    case kDisableAll: {
      _internal_set_disable_all(from._internal_disable_all());
      break;
    }
    case NOTIFICATION_OVERRIDES_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.ExecutionSpec)
}

inline void ExecutionSpec::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&launch_plan_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_parallelism_) -
    reinterpret_cast<char*>(&launch_plan_)) + sizeof(max_parallelism_));
clear_has_notification_overrides();
}

ExecutionSpec::~ExecutionSpec() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.ExecutionSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExecutionSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete launch_plan_;
  if (this != internal_default_instance()) delete inputs_;
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete labels_;
  if (this != internal_default_instance()) delete annotations_;
  if (this != internal_default_instance()) delete security_context_;
  if (this != internal_default_instance()) delete auth_role_;
  if (this != internal_default_instance()) delete quality_of_service_;
  if (this != internal_default_instance()) delete raw_output_data_config_;
  if (this != internal_default_instance()) delete cluster_assignment_;
  if (has_notification_overrides()) {
    clear_notification_overrides();
  }
}

void ExecutionSpec::ArenaDtor(void* object) {
  ExecutionSpec* _this = reinterpret_cast< ExecutionSpec* >(object);
  (void)_this;
}
void ExecutionSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExecutionSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExecutionSpec::clear_notification_overrides() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.admin.ExecutionSpec)
  switch (notification_overrides_case()) {
    case kNotifications: {
      if (GetArenaForAllocation() == nullptr) {
        delete notification_overrides_.notifications_;
      }
      break;
    }
    case kDisableAll: {
      // No need to clear
      break;
    }
    case NOTIFICATION_OVERRIDES_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = NOTIFICATION_OVERRIDES_NOT_SET;
}


void ExecutionSpec::InternalSwap(ExecutionSpec* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ExecutionSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fexecution_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fexecution_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fexecution_2eproto[13]);
}

// ===================================================================

class ExecutionTerminateRequest::_Internal {
 public:
  static const ::flyteidl::core::WorkflowExecutionIdentifier& id(const ExecutionTerminateRequest* msg);
};

const ::flyteidl::core::WorkflowExecutionIdentifier&
ExecutionTerminateRequest::_Internal::id(const ExecutionTerminateRequest* msg) {
  return *msg->id_;
}
void ExecutionTerminateRequest::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
ExecutionTerminateRequest::ExecutionTerminateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.ExecutionTerminateRequest)
}
ExecutionTerminateRequest::ExecutionTerminateRequest(const ExecutionTerminateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cause_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cause_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cause().empty()) {
    cause_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cause(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_id()) {
    id_ = new ::flyteidl::core::WorkflowExecutionIdentifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.ExecutionTerminateRequest)
}

inline void ExecutionTerminateRequest::SharedCtor() {
cause_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cause_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
id_ = nullptr;
}

ExecutionTerminateRequest::~ExecutionTerminateRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.ExecutionTerminateRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExecutionTerminateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  cause_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
}

void ExecutionTerminateRequest::ArenaDtor(void* object) {
  ExecutionTerminateRequest* _this = reinterpret_cast< ExecutionTerminateRequest* >(object);
  (void)_this;
}
void ExecutionTerminateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExecutionTerminateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExecutionTerminateRequest::InternalSwap(ExecutionTerminateRequest* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ExecutionTerminateRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fexecution_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fexecution_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fexecution_2eproto[14]);
}

// ===================================================================

class ExecutionTerminateResponse::_Internal {
 public:
};

ExecutionTerminateResponse::ExecutionTerminateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.ExecutionTerminateResponse)
}
ExecutionTerminateResponse::ExecutionTerminateResponse(const ExecutionTerminateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.ExecutionTerminateResponse)
}



::PROTOBUF_NAMESPACE_ID::Metadata ExecutionTerminateResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fexecution_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fexecution_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fexecution_2eproto[15]);
}

// ===================================================================

class WorkflowExecutionGetDataRequest::_Internal {
 public:
  static const ::flyteidl::core::WorkflowExecutionIdentifier& id(const WorkflowExecutionGetDataRequest* msg);
};

const ::flyteidl::core::WorkflowExecutionIdentifier&
WorkflowExecutionGetDataRequest::_Internal::id(const WorkflowExecutionGetDataRequest* msg) {
  return *msg->id_;
}
void WorkflowExecutionGetDataRequest::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
WorkflowExecutionGetDataRequest::WorkflowExecutionGetDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.WorkflowExecutionGetDataRequest)
}
WorkflowExecutionGetDataRequest::WorkflowExecutionGetDataRequest(const WorkflowExecutionGetDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::flyteidl::core::WorkflowExecutionIdentifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.WorkflowExecutionGetDataRequest)
}

inline void WorkflowExecutionGetDataRequest::SharedCtor() {
id_ = nullptr;
}

WorkflowExecutionGetDataRequest::~WorkflowExecutionGetDataRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.WorkflowExecutionGetDataRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WorkflowExecutionGetDataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
}

void WorkflowExecutionGetDataRequest::ArenaDtor(void* object) {
  WorkflowExecutionGetDataRequest* _this = reinterpret_cast< WorkflowExecutionGetDataRequest* >(object);
  (void)_this;
}
void WorkflowExecutionGetDataRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkflowExecutionGetDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WorkflowExecutionGetDataRequest::InternalSwap(WorkflowExecutionGetDataRequest* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata WorkflowExecutionGetDataRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fexecution_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fexecution_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fexecution_2eproto[16]);
}

// ===================================================================

class WorkflowExecutionGetDataResponse::_Internal {
 public:
  static const ::flyteidl::admin::UrlBlob& outputs(const WorkflowExecutionGetDataResponse* msg);
  static const ::flyteidl::admin::UrlBlob& inputs(const WorkflowExecutionGetDataResponse* msg);
  static const ::flyteidl::core::LiteralMap& full_inputs(const WorkflowExecutionGetDataResponse* msg);
  static const ::flyteidl::core::LiteralMap& full_outputs(const WorkflowExecutionGetDataResponse* msg);
};

const ::flyteidl::admin::UrlBlob&
WorkflowExecutionGetDataResponse::_Internal::outputs(const WorkflowExecutionGetDataResponse* msg) {
  return *msg->outputs_;
}
const ::flyteidl::admin::UrlBlob&
WorkflowExecutionGetDataResponse::_Internal::inputs(const WorkflowExecutionGetDataResponse* msg) {
  return *msg->inputs_;
}
const ::flyteidl::core::LiteralMap&
WorkflowExecutionGetDataResponse::_Internal::full_inputs(const WorkflowExecutionGetDataResponse* msg) {
  return *msg->full_inputs_;
}
const ::flyteidl::core::LiteralMap&
WorkflowExecutionGetDataResponse::_Internal::full_outputs(const WorkflowExecutionGetDataResponse* msg) {
  return *msg->full_outputs_;
}
void WorkflowExecutionGetDataResponse::clear_outputs() {
  if (GetArenaForAllocation() == nullptr && outputs_ != nullptr) {
    delete outputs_;
  }
  outputs_ = nullptr;
}
void WorkflowExecutionGetDataResponse::clear_inputs() {
  if (GetArenaForAllocation() == nullptr && inputs_ != nullptr) {
    delete inputs_;
  }
  inputs_ = nullptr;
}
void WorkflowExecutionGetDataResponse::clear_full_inputs() {
  if (GetArenaForAllocation() == nullptr && full_inputs_ != nullptr) {
    delete full_inputs_;
  }
  full_inputs_ = nullptr;
}
void WorkflowExecutionGetDataResponse::clear_full_outputs() {
  if (GetArenaForAllocation() == nullptr && full_outputs_ != nullptr) {
    delete full_outputs_;
  }
  full_outputs_ = nullptr;
}
WorkflowExecutionGetDataResponse::WorkflowExecutionGetDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.WorkflowExecutionGetDataResponse)
}
WorkflowExecutionGetDataResponse::WorkflowExecutionGetDataResponse(const WorkflowExecutionGetDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_outputs()) {
    outputs_ = new ::flyteidl::admin::UrlBlob(*from.outputs_);
  } else {
    outputs_ = nullptr;
  }
  if (from._internal_has_inputs()) {
    inputs_ = new ::flyteidl::admin::UrlBlob(*from.inputs_);
  } else {
    inputs_ = nullptr;
  }
  if (from._internal_has_full_inputs()) {
    full_inputs_ = new ::flyteidl::core::LiteralMap(*from.full_inputs_);
  } else {
    full_inputs_ = nullptr;
  }
  if (from._internal_has_full_outputs()) {
    full_outputs_ = new ::flyteidl::core::LiteralMap(*from.full_outputs_);
  } else {
    full_outputs_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.WorkflowExecutionGetDataResponse)
}

inline void WorkflowExecutionGetDataResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&outputs_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&full_outputs_) -
    reinterpret_cast<char*>(&outputs_)) + sizeof(full_outputs_));
}

WorkflowExecutionGetDataResponse::~WorkflowExecutionGetDataResponse() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.WorkflowExecutionGetDataResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WorkflowExecutionGetDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete outputs_;
  if (this != internal_default_instance()) delete inputs_;
  if (this != internal_default_instance()) delete full_inputs_;
  if (this != internal_default_instance()) delete full_outputs_;
}

void WorkflowExecutionGetDataResponse::ArenaDtor(void* object) {
  WorkflowExecutionGetDataResponse* _this = reinterpret_cast< WorkflowExecutionGetDataResponse* >(object);
  (void)_this;
}
void WorkflowExecutionGetDataResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkflowExecutionGetDataResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WorkflowExecutionGetDataResponse::InternalSwap(WorkflowExecutionGetDataResponse* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata WorkflowExecutionGetDataResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fexecution_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fexecution_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fexecution_2eproto[17]);
}

// ===================================================================

class ExecutionUpdateRequest::_Internal {
 public:
  static const ::flyteidl::core::WorkflowExecutionIdentifier& id(const ExecutionUpdateRequest* msg);
};

const ::flyteidl::core::WorkflowExecutionIdentifier&
ExecutionUpdateRequest::_Internal::id(const ExecutionUpdateRequest* msg) {
  return *msg->id_;
}
void ExecutionUpdateRequest::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
ExecutionUpdateRequest::ExecutionUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.ExecutionUpdateRequest)
}
ExecutionUpdateRequest::ExecutionUpdateRequest(const ExecutionUpdateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::flyteidl::core::WorkflowExecutionIdentifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.ExecutionUpdateRequest)
}

inline void ExecutionUpdateRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&id_)) + sizeof(state_));
}

ExecutionUpdateRequest::~ExecutionUpdateRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.ExecutionUpdateRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExecutionUpdateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
}

void ExecutionUpdateRequest::ArenaDtor(void* object) {
  ExecutionUpdateRequest* _this = reinterpret_cast< ExecutionUpdateRequest* >(object);
  (void)_this;
}
void ExecutionUpdateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExecutionUpdateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExecutionUpdateRequest::InternalSwap(ExecutionUpdateRequest* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ExecutionUpdateRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fexecution_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fexecution_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fexecution_2eproto[18]);
}

// ===================================================================

class ExecutionStateChangeDetails::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& occurred_at(const ExecutionStateChangeDetails* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ExecutionStateChangeDetails::_Internal::occurred_at(const ExecutionStateChangeDetails* msg) {
  return *msg->occurred_at_;
}
void ExecutionStateChangeDetails::clear_occurred_at() {
  if (GetArenaForAllocation() == nullptr && occurred_at_ != nullptr) {
    delete occurred_at_;
  }
  occurred_at_ = nullptr;
}
ExecutionStateChangeDetails::ExecutionStateChangeDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.ExecutionStateChangeDetails)
}
ExecutionStateChangeDetails::ExecutionStateChangeDetails(const ExecutionStateChangeDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  principal_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    principal_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_principal().empty()) {
    principal_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_principal(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_occurred_at()) {
    occurred_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.occurred_at_);
  } else {
    occurred_at_ = nullptr;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.ExecutionStateChangeDetails)
}

inline void ExecutionStateChangeDetails::SharedCtor() {
principal_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  principal_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&occurred_at_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&occurred_at_)) + sizeof(state_));
}

ExecutionStateChangeDetails::~ExecutionStateChangeDetails() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.ExecutionStateChangeDetails)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExecutionStateChangeDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  principal_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete occurred_at_;
}

void ExecutionStateChangeDetails::ArenaDtor(void* object) {
  ExecutionStateChangeDetails* _this = reinterpret_cast< ExecutionStateChangeDetails* >(object);
  (void)_this;
}
void ExecutionStateChangeDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExecutionStateChangeDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExecutionStateChangeDetails::InternalSwap(ExecutionStateChangeDetails* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ExecutionStateChangeDetails::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fexecution_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fexecution_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fexecution_2eproto[19]);
}

// ===================================================================

class ExecutionUpdateResponse::_Internal {
 public:
};

ExecutionUpdateResponse::ExecutionUpdateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.ExecutionUpdateResponse)
}
ExecutionUpdateResponse::ExecutionUpdateResponse(const ExecutionUpdateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.ExecutionUpdateResponse)
}



::PROTOBUF_NAMESPACE_ID::Metadata ExecutionUpdateResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fexecution_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fexecution_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fexecution_2eproto[20]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace admin
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::flyteidl::admin::ExecutionCreateRequest* Arena::CreateMaybeMessage< ::flyteidl::admin::ExecutionCreateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::ExecutionCreateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::ExecutionRelaunchRequest* Arena::CreateMaybeMessage< ::flyteidl::admin::ExecutionRelaunchRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::ExecutionRelaunchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::ExecutionRecoverRequest* Arena::CreateMaybeMessage< ::flyteidl::admin::ExecutionRecoverRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::ExecutionRecoverRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::ExecutionCreateResponse* Arena::CreateMaybeMessage< ::flyteidl::admin::ExecutionCreateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::ExecutionCreateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::WorkflowExecutionGetRequest* Arena::CreateMaybeMessage< ::flyteidl::admin::WorkflowExecutionGetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::WorkflowExecutionGetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::Execution* Arena::CreateMaybeMessage< ::flyteidl::admin::Execution >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::Execution >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::ExecutionList* Arena::CreateMaybeMessage< ::flyteidl::admin::ExecutionList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::ExecutionList >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::LiteralMapBlob* Arena::CreateMaybeMessage< ::flyteidl::admin::LiteralMapBlob >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::LiteralMapBlob >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::AbortMetadata* Arena::CreateMaybeMessage< ::flyteidl::admin::AbortMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::AbortMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::ExecutionClosure* Arena::CreateMaybeMessage< ::flyteidl::admin::ExecutionClosure >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::ExecutionClosure >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::SystemMetadata* Arena::CreateMaybeMessage< ::flyteidl::admin::SystemMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::SystemMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::ExecutionMetadata* Arena::CreateMaybeMessage< ::flyteidl::admin::ExecutionMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::ExecutionMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::NotificationList* Arena::CreateMaybeMessage< ::flyteidl::admin::NotificationList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::NotificationList >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::ExecutionSpec* Arena::CreateMaybeMessage< ::flyteidl::admin::ExecutionSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::ExecutionSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::ExecutionTerminateRequest* Arena::CreateMaybeMessage< ::flyteidl::admin::ExecutionTerminateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::ExecutionTerminateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::ExecutionTerminateResponse* Arena::CreateMaybeMessage< ::flyteidl::admin::ExecutionTerminateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::ExecutionTerminateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::WorkflowExecutionGetDataRequest* Arena::CreateMaybeMessage< ::flyteidl::admin::WorkflowExecutionGetDataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::WorkflowExecutionGetDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::WorkflowExecutionGetDataResponse* Arena::CreateMaybeMessage< ::flyteidl::admin::WorkflowExecutionGetDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::WorkflowExecutionGetDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::ExecutionUpdateRequest* Arena::CreateMaybeMessage< ::flyteidl::admin::ExecutionUpdateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::ExecutionUpdateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::ExecutionStateChangeDetails* Arena::CreateMaybeMessage< ::flyteidl::admin::ExecutionStateChangeDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::ExecutionStateChangeDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::ExecutionUpdateResponse* Arena::CreateMaybeMessage< ::flyteidl::admin::ExecutionUpdateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::ExecutionUpdateResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
