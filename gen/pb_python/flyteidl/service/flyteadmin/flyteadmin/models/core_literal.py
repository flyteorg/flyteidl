# coding: utf-8

"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from flyteadmin.models.core_literal_collection import CoreLiteralCollection  # noqa: F401,E501
from flyteadmin.models.core_literal_map import CoreLiteralMap  # noqa: F401,E501
from flyteadmin.models.core_scalar import CoreScalar  # noqa: F401,E501


class CoreLiteral(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'scalar': 'CoreScalar',
        'collection': 'CoreLiteralCollection',
        'map': 'CoreLiteralMap',
        'hash': 'str'
    }

    attribute_map = {
        'scalar': 'scalar',
        'collection': 'collection',
        'map': 'map',
        'hash': 'hash'
    }

    def __init__(self, scalar=None, collection=None, map=None, hash=None):  # noqa: E501
        """CoreLiteral - a model defined in Swagger"""  # noqa: E501

        self._scalar = None
        self._collection = None
        self._map = None
        self._hash = None
        self.discriminator = None

        if scalar is not None:
            self.scalar = scalar
        if collection is not None:
            self.collection = collection
        if map is not None:
            self.map = map
        if hash is not None:
            self.hash = hash

    @property
    def scalar(self):
        """Gets the scalar of this CoreLiteral.  # noqa: E501

        A simple value.  # noqa: E501

        :return: The scalar of this CoreLiteral.  # noqa: E501
        :rtype: CoreScalar
        """
        return self._scalar

    @scalar.setter
    def scalar(self, scalar):
        """Sets the scalar of this CoreLiteral.

        A simple value.  # noqa: E501

        :param scalar: The scalar of this CoreLiteral.  # noqa: E501
        :type: CoreScalar
        """

        self._scalar = scalar

    @property
    def collection(self):
        """Gets the collection of this CoreLiteral.  # noqa: E501

        A collection of literals to allow nesting.  # noqa: E501

        :return: The collection of this CoreLiteral.  # noqa: E501
        :rtype: CoreLiteralCollection
        """
        return self._collection

    @collection.setter
    def collection(self, collection):
        """Sets the collection of this CoreLiteral.

        A collection of literals to allow nesting.  # noqa: E501

        :param collection: The collection of this CoreLiteral.  # noqa: E501
        :type: CoreLiteralCollection
        """

        self._collection = collection

    @property
    def map(self):
        """Gets the map of this CoreLiteral.  # noqa: E501

        A map of strings to literals.  # noqa: E501

        :return: The map of this CoreLiteral.  # noqa: E501
        :rtype: CoreLiteralMap
        """
        return self._map

    @map.setter
    def map(self, map):
        """Sets the map of this CoreLiteral.

        A map of strings to literals.  # noqa: E501

        :param map: The map of this CoreLiteral.  # noqa: E501
        :type: CoreLiteralMap
        """

        self._map = map

    @property
    def hash(self):
        """Gets the hash of this CoreLiteral.  # noqa: E501


        :return: The hash of this CoreLiteral.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this CoreLiteral.


        :param hash: The hash of this CoreLiteral.  # noqa: E501
        :type: str
        """

        self._hash = hash

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CoreLiteral, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CoreLiteral):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
