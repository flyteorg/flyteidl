// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: flyteidl/core/literals.proto

package core

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _literals_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Primitive with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Primitive) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Value.(type) {

	case *Primitive_Integer:
		// no validation rules for Integer

	case *Primitive_FloatValue:
		// no validation rules for FloatValue

	case *Primitive_StringValue:
		// no validation rules for StringValue

	case *Primitive_Boolean:
		// no validation rules for Boolean

	case *Primitive_Datetime:

		if v, ok := interface{}(m.GetDatetime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PrimitiveValidationError{
					field:  "Datetime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Primitive_Duration:

		if v, ok := interface{}(m.GetDuration()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PrimitiveValidationError{
					field:  "Duration",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// PrimitiveValidationError is the validation error returned by
// Primitive.Validate if the designated constraints aren't met.
type PrimitiveValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrimitiveValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrimitiveValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrimitiveValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrimitiveValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrimitiveValidationError) ErrorName() string { return "PrimitiveValidationError" }

// Error satisfies the builtin error interface
func (e PrimitiveValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrimitive.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrimitiveValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrimitiveValidationError{}

// Validate checks the field values on Void with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Void) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// VoidValidationError is the validation error returned by Void.Validate if the
// designated constraints aren't met.
type VoidValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VoidValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VoidValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VoidValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VoidValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VoidValidationError) ErrorName() string { return "VoidValidationError" }

// Error satisfies the builtin error interface
func (e VoidValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVoid.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VoidValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VoidValidationError{}

// Validate checks the field values on Blob with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Blob) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BlobValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Uri

	return nil
}

// BlobValidationError is the validation error returned by Blob.Validate if the
// designated constraints aren't met.
type BlobValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlobValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlobValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlobValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlobValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlobValidationError) ErrorName() string { return "BlobValidationError" }

// Error satisfies the builtin error interface
func (e BlobValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlob.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlobValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlobValidationError{}

// Validate checks the field values on BlobMetadata with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *BlobMetadata) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BlobMetadataValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// BlobMetadataValidationError is the validation error returned by
// BlobMetadata.Validate if the designated constraints aren't met.
type BlobMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlobMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlobMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlobMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlobMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlobMetadataValidationError) ErrorName() string { return "BlobMetadataValidationError" }

// Error satisfies the builtin error interface
func (e BlobMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlobMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlobMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlobMetadataValidationError{}

// Validate checks the field values on Binary with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Binary) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Value

	// no validation rules for Tag

	return nil
}

// BinaryValidationError is the validation error returned by Binary.Validate if
// the designated constraints aren't met.
type BinaryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BinaryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BinaryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BinaryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BinaryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BinaryValidationError) ErrorName() string { return "BinaryValidationError" }

// Error satisfies the builtin error interface
func (e BinaryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBinary.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BinaryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BinaryValidationError{}

// Validate checks the field values on Schema with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Schema) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Uri

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SchemaValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SchemaValidationError is the validation error returned by Schema.Validate if
// the designated constraints aren't met.
type SchemaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SchemaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SchemaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SchemaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SchemaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SchemaValidationError) ErrorName() string { return "SchemaValidationError" }

// Error satisfies the builtin error interface
func (e SchemaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSchema.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SchemaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SchemaValidationError{}

// Validate checks the field values on Union with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Union) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UnionValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UnionValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UnionValidationError is the validation error returned by Union.Validate if
// the designated constraints aren't met.
type UnionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnionValidationError) ErrorName() string { return "UnionValidationError" }

// Error satisfies the builtin error interface
func (e UnionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnionValidationError{}

// Validate checks the field values on StructuredDatasetMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *StructuredDatasetMetadata) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetStructuredDatasetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StructuredDatasetMetadataValidationError{
				field:  "StructuredDatasetType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// StructuredDatasetMetadataValidationError is the validation error returned by
// StructuredDatasetMetadata.Validate if the designated constraints aren't met.
type StructuredDatasetMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StructuredDatasetMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StructuredDatasetMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StructuredDatasetMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StructuredDatasetMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StructuredDatasetMetadataValidationError) ErrorName() string {
	return "StructuredDatasetMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e StructuredDatasetMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStructuredDatasetMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StructuredDatasetMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StructuredDatasetMetadataValidationError{}

// Validate checks the field values on StructuredDataset with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *StructuredDataset) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Uri

	if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StructuredDatasetValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// StructuredDatasetValidationError is the validation error returned by
// StructuredDataset.Validate if the designated constraints aren't met.
type StructuredDatasetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StructuredDatasetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StructuredDatasetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StructuredDatasetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StructuredDatasetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StructuredDatasetValidationError) ErrorName() string {
	return "StructuredDatasetValidationError"
}

// Error satisfies the builtin error interface
func (e StructuredDatasetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStructuredDataset.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StructuredDatasetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StructuredDatasetValidationError{}

// Validate checks the field values on Scalar with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Scalar) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Value.(type) {

	case *Scalar_Primitive:

		if v, ok := interface{}(m.GetPrimitive()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ScalarValidationError{
					field:  "Primitive",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Scalar_Blob:

		if v, ok := interface{}(m.GetBlob()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ScalarValidationError{
					field:  "Blob",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Scalar_Binary:

		if v, ok := interface{}(m.GetBinary()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ScalarValidationError{
					field:  "Binary",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Scalar_Schema:

		if v, ok := interface{}(m.GetSchema()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ScalarValidationError{
					field:  "Schema",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Scalar_NoneType:

		if v, ok := interface{}(m.GetNoneType()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ScalarValidationError{
					field:  "NoneType",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Scalar_Error:

		if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ScalarValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Scalar_Generic:

		if v, ok := interface{}(m.GetGeneric()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ScalarValidationError{
					field:  "Generic",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Scalar_StructuredDataset:

		if v, ok := interface{}(m.GetStructuredDataset()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ScalarValidationError{
					field:  "StructuredDataset",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Scalar_Union:

		if v, ok := interface{}(m.GetUnion()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ScalarValidationError{
					field:  "Union",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ScalarValidationError is the validation error returned by Scalar.Validate if
// the designated constraints aren't met.
type ScalarValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScalarValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScalarValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScalarValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScalarValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScalarValidationError) ErrorName() string { return "ScalarValidationError" }

// Error satisfies the builtin error interface
func (e ScalarValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScalar.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScalarValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScalarValidationError{}

// Validate checks the field values on Literal with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Literal) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Hash

	switch m.Value.(type) {

	case *Literal_Scalar:

		if v, ok := interface{}(m.GetScalar()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LiteralValidationError{
					field:  "Scalar",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Literal_Collection:

		if v, ok := interface{}(m.GetCollection()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LiteralValidationError{
					field:  "Collection",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Literal_Map:

		if v, ok := interface{}(m.GetMap()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LiteralValidationError{
					field:  "Map",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// LiteralValidationError is the validation error returned by Literal.Validate
// if the designated constraints aren't met.
type LiteralValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LiteralValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LiteralValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LiteralValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LiteralValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LiteralValidationError) ErrorName() string { return "LiteralValidationError" }

// Error satisfies the builtin error interface
func (e LiteralValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLiteral.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LiteralValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LiteralValidationError{}

// Validate checks the field values on LiteralCollection with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *LiteralCollection) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetLiterals() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LiteralCollectionValidationError{
					field:  fmt.Sprintf("Literals[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// LiteralCollectionValidationError is the validation error returned by
// LiteralCollection.Validate if the designated constraints aren't met.
type LiteralCollectionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LiteralCollectionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LiteralCollectionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LiteralCollectionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LiteralCollectionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LiteralCollectionValidationError) ErrorName() string {
	return "LiteralCollectionValidationError"
}

// Error satisfies the builtin error interface
func (e LiteralCollectionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLiteralCollection.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LiteralCollectionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LiteralCollectionValidationError{}

// Validate checks the field values on LiteralMap with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *LiteralMap) Validate() error {
	if m == nil {
		return nil
	}

	for key, val := range m.GetLiterals() {
		_ = val

		// no validation rules for Literals[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LiteralMapValidationError{
					field:  fmt.Sprintf("Literals[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// LiteralMapValidationError is the validation error returned by
// LiteralMap.Validate if the designated constraints aren't met.
type LiteralMapValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LiteralMapValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LiteralMapValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LiteralMapValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LiteralMapValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LiteralMapValidationError) ErrorName() string { return "LiteralMapValidationError" }

// Error satisfies the builtin error interface
func (e LiteralMapValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLiteralMap.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LiteralMapValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LiteralMapValidationError{}

// Validate checks the field values on BindingDataCollection with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BindingDataCollection) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetBindings() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BindingDataCollectionValidationError{
					field:  fmt.Sprintf("Bindings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// BindingDataCollectionValidationError is the validation error returned by
// BindingDataCollection.Validate if the designated constraints aren't met.
type BindingDataCollectionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BindingDataCollectionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BindingDataCollectionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BindingDataCollectionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BindingDataCollectionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BindingDataCollectionValidationError) ErrorName() string {
	return "BindingDataCollectionValidationError"
}

// Error satisfies the builtin error interface
func (e BindingDataCollectionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBindingDataCollection.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BindingDataCollectionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BindingDataCollectionValidationError{}

// Validate checks the field values on BindingDataMap with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *BindingDataMap) Validate() error {
	if m == nil {
		return nil
	}

	for key, val := range m.GetBindings() {
		_ = val

		// no validation rules for Bindings[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BindingDataMapValidationError{
					field:  fmt.Sprintf("Bindings[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// BindingDataMapValidationError is the validation error returned by
// BindingDataMap.Validate if the designated constraints aren't met.
type BindingDataMapValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BindingDataMapValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BindingDataMapValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BindingDataMapValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BindingDataMapValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BindingDataMapValidationError) ErrorName() string { return "BindingDataMapValidationError" }

// Error satisfies the builtin error interface
func (e BindingDataMapValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBindingDataMap.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BindingDataMapValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BindingDataMapValidationError{}

// Validate checks the field values on UnionInfo with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *UnionInfo) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetTargetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UnionInfoValidationError{
				field:  "TargetType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UnionInfoValidationError is the validation error returned by
// UnionInfo.Validate if the designated constraints aren't met.
type UnionInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnionInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnionInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnionInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnionInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnionInfoValidationError) ErrorName() string { return "UnionInfoValidationError" }

// Error satisfies the builtin error interface
func (e UnionInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnionInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnionInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnionInfoValidationError{}

// Validate checks the field values on BindingData with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *BindingData) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetUnion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BindingDataValidationError{
				field:  "Union",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch m.Value.(type) {

	case *BindingData_Scalar:

		if v, ok := interface{}(m.GetScalar()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BindingDataValidationError{
					field:  "Scalar",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *BindingData_Collection:

		if v, ok := interface{}(m.GetCollection()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BindingDataValidationError{
					field:  "Collection",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *BindingData_Promise:

		if v, ok := interface{}(m.GetPromise()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BindingDataValidationError{
					field:  "Promise",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *BindingData_Map:

		if v, ok := interface{}(m.GetMap()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BindingDataValidationError{
					field:  "Map",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// BindingDataValidationError is the validation error returned by
// BindingData.Validate if the designated constraints aren't met.
type BindingDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BindingDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BindingDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BindingDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BindingDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BindingDataValidationError) ErrorName() string { return "BindingDataValidationError" }

// Error satisfies the builtin error interface
func (e BindingDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBindingData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BindingDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BindingDataValidationError{}

// Validate checks the field values on Binding with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Binding) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Var

	if v, ok := interface{}(m.GetBinding()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BindingValidationError{
				field:  "Binding",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// BindingValidationError is the validation error returned by Binding.Validate
// if the designated constraints aren't met.
type BindingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BindingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BindingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BindingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BindingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BindingValidationError) ErrorName() string { return "BindingValidationError" }

// Error satisfies the builtin error interface
func (e BindingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBinding.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BindingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BindingValidationError{}

// Validate checks the field values on KeyValuePair with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *KeyValuePair) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Key

	// no validation rules for Value

	return nil
}

// KeyValuePairValidationError is the validation error returned by
// KeyValuePair.Validate if the designated constraints aren't met.
type KeyValuePairValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KeyValuePairValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KeyValuePairValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KeyValuePairValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KeyValuePairValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KeyValuePairValidationError) ErrorName() string { return "KeyValuePairValidationError" }

// Error satisfies the builtin error interface
func (e KeyValuePairValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKeyValuePair.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KeyValuePairValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KeyValuePairValidationError{}

// Validate checks the field values on RetryStrategy with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RetryStrategy) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Retries

	return nil
}

// RetryStrategyValidationError is the validation error returned by
// RetryStrategy.Validate if the designated constraints aren't met.
type RetryStrategyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetryStrategyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetryStrategyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetryStrategyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetryStrategyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetryStrategyValidationError) ErrorName() string { return "RetryStrategyValidationError" }

// Error satisfies the builtin error interface
func (e RetryStrategyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetryStrategy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetryStrategyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetryStrategyValidationError{}
