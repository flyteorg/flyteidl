// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/project.proto

#ifndef PROTOBUF_flyteidl_2fadmin_2fproject_2eproto__INCLUDED
#define PROTOBUF_flyteidl_2fadmin_2fproject_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_flyteidl_2fadmin_2fproject_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsDomainImpl();
void InitDefaultsDomain();
void InitDefaultsProjectImpl();
void InitDefaultsProject();
void InitDefaultsProjectsImpl();
void InitDefaultsProjects();
void InitDefaultsProjectListRequestImpl();
void InitDefaultsProjectListRequest();
void InitDefaultsProjectRegisterRequestImpl();
void InitDefaultsProjectRegisterRequest();
void InitDefaultsProjectRegisterResponseImpl();
void InitDefaultsProjectRegisterResponse();
inline void InitDefaults() {
  InitDefaultsDomain();
  InitDefaultsProject();
  InitDefaultsProjects();
  InitDefaultsProjectListRequest();
  InitDefaultsProjectRegisterRequest();
  InitDefaultsProjectRegisterResponse();
}
}  // namespace protobuf_flyteidl_2fadmin_2fproject_2eproto
namespace flyteidl {
namespace admin {
class Domain;
class DomainDefaultTypeInternal;
extern DomainDefaultTypeInternal _Domain_default_instance_;
class Project;
class ProjectDefaultTypeInternal;
extern ProjectDefaultTypeInternal _Project_default_instance_;
class ProjectListRequest;
class ProjectListRequestDefaultTypeInternal;
extern ProjectListRequestDefaultTypeInternal _ProjectListRequest_default_instance_;
class ProjectRegisterRequest;
class ProjectRegisterRequestDefaultTypeInternal;
extern ProjectRegisterRequestDefaultTypeInternal _ProjectRegisterRequest_default_instance_;
class ProjectRegisterResponse;
class ProjectRegisterResponseDefaultTypeInternal;
extern ProjectRegisterResponseDefaultTypeInternal _ProjectRegisterResponse_default_instance_;
class Projects;
class ProjectsDefaultTypeInternal;
extern ProjectsDefaultTypeInternal _Projects_default_instance_;
}  // namespace admin
}  // namespace flyteidl
namespace flyteidl {
namespace admin {

// ===================================================================

class Domain : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.Domain) */ {
 public:
  Domain();
  virtual ~Domain();

  Domain(const Domain& from);

  inline Domain& operator=(const Domain& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Domain(Domain&& from) noexcept
    : Domain() {
    *this = ::std::move(from);
  }

  inline Domain& operator=(Domain&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Domain& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Domain* internal_default_instance() {
    return reinterpret_cast<const Domain*>(
               &_Domain_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Domain* other);
  friend void swap(Domain& a, Domain& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Domain* New() const PROTOBUF_FINAL { return New(NULL); }

  Domain* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Domain& from);
  void MergeFrom(const Domain& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Domain* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.Domain)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct ::protobuf_flyteidl_2fadmin_2fproject_2eproto::TableStruct;
  friend void ::protobuf_flyteidl_2fadmin_2fproject_2eproto::InitDefaultsDomainImpl();
};
// -------------------------------------------------------------------

class Project : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.Project) */ {
 public:
  Project();
  virtual ~Project();

  Project(const Project& from);

  inline Project& operator=(const Project& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Project(Project&& from) noexcept
    : Project() {
    *this = ::std::move(from);
  }

  inline Project& operator=(Project&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Project& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Project* internal_default_instance() {
    return reinterpret_cast<const Project*>(
               &_Project_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Project* other);
  friend void swap(Project& a, Project& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Project* New() const PROTOBUF_FINAL { return New(NULL); }

  Project* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Project& from);
  void MergeFrom(const Project& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Project* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .flyteidl.admin.Domain domains = 3;
  int domains_size() const;
  void clear_domains();
  static const int kDomainsFieldNumber = 3;
  const ::flyteidl::admin::Domain& domains(int index) const;
  ::flyteidl::admin::Domain* mutable_domains(int index);
  ::flyteidl::admin::Domain* add_domains();
  ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::Domain >*
      mutable_domains();
  const ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::Domain >&
      domains() const;

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string description = 4;
  void clear_description();
  static const int kDescriptionFieldNumber = 4;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.Project)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::Domain > domains_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  mutable int _cached_size_;
  friend struct ::protobuf_flyteidl_2fadmin_2fproject_2eproto::TableStruct;
  friend void ::protobuf_flyteidl_2fadmin_2fproject_2eproto::InitDefaultsProjectImpl();
};
// -------------------------------------------------------------------

class Projects : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.Projects) */ {
 public:
  Projects();
  virtual ~Projects();

  Projects(const Projects& from);

  inline Projects& operator=(const Projects& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Projects(Projects&& from) noexcept
    : Projects() {
    *this = ::std::move(from);
  }

  inline Projects& operator=(Projects&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Projects& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Projects* internal_default_instance() {
    return reinterpret_cast<const Projects*>(
               &_Projects_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Projects* other);
  friend void swap(Projects& a, Projects& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Projects* New() const PROTOBUF_FINAL { return New(NULL); }

  Projects* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Projects& from);
  void MergeFrom(const Projects& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Projects* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .flyteidl.admin.Project projects = 1;
  int projects_size() const;
  void clear_projects();
  static const int kProjectsFieldNumber = 1;
  const ::flyteidl::admin::Project& projects(int index) const;
  ::flyteidl::admin::Project* mutable_projects(int index);
  ::flyteidl::admin::Project* add_projects();
  ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::Project >*
      mutable_projects();
  const ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::Project >&
      projects() const;

  // @@protoc_insertion_point(class_scope:flyteidl.admin.Projects)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::Project > projects_;
  mutable int _cached_size_;
  friend struct ::protobuf_flyteidl_2fadmin_2fproject_2eproto::TableStruct;
  friend void ::protobuf_flyteidl_2fadmin_2fproject_2eproto::InitDefaultsProjectsImpl();
};
// -------------------------------------------------------------------

class ProjectListRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.ProjectListRequest) */ {
 public:
  ProjectListRequest();
  virtual ~ProjectListRequest();

  ProjectListRequest(const ProjectListRequest& from);

  inline ProjectListRequest& operator=(const ProjectListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProjectListRequest(ProjectListRequest&& from) noexcept
    : ProjectListRequest() {
    *this = ::std::move(from);
  }

  inline ProjectListRequest& operator=(ProjectListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProjectListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProjectListRequest* internal_default_instance() {
    return reinterpret_cast<const ProjectListRequest*>(
               &_ProjectListRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(ProjectListRequest* other);
  friend void swap(ProjectListRequest& a, ProjectListRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProjectListRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ProjectListRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ProjectListRequest& from);
  void MergeFrom(const ProjectListRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ProjectListRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyteidl.admin.ProjectListRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_flyteidl_2fadmin_2fproject_2eproto::TableStruct;
  friend void ::protobuf_flyteidl_2fadmin_2fproject_2eproto::InitDefaultsProjectListRequestImpl();
};
// -------------------------------------------------------------------

class ProjectRegisterRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.ProjectRegisterRequest) */ {
 public:
  ProjectRegisterRequest();
  virtual ~ProjectRegisterRequest();

  ProjectRegisterRequest(const ProjectRegisterRequest& from);

  inline ProjectRegisterRequest& operator=(const ProjectRegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProjectRegisterRequest(ProjectRegisterRequest&& from) noexcept
    : ProjectRegisterRequest() {
    *this = ::std::move(from);
  }

  inline ProjectRegisterRequest& operator=(ProjectRegisterRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProjectRegisterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProjectRegisterRequest* internal_default_instance() {
    return reinterpret_cast<const ProjectRegisterRequest*>(
               &_ProjectRegisterRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(ProjectRegisterRequest* other);
  friend void swap(ProjectRegisterRequest& a, ProjectRegisterRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProjectRegisterRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ProjectRegisterRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ProjectRegisterRequest& from);
  void MergeFrom(const ProjectRegisterRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ProjectRegisterRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.admin.Project project = 1;
  bool has_project() const;
  void clear_project();
  static const int kProjectFieldNumber = 1;
  const ::flyteidl::admin::Project& project() const;
  ::flyteidl::admin::Project* release_project();
  ::flyteidl::admin::Project* mutable_project();
  void set_allocated_project(::flyteidl::admin::Project* project);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.ProjectRegisterRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::admin::Project* project_;
  mutable int _cached_size_;
  friend struct ::protobuf_flyteidl_2fadmin_2fproject_2eproto::TableStruct;
  friend void ::protobuf_flyteidl_2fadmin_2fproject_2eproto::InitDefaultsProjectRegisterRequestImpl();
};
// -------------------------------------------------------------------

class ProjectRegisterResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.ProjectRegisterResponse) */ {
 public:
  ProjectRegisterResponse();
  virtual ~ProjectRegisterResponse();

  ProjectRegisterResponse(const ProjectRegisterResponse& from);

  inline ProjectRegisterResponse& operator=(const ProjectRegisterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProjectRegisterResponse(ProjectRegisterResponse&& from) noexcept
    : ProjectRegisterResponse() {
    *this = ::std::move(from);
  }

  inline ProjectRegisterResponse& operator=(ProjectRegisterResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProjectRegisterResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProjectRegisterResponse* internal_default_instance() {
    return reinterpret_cast<const ProjectRegisterResponse*>(
               &_ProjectRegisterResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(ProjectRegisterResponse* other);
  friend void swap(ProjectRegisterResponse& a, ProjectRegisterResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProjectRegisterResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ProjectRegisterResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ProjectRegisterResponse& from);
  void MergeFrom(const ProjectRegisterResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ProjectRegisterResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyteidl.admin.ProjectRegisterResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_flyteidl_2fadmin_2fproject_2eproto::TableStruct;
  friend void ::protobuf_flyteidl_2fadmin_2fproject_2eproto::InitDefaultsProjectRegisterResponseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Domain

// string id = 1;
inline void Domain::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Domain::id() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Domain.id)
  return id_.GetNoArena();
}
inline void Domain::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.Domain.id)
}
#if LANG_CXX11
inline void Domain::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.Domain.id)
}
#endif
inline void Domain::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.Domain.id)
}
inline void Domain::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.Domain.id)
}
inline ::std::string* Domain::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Domain.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Domain::release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Domain.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Domain::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Domain.id)
}

// string name = 2;
inline void Domain::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Domain::name() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Domain.name)
  return name_.GetNoArena();
}
inline void Domain::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.Domain.name)
}
#if LANG_CXX11
inline void Domain::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.Domain.name)
}
#endif
inline void Domain::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.Domain.name)
}
inline void Domain::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.Domain.name)
}
inline ::std::string* Domain::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Domain.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Domain::release_name() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Domain.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Domain::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Domain.name)
}

// -------------------------------------------------------------------

// Project

// string id = 1;
inline void Project::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Project::id() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Project.id)
  return id_.GetNoArena();
}
inline void Project::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.Project.id)
}
#if LANG_CXX11
inline void Project::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.Project.id)
}
#endif
inline void Project::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.Project.id)
}
inline void Project::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.Project.id)
}
inline ::std::string* Project::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Project.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Project::release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Project.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Project::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Project.id)
}

// string name = 2;
inline void Project::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Project::name() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Project.name)
  return name_.GetNoArena();
}
inline void Project::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.Project.name)
}
#if LANG_CXX11
inline void Project::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.Project.name)
}
#endif
inline void Project::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.Project.name)
}
inline void Project::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.Project.name)
}
inline ::std::string* Project::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Project.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Project::release_name() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Project.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Project::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Project.name)
}

// repeated .flyteidl.admin.Domain domains = 3;
inline int Project::domains_size() const {
  return domains_.size();
}
inline void Project::clear_domains() {
  domains_.Clear();
}
inline const ::flyteidl::admin::Domain& Project::domains(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Project.domains)
  return domains_.Get(index);
}
inline ::flyteidl::admin::Domain* Project::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Project.domains)
  return domains_.Mutable(index);
}
inline ::flyteidl::admin::Domain* Project::add_domains() {
  // @@protoc_insertion_point(field_add:flyteidl.admin.Project.domains)
  return domains_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::Domain >*
Project::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.admin.Project.domains)
  return &domains_;
}
inline const ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::Domain >&
Project::domains() const {
  // @@protoc_insertion_point(field_list:flyteidl.admin.Project.domains)
  return domains_;
}

// string description = 4;
inline void Project::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Project::description() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Project.description)
  return description_.GetNoArena();
}
inline void Project::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.Project.description)
}
#if LANG_CXX11
inline void Project::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.Project.description)
}
#endif
inline void Project::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.Project.description)
}
inline void Project::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.Project.description)
}
inline ::std::string* Project::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Project.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Project::release_description() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Project.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Project::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Project.description)
}

// -------------------------------------------------------------------

// Projects

// repeated .flyteidl.admin.Project projects = 1;
inline int Projects::projects_size() const {
  return projects_.size();
}
inline void Projects::clear_projects() {
  projects_.Clear();
}
inline const ::flyteidl::admin::Project& Projects::projects(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Projects.projects)
  return projects_.Get(index);
}
inline ::flyteidl::admin::Project* Projects::mutable_projects(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Projects.projects)
  return projects_.Mutable(index);
}
inline ::flyteidl::admin::Project* Projects::add_projects() {
  // @@protoc_insertion_point(field_add:flyteidl.admin.Projects.projects)
  return projects_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::Project >*
Projects::mutable_projects() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.admin.Projects.projects)
  return &projects_;
}
inline const ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::Project >&
Projects::projects() const {
  // @@protoc_insertion_point(field_list:flyteidl.admin.Projects.projects)
  return projects_;
}

// -------------------------------------------------------------------

// ProjectListRequest

// -------------------------------------------------------------------

// ProjectRegisterRequest

// .flyteidl.admin.Project project = 1;
inline bool ProjectRegisterRequest::has_project() const {
  return this != internal_default_instance() && project_ != NULL;
}
inline void ProjectRegisterRequest::clear_project() {
  if (GetArenaNoVirtual() == NULL && project_ != NULL) {
    delete project_;
  }
  project_ = NULL;
}
inline const ::flyteidl::admin::Project& ProjectRegisterRequest::project() const {
  const ::flyteidl::admin::Project* p = project_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.ProjectRegisterRequest.project)
  return p != NULL ? *p : *reinterpret_cast<const ::flyteidl::admin::Project*>(
      &::flyteidl::admin::_Project_default_instance_);
}
inline ::flyteidl::admin::Project* ProjectRegisterRequest::release_project() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ProjectRegisterRequest.project)
  
  ::flyteidl::admin::Project* temp = project_;
  project_ = NULL;
  return temp;
}
inline ::flyteidl::admin::Project* ProjectRegisterRequest::mutable_project() {
  
  if (project_ == NULL) {
    project_ = new ::flyteidl::admin::Project;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ProjectRegisterRequest.project)
  return project_;
}
inline void ProjectRegisterRequest::set_allocated_project(::flyteidl::admin::Project* project) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete project_;
  }
  if (project) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      project = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, project, submessage_arena);
    }
    
  } else {
    
  }
  project_ = project;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ProjectRegisterRequest.project)
}

// -------------------------------------------------------------------

// ProjectRegisterResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace admin
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_flyteidl_2fadmin_2fproject_2eproto__INCLUDED
