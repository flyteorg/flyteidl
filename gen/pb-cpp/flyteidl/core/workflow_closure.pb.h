// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/workflow_closure.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fcore_2fworkflow_5fclosure_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fcore_2fworkflow_5fclosure_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "flyteidl/core/workflow.pb.h"
#include "flyteidl/core/tasks.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fworkflow_5fclosure_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fcore_2fworkflow_5fclosure_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fcore_2fworkflow_5fclosure_2eproto;
namespace flyteidl {
namespace core {
class WorkflowClosure;
struct WorkflowClosureDefaultTypeInternal;
extern WorkflowClosureDefaultTypeInternal _WorkflowClosure_default_instance_;
}  // namespace core
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> ::flyteidl::core::WorkflowClosure* Arena::CreateMaybeMessage<::flyteidl::core::WorkflowClosure>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace flyteidl {
namespace core {

// ===================================================================

class WorkflowClosure final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.WorkflowClosure) */ {
 public:
  inline WorkflowClosure() : WorkflowClosure(nullptr) {}
  ~WorkflowClosure() override;
  explicit constexpr WorkflowClosure(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorkflowClosure(const WorkflowClosure& from);
  WorkflowClosure(WorkflowClosure&& from) noexcept
    : WorkflowClosure() {
    *this = ::std::move(from);
  }

  inline WorkflowClosure& operator=(const WorkflowClosure& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkflowClosure& operator=(WorkflowClosure&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorkflowClosure& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkflowClosure* internal_default_instance() {
    return reinterpret_cast<const WorkflowClosure*>(
               &_WorkflowClosure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WorkflowClosure& a, WorkflowClosure& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkflowClosure* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkflowClosure* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorkflowClosure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorkflowClosure>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkflowClosure* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.core.WorkflowClosure";
  }
  protected:
  explicit WorkflowClosure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTasksFieldNumber = 2,
    kWorkflowFieldNumber = 1,
  };
  // repeated .flyteidl.core.TaskTemplate tasks = 2 [json_name = "tasks"];
  int tasks_size() const;
  private:
  int _internal_tasks_size() const;
  public:
  void clear_tasks();
  ::flyteidl::core::TaskTemplate* mutable_tasks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::TaskTemplate >*
      mutable_tasks();
  private:
  const ::flyteidl::core::TaskTemplate& _internal_tasks(int index) const;
  ::flyteidl::core::TaskTemplate* _internal_add_tasks();
  public:
  const ::flyteidl::core::TaskTemplate& tasks(int index) const;
  ::flyteidl::core::TaskTemplate* add_tasks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::TaskTemplate >&
      tasks() const;

  // .flyteidl.core.WorkflowTemplate workflow = 1 [json_name = "workflow"];
  bool has_workflow() const;
  private:
  bool _internal_has_workflow() const;
  public:
  void clear_workflow();
  const ::flyteidl::core::WorkflowTemplate& workflow() const;
  PROTOBUF_NODISCARD ::flyteidl::core::WorkflowTemplate* release_workflow();
  ::flyteidl::core::WorkflowTemplate* mutable_workflow();
  void set_allocated_workflow(::flyteidl::core::WorkflowTemplate* workflow);
  private:
  const ::flyteidl::core::WorkflowTemplate& _internal_workflow() const;
  ::flyteidl::core::WorkflowTemplate* _internal_mutable_workflow();
  public:
  void unsafe_arena_set_allocated_workflow(
      ::flyteidl::core::WorkflowTemplate* workflow);
  ::flyteidl::core::WorkflowTemplate* unsafe_arena_release_workflow();

  // @@protoc_insertion_point(class_scope:flyteidl.core.WorkflowClosure)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::TaskTemplate > tasks_;
  ::flyteidl::core::WorkflowTemplate* workflow_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2fworkflow_5fclosure_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WorkflowClosure

// .flyteidl.core.WorkflowTemplate workflow = 1 [json_name = "workflow"];
inline bool WorkflowClosure::_internal_has_workflow() const {
  return this != internal_default_instance() && workflow_ != nullptr;
}
inline bool WorkflowClosure::has_workflow() const {
  return _internal_has_workflow();
}
inline const ::flyteidl::core::WorkflowTemplate& WorkflowClosure::_internal_workflow() const {
  const ::flyteidl::core::WorkflowTemplate* p = workflow_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::WorkflowTemplate&>(
      ::flyteidl::core::_WorkflowTemplate_default_instance_);
}
inline const ::flyteidl::core::WorkflowTemplate& WorkflowClosure::workflow() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.WorkflowClosure.workflow)
  return _internal_workflow();
}
inline void WorkflowClosure::unsafe_arena_set_allocated_workflow(
    ::flyteidl::core::WorkflowTemplate* workflow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(workflow_);
  }
  workflow_ = workflow;
  if (workflow) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.core.WorkflowClosure.workflow)
}
inline ::flyteidl::core::WorkflowTemplate* WorkflowClosure::release_workflow() {
  
  ::flyteidl::core::WorkflowTemplate* temp = workflow_;
  workflow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::WorkflowTemplate* WorkflowClosure::unsafe_arena_release_workflow() {
  // @@protoc_insertion_point(field_release:flyteidl.core.WorkflowClosure.workflow)
  
  ::flyteidl::core::WorkflowTemplate* temp = workflow_;
  workflow_ = nullptr;
  return temp;
}
inline ::flyteidl::core::WorkflowTemplate* WorkflowClosure::_internal_mutable_workflow() {
  
  if (workflow_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::WorkflowTemplate>(GetArenaForAllocation());
    workflow_ = p;
  }
  return workflow_;
}
inline ::flyteidl::core::WorkflowTemplate* WorkflowClosure::mutable_workflow() {
  ::flyteidl::core::WorkflowTemplate* _msg = _internal_mutable_workflow();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.WorkflowClosure.workflow)
  return _msg;
}
inline void WorkflowClosure::set_allocated_workflow(::flyteidl::core::WorkflowTemplate* workflow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(workflow_);
  }
  if (workflow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(workflow));
    if (message_arena != submessage_arena) {
      workflow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, workflow, submessage_arena);
    }
    
  } else {
    
  }
  workflow_ = workflow;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.WorkflowClosure.workflow)
}

// repeated .flyteidl.core.TaskTemplate tasks = 2 [json_name = "tasks"];
inline int WorkflowClosure::_internal_tasks_size() const {
  return tasks_.size();
}
inline int WorkflowClosure::tasks_size() const {
  return _internal_tasks_size();
}
inline ::flyteidl::core::TaskTemplate* WorkflowClosure::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.core.WorkflowClosure.tasks)
  return tasks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::TaskTemplate >*
WorkflowClosure::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.core.WorkflowClosure.tasks)
  return &tasks_;
}
inline const ::flyteidl::core::TaskTemplate& WorkflowClosure::_internal_tasks(int index) const {
  return tasks_.Get(index);
}
inline const ::flyteidl::core::TaskTemplate& WorkflowClosure::tasks(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.core.WorkflowClosure.tasks)
  return _internal_tasks(index);
}
inline ::flyteidl::core::TaskTemplate* WorkflowClosure::_internal_add_tasks() {
  return tasks_.Add();
}
inline ::flyteidl::core::TaskTemplate* WorkflowClosure::add_tasks() {
  ::flyteidl::core::TaskTemplate* _add = _internal_add_tasks();
  // @@protoc_insertion_point(field_add:flyteidl.core.WorkflowClosure.tasks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::TaskTemplate >&
WorkflowClosure::tasks() const {
  // @@protoc_insertion_point(field_list:flyteidl.core.WorkflowClosure.tasks)
  return tasks_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace core
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fcore_2fworkflow_5fclosure_2eproto
