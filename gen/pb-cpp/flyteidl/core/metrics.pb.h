// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/metrics.proto

#ifndef PROTOBUF_INCLUDED_flyteidl_2fcore_2fmetrics_2eproto
#define PROTOBUF_INCLUDED_flyteidl_2fcore_2fmetrics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "flyteidl/core/identifier.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fmetrics_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fcore_2fmetrics_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_flyteidl_2fcore_2fmetrics_2eproto();
namespace flyteidl {
namespace core {
class Span;
class SpanDefaultTypeInternal;
extern SpanDefaultTypeInternal _Span_default_instance_;
}  // namespace core
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> ::flyteidl::core::Span* Arena::CreateMaybeMessage<::flyteidl::core::Span>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace flyteidl {
namespace core {

// ===================================================================

class Span final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.Span) */ {
 public:
  Span();
  virtual ~Span();

  Span(const Span& from);

  inline Span& operator=(const Span& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Span(Span&& from) noexcept
    : Span() {
    *this = ::std::move(from);
  }

  inline Span& operator=(Span&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Span& default_instance();

  enum IdCase {
    kWorkflowId = 3,
    kNodeId = 4,
    kTaskId = 5,
    kOperationId = 6,
    ID_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Span* internal_default_instance() {
    return reinterpret_cast<const Span*>(
               &_Span_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Span* other);
  friend void swap(Span& a, Span& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Span* New() const final {
    return CreateMaybeMessage<Span>(nullptr);
  }

  Span* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Span>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Span& from);
  void MergeFrom(const Span& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Span* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .flyteidl.core.Span spans = 7;
  int spans_size() const;
  void clear_spans();
  static const int kSpansFieldNumber = 7;
  ::flyteidl::core::Span* mutable_spans(int index);
  ::google::protobuf::RepeatedPtrField< ::flyteidl::core::Span >*
      mutable_spans();
  const ::flyteidl::core::Span& spans(int index) const;
  ::flyteidl::core::Span* add_spans();
  const ::google::protobuf::RepeatedPtrField< ::flyteidl::core::Span >&
      spans() const;

  // .google.protobuf.Timestamp start_time = 1;
  bool has_start_time() const;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 1;
  const ::google::protobuf::Timestamp& start_time() const;
  ::google::protobuf::Timestamp* release_start_time();
  ::google::protobuf::Timestamp* mutable_start_time();
  void set_allocated_start_time(::google::protobuf::Timestamp* start_time);

  // .google.protobuf.Timestamp end_time = 2;
  bool has_end_time() const;
  void clear_end_time();
  static const int kEndTimeFieldNumber = 2;
  const ::google::protobuf::Timestamp& end_time() const;
  ::google::protobuf::Timestamp* release_end_time();
  ::google::protobuf::Timestamp* mutable_end_time();
  void set_allocated_end_time(::google::protobuf::Timestamp* end_time);

  // .flyteidl.core.WorkflowExecutionIdentifier workflow_id = 3;
  bool has_workflow_id() const;
  void clear_workflow_id();
  static const int kWorkflowIdFieldNumber = 3;
  const ::flyteidl::core::WorkflowExecutionIdentifier& workflow_id() const;
  ::flyteidl::core::WorkflowExecutionIdentifier* release_workflow_id();
  ::flyteidl::core::WorkflowExecutionIdentifier* mutable_workflow_id();
  void set_allocated_workflow_id(::flyteidl::core::WorkflowExecutionIdentifier* workflow_id);

  // .flyteidl.core.NodeExecutionIdentifier node_id = 4;
  bool has_node_id() const;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 4;
  const ::flyteidl::core::NodeExecutionIdentifier& node_id() const;
  ::flyteidl::core::NodeExecutionIdentifier* release_node_id();
  ::flyteidl::core::NodeExecutionIdentifier* mutable_node_id();
  void set_allocated_node_id(::flyteidl::core::NodeExecutionIdentifier* node_id);

  // .flyteidl.core.TaskExecutionIdentifier task_id = 5;
  bool has_task_id() const;
  void clear_task_id();
  static const int kTaskIdFieldNumber = 5;
  const ::flyteidl::core::TaskExecutionIdentifier& task_id() const;
  ::flyteidl::core::TaskExecutionIdentifier* release_task_id();
  ::flyteidl::core::TaskExecutionIdentifier* mutable_task_id();
  void set_allocated_task_id(::flyteidl::core::TaskExecutionIdentifier* task_id);

  // string operation_id = 6;
  private:
  bool has_operation_id() const;
  public:
  void clear_operation_id();
  static const int kOperationIdFieldNumber = 6;
  const ::std::string& operation_id() const;
  void set_operation_id(const ::std::string& value);
  #if LANG_CXX11
  void set_operation_id(::std::string&& value);
  #endif
  void set_operation_id(const char* value);
  void set_operation_id(const char* value, size_t size);
  ::std::string* mutable_operation_id();
  ::std::string* release_operation_id();
  void set_allocated_operation_id(::std::string* operation_id);

  void clear_id();
  IdCase id_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.core.Span)
 private:
  class HasBitSetters;
  void set_has_workflow_id();
  void set_has_node_id();
  void set_has_task_id();
  void set_has_operation_id();

  inline bool has_id() const;
  inline void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::flyteidl::core::Span > spans_;
  ::google::protobuf::Timestamp* start_time_;
  ::google::protobuf::Timestamp* end_time_;
  union IdUnion {
    IdUnion() {}
    ::flyteidl::core::WorkflowExecutionIdentifier* workflow_id_;
    ::flyteidl::core::NodeExecutionIdentifier* node_id_;
    ::flyteidl::core::TaskExecutionIdentifier* task_id_;
    ::google::protobuf::internal::ArenaStringPtr operation_id_;
  } id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_flyteidl_2fcore_2fmetrics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Span

// .google.protobuf.Timestamp start_time = 1;
inline bool Span::has_start_time() const {
  return this != internal_default_instance() && start_time_ != nullptr;
}
inline const ::google::protobuf::Timestamp& Span::start_time() const {
  const ::google::protobuf::Timestamp* p = start_time_;
  // @@protoc_insertion_point(field_get:flyteidl.core.Span.start_time)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Span::release_start_time() {
  // @@protoc_insertion_point(field_release:flyteidl.core.Span.start_time)
  
  ::google::protobuf::Timestamp* temp = start_time_;
  start_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Span::mutable_start_time() {
  
  if (start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    start_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Span.start_time)
  return start_time_;
}
inline void Span::set_allocated_start_time(::google::protobuf::Timestamp* start_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(start_time_);
  }
  if (start_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(start_time)->GetArena();
    if (message_arena != submessage_arena) {
      start_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Span.start_time)
}

// .google.protobuf.Timestamp end_time = 2;
inline bool Span::has_end_time() const {
  return this != internal_default_instance() && end_time_ != nullptr;
}
inline const ::google::protobuf::Timestamp& Span::end_time() const {
  const ::google::protobuf::Timestamp* p = end_time_;
  // @@protoc_insertion_point(field_get:flyteidl.core.Span.end_time)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Span::release_end_time() {
  // @@protoc_insertion_point(field_release:flyteidl.core.Span.end_time)
  
  ::google::protobuf::Timestamp* temp = end_time_;
  end_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Span::mutable_end_time() {
  
  if (end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    end_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Span.end_time)
  return end_time_;
}
inline void Span::set_allocated_end_time(::google::protobuf::Timestamp* end_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(end_time_);
  }
  if (end_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(end_time)->GetArena();
    if (message_arena != submessage_arena) {
      end_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Span.end_time)
}

// .flyteidl.core.WorkflowExecutionIdentifier workflow_id = 3;
inline bool Span::has_workflow_id() const {
  return id_case() == kWorkflowId;
}
inline void Span::set_has_workflow_id() {
  _oneof_case_[0] = kWorkflowId;
}
inline ::flyteidl::core::WorkflowExecutionIdentifier* Span::release_workflow_id() {
  // @@protoc_insertion_point(field_release:flyteidl.core.Span.workflow_id)
  if (has_workflow_id()) {
    clear_has_id();
      ::flyteidl::core::WorkflowExecutionIdentifier* temp = id_.workflow_id_;
    id_.workflow_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::WorkflowExecutionIdentifier& Span::workflow_id() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Span.workflow_id)
  return has_workflow_id()
      ? *id_.workflow_id_
      : *reinterpret_cast< ::flyteidl::core::WorkflowExecutionIdentifier*>(&::flyteidl::core::_WorkflowExecutionIdentifier_default_instance_);
}
inline ::flyteidl::core::WorkflowExecutionIdentifier* Span::mutable_workflow_id() {
  if (!has_workflow_id()) {
    clear_id();
    set_has_workflow_id();
    id_.workflow_id_ = CreateMaybeMessage< ::flyteidl::core::WorkflowExecutionIdentifier >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Span.workflow_id)
  return id_.workflow_id_;
}

// .flyteidl.core.NodeExecutionIdentifier node_id = 4;
inline bool Span::has_node_id() const {
  return id_case() == kNodeId;
}
inline void Span::set_has_node_id() {
  _oneof_case_[0] = kNodeId;
}
inline ::flyteidl::core::NodeExecutionIdentifier* Span::release_node_id() {
  // @@protoc_insertion_point(field_release:flyteidl.core.Span.node_id)
  if (has_node_id()) {
    clear_has_id();
      ::flyteidl::core::NodeExecutionIdentifier* temp = id_.node_id_;
    id_.node_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::NodeExecutionIdentifier& Span::node_id() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Span.node_id)
  return has_node_id()
      ? *id_.node_id_
      : *reinterpret_cast< ::flyteidl::core::NodeExecutionIdentifier*>(&::flyteidl::core::_NodeExecutionIdentifier_default_instance_);
}
inline ::flyteidl::core::NodeExecutionIdentifier* Span::mutable_node_id() {
  if (!has_node_id()) {
    clear_id();
    set_has_node_id();
    id_.node_id_ = CreateMaybeMessage< ::flyteidl::core::NodeExecutionIdentifier >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Span.node_id)
  return id_.node_id_;
}

// .flyteidl.core.TaskExecutionIdentifier task_id = 5;
inline bool Span::has_task_id() const {
  return id_case() == kTaskId;
}
inline void Span::set_has_task_id() {
  _oneof_case_[0] = kTaskId;
}
inline ::flyteidl::core::TaskExecutionIdentifier* Span::release_task_id() {
  // @@protoc_insertion_point(field_release:flyteidl.core.Span.task_id)
  if (has_task_id()) {
    clear_has_id();
      ::flyteidl::core::TaskExecutionIdentifier* temp = id_.task_id_;
    id_.task_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::TaskExecutionIdentifier& Span::task_id() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Span.task_id)
  return has_task_id()
      ? *id_.task_id_
      : *reinterpret_cast< ::flyteidl::core::TaskExecutionIdentifier*>(&::flyteidl::core::_TaskExecutionIdentifier_default_instance_);
}
inline ::flyteidl::core::TaskExecutionIdentifier* Span::mutable_task_id() {
  if (!has_task_id()) {
    clear_id();
    set_has_task_id();
    id_.task_id_ = CreateMaybeMessage< ::flyteidl::core::TaskExecutionIdentifier >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Span.task_id)
  return id_.task_id_;
}

// string operation_id = 6;
inline bool Span::has_operation_id() const {
  return id_case() == kOperationId;
}
inline void Span::set_has_operation_id() {
  _oneof_case_[0] = kOperationId;
}
inline void Span::clear_operation_id() {
  if (has_operation_id()) {
    id_.operation_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_id();
  }
}
inline const ::std::string& Span::operation_id() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Span.operation_id)
  if (has_operation_id()) {
    return id_.operation_id_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Span::set_operation_id(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flyteidl.core.Span.operation_id)
  if (!has_operation_id()) {
    clear_id();
    set_has_operation_id();
    id_.operation_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.operation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.core.Span.operation_id)
}
#if LANG_CXX11
inline void Span::set_operation_id(::std::string&& value) {
  // @@protoc_insertion_point(field_set:flyteidl.core.Span.operation_id)
  if (!has_operation_id()) {
    clear_id();
    set_has_operation_id();
    id_.operation_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.operation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.core.Span.operation_id)
}
#endif
inline void Span::set_operation_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_operation_id()) {
    clear_id();
    set_has_operation_id();
    id_.operation_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.operation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.core.Span.operation_id)
}
inline void Span::set_operation_id(const char* value, size_t size) {
  if (!has_operation_id()) {
    clear_id();
    set_has_operation_id();
    id_.operation_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  id_.operation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.core.Span.operation_id)
}
inline ::std::string* Span::mutable_operation_id() {
  if (!has_operation_id()) {
    clear_id();
    set_has_operation_id();
    id_.operation_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Span.operation_id)
  return id_.operation_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Span::release_operation_id() {
  // @@protoc_insertion_point(field_release:flyteidl.core.Span.operation_id)
  if (has_operation_id()) {
    clear_has_id();
    return id_.operation_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void Span::set_allocated_operation_id(::std::string* operation_id) {
  if (has_id()) {
    clear_id();
  }
  if (operation_id != nullptr) {
    set_has_operation_id();
    id_.operation_id_.UnsafeSetDefault(operation_id);
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Span.operation_id)
}

// repeated .flyteidl.core.Span spans = 7;
inline int Span::spans_size() const {
  return spans_.size();
}
inline void Span::clear_spans() {
  spans_.Clear();
}
inline ::flyteidl::core::Span* Span::mutable_spans(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Span.spans)
  return spans_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::flyteidl::core::Span >*
Span::mutable_spans() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.core.Span.spans)
  return &spans_;
}
inline const ::flyteidl::core::Span& Span::spans(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Span.spans)
  return spans_.Get(index);
}
inline ::flyteidl::core::Span* Span::add_spans() {
  // @@protoc_insertion_point(field_add:flyteidl.core.Span.spans)
  return spans_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::flyteidl::core::Span >&
Span::spans() const {
  // @@protoc_insertion_point(field_list:flyteidl.core.Span.spans)
  return spans_;
}

inline bool Span::has_id() const {
  return id_case() != ID_NOT_SET;
}
inline void Span::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
inline Span::IdCase Span::id_case() const {
  return Span::IdCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace core
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_flyteidl_2fcore_2fmetrics_2eproto
