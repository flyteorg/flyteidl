// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/notification.proto

#ifndef PROTOBUF_INCLUDED_flyteidl_2fadmin_2fnotification_2eproto
#define PROTOBUF_INCLUDED_flyteidl_2fadmin_2fnotification_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fnotification_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fadmin_2fnotification_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_flyteidl_2fadmin_2fnotification_2eproto();
namespace flyteidl {
namespace admin {
class EmailMessage;
class EmailMessageDefaultTypeInternal;
extern EmailMessageDefaultTypeInternal _EmailMessage_default_instance_;
class WebhookPayload;
class WebhookPayloadDefaultTypeInternal;
extern WebhookPayloadDefaultTypeInternal _WebhookPayload_default_instance_;
}  // namespace admin
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> ::flyteidl::admin::EmailMessage* Arena::CreateMaybeMessage<::flyteidl::admin::EmailMessage>(Arena*);
template<> ::flyteidl::admin::WebhookPayload* Arena::CreateMaybeMessage<::flyteidl::admin::WebhookPayload>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace flyteidl {
namespace admin {

// ===================================================================

class EmailMessage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.EmailMessage) */ {
 public:
  EmailMessage();
  virtual ~EmailMessage();

  EmailMessage(const EmailMessage& from);

  inline EmailMessage& operator=(const EmailMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EmailMessage(EmailMessage&& from) noexcept
    : EmailMessage() {
    *this = ::std::move(from);
  }

  inline EmailMessage& operator=(EmailMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const EmailMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EmailMessage* internal_default_instance() {
    return reinterpret_cast<const EmailMessage*>(
               &_EmailMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(EmailMessage* other);
  friend void swap(EmailMessage& a, EmailMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EmailMessage* New() const final {
    return CreateMaybeMessage<EmailMessage>(nullptr);
  }

  EmailMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EmailMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EmailMessage& from);
  void MergeFrom(const EmailMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmailMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string recipients_email = 1;
  int recipients_email_size() const;
  void clear_recipients_email();
  static const int kRecipientsEmailFieldNumber = 1;
  const ::std::string& recipients_email(int index) const;
  ::std::string* mutable_recipients_email(int index);
  void set_recipients_email(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_recipients_email(int index, ::std::string&& value);
  #endif
  void set_recipients_email(int index, const char* value);
  void set_recipients_email(int index, const char* value, size_t size);
  ::std::string* add_recipients_email();
  void add_recipients_email(const ::std::string& value);
  #if LANG_CXX11
  void add_recipients_email(::std::string&& value);
  #endif
  void add_recipients_email(const char* value);
  void add_recipients_email(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& recipients_email() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_recipients_email();

  // string sender_email = 2;
  void clear_sender_email();
  static const int kSenderEmailFieldNumber = 2;
  const ::std::string& sender_email() const;
  void set_sender_email(const ::std::string& value);
  #if LANG_CXX11
  void set_sender_email(::std::string&& value);
  #endif
  void set_sender_email(const char* value);
  void set_sender_email(const char* value, size_t size);
  ::std::string* mutable_sender_email();
  ::std::string* release_sender_email();
  void set_allocated_sender_email(::std::string* sender_email);

  // string subject_line = 3;
  void clear_subject_line();
  static const int kSubjectLineFieldNumber = 3;
  const ::std::string& subject_line() const;
  void set_subject_line(const ::std::string& value);
  #if LANG_CXX11
  void set_subject_line(::std::string&& value);
  #endif
  void set_subject_line(const char* value);
  void set_subject_line(const char* value, size_t size);
  ::std::string* mutable_subject_line();
  ::std::string* release_subject_line();
  void set_allocated_subject_line(::std::string* subject_line);

  // string body = 4;
  void clear_body();
  static const int kBodyFieldNumber = 4;
  const ::std::string& body() const;
  void set_body(const ::std::string& value);
  #if LANG_CXX11
  void set_body(::std::string&& value);
  #endif
  void set_body(const char* value);
  void set_body(const char* value, size_t size);
  ::std::string* mutable_body();
  ::std::string* release_body();
  void set_allocated_body(::std::string* body);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.EmailMessage)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> recipients_email_;
  ::google::protobuf::internal::ArenaStringPtr sender_email_;
  ::google::protobuf::internal::ArenaStringPtr subject_line_;
  ::google::protobuf::internal::ArenaStringPtr body_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fnotification_2eproto;
};
// -------------------------------------------------------------------

class WebhookPayload final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.WebhookPayload) */ {
 public:
  WebhookPayload();
  virtual ~WebhookPayload();

  WebhookPayload(const WebhookPayload& from);

  inline WebhookPayload& operator=(const WebhookPayload& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WebhookPayload(WebhookPayload&& from) noexcept
    : WebhookPayload() {
    *this = ::std::move(from);
  }

  inline WebhookPayload& operator=(WebhookPayload&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const WebhookPayload& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WebhookPayload* internal_default_instance() {
    return reinterpret_cast<const WebhookPayload*>(
               &_WebhookPayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(WebhookPayload* other);
  friend void swap(WebhookPayload& a, WebhookPayload& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WebhookPayload* New() const final {
    return CreateMaybeMessage<WebhookPayload>(nullptr);
  }

  WebhookPayload* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WebhookPayload>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WebhookPayload& from);
  void MergeFrom(const WebhookPayload& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WebhookPayload* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 1;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.WebhookPayload)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fnotification_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EmailMessage

// repeated string recipients_email = 1;
inline int EmailMessage::recipients_email_size() const {
  return recipients_email_.size();
}
inline void EmailMessage::clear_recipients_email() {
  recipients_email_.Clear();
}
inline const ::std::string& EmailMessage::recipients_email(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.EmailMessage.recipients_email)
  return recipients_email_.Get(index);
}
inline ::std::string* EmailMessage::mutable_recipients_email(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.EmailMessage.recipients_email)
  return recipients_email_.Mutable(index);
}
inline void EmailMessage::set_recipients_email(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flyteidl.admin.EmailMessage.recipients_email)
  recipients_email_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void EmailMessage::set_recipients_email(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:flyteidl.admin.EmailMessage.recipients_email)
  recipients_email_.Mutable(index)->assign(std::move(value));
}
#endif
inline void EmailMessage::set_recipients_email(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  recipients_email_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.EmailMessage.recipients_email)
}
inline void EmailMessage::set_recipients_email(int index, const char* value, size_t size) {
  recipients_email_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.EmailMessage.recipients_email)
}
inline ::std::string* EmailMessage::add_recipients_email() {
  // @@protoc_insertion_point(field_add_mutable:flyteidl.admin.EmailMessage.recipients_email)
  return recipients_email_.Add();
}
inline void EmailMessage::add_recipients_email(const ::std::string& value) {
  recipients_email_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flyteidl.admin.EmailMessage.recipients_email)
}
#if LANG_CXX11
inline void EmailMessage::add_recipients_email(::std::string&& value) {
  recipients_email_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flyteidl.admin.EmailMessage.recipients_email)
}
#endif
inline void EmailMessage::add_recipients_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  recipients_email_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flyteidl.admin.EmailMessage.recipients_email)
}
inline void EmailMessage::add_recipients_email(const char* value, size_t size) {
  recipients_email_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flyteidl.admin.EmailMessage.recipients_email)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
EmailMessage::recipients_email() const {
  // @@protoc_insertion_point(field_list:flyteidl.admin.EmailMessage.recipients_email)
  return recipients_email_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
EmailMessage::mutable_recipients_email() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.admin.EmailMessage.recipients_email)
  return &recipients_email_;
}

// string sender_email = 2;
inline void EmailMessage::clear_sender_email() {
  sender_email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EmailMessage::sender_email() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.EmailMessage.sender_email)
  return sender_email_.GetNoArena();
}
inline void EmailMessage::set_sender_email(const ::std::string& value) {
  
  sender_email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.EmailMessage.sender_email)
}
#if LANG_CXX11
inline void EmailMessage::set_sender_email(::std::string&& value) {
  
  sender_email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.EmailMessage.sender_email)
}
#endif
inline void EmailMessage::set_sender_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sender_email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.EmailMessage.sender_email)
}
inline void EmailMessage::set_sender_email(const char* value, size_t size) {
  
  sender_email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.EmailMessage.sender_email)
}
inline ::std::string* EmailMessage::mutable_sender_email() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.EmailMessage.sender_email)
  return sender_email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EmailMessage::release_sender_email() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.EmailMessage.sender_email)
  
  return sender_email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EmailMessage::set_allocated_sender_email(::std::string* sender_email) {
  if (sender_email != nullptr) {
    
  } else {
    
  }
  sender_email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender_email);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.EmailMessage.sender_email)
}

// string subject_line = 3;
inline void EmailMessage::clear_subject_line() {
  subject_line_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EmailMessage::subject_line() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.EmailMessage.subject_line)
  return subject_line_.GetNoArena();
}
inline void EmailMessage::set_subject_line(const ::std::string& value) {
  
  subject_line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.EmailMessage.subject_line)
}
#if LANG_CXX11
inline void EmailMessage::set_subject_line(::std::string&& value) {
  
  subject_line_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.EmailMessage.subject_line)
}
#endif
inline void EmailMessage::set_subject_line(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subject_line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.EmailMessage.subject_line)
}
inline void EmailMessage::set_subject_line(const char* value, size_t size) {
  
  subject_line_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.EmailMessage.subject_line)
}
inline ::std::string* EmailMessage::mutable_subject_line() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.EmailMessage.subject_line)
  return subject_line_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EmailMessage::release_subject_line() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.EmailMessage.subject_line)
  
  return subject_line_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EmailMessage::set_allocated_subject_line(::std::string* subject_line) {
  if (subject_line != nullptr) {
    
  } else {
    
  }
  subject_line_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subject_line);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.EmailMessage.subject_line)
}

// string body = 4;
inline void EmailMessage::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EmailMessage::body() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.EmailMessage.body)
  return body_.GetNoArena();
}
inline void EmailMessage::set_body(const ::std::string& value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.EmailMessage.body)
}
#if LANG_CXX11
inline void EmailMessage::set_body(::std::string&& value) {
  
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.EmailMessage.body)
}
#endif
inline void EmailMessage::set_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.EmailMessage.body)
}
inline void EmailMessage::set_body(const char* value, size_t size) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.EmailMessage.body)
}
inline ::std::string* EmailMessage::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.EmailMessage.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EmailMessage::release_body() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.EmailMessage.body)
  
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EmailMessage::set_allocated_body(::std::string* body) {
  if (body != nullptr) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.EmailMessage.body)
}

// -------------------------------------------------------------------

// WebhookPayload

// string message = 1;
inline void WebhookPayload::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WebhookPayload::message() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.WebhookPayload.message)
  return message_.GetNoArena();
}
inline void WebhookPayload::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.WebhookPayload.message)
}
#if LANG_CXX11
inline void WebhookPayload::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.WebhookPayload.message)
}
#endif
inline void WebhookPayload::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.WebhookPayload.message)
}
inline void WebhookPayload::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.WebhookPayload.message)
}
inline ::std::string* WebhookPayload::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.WebhookPayload.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WebhookPayload::release_message() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.WebhookPayload.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WebhookPayload::set_allocated_message(::std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.WebhookPayload.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace admin
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_flyteidl_2fadmin_2fnotification_2eproto
