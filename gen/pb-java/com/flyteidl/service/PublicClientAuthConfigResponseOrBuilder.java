// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/service/auth.proto

package com.flyteidl.service;

public interface PublicClientAuthConfigResponseOrBuilder extends
    // @@protoc_insertion_point(interface_extends:flyteidl.service.PublicClientAuthConfigResponse)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * client_id to use when initiating OAuth2 authorization requests.
   * </pre>
   *
   * <code>string client_id = 1 [json_name = "clientId"];</code>
   * @return The clientId.
   */
  java.lang.String getClientId();
  /**
   * <pre>
   * client_id to use when initiating OAuth2 authorization requests.
   * </pre>
   *
   * <code>string client_id = 1 [json_name = "clientId"];</code>
   * @return The bytes for clientId.
   */
  com.google.protobuf.ByteString
      getClientIdBytes();

  /**
   * <pre>
   * redirect uri to use when initiating OAuth2 authorization requests.
   * </pre>
   *
   * <code>string redirect_uri = 2 [json_name = "redirectUri"];</code>
   * @return The redirectUri.
   */
  java.lang.String getRedirectUri();
  /**
   * <pre>
   * redirect uri to use when initiating OAuth2 authorization requests.
   * </pre>
   *
   * <code>string redirect_uri = 2 [json_name = "redirectUri"];</code>
   * @return The bytes for redirectUri.
   */
  com.google.protobuf.ByteString
      getRedirectUriBytes();

  /**
   * <pre>
   * scopes to request when initiating OAuth2 authorization requests.
   * </pre>
   *
   * <code>repeated string scopes = 3 [json_name = "scopes"];</code>
   * @return A list containing the scopes.
   */
  java.util.List<java.lang.String>
      getScopesList();
  /**
   * <pre>
   * scopes to request when initiating OAuth2 authorization requests.
   * </pre>
   *
   * <code>repeated string scopes = 3 [json_name = "scopes"];</code>
   * @return The count of scopes.
   */
  int getScopesCount();
  /**
   * <pre>
   * scopes to request when initiating OAuth2 authorization requests.
   * </pre>
   *
   * <code>repeated string scopes = 3 [json_name = "scopes"];</code>
   * @param index The index of the element to return.
   * @return The scopes at the given index.
   */
  java.lang.String getScopes(int index);
  /**
   * <pre>
   * scopes to request when initiating OAuth2 authorization requests.
   * </pre>
   *
   * <code>repeated string scopes = 3 [json_name = "scopes"];</code>
   * @param index The index of the value to return.
   * @return The bytes of the scopes at the given index.
   */
  com.google.protobuf.ByteString
      getScopesBytes(int index);

  /**
   * <pre>
   * Authorization Header to use when passing Access Tokens to the server. If not provided, the client should use the
   * default http `Authorization` header.
   * </pre>
   *
   * <code>string authorization_metadata_key = 4 [json_name = "authorizationMetadataKey"];</code>
   * @return The authorizationMetadataKey.
   */
  java.lang.String getAuthorizationMetadataKey();
  /**
   * <pre>
   * Authorization Header to use when passing Access Tokens to the server. If not provided, the client should use the
   * default http `Authorization` header.
   * </pre>
   *
   * <code>string authorization_metadata_key = 4 [json_name = "authorizationMetadataKey"];</code>
   * @return The bytes for authorizationMetadataKey.
   */
  com.google.protobuf.ByteString
      getAuthorizationMetadataKeyBytes();

  /**
   * <pre>
   * ServiceHttpEndpoint points to the http endpoint for the backend. If empty, clients can assume the endpoint used
   * to configure the gRPC connection can be used for the http one respecting the insecure flag to choose between
   * SSL or no SSL connections.
   * </pre>
   *
   * <code>string service_http_endpoint = 5 [json_name = "serviceHttpEndpoint"];</code>
   * @return The serviceHttpEndpoint.
   */
  java.lang.String getServiceHttpEndpoint();
  /**
   * <pre>
   * ServiceHttpEndpoint points to the http endpoint for the backend. If empty, clients can assume the endpoint used
   * to configure the gRPC connection can be used for the http one respecting the insecure flag to choose between
   * SSL or no SSL connections.
   * </pre>
   *
   * <code>string service_http_endpoint = 5 [json_name = "serviceHttpEndpoint"];</code>
   * @return The bytes for serviceHttpEndpoint.
   */
  com.google.protobuf.ByteString
      getServiceHttpEndpointBytes();
}
