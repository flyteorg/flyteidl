// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/tasks.proto

package com.flyteidl.core;

public interface DataLoadingConfigOrBuilder extends
    // @@protoc_insertion_point(interface_extends:flyteidl.core.DataLoadingConfig)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Flag enables DataLoading Config. If this is not set, data loading will not be used!
   * </pre>
   *
   * <code>bool enabled = 1 [json_name = "enabled"];</code>
   * @return The enabled.
   */
  boolean getEnabled();

  /**
   * <pre>
   * File system path (start at root). This folder will contain all the inputs exploded to a separate file.
   * Example, if the input interface needs (x: int, y: blob, z: multipart_blob) and the input path is "/var/flyte/inputs", then the file system will look like
   * /var/flyte/inputs/inputs.&lt;metadata format dependent -&gt; .pb .json .yaml&gt; -&gt; Format as defined previously. The Blob and Multipart blob will reference local filesystem instead of remote locations
   * /var/flyte/inputs/x -&gt; X is a file that contains the value of x (integer) in string format
   * /var/flyte/inputs/y -&gt; Y is a file in Binary format
   * /var/flyte/inputs/z/... -&gt; Note Z itself is a directory
   * More information about the protocol - refer to docs #TODO reference docs here
   * </pre>
   *
   * <code>string input_path = 2 [json_name = "inputPath"];</code>
   * @return The inputPath.
   */
  java.lang.String getInputPath();
  /**
   * <pre>
   * File system path (start at root). This folder will contain all the inputs exploded to a separate file.
   * Example, if the input interface needs (x: int, y: blob, z: multipart_blob) and the input path is "/var/flyte/inputs", then the file system will look like
   * /var/flyte/inputs/inputs.&lt;metadata format dependent -&gt; .pb .json .yaml&gt; -&gt; Format as defined previously. The Blob and Multipart blob will reference local filesystem instead of remote locations
   * /var/flyte/inputs/x -&gt; X is a file that contains the value of x (integer) in string format
   * /var/flyte/inputs/y -&gt; Y is a file in Binary format
   * /var/flyte/inputs/z/... -&gt; Note Z itself is a directory
   * More information about the protocol - refer to docs #TODO reference docs here
   * </pre>
   *
   * <code>string input_path = 2 [json_name = "inputPath"];</code>
   * @return The bytes for inputPath.
   */
  com.google.protobuf.ByteString
      getInputPathBytes();

  /**
   * <pre>
   * File system path (start at root). This folder should contain all the outputs for the task as individual files and/or an error text file
   * </pre>
   *
   * <code>string output_path = 3 [json_name = "outputPath"];</code>
   * @return The outputPath.
   */
  java.lang.String getOutputPath();
  /**
   * <pre>
   * File system path (start at root). This folder should contain all the outputs for the task as individual files and/or an error text file
   * </pre>
   *
   * <code>string output_path = 3 [json_name = "outputPath"];</code>
   * @return The bytes for outputPath.
   */
  com.google.protobuf.ByteString
      getOutputPathBytes();

  /**
   * <pre>
   * In the inputs folder, there will be an additional summary/metadata file that contains references to all files or inlined primitive values.
   * This format decides the actual encoding for the data. Refer to the encoding to understand the specifics of the contents and the encoding
   * </pre>
   *
   * <code>.flyteidl.core.DataLoadingConfig.LiteralMapFormat format = 4 [json_name = "format"];</code>
   * @return The enum numeric value on the wire for format.
   */
  int getFormatValue();
  /**
   * <pre>
   * In the inputs folder, there will be an additional summary/metadata file that contains references to all files or inlined primitive values.
   * This format decides the actual encoding for the data. Refer to the encoding to understand the specifics of the contents and the encoding
   * </pre>
   *
   * <code>.flyteidl.core.DataLoadingConfig.LiteralMapFormat format = 4 [json_name = "format"];</code>
   * @return The format.
   */
  com.flyteidl.core.DataLoadingConfig.LiteralMapFormat getFormat();

  /**
   * <code>.flyteidl.core.IOStrategy io_strategy = 5 [json_name = "ioStrategy"];</code>
   * @return Whether the ioStrategy field is set.
   */
  boolean hasIoStrategy();
  /**
   * <code>.flyteidl.core.IOStrategy io_strategy = 5 [json_name = "ioStrategy"];</code>
   * @return The ioStrategy.
   */
  com.flyteidl.core.IOStrategy getIoStrategy();
  /**
   * <code>.flyteidl.core.IOStrategy io_strategy = 5 [json_name = "ioStrategy"];</code>
   */
  com.flyteidl.core.IOStrategyOrBuilder getIoStrategyOrBuilder();
}
