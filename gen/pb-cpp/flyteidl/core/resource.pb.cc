// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/resource.proto

#include "flyteidl/core/resource.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fresource_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_HeadGroupSpec_RayStartParamsEntry_DoNotUse_flyteidl_2fcore_2fresource_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fresource_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_WorkerGroupSpec_RayStartParamsEntry_DoNotUse_flyteidl_2fcore_2fresource_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fresource_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_HeadGroupSpec_flyteidl_2fcore_2fresource_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fresource_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_WorkerGroupSpec_flyteidl_2fcore_2fresource_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fresource_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ClusterSpec_flyteidl_2fcore_2fresource_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fresource_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_RayCluster_flyteidl_2fcore_2fresource_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace flyteidl {
namespace core {
class ResourceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Resource> _instance;
  const ::flyteidl::core::RayCluster* ray_;
} _Resource_default_instance_;
class RayClusterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RayCluster> _instance;
} _RayCluster_default_instance_;
class ClusterSpecDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ClusterSpec> _instance;
} _ClusterSpec_default_instance_;
class HeadGroupSpec_RayStartParamsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HeadGroupSpec_RayStartParamsEntry_DoNotUse> _instance;
} _HeadGroupSpec_RayStartParamsEntry_DoNotUse_default_instance_;
class HeadGroupSpecDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HeadGroupSpec> _instance;
} _HeadGroupSpec_default_instance_;
class WorkerGroupSpec_RayStartParamsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WorkerGroupSpec_RayStartParamsEntry_DoNotUse> _instance;
} _WorkerGroupSpec_RayStartParamsEntry_DoNotUse_default_instance_;
class WorkerGroupSpecDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WorkerGroupSpec> _instance;
} _WorkerGroupSpec_default_instance_;
}  // namespace core
}  // namespace flyteidl
static void InitDefaultsResource_flyteidl_2fcore_2fresource_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::core::_Resource_default_instance_;
    new (ptr) ::flyteidl::core::Resource();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::Resource::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Resource_flyteidl_2fcore_2fresource_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsResource_flyteidl_2fcore_2fresource_2eproto}, {
      &scc_info_RayCluster_flyteidl_2fcore_2fresource_2eproto.base,}};

static void InitDefaultsRayCluster_flyteidl_2fcore_2fresource_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::core::_RayCluster_default_instance_;
    new (ptr) ::flyteidl::core::RayCluster();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::RayCluster::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_RayCluster_flyteidl_2fcore_2fresource_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRayCluster_flyteidl_2fcore_2fresource_2eproto}, {
      &scc_info_ClusterSpec_flyteidl_2fcore_2fresource_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsClusterSpec_flyteidl_2fcore_2fresource_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::core::_ClusterSpec_default_instance_;
    new (ptr) ::flyteidl::core::ClusterSpec();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::ClusterSpec::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ClusterSpec_flyteidl_2fcore_2fresource_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsClusterSpec_flyteidl_2fcore_2fresource_2eproto}, {
      &scc_info_HeadGroupSpec_flyteidl_2fcore_2fresource_2eproto.base,
      &scc_info_WorkerGroupSpec_flyteidl_2fcore_2fresource_2eproto.base,}};

static void InitDefaultsHeadGroupSpec_RayStartParamsEntry_DoNotUse_flyteidl_2fcore_2fresource_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::core::_HeadGroupSpec_RayStartParamsEntry_DoNotUse_default_instance_;
    new (ptr) ::flyteidl::core::HeadGroupSpec_RayStartParamsEntry_DoNotUse();
  }
  ::flyteidl::core::HeadGroupSpec_RayStartParamsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_HeadGroupSpec_RayStartParamsEntry_DoNotUse_flyteidl_2fcore_2fresource_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHeadGroupSpec_RayStartParamsEntry_DoNotUse_flyteidl_2fcore_2fresource_2eproto}, {}};

static void InitDefaultsHeadGroupSpec_flyteidl_2fcore_2fresource_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::core::_HeadGroupSpec_default_instance_;
    new (ptr) ::flyteidl::core::HeadGroupSpec();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::HeadGroupSpec::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_HeadGroupSpec_flyteidl_2fcore_2fresource_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsHeadGroupSpec_flyteidl_2fcore_2fresource_2eproto}, {
      &scc_info_HeadGroupSpec_RayStartParamsEntry_DoNotUse_flyteidl_2fcore_2fresource_2eproto.base,}};

static void InitDefaultsWorkerGroupSpec_RayStartParamsEntry_DoNotUse_flyteidl_2fcore_2fresource_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::core::_WorkerGroupSpec_RayStartParamsEntry_DoNotUse_default_instance_;
    new (ptr) ::flyteidl::core::WorkerGroupSpec_RayStartParamsEntry_DoNotUse();
  }
  ::flyteidl::core::WorkerGroupSpec_RayStartParamsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_WorkerGroupSpec_RayStartParamsEntry_DoNotUse_flyteidl_2fcore_2fresource_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWorkerGroupSpec_RayStartParamsEntry_DoNotUse_flyteidl_2fcore_2fresource_2eproto}, {}};

static void InitDefaultsWorkerGroupSpec_flyteidl_2fcore_2fresource_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::core::_WorkerGroupSpec_default_instance_;
    new (ptr) ::flyteidl::core::WorkerGroupSpec();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::core::WorkerGroupSpec::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_WorkerGroupSpec_flyteidl_2fcore_2fresource_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsWorkerGroupSpec_flyteidl_2fcore_2fresource_2eproto}, {
      &scc_info_WorkerGroupSpec_RayStartParamsEntry_DoNotUse_flyteidl_2fcore_2fresource_2eproto.base,}};

void InitDefaults_flyteidl_2fcore_2fresource_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Resource_flyteidl_2fcore_2fresource_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RayCluster_flyteidl_2fcore_2fresource_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ClusterSpec_flyteidl_2fcore_2fresource_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HeadGroupSpec_RayStartParamsEntry_DoNotUse_flyteidl_2fcore_2fresource_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_HeadGroupSpec_flyteidl_2fcore_2fresource_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WorkerGroupSpec_RayStartParamsEntry_DoNotUse_flyteidl_2fcore_2fresource_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WorkerGroupSpec_flyteidl_2fcore_2fresource_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_flyteidl_2fcore_2fresource_2eproto[7];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_flyteidl_2fcore_2fresource_2eproto[1];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fcore_2fresource_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_flyteidl_2fcore_2fresource_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Resource, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Resource, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::flyteidl::core::ResourceDefaultTypeInternal, ray_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Resource, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::RayCluster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::RayCluster, name_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::RayCluster, namespace__),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::RayCluster, user_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::RayCluster, version_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::RayCluster, environment_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::RayCluster, cluster_spec_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::RayCluster, created_at_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::RayCluster, deleted_at_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::RayCluster, cluster_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::ClusterSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::ClusterSpec, head_group_spec_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::ClusterSpec, worker_group_sepc_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::HeadGroupSpec_RayStartParamsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::HeadGroupSpec_RayStartParamsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::HeadGroupSpec_RayStartParamsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::HeadGroupSpec_RayStartParamsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::HeadGroupSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::HeadGroupSpec, compute_template_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::HeadGroupSpec, image_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::HeadGroupSpec, service_type_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::HeadGroupSpec, ray_start_params_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::WorkerGroupSpec_RayStartParamsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::WorkerGroupSpec_RayStartParamsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::WorkerGroupSpec_RayStartParamsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::WorkerGroupSpec_RayStartParamsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::WorkerGroupSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::WorkerGroupSpec, group_name_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::WorkerGroupSpec, compute_template_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::WorkerGroupSpec, image_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::WorkerGroupSpec, replicas_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::WorkerGroupSpec, min_replicas_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::WorkerGroupSpec, max_replicas_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::WorkerGroupSpec, ray_start_params_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::flyteidl::core::Resource)},
  { 7, -1, sizeof(::flyteidl::core::RayCluster)},
  { 21, -1, sizeof(::flyteidl::core::ClusterSpec)},
  { 28, 35, sizeof(::flyteidl::core::HeadGroupSpec_RayStartParamsEntry_DoNotUse)},
  { 37, -1, sizeof(::flyteidl::core::HeadGroupSpec)},
  { 46, 53, sizeof(::flyteidl::core::WorkerGroupSpec_RayStartParamsEntry_DoNotUse)},
  { 55, -1, sizeof(::flyteidl::core::WorkerGroupSpec)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_Resource_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_RayCluster_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_ClusterSpec_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_HeadGroupSpec_RayStartParamsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_HeadGroupSpec_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_WorkerGroupSpec_RayStartParamsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::core::_WorkerGroupSpec_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_flyteidl_2fcore_2fresource_2eproto = {
  {}, AddDescriptors_flyteidl_2fcore_2fresource_2eproto, "flyteidl/core/resource.proto", schemas,
  file_default_instances, TableStruct_flyteidl_2fcore_2fresource_2eproto::offsets,
  file_level_metadata_flyteidl_2fcore_2fresource_2eproto, 7, file_level_enum_descriptors_flyteidl_2fcore_2fresource_2eproto, file_level_service_descriptors_flyteidl_2fcore_2fresource_2eproto,
};

const char descriptor_table_protodef_flyteidl_2fcore_2fresource_2eproto[] =
  "\n\034flyteidl/core/resource.proto\022\rflyteidl"
  ".core\032\037google/protobuf/timestamp.proto\"="
  "\n\010Resource\022(\n\003ray\030\001 \001(\0132\031.flyteidl.core."
  "RayClusterH\000B\007\n\005value\"\363\002\n\nRayCluster\022\014\n\004"
  "name\030\001 \001(\t\022\021\n\tnamespace\030\002 \001(\t\022\014\n\004user\030\003 "
  "\001(\t\022\017\n\007version\030\004 \001(\t\022:\n\013environment\030\005 \001("
  "\0162%.flyteidl.core.RayCluster.Environment"
  "\0220\n\014cluster_spec\030\006 \001(\0132\032.flyteidl.core.C"
  "lusterSpec\022.\n\ncreated_at\030\007 \001(\0132\032.google."
  "protobuf.Timestamp\022.\n\ndeleted_at\030\010 \001(\0132\032"
  ".google.protobuf.Timestamp\022\025\n\rcluster_st"
  "ate\030\t \001(\t\"@\n\013Environment\022\007\n\003DEV\020\000\022\013\n\007TES"
  "TING\020\001\022\013\n\007STAGING\020\002\022\016\n\nPRODUCTION\020\003\"\177\n\013C"
  "lusterSpec\0225\n\017head_group_spec\030\001 \001(\0132\034.fl"
  "yteidl.core.HeadGroupSpec\0229\n\021worker_grou"
  "p_sepc\030\002 \003(\0132\036.flyteidl.core.WorkerGroup"
  "Spec\"\321\001\n\rHeadGroupSpec\022\030\n\020compute_templa"
  "te\030\001 \001(\t\022\r\n\005image\030\002 \001(\t\022\024\n\014service_type\030"
  "\003 \001(\t\022J\n\020ray_start_params\030\004 \003(\01320.flytei"
  "dl.core.HeadGroupSpec.RayStartParamsEntr"
  "y\0325\n\023RayStartParamsEntry\022\013\n\003key\030\001 \001(\t\022\r\n"
  "\005value\030\002 \001(\t:\0028\001\"\221\002\n\017WorkerGroupSpec\022\022\n\n"
  "group_name\030\001 \001(\t\022\030\n\020compute_template\030\002 \001"
  "(\t\022\r\n\005image\030\003 \001(\t\022\020\n\010replicas\030\004 \001(\005\022\024\n\014m"
  "in_replicas\030\005 \001(\005\022\024\n\014max_replicas\030\006 \001(\005\022"
  "L\n\020ray_start_params\030\007 \003(\01322.flyteidl.cor"
  "e.WorkerGroupSpec.RayStartParamsEntry\0325\n"
  "\023RayStartParamsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005val"
  "ue\030\002 \001(\t:\0028\001B6Z4github.com/flyteorg/flyt"
  "eidl/gen/pb-go/flyteidl/coreb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_flyteidl_2fcore_2fresource_2eproto = {
  false, InitDefaults_flyteidl_2fcore_2fresource_2eproto, 
  descriptor_table_protodef_flyteidl_2fcore_2fresource_2eproto,
  "flyteidl/core/resource.proto", &assign_descriptors_table_flyteidl_2fcore_2fresource_2eproto, 1196,
};

void AddDescriptors_flyteidl_2fcore_2fresource_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_google_2fprotobuf_2ftimestamp_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_flyteidl_2fcore_2fresource_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_flyteidl_2fcore_2fresource_2eproto = []() { AddDescriptors_flyteidl_2fcore_2fresource_2eproto(); return true; }();
namespace flyteidl {
namespace core {
const ::google::protobuf::EnumDescriptor* RayCluster_Environment_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_flyteidl_2fcore_2fresource_2eproto);
  return file_level_enum_descriptors_flyteidl_2fcore_2fresource_2eproto[0];
}
bool RayCluster_Environment_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RayCluster_Environment RayCluster::DEV;
const RayCluster_Environment RayCluster::TESTING;
const RayCluster_Environment RayCluster::STAGING;
const RayCluster_Environment RayCluster::PRODUCTION;
const RayCluster_Environment RayCluster::Environment_MIN;
const RayCluster_Environment RayCluster::Environment_MAX;
const int RayCluster::Environment_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Resource::InitAsDefaultInstance() {
  ::flyteidl::core::_Resource_default_instance_.ray_ = const_cast< ::flyteidl::core::RayCluster*>(
      ::flyteidl::core::RayCluster::internal_default_instance());
}
class Resource::HasBitSetters {
 public:
  static const ::flyteidl::core::RayCluster& ray(const Resource* msg);
};

const ::flyteidl::core::RayCluster&
Resource::HasBitSetters::ray(const Resource* msg) {
  return *msg->value_.ray_;
}
void Resource::set_allocated_ray(::flyteidl::core::RayCluster* ray) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (ray) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ray = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ray, submessage_arena);
    }
    set_has_ray();
    value_.ray_ = ray;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Resource.ray)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Resource::kRayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Resource::Resource()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.Resource)
}
Resource::Resource(const Resource& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kRay: {
      mutable_ray()->::flyteidl::core::RayCluster::MergeFrom(from.ray());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.Resource)
}

void Resource::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Resource_flyteidl_2fcore_2fresource_2eproto.base);
  clear_has_value();
}

Resource::~Resource() {
  // @@protoc_insertion_point(destructor:flyteidl.core.Resource)
  SharedDtor();
}

void Resource::SharedDtor() {
  if (has_value()) {
    clear_value();
  }
}

void Resource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Resource& Resource::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Resource_flyteidl_2fcore_2fresource_2eproto.base);
  return *internal_default_instance();
}


void Resource::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.core.Resource)
  switch (value_case()) {
    case kRay: {
      delete value_.ray_;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void Resource::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.Resource)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Resource::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Resource*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.RayCluster ray = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::RayCluster::_InternalParse;
        object = msg->mutable_ray();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Resource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.Resource)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.RayCluster ray = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ray()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.Resource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.Resource)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Resource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.Resource)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.RayCluster ray = 1;
  if (has_ray()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::ray(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.Resource)
}

::google::protobuf::uint8* Resource::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.Resource)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.RayCluster ray = 1;
  if (has_ray()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::ray(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.Resource)
  return target;
}

size_t Resource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.Resource)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // .flyteidl.core.RayCluster ray = 1;
    case kRay: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_.ray_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Resource::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.Resource)
  GOOGLE_DCHECK_NE(&from, this);
  const Resource* source =
      ::google::protobuf::DynamicCastToGenerated<Resource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.Resource)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.Resource)
    MergeFrom(*source);
  }
}

void Resource::MergeFrom(const Resource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.Resource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kRay: {
      mutable_ray()->::flyteidl::core::RayCluster::MergeFrom(from.ray());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void Resource::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.Resource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Resource::CopyFrom(const Resource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.Resource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Resource::IsInitialized() const {
  return true;
}

void Resource::Swap(Resource* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Resource::InternalSwap(Resource* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata Resource::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fcore_2fresource_2eproto);
  return ::file_level_metadata_flyteidl_2fcore_2fresource_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RayCluster::InitAsDefaultInstance() {
  ::flyteidl::core::_RayCluster_default_instance_._instance.get_mutable()->cluster_spec_ = const_cast< ::flyteidl::core::ClusterSpec*>(
      ::flyteidl::core::ClusterSpec::internal_default_instance());
  ::flyteidl::core::_RayCluster_default_instance_._instance.get_mutable()->created_at_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::flyteidl::core::_RayCluster_default_instance_._instance.get_mutable()->deleted_at_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
class RayCluster::HasBitSetters {
 public:
  static const ::flyteidl::core::ClusterSpec& cluster_spec(const RayCluster* msg);
  static const ::google::protobuf::Timestamp& created_at(const RayCluster* msg);
  static const ::google::protobuf::Timestamp& deleted_at(const RayCluster* msg);
};

const ::flyteidl::core::ClusterSpec&
RayCluster::HasBitSetters::cluster_spec(const RayCluster* msg) {
  return *msg->cluster_spec_;
}
const ::google::protobuf::Timestamp&
RayCluster::HasBitSetters::created_at(const RayCluster* msg) {
  return *msg->created_at_;
}
const ::google::protobuf::Timestamp&
RayCluster::HasBitSetters::deleted_at(const RayCluster* msg) {
  return *msg->deleted_at_;
}
void RayCluster::clear_created_at() {
  if (GetArenaNoVirtual() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void RayCluster::clear_deleted_at() {
  if (GetArenaNoVirtual() == nullptr && deleted_at_ != nullptr) {
    delete deleted_at_;
  }
  deleted_at_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RayCluster::kNameFieldNumber;
const int RayCluster::kNamespaceFieldNumber;
const int RayCluster::kUserFieldNumber;
const int RayCluster::kVersionFieldNumber;
const int RayCluster::kEnvironmentFieldNumber;
const int RayCluster::kClusterSpecFieldNumber;
const int RayCluster::kCreatedAtFieldNumber;
const int RayCluster::kDeletedAtFieldNumber;
const int RayCluster::kClusterStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RayCluster::RayCluster()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.RayCluster)
}
RayCluster::RayCluster(const RayCluster& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  namespace__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.namespace_().size() > 0) {
    namespace__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.namespace__);
  }
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user().size() > 0) {
    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  cluster_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cluster_state().size() > 0) {
    cluster_state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_state_);
  }
  if (from.has_cluster_spec()) {
    cluster_spec_ = new ::flyteidl::core::ClusterSpec(*from.cluster_spec_);
  } else {
    cluster_spec_ = nullptr;
  }
  if (from.has_created_at()) {
    created_at_ = new ::google::protobuf::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from.has_deleted_at()) {
    deleted_at_ = new ::google::protobuf::Timestamp(*from.deleted_at_);
  } else {
    deleted_at_ = nullptr;
  }
  environment_ = from.environment_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.RayCluster)
}

void RayCluster::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RayCluster_flyteidl_2fcore_2fresource_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  namespace__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&cluster_spec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&environment_) -
      reinterpret_cast<char*>(&cluster_spec_)) + sizeof(environment_));
}

RayCluster::~RayCluster() {
  // @@protoc_insertion_point(destructor:flyteidl.core.RayCluster)
  SharedDtor();
}

void RayCluster::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  namespace__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cluster_spec_;
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete deleted_at_;
}

void RayCluster::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RayCluster& RayCluster::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RayCluster_flyteidl_2fcore_2fresource_2eproto.base);
  return *internal_default_instance();
}


void RayCluster::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.RayCluster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  namespace__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cluster_state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && cluster_spec_ != nullptr) {
    delete cluster_spec_;
  }
  cluster_spec_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && deleted_at_ != nullptr) {
    delete deleted_at_;
  }
  deleted_at_ = nullptr;
  environment_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RayCluster::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RayCluster*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.core.RayCluster.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string namespace = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.core.RayCluster.namespace");
        object = msg->mutable_namespace_();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string user = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.core.RayCluster.user");
        object = msg->mutable_user();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string version = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.core.RayCluster.version");
        object = msg->mutable_version();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .flyteidl.core.RayCluster.Environment environment = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_environment(static_cast<::flyteidl::core::RayCluster_Environment>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .flyteidl.core.ClusterSpec cluster_spec = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::ClusterSpec::_InternalParse;
        object = msg->mutable_cluster_spec();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.Timestamp created_at = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_created_at();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.Timestamp deleted_at = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_deleted_at();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string cluster_state = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.core.RayCluster.cluster_state");
        object = msg->mutable_cluster_state();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RayCluster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.RayCluster)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.RayCluster.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string namespace = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_namespace_()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->namespace_().data(), static_cast<int>(this->namespace_().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.RayCluster.namespace"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user().data(), static_cast<int>(this->user().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.RayCluster.user"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.RayCluster.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.RayCluster.Environment environment = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_environment(static_cast< ::flyteidl::core::RayCluster_Environment >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.ClusterSpec cluster_spec = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cluster_spec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp created_at = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_created_at()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp deleted_at = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_deleted_at()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cluster_state = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_state()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cluster_state().data(), static_cast<int>(this->cluster_state().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.RayCluster.cluster_state"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.RayCluster)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.RayCluster)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RayCluster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.RayCluster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.RayCluster.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string namespace = 2;
  if (this->namespace_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->namespace_().data(), static_cast<int>(this->namespace_().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.RayCluster.namespace");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->namespace_(), output);
  }

  // string user = 3;
  if (this->user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), static_cast<int>(this->user().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.RayCluster.user");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user(), output);
  }

  // string version = 4;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.RayCluster.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->version(), output);
  }

  // .flyteidl.core.RayCluster.Environment environment = 5;
  if (this->environment() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->environment(), output);
  }

  // .flyteidl.core.ClusterSpec cluster_spec = 6;
  if (this->has_cluster_spec()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::cluster_spec(this), output);
  }

  // .google.protobuf.Timestamp created_at = 7;
  if (this->has_created_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::created_at(this), output);
  }

  // .google.protobuf.Timestamp deleted_at = 8;
  if (this->has_deleted_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::deleted_at(this), output);
  }

  // string cluster_state = 9;
  if (this->cluster_state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_state().data(), static_cast<int>(this->cluster_state().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.RayCluster.cluster_state");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->cluster_state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.RayCluster)
}

::google::protobuf::uint8* RayCluster::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.RayCluster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.RayCluster.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string namespace = 2;
  if (this->namespace_().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->namespace_().data(), static_cast<int>(this->namespace_().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.RayCluster.namespace");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->namespace_(), target);
  }

  // string user = 3;
  if (this->user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), static_cast<int>(this->user().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.RayCluster.user");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user(), target);
  }

  // string version = 4;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.RayCluster.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->version(), target);
  }

  // .flyteidl.core.RayCluster.Environment environment = 5;
  if (this->environment() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->environment(), target);
  }

  // .flyteidl.core.ClusterSpec cluster_spec = 6;
  if (this->has_cluster_spec()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::cluster_spec(this), target);
  }

  // .google.protobuf.Timestamp created_at = 7;
  if (this->has_created_at()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::created_at(this), target);
  }

  // .google.protobuf.Timestamp deleted_at = 8;
  if (this->has_deleted_at()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::deleted_at(this), target);
  }

  // string cluster_state = 9;
  if (this->cluster_state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cluster_state().data(), static_cast<int>(this->cluster_state().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.RayCluster.cluster_state");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->cluster_state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.RayCluster)
  return target;
}

size_t RayCluster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.RayCluster)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string namespace = 2;
  if (this->namespace_().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->namespace_());
  }

  // string user = 3;
  if (this->user().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user());
  }

  // string version = 4;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // string cluster_state = 9;
  if (this->cluster_state().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cluster_state());
  }

  // .flyteidl.core.ClusterSpec cluster_spec = 6;
  if (this->has_cluster_spec()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *cluster_spec_);
  }

  // .google.protobuf.Timestamp created_at = 7;
  if (this->has_created_at()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .google.protobuf.Timestamp deleted_at = 8;
  if (this->has_deleted_at()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *deleted_at_);
  }

  // .flyteidl.core.RayCluster.Environment environment = 5;
  if (this->environment() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->environment());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RayCluster::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.RayCluster)
  GOOGLE_DCHECK_NE(&from, this);
  const RayCluster* source =
      ::google::protobuf::DynamicCastToGenerated<RayCluster>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.RayCluster)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.RayCluster)
    MergeFrom(*source);
  }
}

void RayCluster::MergeFrom(const RayCluster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.RayCluster)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.namespace_().size() > 0) {

    namespace__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.namespace__);
  }
  if (from.user().size() > 0) {

    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.cluster_state().size() > 0) {

    cluster_state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cluster_state_);
  }
  if (from.has_cluster_spec()) {
    mutable_cluster_spec()->::flyteidl::core::ClusterSpec::MergeFrom(from.cluster_spec());
  }
  if (from.has_created_at()) {
    mutable_created_at()->::google::protobuf::Timestamp::MergeFrom(from.created_at());
  }
  if (from.has_deleted_at()) {
    mutable_deleted_at()->::google::protobuf::Timestamp::MergeFrom(from.deleted_at());
  }
  if (from.environment() != 0) {
    set_environment(from.environment());
  }
}

void RayCluster::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.RayCluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RayCluster::CopyFrom(const RayCluster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.RayCluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RayCluster::IsInitialized() const {
  return true;
}

void RayCluster::Swap(RayCluster* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RayCluster::InternalSwap(RayCluster* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  namespace__.Swap(&other->namespace__, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_.Swap(&other->user_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_.Swap(&other->version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cluster_state_.Swap(&other->cluster_state_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(cluster_spec_, other->cluster_spec_);
  swap(created_at_, other->created_at_);
  swap(deleted_at_, other->deleted_at_);
  swap(environment_, other->environment_);
}

::google::protobuf::Metadata RayCluster::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fcore_2fresource_2eproto);
  return ::file_level_metadata_flyteidl_2fcore_2fresource_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ClusterSpec::InitAsDefaultInstance() {
  ::flyteidl::core::_ClusterSpec_default_instance_._instance.get_mutable()->head_group_spec_ = const_cast< ::flyteidl::core::HeadGroupSpec*>(
      ::flyteidl::core::HeadGroupSpec::internal_default_instance());
}
class ClusterSpec::HasBitSetters {
 public:
  static const ::flyteidl::core::HeadGroupSpec& head_group_spec(const ClusterSpec* msg);
};

const ::flyteidl::core::HeadGroupSpec&
ClusterSpec::HasBitSetters::head_group_spec(const ClusterSpec* msg) {
  return *msg->head_group_spec_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClusterSpec::kHeadGroupSpecFieldNumber;
const int ClusterSpec::kWorkerGroupSepcFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClusterSpec::ClusterSpec()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.ClusterSpec)
}
ClusterSpec::ClusterSpec(const ClusterSpec& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      worker_group_sepc_(from.worker_group_sepc_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_head_group_spec()) {
    head_group_spec_ = new ::flyteidl::core::HeadGroupSpec(*from.head_group_spec_);
  } else {
    head_group_spec_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.ClusterSpec)
}

void ClusterSpec::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ClusterSpec_flyteidl_2fcore_2fresource_2eproto.base);
  head_group_spec_ = nullptr;
}

ClusterSpec::~ClusterSpec() {
  // @@protoc_insertion_point(destructor:flyteidl.core.ClusterSpec)
  SharedDtor();
}

void ClusterSpec::SharedDtor() {
  if (this != internal_default_instance()) delete head_group_spec_;
}

void ClusterSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClusterSpec& ClusterSpec::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ClusterSpec_flyteidl_2fcore_2fresource_2eproto.base);
  return *internal_default_instance();
}


void ClusterSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.ClusterSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  worker_group_sepc_.Clear();
  if (GetArenaNoVirtual() == nullptr && head_group_spec_ != nullptr) {
    delete head_group_spec_;
  }
  head_group_spec_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClusterSpec::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ClusterSpec*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.HeadGroupSpec head_group_spec = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::HeadGroupSpec::_InternalParse;
        object = msg->mutable_head_group_spec();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .flyteidl.core.WorkerGroupSpec worker_group_sepc = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::flyteidl::core::WorkerGroupSpec::_InternalParse;
          object = msg->add_worker_group_sepc();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClusterSpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.ClusterSpec)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.HeadGroupSpec head_group_spec = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_head_group_spec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .flyteidl.core.WorkerGroupSpec worker_group_sepc = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_worker_group_sepc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.ClusterSpec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.ClusterSpec)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClusterSpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.ClusterSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.HeadGroupSpec head_group_spec = 1;
  if (this->has_head_group_spec()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::head_group_spec(this), output);
  }

  // repeated .flyteidl.core.WorkerGroupSpec worker_group_sepc = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->worker_group_sepc_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->worker_group_sepc(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.ClusterSpec)
}

::google::protobuf::uint8* ClusterSpec::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.ClusterSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.HeadGroupSpec head_group_spec = 1;
  if (this->has_head_group_spec()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::head_group_spec(this), target);
  }

  // repeated .flyteidl.core.WorkerGroupSpec worker_group_sepc = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->worker_group_sepc_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->worker_group_sepc(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.ClusterSpec)
  return target;
}

size_t ClusterSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.ClusterSpec)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .flyteidl.core.WorkerGroupSpec worker_group_sepc = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->worker_group_sepc_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->worker_group_sepc(static_cast<int>(i)));
    }
  }

  // .flyteidl.core.HeadGroupSpec head_group_spec = 1;
  if (this->has_head_group_spec()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *head_group_spec_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClusterSpec::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.ClusterSpec)
  GOOGLE_DCHECK_NE(&from, this);
  const ClusterSpec* source =
      ::google::protobuf::DynamicCastToGenerated<ClusterSpec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.ClusterSpec)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.ClusterSpec)
    MergeFrom(*source);
  }
}

void ClusterSpec::MergeFrom(const ClusterSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.ClusterSpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  worker_group_sepc_.MergeFrom(from.worker_group_sepc_);
  if (from.has_head_group_spec()) {
    mutable_head_group_spec()->::flyteidl::core::HeadGroupSpec::MergeFrom(from.head_group_spec());
  }
}

void ClusterSpec::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.ClusterSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClusterSpec::CopyFrom(const ClusterSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.ClusterSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClusterSpec::IsInitialized() const {
  return true;
}

void ClusterSpec::Swap(ClusterSpec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClusterSpec::InternalSwap(ClusterSpec* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&worker_group_sepc_)->InternalSwap(CastToBase(&other->worker_group_sepc_));
  swap(head_group_spec_, other->head_group_spec_);
}

::google::protobuf::Metadata ClusterSpec::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fcore_2fresource_2eproto);
  return ::file_level_metadata_flyteidl_2fcore_2fresource_2eproto[kIndexInFileMessages];
}


// ===================================================================

HeadGroupSpec_RayStartParamsEntry_DoNotUse::HeadGroupSpec_RayStartParamsEntry_DoNotUse() {}
HeadGroupSpec_RayStartParamsEntry_DoNotUse::HeadGroupSpec_RayStartParamsEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void HeadGroupSpec_RayStartParamsEntry_DoNotUse::MergeFrom(const HeadGroupSpec_RayStartParamsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata HeadGroupSpec_RayStartParamsEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fcore_2fresource_2eproto);
  return ::file_level_metadata_flyteidl_2fcore_2fresource_2eproto[3];
}
void HeadGroupSpec_RayStartParamsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HeadGroupSpec_RayStartParamsEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      HeadGroupSpec_RayStartParamsEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "flyteidl.core.HeadGroupSpec.RayStartParamsEntry.key"));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.value().data(), static_cast<int>(parser.value().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "flyteidl.core.HeadGroupSpec.RayStartParamsEntry.value"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void HeadGroupSpec::InitAsDefaultInstance() {
}
class HeadGroupSpec::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeadGroupSpec::kComputeTemplateFieldNumber;
const int HeadGroupSpec::kImageFieldNumber;
const int HeadGroupSpec::kServiceTypeFieldNumber;
const int HeadGroupSpec::kRayStartParamsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeadGroupSpec::HeadGroupSpec()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.HeadGroupSpec)
}
HeadGroupSpec::HeadGroupSpec(const HeadGroupSpec& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ray_start_params_.MergeFrom(from.ray_start_params_);
  compute_template_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.compute_template().size() > 0) {
    compute_template_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.compute_template_);
  }
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.image().size() > 0) {
    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  service_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.service_type().size() > 0) {
    service_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_type_);
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.HeadGroupSpec)
}

void HeadGroupSpec::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_HeadGroupSpec_flyteidl_2fcore_2fresource_2eproto.base);
  compute_template_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

HeadGroupSpec::~HeadGroupSpec() {
  // @@protoc_insertion_point(destructor:flyteidl.core.HeadGroupSpec)
  SharedDtor();
}

void HeadGroupSpec::SharedDtor() {
  compute_template_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HeadGroupSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HeadGroupSpec& HeadGroupSpec::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_HeadGroupSpec_flyteidl_2fcore_2fresource_2eproto.base);
  return *internal_default_instance();
}


void HeadGroupSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.HeadGroupSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ray_start_params_.Clear();
  compute_template_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HeadGroupSpec::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<HeadGroupSpec*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string compute_template = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.core.HeadGroupSpec.compute_template");
        object = msg->mutable_compute_template();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string image = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.core.HeadGroupSpec.image");
        object = msg->mutable_image();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string service_type = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.core.HeadGroupSpec.service_type");
        object = msg->mutable_service_type();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // map<string, string> ray_start_params = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::flyteidl::core::HeadGroupSpec_RayStartParamsEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->ray_start_params_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HeadGroupSpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.HeadGroupSpec)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string compute_template = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_compute_template()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->compute_template().data(), static_cast<int>(this->compute_template().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.HeadGroupSpec.compute_template"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string image = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->image().data(), static_cast<int>(this->image().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.HeadGroupSpec.image"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string service_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->service_type().data(), static_cast<int>(this->service_type().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.HeadGroupSpec.service_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> ray_start_params = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          HeadGroupSpec_RayStartParamsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              HeadGroupSpec_RayStartParamsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&ray_start_params_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.HeadGroupSpec.RayStartParamsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.HeadGroupSpec.RayStartParamsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.HeadGroupSpec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.HeadGroupSpec)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HeadGroupSpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.HeadGroupSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string compute_template = 1;
  if (this->compute_template().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->compute_template().data(), static_cast<int>(this->compute_template().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.HeadGroupSpec.compute_template");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->compute_template(), output);
  }

  // string image = 2;
  if (this->image().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image().data(), static_cast<int>(this->image().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.HeadGroupSpec.image");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->image(), output);
  }

  // string service_type = 3;
  if (this->service_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_type().data(), static_cast<int>(this->service_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.HeadGroupSpec.service_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->service_type(), output);
  }

  // map<string, string> ray_start_params = 4;
  if (!this->ray_start_params().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.core.HeadGroupSpec.RayStartParamsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.core.HeadGroupSpec.RayStartParamsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->ray_start_params().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->ray_start_params().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->ray_start_params().begin();
          it != this->ray_start_params().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<HeadGroupSpec_RayStartParamsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(ray_start_params_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(4, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<HeadGroupSpec_RayStartParamsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->ray_start_params().begin();
          it != this->ray_start_params().end(); ++it) {
        entry.reset(ray_start_params_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(4, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.HeadGroupSpec)
}

::google::protobuf::uint8* HeadGroupSpec::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.HeadGroupSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string compute_template = 1;
  if (this->compute_template().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->compute_template().data(), static_cast<int>(this->compute_template().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.HeadGroupSpec.compute_template");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->compute_template(), target);
  }

  // string image = 2;
  if (this->image().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image().data(), static_cast<int>(this->image().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.HeadGroupSpec.image");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->image(), target);
  }

  // string service_type = 3;
  if (this->service_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_type().data(), static_cast<int>(this->service_type().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.HeadGroupSpec.service_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->service_type(), target);
  }

  // map<string, string> ray_start_params = 4;
  if (!this->ray_start_params().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.core.HeadGroupSpec.RayStartParamsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.core.HeadGroupSpec.RayStartParamsEntry.value");
      }
    };

    if (false &&
        this->ray_start_params().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->ray_start_params().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->ray_start_params().begin();
          it != this->ray_start_params().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<HeadGroupSpec_RayStartParamsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(ray_start_params_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(4, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<HeadGroupSpec_RayStartParamsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->ray_start_params().begin();
          it != this->ray_start_params().end(); ++it) {
        entry.reset(ray_start_params_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(4, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.HeadGroupSpec)
  return target;
}

size_t HeadGroupSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.HeadGroupSpec)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> ray_start_params = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->ray_start_params_size());
  {
    ::std::unique_ptr<HeadGroupSpec_RayStartParamsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->ray_start_params().begin();
        it != this->ray_start_params().end(); ++it) {
      entry.reset(ray_start_params_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string compute_template = 1;
  if (this->compute_template().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->compute_template());
  }

  // string image = 2;
  if (this->image().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->image());
  }

  // string service_type = 3;
  if (this->service_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeadGroupSpec::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.HeadGroupSpec)
  GOOGLE_DCHECK_NE(&from, this);
  const HeadGroupSpec* source =
      ::google::protobuf::DynamicCastToGenerated<HeadGroupSpec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.HeadGroupSpec)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.HeadGroupSpec)
    MergeFrom(*source);
  }
}

void HeadGroupSpec::MergeFrom(const HeadGroupSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.HeadGroupSpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ray_start_params_.MergeFrom(from.ray_start_params_);
  if (from.compute_template().size() > 0) {

    compute_template_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.compute_template_);
  }
  if (from.image().size() > 0) {

    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  if (from.service_type().size() > 0) {

    service_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_type_);
  }
}

void HeadGroupSpec::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.HeadGroupSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeadGroupSpec::CopyFrom(const HeadGroupSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.HeadGroupSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeadGroupSpec::IsInitialized() const {
  return true;
}

void HeadGroupSpec::Swap(HeadGroupSpec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeadGroupSpec::InternalSwap(HeadGroupSpec* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ray_start_params_.Swap(&other->ray_start_params_);
  compute_template_.Swap(&other->compute_template_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  image_.Swap(&other->image_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  service_type_.Swap(&other->service_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata HeadGroupSpec::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fcore_2fresource_2eproto);
  return ::file_level_metadata_flyteidl_2fcore_2fresource_2eproto[kIndexInFileMessages];
}


// ===================================================================

WorkerGroupSpec_RayStartParamsEntry_DoNotUse::WorkerGroupSpec_RayStartParamsEntry_DoNotUse() {}
WorkerGroupSpec_RayStartParamsEntry_DoNotUse::WorkerGroupSpec_RayStartParamsEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void WorkerGroupSpec_RayStartParamsEntry_DoNotUse::MergeFrom(const WorkerGroupSpec_RayStartParamsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata WorkerGroupSpec_RayStartParamsEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fcore_2fresource_2eproto);
  return ::file_level_metadata_flyteidl_2fcore_2fresource_2eproto[5];
}
void WorkerGroupSpec_RayStartParamsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WorkerGroupSpec_RayStartParamsEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      WorkerGroupSpec_RayStartParamsEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "flyteidl.core.WorkerGroupSpec.RayStartParamsEntry.key"));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.value().data(), static_cast<int>(parser.value().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "flyteidl.core.WorkerGroupSpec.RayStartParamsEntry.value"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void WorkerGroupSpec::InitAsDefaultInstance() {
}
class WorkerGroupSpec::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorkerGroupSpec::kGroupNameFieldNumber;
const int WorkerGroupSpec::kComputeTemplateFieldNumber;
const int WorkerGroupSpec::kImageFieldNumber;
const int WorkerGroupSpec::kReplicasFieldNumber;
const int WorkerGroupSpec::kMinReplicasFieldNumber;
const int WorkerGroupSpec::kMaxReplicasFieldNumber;
const int WorkerGroupSpec::kRayStartParamsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorkerGroupSpec::WorkerGroupSpec()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.core.WorkerGroupSpec)
}
WorkerGroupSpec::WorkerGroupSpec(const WorkerGroupSpec& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ray_start_params_.MergeFrom(from.ray_start_params_);
  group_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.group_name().size() > 0) {
    group_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_name_);
  }
  compute_template_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.compute_template().size() > 0) {
    compute_template_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.compute_template_);
  }
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.image().size() > 0) {
    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  ::memcpy(&replicas_, &from.replicas_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_replicas_) -
    reinterpret_cast<char*>(&replicas_)) + sizeof(max_replicas_));
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.WorkerGroupSpec)
}

void WorkerGroupSpec::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_WorkerGroupSpec_flyteidl_2fcore_2fresource_2eproto.base);
  group_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  compute_template_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&replicas_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_replicas_) -
      reinterpret_cast<char*>(&replicas_)) + sizeof(max_replicas_));
}

WorkerGroupSpec::~WorkerGroupSpec() {
  // @@protoc_insertion_point(destructor:flyteidl.core.WorkerGroupSpec)
  SharedDtor();
}

void WorkerGroupSpec::SharedDtor() {
  group_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  compute_template_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WorkerGroupSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkerGroupSpec& WorkerGroupSpec::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_WorkerGroupSpec_flyteidl_2fcore_2fresource_2eproto.base);
  return *internal_default_instance();
}


void WorkerGroupSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.core.WorkerGroupSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ray_start_params_.Clear();
  group_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  compute_template_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&replicas_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_replicas_) -
      reinterpret_cast<char*>(&replicas_)) + sizeof(max_replicas_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WorkerGroupSpec::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<WorkerGroupSpec*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string group_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.core.WorkerGroupSpec.group_name");
        object = msg->mutable_group_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string compute_template = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.core.WorkerGroupSpec.compute_template");
        object = msg->mutable_compute_template();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string image = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.core.WorkerGroupSpec.image");
        object = msg->mutable_image();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 replicas = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_replicas(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 min_replicas = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_min_replicas(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 max_replicas = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_max_replicas(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // map<string, string> ray_start_params = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::flyteidl::core::WorkerGroupSpec_RayStartParamsEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->ray_start_params_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 58 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WorkerGroupSpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.core.WorkerGroupSpec)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string group_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_name().data(), static_cast<int>(this->group_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.WorkerGroupSpec.group_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string compute_template = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_compute_template()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->compute_template().data(), static_cast<int>(this->compute_template().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.WorkerGroupSpec.compute_template"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string image = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->image().data(), static_cast<int>(this->image().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.WorkerGroupSpec.image"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 replicas = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replicas_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 min_replicas = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_replicas_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_replicas = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_replicas_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> ray_start_params = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          WorkerGroupSpec_RayStartParamsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              WorkerGroupSpec_RayStartParamsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&ray_start_params_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.WorkerGroupSpec.RayStartParamsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.core.WorkerGroupSpec.RayStartParamsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.core.WorkerGroupSpec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.core.WorkerGroupSpec)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WorkerGroupSpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.core.WorkerGroupSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string group_name = 1;
  if (this->group_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_name().data(), static_cast<int>(this->group_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.WorkerGroupSpec.group_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->group_name(), output);
  }

  // string compute_template = 2;
  if (this->compute_template().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->compute_template().data(), static_cast<int>(this->compute_template().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.WorkerGroupSpec.compute_template");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->compute_template(), output);
  }

  // string image = 3;
  if (this->image().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image().data(), static_cast<int>(this->image().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.WorkerGroupSpec.image");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->image(), output);
  }

  // int32 replicas = 4;
  if (this->replicas() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->replicas(), output);
  }

  // int32 min_replicas = 5;
  if (this->min_replicas() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->min_replicas(), output);
  }

  // int32 max_replicas = 6;
  if (this->max_replicas() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->max_replicas(), output);
  }

  // map<string, string> ray_start_params = 7;
  if (!this->ray_start_params().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.core.WorkerGroupSpec.RayStartParamsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.core.WorkerGroupSpec.RayStartParamsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->ray_start_params().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->ray_start_params().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->ray_start_params().begin();
          it != this->ray_start_params().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<WorkerGroupSpec_RayStartParamsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(ray_start_params_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(7, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<WorkerGroupSpec_RayStartParamsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->ray_start_params().begin();
          it != this->ray_start_params().end(); ++it) {
        entry.reset(ray_start_params_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(7, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.core.WorkerGroupSpec)
}

::google::protobuf::uint8* WorkerGroupSpec::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.core.WorkerGroupSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string group_name = 1;
  if (this->group_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_name().data(), static_cast<int>(this->group_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.WorkerGroupSpec.group_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->group_name(), target);
  }

  // string compute_template = 2;
  if (this->compute_template().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->compute_template().data(), static_cast<int>(this->compute_template().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.WorkerGroupSpec.compute_template");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->compute_template(), target);
  }

  // string image = 3;
  if (this->image().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->image().data(), static_cast<int>(this->image().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.core.WorkerGroupSpec.image");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->image(), target);
  }

  // int32 replicas = 4;
  if (this->replicas() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->replicas(), target);
  }

  // int32 min_replicas = 5;
  if (this->min_replicas() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->min_replicas(), target);
  }

  // int32 max_replicas = 6;
  if (this->max_replicas() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->max_replicas(), target);
  }

  // map<string, string> ray_start_params = 7;
  if (!this->ray_start_params().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.core.WorkerGroupSpec.RayStartParamsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.core.WorkerGroupSpec.RayStartParamsEntry.value");
      }
    };

    if (false &&
        this->ray_start_params().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->ray_start_params().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->ray_start_params().begin();
          it != this->ray_start_params().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<WorkerGroupSpec_RayStartParamsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(ray_start_params_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(7, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<WorkerGroupSpec_RayStartParamsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->ray_start_params().begin();
          it != this->ray_start_params().end(); ++it) {
        entry.reset(ray_start_params_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(7, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.core.WorkerGroupSpec)
  return target;
}

size_t WorkerGroupSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.core.WorkerGroupSpec)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> ray_start_params = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->ray_start_params_size());
  {
    ::std::unique_ptr<WorkerGroupSpec_RayStartParamsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->ray_start_params().begin();
        it != this->ray_start_params().end(); ++it) {
      entry.reset(ray_start_params_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string group_name = 1;
  if (this->group_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group_name());
  }

  // string compute_template = 2;
  if (this->compute_template().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->compute_template());
  }

  // string image = 3;
  if (this->image().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->image());
  }

  // int32 replicas = 4;
  if (this->replicas() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->replicas());
  }

  // int32 min_replicas = 5;
  if (this->min_replicas() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->min_replicas());
  }

  // int32 max_replicas = 6;
  if (this->max_replicas() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_replicas());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkerGroupSpec::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.core.WorkerGroupSpec)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkerGroupSpec* source =
      ::google::protobuf::DynamicCastToGenerated<WorkerGroupSpec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.core.WorkerGroupSpec)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.core.WorkerGroupSpec)
    MergeFrom(*source);
  }
}

void WorkerGroupSpec::MergeFrom(const WorkerGroupSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.core.WorkerGroupSpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ray_start_params_.MergeFrom(from.ray_start_params_);
  if (from.group_name().size() > 0) {

    group_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_name_);
  }
  if (from.compute_template().size() > 0) {

    compute_template_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.compute_template_);
  }
  if (from.image().size() > 0) {

    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  if (from.replicas() != 0) {
    set_replicas(from.replicas());
  }
  if (from.min_replicas() != 0) {
    set_min_replicas(from.min_replicas());
  }
  if (from.max_replicas() != 0) {
    set_max_replicas(from.max_replicas());
  }
}

void WorkerGroupSpec::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.core.WorkerGroupSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkerGroupSpec::CopyFrom(const WorkerGroupSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.core.WorkerGroupSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerGroupSpec::IsInitialized() const {
  return true;
}

void WorkerGroupSpec::Swap(WorkerGroupSpec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorkerGroupSpec::InternalSwap(WorkerGroupSpec* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ray_start_params_.Swap(&other->ray_start_params_);
  group_name_.Swap(&other->group_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  compute_template_.Swap(&other->compute_template_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  image_.Swap(&other->image_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(replicas_, other->replicas_);
  swap(min_replicas_, other->min_replicas_);
  swap(max_replicas_, other->max_replicas_);
}

::google::protobuf::Metadata WorkerGroupSpec::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fcore_2fresource_2eproto);
  return ::file_level_metadata_flyteidl_2fcore_2fresource_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace core
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::flyteidl::core::Resource* Arena::CreateMaybeMessage< ::flyteidl::core::Resource >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::core::Resource >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::RayCluster* Arena::CreateMaybeMessage< ::flyteidl::core::RayCluster >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::core::RayCluster >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::ClusterSpec* Arena::CreateMaybeMessage< ::flyteidl::core::ClusterSpec >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::core::ClusterSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::HeadGroupSpec_RayStartParamsEntry_DoNotUse* Arena::CreateMaybeMessage< ::flyteidl::core::HeadGroupSpec_RayStartParamsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::core::HeadGroupSpec_RayStartParamsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::HeadGroupSpec* Arena::CreateMaybeMessage< ::flyteidl::core::HeadGroupSpec >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::core::HeadGroupSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::WorkerGroupSpec_RayStartParamsEntry_DoNotUse* Arena::CreateMaybeMessage< ::flyteidl::core::WorkerGroupSpec_RayStartParamsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::core::WorkerGroupSpec_RayStartParamsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::WorkerGroupSpec* Arena::CreateMaybeMessage< ::flyteidl::core::WorkerGroupSpec >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::core::WorkerGroupSpec >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
