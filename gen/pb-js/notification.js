// source: flyteidl/admin/common.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.flyteidl.admin.Notification');
goog.provide('proto.flyteidl.admin.Notification.TypeCase');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.flyteidl.admin.EmailNotification');
goog.require('proto.flyteidl.admin.PagerDutyNotification');
goog.require('proto.flyteidl.admin.SlackNotification');

goog.forwardDeclare('proto.flyteidl.core.WorkflowExecution.Phase');
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.flyteidl.admin.Notification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.flyteidl.admin.Notification.repeatedFields_, proto.flyteidl.admin.Notification.oneofGroups_);
};
goog.inherits(proto.flyteidl.admin.Notification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.flyteidl.admin.Notification.displayName = 'proto.flyteidl.admin.Notification';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.flyteidl.admin.Notification.repeatedFields_ = [1];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.flyteidl.admin.Notification.oneofGroups_ = [[2,3,4]];

/**
 * @enum {number}
 */
proto.flyteidl.admin.Notification.TypeCase = {
  TYPE_NOT_SET: 0,
  EMAIL: 2,
  PAGER_DUTY: 3,
  SLACK: 4
};

/**
 * @return {proto.flyteidl.admin.Notification.TypeCase}
 */
proto.flyteidl.admin.Notification.prototype.getTypeCase = function() {
  return /** @type {proto.flyteidl.admin.Notification.TypeCase} */(jspb.Message.computeOneofCase(this, proto.flyteidl.admin.Notification.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.flyteidl.admin.Notification.prototype.toObject = function(opt_includeInstance) {
  return proto.flyteidl.admin.Notification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.flyteidl.admin.Notification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flyteidl.admin.Notification.toObject = function(includeInstance, msg) {
  var f, obj = {
    phasesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    email: (f = msg.getEmail()) && proto.flyteidl.admin.EmailNotification.toObject(includeInstance, f),
    pagerDuty: (f = msg.getPagerDuty()) && proto.flyteidl.admin.PagerDutyNotification.toObject(includeInstance, f),
    slack: (f = msg.getSlack()) && proto.flyteidl.admin.SlackNotification.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.flyteidl.admin.Notification}
 */
proto.flyteidl.admin.Notification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.flyteidl.admin.Notification;
  return proto.flyteidl.admin.Notification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.flyteidl.admin.Notification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.flyteidl.admin.Notification}
 */
proto.flyteidl.admin.Notification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<!proto.flyteidl.core.WorkflowExecution.Phase>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addPhases(values[i]);
      }
      break;
    case 2:
      var value = new proto.flyteidl.admin.EmailNotification;
      reader.readMessage(value,proto.flyteidl.admin.EmailNotification.deserializeBinaryFromReader);
      msg.setEmail(value);
      break;
    case 3:
      var value = new proto.flyteidl.admin.PagerDutyNotification;
      reader.readMessage(value,proto.flyteidl.admin.PagerDutyNotification.deserializeBinaryFromReader);
      msg.setPagerDuty(value);
      break;
    case 4:
      var value = new proto.flyteidl.admin.SlackNotification;
      reader.readMessage(value,proto.flyteidl.admin.SlackNotification.deserializeBinaryFromReader);
      msg.setSlack(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.flyteidl.admin.Notification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.flyteidl.admin.Notification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.flyteidl.admin.Notification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.flyteidl.admin.Notification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPhasesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      1,
      f
    );
  }
  f = message.getEmail();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.flyteidl.admin.EmailNotification.serializeBinaryToWriter
    );
  }
  f = message.getPagerDuty();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.flyteidl.admin.PagerDutyNotification.serializeBinaryToWriter
    );
  }
  f = message.getSlack();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.flyteidl.admin.SlackNotification.serializeBinaryToWriter
    );
  }
};


/**
 * repeated flyteidl.core.WorkflowExecution.Phase phases = 1;
 * @return {!Array<!proto.flyteidl.core.WorkflowExecution.Phase>}
 */
proto.flyteidl.admin.Notification.prototype.getPhasesList = function() {
  return /** @type {!Array<!proto.flyteidl.core.WorkflowExecution.Phase>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<!proto.flyteidl.core.WorkflowExecution.Phase>} value
 * @return {!proto.flyteidl.admin.Notification} returns this
 */
proto.flyteidl.admin.Notification.prototype.setPhasesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!proto.flyteidl.core.WorkflowExecution.Phase} value
 * @param {number=} opt_index
 * @return {!proto.flyteidl.admin.Notification} returns this
 */
proto.flyteidl.admin.Notification.prototype.addPhases = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.flyteidl.admin.Notification} returns this
 */
proto.flyteidl.admin.Notification.prototype.clearPhasesList = function() {
  return this.setPhasesList([]);
};


/**
 * optional EmailNotification email = 2;
 * @return {?proto.flyteidl.admin.EmailNotification}
 */
proto.flyteidl.admin.Notification.prototype.getEmail = function() {
  return /** @type{?proto.flyteidl.admin.EmailNotification} */ (
    jspb.Message.getWrapperField(this, proto.flyteidl.admin.EmailNotification, 2));
};


/**
 * @param {?proto.flyteidl.admin.EmailNotification|undefined} value
 * @return {!proto.flyteidl.admin.Notification} returns this
*/
proto.flyteidl.admin.Notification.prototype.setEmail = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.flyteidl.admin.Notification.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.flyteidl.admin.Notification} returns this
 */
proto.flyteidl.admin.Notification.prototype.clearEmail = function() {
  return this.setEmail(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.flyteidl.admin.Notification.prototype.hasEmail = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PagerDutyNotification pager_duty = 3;
 * @return {?proto.flyteidl.admin.PagerDutyNotification}
 */
proto.flyteidl.admin.Notification.prototype.getPagerDuty = function() {
  return /** @type{?proto.flyteidl.admin.PagerDutyNotification} */ (
    jspb.Message.getWrapperField(this, proto.flyteidl.admin.PagerDutyNotification, 3));
};


/**
 * @param {?proto.flyteidl.admin.PagerDutyNotification|undefined} value
 * @return {!proto.flyteidl.admin.Notification} returns this
*/
proto.flyteidl.admin.Notification.prototype.setPagerDuty = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.flyteidl.admin.Notification.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.flyteidl.admin.Notification} returns this
 */
proto.flyteidl.admin.Notification.prototype.clearPagerDuty = function() {
  return this.setPagerDuty(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.flyteidl.admin.Notification.prototype.hasPagerDuty = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional SlackNotification slack = 4;
 * @return {?proto.flyteidl.admin.SlackNotification}
 */
proto.flyteidl.admin.Notification.prototype.getSlack = function() {
  return /** @type{?proto.flyteidl.admin.SlackNotification} */ (
    jspb.Message.getWrapperField(this, proto.flyteidl.admin.SlackNotification, 4));
};


/**
 * @param {?proto.flyteidl.admin.SlackNotification|undefined} value
 * @return {!proto.flyteidl.admin.Notification} returns this
*/
proto.flyteidl.admin.Notification.prototype.setSlack = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.flyteidl.admin.Notification.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.flyteidl.admin.Notification} returns this
 */
proto.flyteidl.admin.Notification.prototype.clearSlack = function() {
  return this.setSlack(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.flyteidl.admin.Notification.prototype.hasSlack = function() {
  return jspb.Message.getField(this, 4) != null;
};


