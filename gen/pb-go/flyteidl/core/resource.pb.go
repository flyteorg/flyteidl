// Code generated by protoc-gen-go. DO NOT EDIT.
// source: flyteidl/core/resource.proto

package core

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Cluster resource that task and workflow will run on
type Resource struct {
	// Types that are valid to be assigned to Value:
	//	*Resource_Ray
	Value                isResource_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Resource) Reset()         { *m = Resource{} }
func (m *Resource) String() string { return proto.CompactTextString(m) }
func (*Resource) ProtoMessage()    {}
func (*Resource) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7de70f5bc10f4aa, []int{0}
}

func (m *Resource) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Resource.Unmarshal(m, b)
}
func (m *Resource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Resource.Marshal(b, m, deterministic)
}
func (m *Resource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Resource.Merge(m, src)
}
func (m *Resource) XXX_Size() int {
	return xxx_messageInfo_Resource.Size(m)
}
func (m *Resource) XXX_DiscardUnknown() {
	xxx_messageInfo_Resource.DiscardUnknown(m)
}

var xxx_messageInfo_Resource proto.InternalMessageInfo

type isResource_Value interface {
	isResource_Value()
}

type Resource_Ray struct {
	Ray *RayCluster `protobuf:"bytes,1,opt,name=ray,proto3,oneof"`
}

func (*Resource_Ray) isResource_Value() {}

func (m *Resource) GetValue() isResource_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Resource) GetRay() *RayCluster {
	if x, ok := m.GetValue().(*Resource_Ray); ok {
		return x.Ray
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Resource) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Resource_Ray)(nil),
	}
}

// RayJobSpec defines the desired state of RayJob
type RayJob struct {
	// RayClusterSpec is the cluster template to run the job
	RayCluster *RayCluster `protobuf:"bytes,1,opt,name=rayCluster,proto3" json:"rayCluster,omitempty"`
	// RuntimeEnv is base64 encoded.
	// Ray runtime environments: https://docs.ray.io/en/latest/ray-core/handling-dependencies.html#runtime-environments
	RuntimeEnv string `protobuf:"bytes,2,opt,name=RuntimeEnv,proto3" json:"RuntimeEnv,omitempty"`
	// ShutdownAfterJobFinishes will determine whether to delete the ray cluster once rayJob succeed or failed.
	ShutdownAfterJobFinishes bool `protobuf:"varint,3,opt,name=ShutdownAfterJobFinishes,proto3" json:"ShutdownAfterJobFinishes,omitempty"`
	// TTLSecondsAfterFinished is the TTL to clean up RayCluster.
	// It's only working when ShutdownAfterJobFinishes set to true.
	TTLSecondsAfterFinished int32    `protobuf:"varint,4,opt,name=TTLSecondsAfterFinished,proto3" json:"TTLSecondsAfterFinished,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *RayJob) Reset()         { *m = RayJob{} }
func (m *RayJob) String() string { return proto.CompactTextString(m) }
func (*RayJob) ProtoMessage()    {}
func (*RayJob) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7de70f5bc10f4aa, []int{1}
}

func (m *RayJob) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RayJob.Unmarshal(m, b)
}
func (m *RayJob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RayJob.Marshal(b, m, deterministic)
}
func (m *RayJob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RayJob.Merge(m, src)
}
func (m *RayJob) XXX_Size() int {
	return xxx_messageInfo_RayJob.Size(m)
}
func (m *RayJob) XXX_DiscardUnknown() {
	xxx_messageInfo_RayJob.DiscardUnknown(m)
}

var xxx_messageInfo_RayJob proto.InternalMessageInfo

func (m *RayJob) GetRayCluster() *RayCluster {
	if m != nil {
		return m.RayCluster
	}
	return nil
}

func (m *RayJob) GetRuntimeEnv() string {
	if m != nil {
		return m.RuntimeEnv
	}
	return ""
}

func (m *RayJob) GetShutdownAfterJobFinishes() bool {
	if m != nil {
		return m.ShutdownAfterJobFinishes
	}
	return false
}

func (m *RayJob) GetTTLSecondsAfterFinished() int32 {
	if m != nil {
		return m.TTLSecondsAfterFinished
	}
	return 0
}

// Define Ray cluster spec
type RayCluster struct {
	// Required field. This field indicates ray cluster configuration
	ClusterSpec          *ClusterSpec `protobuf:"bytes,1,opt,name=cluster_spec,json=clusterSpec,proto3" json:"cluster_spec,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *RayCluster) Reset()         { *m = RayCluster{} }
func (m *RayCluster) String() string { return proto.CompactTextString(m) }
func (*RayCluster) ProtoMessage()    {}
func (*RayCluster) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7de70f5bc10f4aa, []int{2}
}

func (m *RayCluster) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RayCluster.Unmarshal(m, b)
}
func (m *RayCluster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RayCluster.Marshal(b, m, deterministic)
}
func (m *RayCluster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RayCluster.Merge(m, src)
}
func (m *RayCluster) XXX_Size() int {
	return xxx_messageInfo_RayCluster.Size(m)
}
func (m *RayCluster) XXX_DiscardUnknown() {
	xxx_messageInfo_RayCluster.DiscardUnknown(m)
}

var xxx_messageInfo_RayCluster proto.InternalMessageInfo

func (m *RayCluster) GetClusterSpec() *ClusterSpec {
	if m != nil {
		return m.ClusterSpec
	}
	return nil
}

type ClusterSpec struct {
	// The head group configuration
	HeadGroupSpec *HeadGroupSpec `protobuf:"bytes,1,opt,name=head_group_spec,json=headGroupSpec,proto3" json:"head_group_spec,omitempty"`
	// The worker group configurations
	WorkerGroupSpec      []*WorkerGroupSpec `protobuf:"bytes,2,rep,name=worker_group_spec,json=workerGroupSpec,proto3" json:"worker_group_spec,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ClusterSpec) Reset()         { *m = ClusterSpec{} }
func (m *ClusterSpec) String() string { return proto.CompactTextString(m) }
func (*ClusterSpec) ProtoMessage()    {}
func (*ClusterSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7de70f5bc10f4aa, []int{3}
}

func (m *ClusterSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterSpec.Unmarshal(m, b)
}
func (m *ClusterSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterSpec.Marshal(b, m, deterministic)
}
func (m *ClusterSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterSpec.Merge(m, src)
}
func (m *ClusterSpec) XXX_Size() int {
	return xxx_messageInfo_ClusterSpec.Size(m)
}
func (m *ClusterSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterSpec proto.InternalMessageInfo

func (m *ClusterSpec) GetHeadGroupSpec() *HeadGroupSpec {
	if m != nil {
		return m.HeadGroupSpec
	}
	return nil
}

func (m *ClusterSpec) GetWorkerGroupSpec() []*WorkerGroupSpec {
	if m != nil {
		return m.WorkerGroupSpec
	}
	return nil
}

type HeadGroupSpec struct {
	// Optional. The ray start params of head node group
	RayStartParams       map[string]string `protobuf:"bytes,1,rep,name=ray_start_params,json=rayStartParams,proto3" json:"ray_start_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *HeadGroupSpec) Reset()         { *m = HeadGroupSpec{} }
func (m *HeadGroupSpec) String() string { return proto.CompactTextString(m) }
func (*HeadGroupSpec) ProtoMessage()    {}
func (*HeadGroupSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7de70f5bc10f4aa, []int{4}
}

func (m *HeadGroupSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HeadGroupSpec.Unmarshal(m, b)
}
func (m *HeadGroupSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HeadGroupSpec.Marshal(b, m, deterministic)
}
func (m *HeadGroupSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeadGroupSpec.Merge(m, src)
}
func (m *HeadGroupSpec) XXX_Size() int {
	return xxx_messageInfo_HeadGroupSpec.Size(m)
}
func (m *HeadGroupSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_HeadGroupSpec.DiscardUnknown(m)
}

var xxx_messageInfo_HeadGroupSpec proto.InternalMessageInfo

func (m *HeadGroupSpec) GetRayStartParams() map[string]string {
	if m != nil {
		return m.RayStartParams
	}
	return nil
}

type WorkerGroupSpec struct {
	// Required. Group name of the current worker group
	GroupName string `protobuf:"bytes,1,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	// Required. Desired replicas of the worker group
	Replicas int32 `protobuf:"varint,2,opt,name=replicas,proto3" json:"replicas,omitempty"`
	// Optional. Min replicas of the worker group
	MinReplicas int32 `protobuf:"varint,3,opt,name=min_replicas,json=minReplicas,proto3" json:"min_replicas,omitempty"`
	// Optional. Max replicas of the worker group
	MaxReplicas int32 `protobuf:"varint,4,opt,name=max_replicas,json=maxReplicas,proto3" json:"max_replicas,omitempty"`
	// Optional. The ray start params of worker node group
	RayStartParams       map[string]string `protobuf:"bytes,5,rep,name=ray_start_params,json=rayStartParams,proto3" json:"ray_start_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *WorkerGroupSpec) Reset()         { *m = WorkerGroupSpec{} }
func (m *WorkerGroupSpec) String() string { return proto.CompactTextString(m) }
func (*WorkerGroupSpec) ProtoMessage()    {}
func (*WorkerGroupSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7de70f5bc10f4aa, []int{5}
}

func (m *WorkerGroupSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WorkerGroupSpec.Unmarshal(m, b)
}
func (m *WorkerGroupSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WorkerGroupSpec.Marshal(b, m, deterministic)
}
func (m *WorkerGroupSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkerGroupSpec.Merge(m, src)
}
func (m *WorkerGroupSpec) XXX_Size() int {
	return xxx_messageInfo_WorkerGroupSpec.Size(m)
}
func (m *WorkerGroupSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkerGroupSpec.DiscardUnknown(m)
}

var xxx_messageInfo_WorkerGroupSpec proto.InternalMessageInfo

func (m *WorkerGroupSpec) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *WorkerGroupSpec) GetReplicas() int32 {
	if m != nil {
		return m.Replicas
	}
	return 0
}

func (m *WorkerGroupSpec) GetMinReplicas() int32 {
	if m != nil {
		return m.MinReplicas
	}
	return 0
}

func (m *WorkerGroupSpec) GetMaxReplicas() int32 {
	if m != nil {
		return m.MaxReplicas
	}
	return 0
}

func (m *WorkerGroupSpec) GetRayStartParams() map[string]string {
	if m != nil {
		return m.RayStartParams
	}
	return nil
}

func init() {
	proto.RegisterType((*Resource)(nil), "flyteidl.core.Resource")
	proto.RegisterType((*RayJob)(nil), "flyteidl.core.RayJob")
	proto.RegisterType((*RayCluster)(nil), "flyteidl.core.RayCluster")
	proto.RegisterType((*ClusterSpec)(nil), "flyteidl.core.ClusterSpec")
	proto.RegisterType((*HeadGroupSpec)(nil), "flyteidl.core.HeadGroupSpec")
	proto.RegisterMapType((map[string]string)(nil), "flyteidl.core.HeadGroupSpec.RayStartParamsEntry")
	proto.RegisterType((*WorkerGroupSpec)(nil), "flyteidl.core.WorkerGroupSpec")
	proto.RegisterMapType((map[string]string)(nil), "flyteidl.core.WorkerGroupSpec.RayStartParamsEntry")
}

func init() { proto.RegisterFile("flyteidl/core/resource.proto", fileDescriptor_b7de70f5bc10f4aa) }

var fileDescriptor_b7de70f5bc10f4aa = []byte{
	// 529 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x94, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0x71, 0xd2, 0x94, 0x64, 0xd2, 0x90, 0xb2, 0x20, 0x61, 0xa2, 0x52, 0x82, 0x4f, 0xb9,
	0x34, 0x46, 0x01, 0xa1, 0x52, 0x89, 0x43, 0x03, 0x85, 0x2a, 0x20, 0x84, 0x36, 0x95, 0x90, 0x2a,
	0xa4, 0x68, 0x6d, 0x4f, 0x1c, 0xab, 0xb6, 0xd7, 0xda, 0x5d, 0x37, 0xf5, 0xd3, 0xf0, 0x06, 0x5c,
	0x78, 0x1a, 0xde, 0x06, 0x79, 0x63, 0x12, 0x27, 0x6a, 0xcb, 0xad, 0x37, 0xcf, 0xfc, 0xff, 0x7e,
	0x9e, 0x9d, 0x1d, 0x0d, 0xec, 0x4d, 0xc3, 0x4c, 0x61, 0xe0, 0x85, 0xb6, 0xcb, 0x05, 0xda, 0x02,
	0x25, 0x4f, 0x85, 0x8b, 0xfd, 0x44, 0x70, 0xc5, 0x49, 0xeb, 0x9f, 0xda, 0xcf, 0xd5, 0xce, 0x73,
	0x9f, 0x73, 0x3f, 0x44, 0x5b, 0x8b, 0x4e, 0x3a, 0xb5, 0x55, 0x10, 0xa1, 0x54, 0x2c, 0x4a, 0x16,
	0x7e, 0x6b, 0x08, 0x75, 0x5a, 0x10, 0xc8, 0x01, 0x54, 0x05, 0xcb, 0x4c, 0xa3, 0x6b, 0xf4, 0x9a,
	0x83, 0xa7, 0xfd, 0x35, 0x52, 0x9f, 0xb2, 0xec, 0x7d, 0x98, 0x4a, 0x85, 0xe2, 0xf4, 0x1e, 0xcd,
	0x7d, 0xc3, 0xfb, 0x50, 0xbb, 0x64, 0x61, 0x8a, 0xd6, 0x1f, 0x03, 0xb6, 0x29, 0xcb, 0x46, 0xdc,
	0x21, 0x6f, 0x01, 0xc4, 0xd2, 0xf8, 0x5f, 0x12, 0x2d, 0x99, 0xc9, 0x3e, 0x00, 0x4d, 0xe3, 0xbc,
	0xbe, 0x93, 0xf8, 0xd2, 0xac, 0x74, 0x8d, 0x5e, 0x83, 0x96, 0x32, 0xe4, 0x08, 0xcc, 0xf1, 0x2c,
	0x55, 0x1e, 0x9f, 0xc7, 0xc7, 0x53, 0x85, 0x62, 0xc4, 0x9d, 0x8f, 0x41, 0x1c, 0xc8, 0x19, 0x4a,
	0xb3, 0xda, 0x35, 0x7a, 0x75, 0x7a, 0xa3, 0x4e, 0x0e, 0xe1, 0xc9, 0xd9, 0xd9, 0x97, 0x31, 0xba,
	0x3c, 0xf6, 0xa4, 0x56, 0x0b, 0xc9, 0x33, 0xb7, 0xba, 0x46, 0xaf, 0x46, 0x6f, 0x92, 0xad, 0xcf,
	0x00, 0xab, 0x7a, 0xc9, 0x3b, 0xd8, 0x71, 0x17, 0x9f, 0x13, 0x99, 0xa0, 0x5b, 0x5c, 0xb0, 0xb3,
	0x71, 0xc1, 0xc2, 0x3d, 0x4e, 0xd0, 0xa5, 0x4d, 0x77, 0x15, 0x58, 0x3f, 0x0d, 0x68, 0x96, 0x44,
	0xf2, 0x01, 0xda, 0x33, 0x64, 0xde, 0xc4, 0x17, 0x3c, 0x4d, 0xca, 0xc4, 0xbd, 0x0d, 0xe2, 0x29,
	0x32, 0xef, 0x53, 0x6e, 0xd2, 0xcc, 0xd6, 0xac, 0x1c, 0x92, 0x11, 0x3c, 0x9c, 0x73, 0x71, 0x81,
	0xa2, 0xcc, 0xa9, 0x74, 0xab, 0xbd, 0xe6, 0x60, 0x7f, 0x83, 0xf3, 0x5d, 0xfb, 0x56, 0xa4, 0xf6,
	0x7c, 0x3d, 0x61, 0xfd, 0x32, 0xa0, 0xb5, 0xf6, 0x33, 0x72, 0x0e, 0xbb, 0x82, 0x65, 0x13, 0xa9,
	0x98, 0x50, 0x93, 0x84, 0x09, 0x16, 0x49, 0xd3, 0xd0, 0xf0, 0x97, 0xb7, 0x15, 0x99, 0xbf, 0xf2,
	0x38, 0x3f, 0xf3, 0x4d, 0x1f, 0x39, 0x89, 0x95, 0xc8, 0xe8, 0x03, 0xb1, 0x96, 0xec, 0x1c, 0xc3,
	0xa3, 0x6b, 0x6c, 0x64, 0x17, 0xaa, 0x17, 0xb8, 0x98, 0xc3, 0x06, 0xcd, 0x3f, 0xc9, 0xe3, 0x62,
	0xd4, 0x8a, 0xb1, 0x58, 0x04, 0x47, 0x95, 0x43, 0xc3, 0xfa, 0x5d, 0x81, 0xf6, 0xc6, 0xad, 0xc8,
	0x33, 0x80, 0x45, 0x27, 0x62, 0x16, 0x61, 0x81, 0x69, 0xe8, 0xcc, 0x57, 0x16, 0x21, 0xe9, 0x40,
	0x5d, 0x60, 0x12, 0x06, 0x2e, 0x93, 0x9a, 0x57, 0xa3, 0xcb, 0x98, 0xbc, 0x80, 0x9d, 0x28, 0x88,
	0x27, 0x4b, 0xbd, 0xaa, 0xf5, 0x66, 0x14, 0xc4, 0xb4, 0x6c, 0x61, 0x57, 0x2b, 0xcb, 0x56, 0x61,
	0x61, 0x57, 0x4b, 0xcb, 0x8f, 0x6b, 0x7a, 0x56, 0xd3, 0x3d, 0x1b, 0xdc, 0xfe, 0x20, 0x77, 0xd4,
	0xb5, 0xe1, 0x9b, 0xf3, 0xd7, 0x7e, 0xa0, 0x66, 0xa9, 0xd3, 0x77, 0x79, 0x64, 0xeb, 0x92, 0xb8,
	0xf0, 0xed, 0xe5, 0x66, 0xf1, 0x31, 0xb6, 0x13, 0xe7, 0xc0, 0xe7, 0xf6, 0xda, 0xb2, 0x71, 0xb6,
	0xf5, 0xd2, 0x78, 0xf5, 0x37, 0x00, 0x00, 0xff, 0xff, 0x0b, 0x21, 0x50, 0x55, 0x84, 0x04, 0x00,
	0x00,
}
