// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/task.proto

#include "flyteidl/admin/task.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fdescription_5fentity_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_DescriptionEntity_flyteidl_2fadmin_2fdescription_5fentity_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2ftask_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_TaskClosure_flyteidl_2fadmin_2ftask_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2ftask_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_TaskSpec_flyteidl_2fadmin_2ftask_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2ftask_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Task_flyteidl_2fadmin_2ftask_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fcompiler_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CompiledTask_flyteidl_2fcore_2fcompiler_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fidentifier_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Identifier_flyteidl_2fcore_2fidentifier_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2ftasks_2eproto ::google::protobuf::internal::SCCInfo<9> scc_info_TaskTemplate_flyteidl_2fcore_2ftasks_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace flyteidl {
namespace admin {
class TaskCreateRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TaskCreateRequest> _instance;
} _TaskCreateRequest_default_instance_;
class TaskCreateResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TaskCreateResponse> _instance;
} _TaskCreateResponse_default_instance_;
class TaskDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Task> _instance;
} _Task_default_instance_;
class TaskListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TaskList> _instance;
} _TaskList_default_instance_;
class TaskSpecDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TaskSpec> _instance;
} _TaskSpec_default_instance_;
class TaskClosureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TaskClosure> _instance;
} _TaskClosure_default_instance_;
}  // namespace admin
}  // namespace flyteidl
static void InitDefaultsTaskCreateRequest_flyteidl_2fadmin_2ftask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_TaskCreateRequest_default_instance_;
    new (ptr) ::flyteidl::admin::TaskCreateRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::TaskCreateRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_TaskCreateRequest_flyteidl_2fadmin_2ftask_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsTaskCreateRequest_flyteidl_2fadmin_2ftask_2eproto}, {
      &scc_info_Identifier_flyteidl_2fcore_2fidentifier_2eproto.base,
      &scc_info_TaskSpec_flyteidl_2fadmin_2ftask_2eproto.base,}};

static void InitDefaultsTaskCreateResponse_flyteidl_2fadmin_2ftask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_TaskCreateResponse_default_instance_;
    new (ptr) ::flyteidl::admin::TaskCreateResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::TaskCreateResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TaskCreateResponse_flyteidl_2fadmin_2ftask_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTaskCreateResponse_flyteidl_2fadmin_2ftask_2eproto}, {}};

static void InitDefaultsTask_flyteidl_2fadmin_2ftask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_Task_default_instance_;
    new (ptr) ::flyteidl::admin::Task();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::Task::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Task_flyteidl_2fadmin_2ftask_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsTask_flyteidl_2fadmin_2ftask_2eproto}, {
      &scc_info_Identifier_flyteidl_2fcore_2fidentifier_2eproto.base,
      &scc_info_TaskClosure_flyteidl_2fadmin_2ftask_2eproto.base,}};

static void InitDefaultsTaskList_flyteidl_2fadmin_2ftask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_TaskList_default_instance_;
    new (ptr) ::flyteidl::admin::TaskList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::TaskList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TaskList_flyteidl_2fadmin_2ftask_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTaskList_flyteidl_2fadmin_2ftask_2eproto}, {
      &scc_info_Task_flyteidl_2fadmin_2ftask_2eproto.base,}};

static void InitDefaultsTaskSpec_flyteidl_2fadmin_2ftask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_TaskSpec_default_instance_;
    new (ptr) ::flyteidl::admin::TaskSpec();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::TaskSpec::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_TaskSpec_flyteidl_2fadmin_2ftask_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsTaskSpec_flyteidl_2fadmin_2ftask_2eproto}, {
      &scc_info_TaskTemplate_flyteidl_2fcore_2ftasks_2eproto.base,
      &scc_info_DescriptionEntity_flyteidl_2fadmin_2fdescription_5fentity_2eproto.base,}};

static void InitDefaultsTaskClosure_flyteidl_2fadmin_2ftask_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_TaskClosure_default_instance_;
    new (ptr) ::flyteidl::admin::TaskClosure();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::TaskClosure::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_TaskClosure_flyteidl_2fadmin_2ftask_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsTaskClosure_flyteidl_2fadmin_2ftask_2eproto}, {
      &scc_info_CompiledTask_flyteidl_2fcore_2fcompiler_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

void InitDefaults_flyteidl_2fadmin_2ftask_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_TaskCreateRequest_flyteidl_2fadmin_2ftask_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TaskCreateResponse_flyteidl_2fadmin_2ftask_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Task_flyteidl_2fadmin_2ftask_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TaskList_flyteidl_2fadmin_2ftask_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TaskSpec_flyteidl_2fadmin_2ftask_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TaskClosure_flyteidl_2fadmin_2ftask_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_flyteidl_2fadmin_2ftask_2eproto[6];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_flyteidl_2fadmin_2ftask_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fadmin_2ftask_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_flyteidl_2fadmin_2ftask_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskCreateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskCreateRequest, id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskCreateRequest, spec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskCreateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Task, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Task, id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Task, closure_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Task, short_description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskList, tasks_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskList, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskSpec, template__),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskSpec, description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskClosure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskClosure, compiled_task_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskClosure, created_at_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::flyteidl::admin::TaskCreateRequest)},
  { 7, -1, sizeof(::flyteidl::admin::TaskCreateResponse)},
  { 12, -1, sizeof(::flyteidl::admin::Task)},
  { 20, -1, sizeof(::flyteidl::admin::TaskList)},
  { 27, -1, sizeof(::flyteidl::admin::TaskSpec)},
  { 34, -1, sizeof(::flyteidl::admin::TaskClosure)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_TaskCreateRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_TaskCreateResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_Task_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_TaskList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_TaskSpec_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_TaskClosure_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_flyteidl_2fadmin_2ftask_2eproto = {
  {}, AddDescriptors_flyteidl_2fadmin_2ftask_2eproto, "flyteidl/admin/task.proto", schemas,
  file_default_instances, TableStruct_flyteidl_2fadmin_2ftask_2eproto::offsets,
  file_level_metadata_flyteidl_2fadmin_2ftask_2eproto, 6, file_level_enum_descriptors_flyteidl_2fadmin_2ftask_2eproto, file_level_service_descriptors_flyteidl_2fadmin_2ftask_2eproto,
};

const char descriptor_table_protodef_flyteidl_2fadmin_2ftask_2eproto[] =
  "\n\031flyteidl/admin/task.proto\022\016flyteidl.ad"
  "min\032\036flyteidl/core/identifier.proto\032\031fly"
  "teidl/core/tasks.proto\032\034flyteidl/core/co"
  "mpiler.proto\032\'flyteidl/admin/description"
  "_entity.proto\032\037google/protobuf/timestamp"
  ".proto\"b\n\021TaskCreateRequest\022%\n\002id\030\001 \001(\0132"
  "\031.flyteidl.core.Identifier\022&\n\004spec\030\002 \001(\013"
  "2\030.flyteidl.admin.TaskSpec\"\024\n\022TaskCreate"
  "Response\"v\n\004Task\022%\n\002id\030\001 \001(\0132\031.flyteidl."
  "core.Identifier\022,\n\007closure\030\002 \001(\0132\033.flyte"
  "idl.admin.TaskClosure\022\031\n\021short_descripti"
  "on\030\003 \001(\t\">\n\010TaskList\022#\n\005tasks\030\001 \003(\0132\024.fl"
  "yteidl.admin.Task\022\r\n\005token\030\002 \001(\t\"q\n\010Task"
  "Spec\022-\n\010template\030\001 \001(\0132\033.flyteidl.core.T"
  "askTemplate\0226\n\013description\030\002 \001(\0132!.flyte"
  "idl.admin.DescriptionEntity\"q\n\013TaskClosu"
  "re\0222\n\rcompiled_task\030\001 \001(\0132\033.flyteidl.cor"
  "e.CompiledTask\022.\n\ncreated_at\030\002 \001(\0132\032.goo"
  "gle.protobuf.TimestampB7Z5github.com/fly"
  "teorg/flyteidl/gen/pb-go/flyteidl/adminb"
  "\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_flyteidl_2fadmin_2ftask_2eproto = {
  false, InitDefaults_flyteidl_2fadmin_2ftask_2eproto, 
  descriptor_table_protodef_flyteidl_2fadmin_2ftask_2eproto,
  "flyteidl/admin/task.proto", &assign_descriptors_table_flyteidl_2fadmin_2ftask_2eproto, 807,
};

void AddDescriptors_flyteidl_2fadmin_2ftask_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[5] =
  {
    ::AddDescriptors_flyteidl_2fcore_2fidentifier_2eproto,
    ::AddDescriptors_flyteidl_2fcore_2ftasks_2eproto,
    ::AddDescriptors_flyteidl_2fcore_2fcompiler_2eproto,
    ::AddDescriptors_flyteidl_2fadmin_2fdescription_5fentity_2eproto,
    ::AddDescriptors_google_2fprotobuf_2ftimestamp_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_flyteidl_2fadmin_2ftask_2eproto, deps, 5);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_flyteidl_2fadmin_2ftask_2eproto = []() { AddDescriptors_flyteidl_2fadmin_2ftask_2eproto(); return true; }();
namespace flyteidl {
namespace admin {

// ===================================================================

void TaskCreateRequest::InitAsDefaultInstance() {
  ::flyteidl::admin::_TaskCreateRequest_default_instance_._instance.get_mutable()->id_ = const_cast< ::flyteidl::core::Identifier*>(
      ::flyteidl::core::Identifier::internal_default_instance());
  ::flyteidl::admin::_TaskCreateRequest_default_instance_._instance.get_mutable()->spec_ = const_cast< ::flyteidl::admin::TaskSpec*>(
      ::flyteidl::admin::TaskSpec::internal_default_instance());
}
class TaskCreateRequest::HasBitSetters {
 public:
  static const ::flyteidl::core::Identifier& id(const TaskCreateRequest* msg);
  static const ::flyteidl::admin::TaskSpec& spec(const TaskCreateRequest* msg);
};

const ::flyteidl::core::Identifier&
TaskCreateRequest::HasBitSetters::id(const TaskCreateRequest* msg) {
  return *msg->id_;
}
const ::flyteidl::admin::TaskSpec&
TaskCreateRequest::HasBitSetters::spec(const TaskCreateRequest* msg) {
  return *msg->spec_;
}
void TaskCreateRequest::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskCreateRequest::kIdFieldNumber;
const int TaskCreateRequest::kSpecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskCreateRequest::TaskCreateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.TaskCreateRequest)
}
TaskCreateRequest::TaskCreateRequest(const TaskCreateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::flyteidl::core::Identifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from.has_spec()) {
    spec_ = new ::flyteidl::admin::TaskSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.TaskCreateRequest)
}

void TaskCreateRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TaskCreateRequest_flyteidl_2fadmin_2ftask_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&spec_) -
      reinterpret_cast<char*>(&id_)) + sizeof(spec_));
}

TaskCreateRequest::~TaskCreateRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.TaskCreateRequest)
  SharedDtor();
}

void TaskCreateRequest::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete spec_;
}

void TaskCreateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaskCreateRequest& TaskCreateRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TaskCreateRequest_flyteidl_2fadmin_2ftask_2eproto.base);
  return *internal_default_instance();
}


void TaskCreateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.TaskCreateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TaskCreateRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TaskCreateRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.Identifier id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::Identifier::_InternalParse;
        object = msg->mutable_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.TaskSpec spec = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::TaskSpec::_InternalParse;
        object = msg->mutable_spec();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TaskCreateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.TaskCreateRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.Identifier id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.TaskSpec spec = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_spec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.TaskCreateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.TaskCreateRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TaskCreateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.TaskCreateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::id(this), output);
  }

  // .flyteidl.admin.TaskSpec spec = 2;
  if (this->has_spec()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::spec(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.TaskCreateRequest)
}

::google::protobuf::uint8* TaskCreateRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.TaskCreateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::id(this), target);
  }

  // .flyteidl.admin.TaskSpec spec = 2;
  if (this->has_spec()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::spec(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.TaskCreateRequest)
  return target;
}

size_t TaskCreateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.TaskCreateRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.core.Identifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .flyteidl.admin.TaskSpec spec = 2;
  if (this->has_spec()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *spec_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskCreateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.TaskCreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskCreateRequest* source =
      ::google::protobuf::DynamicCastToGenerated<TaskCreateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.TaskCreateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.TaskCreateRequest)
    MergeFrom(*source);
  }
}

void TaskCreateRequest::MergeFrom(const TaskCreateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.TaskCreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    mutable_id()->::flyteidl::core::Identifier::MergeFrom(from.id());
  }
  if (from.has_spec()) {
    mutable_spec()->::flyteidl::admin::TaskSpec::MergeFrom(from.spec());
  }
}

void TaskCreateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.TaskCreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskCreateRequest::CopyFrom(const TaskCreateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.TaskCreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskCreateRequest::IsInitialized() const {
  return true;
}

void TaskCreateRequest::Swap(TaskCreateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskCreateRequest::InternalSwap(TaskCreateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(spec_, other->spec_);
}

::google::protobuf::Metadata TaskCreateRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2ftask_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2ftask_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TaskCreateResponse::InitAsDefaultInstance() {
}
class TaskCreateResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskCreateResponse::TaskCreateResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.TaskCreateResponse)
}
TaskCreateResponse::TaskCreateResponse(const TaskCreateResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.TaskCreateResponse)
}

void TaskCreateResponse::SharedCtor() {
}

TaskCreateResponse::~TaskCreateResponse() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.TaskCreateResponse)
  SharedDtor();
}

void TaskCreateResponse::SharedDtor() {
}

void TaskCreateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaskCreateResponse& TaskCreateResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TaskCreateResponse_flyteidl_2fadmin_2ftask_2eproto.base);
  return *internal_default_instance();
}


void TaskCreateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.TaskCreateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TaskCreateResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TaskCreateResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TaskCreateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.TaskCreateResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.TaskCreateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.TaskCreateResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TaskCreateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.TaskCreateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.TaskCreateResponse)
}

::google::protobuf::uint8* TaskCreateResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.TaskCreateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.TaskCreateResponse)
  return target;
}

size_t TaskCreateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.TaskCreateResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskCreateResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.TaskCreateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskCreateResponse* source =
      ::google::protobuf::DynamicCastToGenerated<TaskCreateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.TaskCreateResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.TaskCreateResponse)
    MergeFrom(*source);
  }
}

void TaskCreateResponse::MergeFrom(const TaskCreateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.TaskCreateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TaskCreateResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.TaskCreateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskCreateResponse::CopyFrom(const TaskCreateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.TaskCreateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskCreateResponse::IsInitialized() const {
  return true;
}

void TaskCreateResponse::Swap(TaskCreateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskCreateResponse::InternalSwap(TaskCreateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TaskCreateResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2ftask_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2ftask_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Task::InitAsDefaultInstance() {
  ::flyteidl::admin::_Task_default_instance_._instance.get_mutable()->id_ = const_cast< ::flyteidl::core::Identifier*>(
      ::flyteidl::core::Identifier::internal_default_instance());
  ::flyteidl::admin::_Task_default_instance_._instance.get_mutable()->closure_ = const_cast< ::flyteidl::admin::TaskClosure*>(
      ::flyteidl::admin::TaskClosure::internal_default_instance());
}
class Task::HasBitSetters {
 public:
  static const ::flyteidl::core::Identifier& id(const Task* msg);
  static const ::flyteidl::admin::TaskClosure& closure(const Task* msg);
};

const ::flyteidl::core::Identifier&
Task::HasBitSetters::id(const Task* msg) {
  return *msg->id_;
}
const ::flyteidl::admin::TaskClosure&
Task::HasBitSetters::closure(const Task* msg) {
  return *msg->closure_;
}
void Task::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Task::kIdFieldNumber;
const int Task::kClosureFieldNumber;
const int Task::kShortDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Task::Task()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.Task)
}
Task::Task(const Task& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  short_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.short_description().size() > 0) {
    short_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.short_description_);
  }
  if (from.has_id()) {
    id_ = new ::flyteidl::core::Identifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from.has_closure()) {
    closure_ = new ::flyteidl::admin::TaskClosure(*from.closure_);
  } else {
    closure_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.Task)
}

void Task::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Task_flyteidl_2fadmin_2ftask_2eproto.base);
  short_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&closure_) -
      reinterpret_cast<char*>(&id_)) + sizeof(closure_));
}

Task::~Task() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.Task)
  SharedDtor();
}

void Task::SharedDtor() {
  short_description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete closure_;
}

void Task::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Task& Task::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Task_flyteidl_2fadmin_2ftask_2eproto.base);
  return *internal_default_instance();
}


void Task::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.Task)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  short_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && closure_ != nullptr) {
    delete closure_;
  }
  closure_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Task::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Task*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.Identifier id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::Identifier::_InternalParse;
        object = msg->mutable_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.TaskClosure closure = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::TaskClosure::_InternalParse;
        object = msg->mutable_closure();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string short_description = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.Task.short_description");
        object = msg->mutable_short_description();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Task::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.Task)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.Identifier id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.TaskClosure closure = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_closure()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string short_description = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_short_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->short_description().data(), static_cast<int>(this->short_description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.Task.short_description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.Task)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.Task)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Task::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.Task)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::id(this), output);
  }

  // .flyteidl.admin.TaskClosure closure = 2;
  if (this->has_closure()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::closure(this), output);
  }

  // string short_description = 3;
  if (this->short_description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->short_description().data(), static_cast<int>(this->short_description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.Task.short_description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->short_description(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.Task)
}

::google::protobuf::uint8* Task::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.Task)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::id(this), target);
  }

  // .flyteidl.admin.TaskClosure closure = 2;
  if (this->has_closure()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::closure(this), target);
  }

  // string short_description = 3;
  if (this->short_description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->short_description().data(), static_cast<int>(this->short_description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.Task.short_description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->short_description(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.Task)
  return target;
}

size_t Task::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.Task)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string short_description = 3;
  if (this->short_description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->short_description());
  }

  // .flyteidl.core.Identifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .flyteidl.admin.TaskClosure closure = 2;
  if (this->has_closure()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *closure_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Task::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.Task)
  GOOGLE_DCHECK_NE(&from, this);
  const Task* source =
      ::google::protobuf::DynamicCastToGenerated<Task>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.Task)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.Task)
    MergeFrom(*source);
  }
}

void Task::MergeFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.Task)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.short_description().size() > 0) {

    short_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.short_description_);
  }
  if (from.has_id()) {
    mutable_id()->::flyteidl::core::Identifier::MergeFrom(from.id());
  }
  if (from.has_closure()) {
    mutable_closure()->::flyteidl::admin::TaskClosure::MergeFrom(from.closure());
  }
}

void Task::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Task::CopyFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Task::IsInitialized() const {
  return true;
}

void Task::Swap(Task* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Task::InternalSwap(Task* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  short_description_.Swap(&other->short_description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(closure_, other->closure_);
}

::google::protobuf::Metadata Task::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2ftask_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2ftask_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TaskList::InitAsDefaultInstance() {
}
class TaskList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskList::kTasksFieldNumber;
const int TaskList::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskList::TaskList()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.TaskList)
}
TaskList::TaskList(const TaskList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      tasks_(from.tasks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.TaskList)
}

void TaskList::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TaskList_flyteidl_2fadmin_2ftask_2eproto.base);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TaskList::~TaskList() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.TaskList)
  SharedDtor();
}

void TaskList::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TaskList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaskList& TaskList::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TaskList_flyteidl_2fadmin_2ftask_2eproto.base);
  return *internal_default_instance();
}


void TaskList::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.TaskList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tasks_.Clear();
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TaskList::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TaskList*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .flyteidl.admin.Task tasks = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::flyteidl::admin::Task::_InternalParse;
          object = msg->add_tasks();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // string token = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.TaskList.token");
        object = msg->mutable_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TaskList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.TaskList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .flyteidl.admin.Task tasks = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tasks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.TaskList.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.TaskList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.TaskList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TaskList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.TaskList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .flyteidl.admin.Task tasks = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tasks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->tasks(static_cast<int>(i)),
      output);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.TaskList.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.TaskList)
}

::google::protobuf::uint8* TaskList::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.TaskList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .flyteidl.admin.Task tasks = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tasks_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->tasks(static_cast<int>(i)), target);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.TaskList.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.TaskList)
  return target;
}

size_t TaskList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.TaskList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .flyteidl.admin.Task tasks = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->tasks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tasks(static_cast<int>(i)));
    }
  }

  // string token = 2;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.TaskList)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskList* source =
      ::google::protobuf::DynamicCastToGenerated<TaskList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.TaskList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.TaskList)
    MergeFrom(*source);
  }
}

void TaskList::MergeFrom(const TaskList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.TaskList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tasks_.MergeFrom(from.tasks_);
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
}

void TaskList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.TaskList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskList::CopyFrom(const TaskList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.TaskList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskList::IsInitialized() const {
  return true;
}

void TaskList::Swap(TaskList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskList::InternalSwap(TaskList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&tasks_)->InternalSwap(CastToBase(&other->tasks_));
  token_.Swap(&other->token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata TaskList::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2ftask_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2ftask_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TaskSpec::InitAsDefaultInstance() {
  ::flyteidl::admin::_TaskSpec_default_instance_._instance.get_mutable()->template__ = const_cast< ::flyteidl::core::TaskTemplate*>(
      ::flyteidl::core::TaskTemplate::internal_default_instance());
  ::flyteidl::admin::_TaskSpec_default_instance_._instance.get_mutable()->description_ = const_cast< ::flyteidl::admin::DescriptionEntity*>(
      ::flyteidl::admin::DescriptionEntity::internal_default_instance());
}
class TaskSpec::HasBitSetters {
 public:
  static const ::flyteidl::core::TaskTemplate& template_(const TaskSpec* msg);
  static const ::flyteidl::admin::DescriptionEntity& description(const TaskSpec* msg);
};

const ::flyteidl::core::TaskTemplate&
TaskSpec::HasBitSetters::template_(const TaskSpec* msg) {
  return *msg->template__;
}
const ::flyteidl::admin::DescriptionEntity&
TaskSpec::HasBitSetters::description(const TaskSpec* msg) {
  return *msg->description_;
}
void TaskSpec::clear_template_() {
  if (GetArenaNoVirtual() == nullptr && template__ != nullptr) {
    delete template__;
  }
  template__ = nullptr;
}
void TaskSpec::clear_description() {
  if (GetArenaNoVirtual() == nullptr && description_ != nullptr) {
    delete description_;
  }
  description_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskSpec::kTemplateFieldNumber;
const int TaskSpec::kDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskSpec::TaskSpec()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.TaskSpec)
}
TaskSpec::TaskSpec(const TaskSpec& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_template_()) {
    template__ = new ::flyteidl::core::TaskTemplate(*from.template__);
  } else {
    template__ = nullptr;
  }
  if (from.has_description()) {
    description_ = new ::flyteidl::admin::DescriptionEntity(*from.description_);
  } else {
    description_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.TaskSpec)
}

void TaskSpec::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TaskSpec_flyteidl_2fadmin_2ftask_2eproto.base);
  ::memset(&template__, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&description_) -
      reinterpret_cast<char*>(&template__)) + sizeof(description_));
}

TaskSpec::~TaskSpec() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.TaskSpec)
  SharedDtor();
}

void TaskSpec::SharedDtor() {
  if (this != internal_default_instance()) delete template__;
  if (this != internal_default_instance()) delete description_;
}

void TaskSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaskSpec& TaskSpec::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TaskSpec_flyteidl_2fadmin_2ftask_2eproto.base);
  return *internal_default_instance();
}


void TaskSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.TaskSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && template__ != nullptr) {
    delete template__;
  }
  template__ = nullptr;
  if (GetArenaNoVirtual() == nullptr && description_ != nullptr) {
    delete description_;
  }
  description_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TaskSpec::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TaskSpec*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.TaskTemplate template = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::TaskTemplate::_InternalParse;
        object = msg->mutable_template_();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.DescriptionEntity description = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::DescriptionEntity::_InternalParse;
        object = msg->mutable_description();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TaskSpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.TaskSpec)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.TaskTemplate template = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_template_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.DescriptionEntity description = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_description()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.TaskSpec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.TaskSpec)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TaskSpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.TaskSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.TaskTemplate template = 1;
  if (this->has_template_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::template_(this), output);
  }

  // .flyteidl.admin.DescriptionEntity description = 2;
  if (this->has_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::description(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.TaskSpec)
}

::google::protobuf::uint8* TaskSpec::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.TaskSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.TaskTemplate template = 1;
  if (this->has_template_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::template_(this), target);
  }

  // .flyteidl.admin.DescriptionEntity description = 2;
  if (this->has_description()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::description(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.TaskSpec)
  return target;
}

size_t TaskSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.TaskSpec)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.core.TaskTemplate template = 1;
  if (this->has_template_()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *template__);
  }

  // .flyteidl.admin.DescriptionEntity description = 2;
  if (this->has_description()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *description_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskSpec::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.TaskSpec)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskSpec* source =
      ::google::protobuf::DynamicCastToGenerated<TaskSpec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.TaskSpec)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.TaskSpec)
    MergeFrom(*source);
  }
}

void TaskSpec::MergeFrom(const TaskSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.TaskSpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_template_()) {
    mutable_template_()->::flyteidl::core::TaskTemplate::MergeFrom(from.template_());
  }
  if (from.has_description()) {
    mutable_description()->::flyteidl::admin::DescriptionEntity::MergeFrom(from.description());
  }
}

void TaskSpec::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.TaskSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskSpec::CopyFrom(const TaskSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.TaskSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskSpec::IsInitialized() const {
  return true;
}

void TaskSpec::Swap(TaskSpec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskSpec::InternalSwap(TaskSpec* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(template__, other->template__);
  swap(description_, other->description_);
}

::google::protobuf::Metadata TaskSpec::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2ftask_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2ftask_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TaskClosure::InitAsDefaultInstance() {
  ::flyteidl::admin::_TaskClosure_default_instance_._instance.get_mutable()->compiled_task_ = const_cast< ::flyteidl::core::CompiledTask*>(
      ::flyteidl::core::CompiledTask::internal_default_instance());
  ::flyteidl::admin::_TaskClosure_default_instance_._instance.get_mutable()->created_at_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
class TaskClosure::HasBitSetters {
 public:
  static const ::flyteidl::core::CompiledTask& compiled_task(const TaskClosure* msg);
  static const ::google::protobuf::Timestamp& created_at(const TaskClosure* msg);
};

const ::flyteidl::core::CompiledTask&
TaskClosure::HasBitSetters::compiled_task(const TaskClosure* msg) {
  return *msg->compiled_task_;
}
const ::google::protobuf::Timestamp&
TaskClosure::HasBitSetters::created_at(const TaskClosure* msg) {
  return *msg->created_at_;
}
void TaskClosure::clear_compiled_task() {
  if (GetArenaNoVirtual() == nullptr && compiled_task_ != nullptr) {
    delete compiled_task_;
  }
  compiled_task_ = nullptr;
}
void TaskClosure::clear_created_at() {
  if (GetArenaNoVirtual() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskClosure::kCompiledTaskFieldNumber;
const int TaskClosure::kCreatedAtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskClosure::TaskClosure()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.TaskClosure)
}
TaskClosure::TaskClosure(const TaskClosure& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_compiled_task()) {
    compiled_task_ = new ::flyteidl::core::CompiledTask(*from.compiled_task_);
  } else {
    compiled_task_ = nullptr;
  }
  if (from.has_created_at()) {
    created_at_ = new ::google::protobuf::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.TaskClosure)
}

void TaskClosure::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TaskClosure_flyteidl_2fadmin_2ftask_2eproto.base);
  ::memset(&compiled_task_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&created_at_) -
      reinterpret_cast<char*>(&compiled_task_)) + sizeof(created_at_));
}

TaskClosure::~TaskClosure() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.TaskClosure)
  SharedDtor();
}

void TaskClosure::SharedDtor() {
  if (this != internal_default_instance()) delete compiled_task_;
  if (this != internal_default_instance()) delete created_at_;
}

void TaskClosure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaskClosure& TaskClosure::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TaskClosure_flyteidl_2fadmin_2ftask_2eproto.base);
  return *internal_default_instance();
}


void TaskClosure::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.TaskClosure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && compiled_task_ != nullptr) {
    delete compiled_task_;
  }
  compiled_task_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TaskClosure::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TaskClosure*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.CompiledTask compiled_task = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::CompiledTask::_InternalParse;
        object = msg->mutable_compiled_task();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.Timestamp created_at = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_created_at();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TaskClosure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.TaskClosure)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.CompiledTask compiled_task = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_compiled_task()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp created_at = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_created_at()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.TaskClosure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.TaskClosure)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TaskClosure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.TaskClosure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.CompiledTask compiled_task = 1;
  if (this->has_compiled_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::compiled_task(this), output);
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->has_created_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::created_at(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.TaskClosure)
}

::google::protobuf::uint8* TaskClosure::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.TaskClosure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.CompiledTask compiled_task = 1;
  if (this->has_compiled_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::compiled_task(this), target);
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->has_created_at()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::created_at(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.TaskClosure)
  return target;
}

size_t TaskClosure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.TaskClosure)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.core.CompiledTask compiled_task = 1;
  if (this->has_compiled_task()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *compiled_task_);
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->has_created_at()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskClosure::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.TaskClosure)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskClosure* source =
      ::google::protobuf::DynamicCastToGenerated<TaskClosure>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.TaskClosure)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.TaskClosure)
    MergeFrom(*source);
  }
}

void TaskClosure::MergeFrom(const TaskClosure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.TaskClosure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_compiled_task()) {
    mutable_compiled_task()->::flyteidl::core::CompiledTask::MergeFrom(from.compiled_task());
  }
  if (from.has_created_at()) {
    mutable_created_at()->::google::protobuf::Timestamp::MergeFrom(from.created_at());
  }
}

void TaskClosure::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.TaskClosure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskClosure::CopyFrom(const TaskClosure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.TaskClosure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskClosure::IsInitialized() const {
  return true;
}

void TaskClosure::Swap(TaskClosure* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskClosure::InternalSwap(TaskClosure* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(compiled_task_, other->compiled_task_);
  swap(created_at_, other->created_at_);
}

::google::protobuf::Metadata TaskClosure::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2ftask_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2ftask_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace admin
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::flyteidl::admin::TaskCreateRequest* Arena::CreateMaybeMessage< ::flyteidl::admin::TaskCreateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::TaskCreateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::TaskCreateResponse* Arena::CreateMaybeMessage< ::flyteidl::admin::TaskCreateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::TaskCreateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::Task* Arena::CreateMaybeMessage< ::flyteidl::admin::Task >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::Task >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::TaskList* Arena::CreateMaybeMessage< ::flyteidl::admin::TaskList >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::TaskList >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::TaskSpec* Arena::CreateMaybeMessage< ::flyteidl::admin::TaskSpec >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::TaskSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::TaskClosure* Arena::CreateMaybeMessage< ::flyteidl::admin::TaskClosure >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::TaskClosure >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
