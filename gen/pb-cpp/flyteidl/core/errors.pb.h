// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/errors.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fcore_2ferrors_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fcore_2ferrors_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "flyteidl/core/execution.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2ferrors_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fcore_2ferrors_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fcore_2ferrors_2eproto;
namespace flyteidl {
namespace core {
class ContainerError;
struct ContainerErrorDefaultTypeInternal;
extern ContainerErrorDefaultTypeInternal _ContainerError_default_instance_;
class ErrorDocument;
struct ErrorDocumentDefaultTypeInternal;
extern ErrorDocumentDefaultTypeInternal _ErrorDocument_default_instance_;
}  // namespace core
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> ::flyteidl::core::ContainerError* Arena::CreateMaybeMessage<::flyteidl::core::ContainerError>(Arena*);
template<> ::flyteidl::core::ErrorDocument* Arena::CreateMaybeMessage<::flyteidl::core::ErrorDocument>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace flyteidl {
namespace core {

enum ContainerError_Kind : int {
  ContainerError_Kind_NON_RECOVERABLE = 0,
  ContainerError_Kind_RECOVERABLE = 1,
  ContainerError_Kind_ContainerError_Kind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ContainerError_Kind_ContainerError_Kind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ContainerError_Kind_IsValid(int value);
constexpr ContainerError_Kind ContainerError_Kind_Kind_MIN = ContainerError_Kind_NON_RECOVERABLE;
constexpr ContainerError_Kind ContainerError_Kind_Kind_MAX = ContainerError_Kind_RECOVERABLE;
constexpr int ContainerError_Kind_Kind_ARRAYSIZE = ContainerError_Kind_Kind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ContainerError_Kind_descriptor();
template<typename T>
inline const std::string& ContainerError_Kind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ContainerError_Kind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ContainerError_Kind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ContainerError_Kind_descriptor(), enum_t_value);
}
inline bool ContainerError_Kind_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ContainerError_Kind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ContainerError_Kind>(
    ContainerError_Kind_descriptor(), name, value);
}
// ===================================================================

class ContainerError final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.ContainerError) */ {
 public:
  inline ContainerError() : ContainerError(nullptr) {}
  ~ContainerError() override;
  explicit constexpr ContainerError(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContainerError(const ContainerError& from);
  ContainerError(ContainerError&& from) noexcept
    : ContainerError() {
    *this = ::std::move(from);
  }

  inline ContainerError& operator=(const ContainerError& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContainerError& operator=(ContainerError&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContainerError& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContainerError* internal_default_instance() {
    return reinterpret_cast<const ContainerError*>(
               &_ContainerError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ContainerError& a, ContainerError& b) {
    a.Swap(&b);
  }
  inline void Swap(ContainerError* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContainerError* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContainerError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContainerError>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContainerError* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.core.ContainerError";
  }
  protected:
  explicit ContainerError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ContainerError_Kind Kind;
  static constexpr Kind NON_RECOVERABLE =
    ContainerError_Kind_NON_RECOVERABLE;
  static constexpr Kind RECOVERABLE =
    ContainerError_Kind_RECOVERABLE;
  static inline bool Kind_IsValid(int value) {
    return ContainerError_Kind_IsValid(value);
  }
  static constexpr Kind Kind_MIN =
    ContainerError_Kind_Kind_MIN;
  static constexpr Kind Kind_MAX =
    ContainerError_Kind_Kind_MAX;
  static constexpr int Kind_ARRAYSIZE =
    ContainerError_Kind_Kind_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Kind_descriptor() {
    return ContainerError_Kind_descriptor();
  }
  template<typename T>
  static inline const std::string& Kind_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Kind>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Kind_Name.");
    return ContainerError_Kind_Name(enum_t_value);
  }
  static inline bool Kind_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Kind* value) {
    return ContainerError_Kind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
    kMessageFieldNumber = 2,
    kKindFieldNumber = 3,
    kOriginFieldNumber = 4,
  };
  // string code = 1 [json_name = "code"];
  void clear_code();
  const std::string& code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string message = 2 [json_name = "message"];
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .flyteidl.core.ContainerError.Kind kind = 3 [json_name = "kind"];
  void clear_kind();
  ::flyteidl::core::ContainerError_Kind kind() const;
  void set_kind(::flyteidl::core::ContainerError_Kind value);
  private:
  ::flyteidl::core::ContainerError_Kind _internal_kind() const;
  void _internal_set_kind(::flyteidl::core::ContainerError_Kind value);
  public:

  // .flyteidl.core.ExecutionError.ErrorKind origin = 4 [json_name = "origin"];
  void clear_origin();
  ::flyteidl::core::ExecutionError_ErrorKind origin() const;
  void set_origin(::flyteidl::core::ExecutionError_ErrorKind value);
  private:
  ::flyteidl::core::ExecutionError_ErrorKind _internal_origin() const;
  void _internal_set_origin(::flyteidl::core::ExecutionError_ErrorKind value);
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.core.ContainerError)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  int kind_;
  int origin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2ferrors_2eproto;
};
// -------------------------------------------------------------------

class ErrorDocument final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.ErrorDocument) */ {
 public:
  inline ErrorDocument() : ErrorDocument(nullptr) {}
  ~ErrorDocument() override;
  explicit constexpr ErrorDocument(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ErrorDocument(const ErrorDocument& from);
  ErrorDocument(ErrorDocument&& from) noexcept
    : ErrorDocument() {
    *this = ::std::move(from);
  }

  inline ErrorDocument& operator=(const ErrorDocument& from) {
    CopyFrom(from);
    return *this;
  }
  inline ErrorDocument& operator=(ErrorDocument&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ErrorDocument& default_instance() {
    return *internal_default_instance();
  }
  static inline const ErrorDocument* internal_default_instance() {
    return reinterpret_cast<const ErrorDocument*>(
               &_ErrorDocument_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ErrorDocument& a, ErrorDocument& b) {
    a.Swap(&b);
  }
  inline void Swap(ErrorDocument* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ErrorDocument* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ErrorDocument* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ErrorDocument>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ErrorDocument* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.core.ErrorDocument";
  }
  protected:
  explicit ErrorDocument(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // .flyteidl.core.ContainerError error = 1 [json_name = "error"];
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::flyteidl::core::ContainerError& error() const;
  PROTOBUF_NODISCARD ::flyteidl::core::ContainerError* release_error();
  ::flyteidl::core::ContainerError* mutable_error();
  void set_allocated_error(::flyteidl::core::ContainerError* error);
  private:
  const ::flyteidl::core::ContainerError& _internal_error() const;
  ::flyteidl::core::ContainerError* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::flyteidl::core::ContainerError* error);
  ::flyteidl::core::ContainerError* unsafe_arena_release_error();

  // @@protoc_insertion_point(class_scope:flyteidl.core.ErrorDocument)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::flyteidl::core::ContainerError* error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2ferrors_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ContainerError

// string code = 1 [json_name = "code"];
inline void ContainerError::clear_code() {
  code_.ClearToEmpty();
}
inline const std::string& ContainerError::code() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.ContainerError.code)
  return _internal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContainerError::set_code(ArgT0&& arg0, ArgT... args) {
 
 code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.core.ContainerError.code)
}
inline std::string* ContainerError::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.ContainerError.code)
  return _s;
}
inline const std::string& ContainerError::_internal_code() const {
  return code_.Get();
}
inline void ContainerError::_internal_set_code(const std::string& value) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ContainerError::_internal_mutable_code() {
  
  return code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ContainerError::release_code() {
  // @@protoc_insertion_point(field_release:flyteidl.core.ContainerError.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ContainerError::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (code_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.ContainerError.code)
}

// string message = 2 [json_name = "message"];
inline void ContainerError::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& ContainerError::message() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.ContainerError.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContainerError::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.core.ContainerError.message)
}
inline std::string* ContainerError::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.ContainerError.message)
  return _s;
}
inline const std::string& ContainerError::_internal_message() const {
  return message_.Get();
}
inline void ContainerError::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ContainerError::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ContainerError::release_message() {
  // @@protoc_insertion_point(field_release:flyteidl.core.ContainerError.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ContainerError::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.ContainerError.message)
}

// .flyteidl.core.ContainerError.Kind kind = 3 [json_name = "kind"];
inline void ContainerError::clear_kind() {
  kind_ = 0;
}
inline ::flyteidl::core::ContainerError_Kind ContainerError::_internal_kind() const {
  return static_cast< ::flyteidl::core::ContainerError_Kind >(kind_);
}
inline ::flyteidl::core::ContainerError_Kind ContainerError::kind() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.ContainerError.kind)
  return _internal_kind();
}
inline void ContainerError::_internal_set_kind(::flyteidl::core::ContainerError_Kind value) {
  
  kind_ = value;
}
inline void ContainerError::set_kind(::flyteidl::core::ContainerError_Kind value) {
  _internal_set_kind(value);
  // @@protoc_insertion_point(field_set:flyteidl.core.ContainerError.kind)
}

// .flyteidl.core.ExecutionError.ErrorKind origin = 4 [json_name = "origin"];
inline void ContainerError::clear_origin() {
  origin_ = 0;
}
inline ::flyteidl::core::ExecutionError_ErrorKind ContainerError::_internal_origin() const {
  return static_cast< ::flyteidl::core::ExecutionError_ErrorKind >(origin_);
}
inline ::flyteidl::core::ExecutionError_ErrorKind ContainerError::origin() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.ContainerError.origin)
  return _internal_origin();
}
inline void ContainerError::_internal_set_origin(::flyteidl::core::ExecutionError_ErrorKind value) {
  
  origin_ = value;
}
inline void ContainerError::set_origin(::flyteidl::core::ExecutionError_ErrorKind value) {
  _internal_set_origin(value);
  // @@protoc_insertion_point(field_set:flyteidl.core.ContainerError.origin)
}

// -------------------------------------------------------------------

// ErrorDocument

// .flyteidl.core.ContainerError error = 1 [json_name = "error"];
inline bool ErrorDocument::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool ErrorDocument::has_error() const {
  return _internal_has_error();
}
inline void ErrorDocument::clear_error() {
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
inline const ::flyteidl::core::ContainerError& ErrorDocument::_internal_error() const {
  const ::flyteidl::core::ContainerError* p = error_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::core::ContainerError&>(
      ::flyteidl::core::_ContainerError_default_instance_);
}
inline const ::flyteidl::core::ContainerError& ErrorDocument::error() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.ErrorDocument.error)
  return _internal_error();
}
inline void ErrorDocument::unsafe_arena_set_allocated_error(
    ::flyteidl::core::ContainerError* error) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.core.ErrorDocument.error)
}
inline ::flyteidl::core::ContainerError* ErrorDocument::release_error() {
  
  ::flyteidl::core::ContainerError* temp = error_;
  error_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::core::ContainerError* ErrorDocument::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:flyteidl.core.ErrorDocument.error)
  
  ::flyteidl::core::ContainerError* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::flyteidl::core::ContainerError* ErrorDocument::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::ContainerError>(GetArenaForAllocation());
    error_ = p;
  }
  return error_;
}
inline ::flyteidl::core::ContainerError* ErrorDocument::mutable_error() {
  ::flyteidl::core::ContainerError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:flyteidl.core.ErrorDocument.error)
  return _msg;
}
inline void ErrorDocument::set_allocated_error(::flyteidl::core::ContainerError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::core::ContainerError>::GetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.ErrorDocument.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace core
}  // namespace flyteidl

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::flyteidl::core::ContainerError_Kind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flyteidl::core::ContainerError_Kind>() {
  return ::flyteidl::core::ContainerError_Kind_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fcore_2ferrors_2eproto
