// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/project.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fadmin_2fproject_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fadmin_2fproject_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "flyteidl/admin/common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fproject_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fadmin_2fproject_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fadmin_2fproject_2eproto;
namespace flyteidl {
namespace admin {
class Domain;
struct DomainDefaultTypeInternal;
extern DomainDefaultTypeInternal _Domain_default_instance_;
class Project;
struct ProjectDefaultTypeInternal;
extern ProjectDefaultTypeInternal _Project_default_instance_;
class ProjectListRequest;
struct ProjectListRequestDefaultTypeInternal;
extern ProjectListRequestDefaultTypeInternal _ProjectListRequest_default_instance_;
class ProjectRegisterRequest;
struct ProjectRegisterRequestDefaultTypeInternal;
extern ProjectRegisterRequestDefaultTypeInternal _ProjectRegisterRequest_default_instance_;
class ProjectRegisterResponse;
struct ProjectRegisterResponseDefaultTypeInternal;
extern ProjectRegisterResponseDefaultTypeInternal _ProjectRegisterResponse_default_instance_;
class ProjectUpdateResponse;
struct ProjectUpdateResponseDefaultTypeInternal;
extern ProjectUpdateResponseDefaultTypeInternal _ProjectUpdateResponse_default_instance_;
class Projects;
struct ProjectsDefaultTypeInternal;
extern ProjectsDefaultTypeInternal _Projects_default_instance_;
}  // namespace admin
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> ::flyteidl::admin::Domain* Arena::CreateMaybeMessage<::flyteidl::admin::Domain>(Arena*);
template<> ::flyteidl::admin::Project* Arena::CreateMaybeMessage<::flyteidl::admin::Project>(Arena*);
template<> ::flyteidl::admin::ProjectListRequest* Arena::CreateMaybeMessage<::flyteidl::admin::ProjectListRequest>(Arena*);
template<> ::flyteidl::admin::ProjectRegisterRequest* Arena::CreateMaybeMessage<::flyteidl::admin::ProjectRegisterRequest>(Arena*);
template<> ::flyteidl::admin::ProjectRegisterResponse* Arena::CreateMaybeMessage<::flyteidl::admin::ProjectRegisterResponse>(Arena*);
template<> ::flyteidl::admin::ProjectUpdateResponse* Arena::CreateMaybeMessage<::flyteidl::admin::ProjectUpdateResponse>(Arena*);
template<> ::flyteidl::admin::Projects* Arena::CreateMaybeMessage<::flyteidl::admin::Projects>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace flyteidl {
namespace admin {

enum Project_ProjectState : int {
  Project_ProjectState_ACTIVE = 0,
  Project_ProjectState_ARCHIVED = 1,
  Project_ProjectState_SYSTEM_GENERATED = 2,
  Project_ProjectState_Project_ProjectState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Project_ProjectState_Project_ProjectState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Project_ProjectState_IsValid(int value);
constexpr Project_ProjectState Project_ProjectState_ProjectState_MIN = Project_ProjectState_ACTIVE;
constexpr Project_ProjectState Project_ProjectState_ProjectState_MAX = Project_ProjectState_SYSTEM_GENERATED;
constexpr int Project_ProjectState_ProjectState_ARRAYSIZE = Project_ProjectState_ProjectState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Project_ProjectState_descriptor();
template<typename T>
inline const std::string& Project_ProjectState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Project_ProjectState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Project_ProjectState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Project_ProjectState_descriptor(), enum_t_value);
}
inline bool Project_ProjectState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Project_ProjectState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Project_ProjectState>(
    Project_ProjectState_descriptor(), name, value);
}
// ===================================================================

class Domain final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.Domain) */ {
 public:
  inline Domain() : Domain(nullptr) {}
  ~Domain() override;
  explicit constexpr Domain(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Domain(const Domain& from);
  Domain(Domain&& from) noexcept
    : Domain() {
    *this = ::std::move(from);
  }

  inline Domain& operator=(const Domain& from) {
    CopyFrom(from);
    return *this;
  }
  inline Domain& operator=(Domain&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Domain& default_instance() {
    return *internal_default_instance();
  }
  static inline const Domain* internal_default_instance() {
    return reinterpret_cast<const Domain*>(
               &_Domain_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Domain& a, Domain& b) {
    a.Swap(&b);
  }
  inline void Swap(Domain* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Domain* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Domain* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Domain>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Domain* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.Domain";
  }
  protected:
  explicit Domain(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.admin.Domain)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fproject_2eproto;
};
// -------------------------------------------------------------------

class Project final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.Project) */ {
 public:
  inline Project() : Project(nullptr) {}
  ~Project() override;
  explicit constexpr Project(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Project(const Project& from);
  Project(Project&& from) noexcept
    : Project() {
    *this = ::std::move(from);
  }

  inline Project& operator=(const Project& from) {
    CopyFrom(from);
    return *this;
  }
  inline Project& operator=(Project&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Project& default_instance() {
    return *internal_default_instance();
  }
  static inline const Project* internal_default_instance() {
    return reinterpret_cast<const Project*>(
               &_Project_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Project& a, Project& b) {
    a.Swap(&b);
  }
  inline void Swap(Project* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Project* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Project* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Project>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Project* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.Project";
  }
  protected:
  explicit Project(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Project_ProjectState ProjectState;
  static constexpr ProjectState ACTIVE =
    Project_ProjectState_ACTIVE;
  static constexpr ProjectState ARCHIVED =
    Project_ProjectState_ARCHIVED;
  static constexpr ProjectState SYSTEM_GENERATED =
    Project_ProjectState_SYSTEM_GENERATED;
  static inline bool ProjectState_IsValid(int value) {
    return Project_ProjectState_IsValid(value);
  }
  static constexpr ProjectState ProjectState_MIN =
    Project_ProjectState_ProjectState_MIN;
  static constexpr ProjectState ProjectState_MAX =
    Project_ProjectState_ProjectState_MAX;
  static constexpr int ProjectState_ARRAYSIZE =
    Project_ProjectState_ProjectState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ProjectState_descriptor() {
    return Project_ProjectState_descriptor();
  }
  template<typename T>
  static inline const std::string& ProjectState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ProjectState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ProjectState_Name.");
    return Project_ProjectState_Name(enum_t_value);
  }
  static inline bool ProjectState_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ProjectState* value) {
    return Project_ProjectState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDomainsFieldNumber = 3,
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kDescriptionFieldNumber = 4,
    kLabelsFieldNumber = 5,
    kStateFieldNumber = 6,
  };
  // repeated .flyteidl.admin.Domain domains = 3 [json_name = "domains"];
  int domains_size() const;
  private:
  int _internal_domains_size() const;
  public:
  void clear_domains();
  ::flyteidl::admin::Domain* mutable_domains(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::admin::Domain >*
      mutable_domains();
  private:
  const ::flyteidl::admin::Domain& _internal_domains(int index) const;
  ::flyteidl::admin::Domain* _internal_add_domains();
  public:
  const ::flyteidl::admin::Domain& domains(int index) const;
  ::flyteidl::admin::Domain* add_domains();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::admin::Domain >&
      domains() const;

  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 4 [json_name = "description"];
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .flyteidl.admin.Labels labels = 5 [json_name = "labels"];
  bool has_labels() const;
  private:
  bool _internal_has_labels() const;
  public:
  void clear_labels();
  const ::flyteidl::admin::Labels& labels() const;
  PROTOBUF_NODISCARD ::flyteidl::admin::Labels* release_labels();
  ::flyteidl::admin::Labels* mutable_labels();
  void set_allocated_labels(::flyteidl::admin::Labels* labels);
  private:
  const ::flyteidl::admin::Labels& _internal_labels() const;
  ::flyteidl::admin::Labels* _internal_mutable_labels();
  public:
  void unsafe_arena_set_allocated_labels(
      ::flyteidl::admin::Labels* labels);
  ::flyteidl::admin::Labels* unsafe_arena_release_labels();

  // .flyteidl.admin.Project.ProjectState state = 6 [json_name = "state"];
  void clear_state();
  ::flyteidl::admin::Project_ProjectState state() const;
  void set_state(::flyteidl::admin::Project_ProjectState value);
  private:
  ::flyteidl::admin::Project_ProjectState _internal_state() const;
  void _internal_set_state(::flyteidl::admin::Project_ProjectState value);
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.admin.Project)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::admin::Domain > domains_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::flyteidl::admin::Labels* labels_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fproject_2eproto;
};
// -------------------------------------------------------------------

class Projects final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.Projects) */ {
 public:
  inline Projects() : Projects(nullptr) {}
  ~Projects() override;
  explicit constexpr Projects(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Projects(const Projects& from);
  Projects(Projects&& from) noexcept
    : Projects() {
    *this = ::std::move(from);
  }

  inline Projects& operator=(const Projects& from) {
    CopyFrom(from);
    return *this;
  }
  inline Projects& operator=(Projects&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Projects& default_instance() {
    return *internal_default_instance();
  }
  static inline const Projects* internal_default_instance() {
    return reinterpret_cast<const Projects*>(
               &_Projects_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Projects& a, Projects& b) {
    a.Swap(&b);
  }
  inline void Swap(Projects* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Projects* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Projects* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Projects>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Projects* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.Projects";
  }
  protected:
  explicit Projects(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectsFieldNumber = 1,
    kTokenFieldNumber = 2,
  };
  // repeated .flyteidl.admin.Project projects = 1 [json_name = "projects"];
  int projects_size() const;
  private:
  int _internal_projects_size() const;
  public:
  void clear_projects();
  ::flyteidl::admin::Project* mutable_projects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::admin::Project >*
      mutable_projects();
  private:
  const ::flyteidl::admin::Project& _internal_projects(int index) const;
  ::flyteidl::admin::Project* _internal_add_projects();
  public:
  const ::flyteidl::admin::Project& projects(int index) const;
  ::flyteidl::admin::Project* add_projects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::admin::Project >&
      projects() const;

  // string token = 2 [json_name = "token"];
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.admin.Projects)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::admin::Project > projects_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fproject_2eproto;
};
// -------------------------------------------------------------------

class ProjectListRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.ProjectListRequest) */ {
 public:
  inline ProjectListRequest() : ProjectListRequest(nullptr) {}
  ~ProjectListRequest() override;
  explicit constexpr ProjectListRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProjectListRequest(const ProjectListRequest& from);
  ProjectListRequest(ProjectListRequest&& from) noexcept
    : ProjectListRequest() {
    *this = ::std::move(from);
  }

  inline ProjectListRequest& operator=(const ProjectListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProjectListRequest& operator=(ProjectListRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProjectListRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProjectListRequest* internal_default_instance() {
    return reinterpret_cast<const ProjectListRequest*>(
               &_ProjectListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ProjectListRequest& a, ProjectListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ProjectListRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProjectListRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProjectListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProjectListRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProjectListRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.ProjectListRequest";
  }
  protected:
  explicit ProjectListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 2,
    kFiltersFieldNumber = 3,
    kSortByFieldNumber = 4,
    kLimitFieldNumber = 1,
  };
  // string token = 2 [json_name = "token"];
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string filters = 3 [json_name = "filters"];
  void clear_filters();
  const std::string& filters() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filters(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filters();
  PROTOBUF_NODISCARD std::string* release_filters();
  void set_allocated_filters(std::string* filters);
  private:
  const std::string& _internal_filters() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filters(const std::string& value);
  std::string* _internal_mutable_filters();
  public:

  // .flyteidl.admin.Sort sort_by = 4 [json_name = "sortBy"];
  bool has_sort_by() const;
  private:
  bool _internal_has_sort_by() const;
  public:
  void clear_sort_by();
  const ::flyteidl::admin::Sort& sort_by() const;
  PROTOBUF_NODISCARD ::flyteidl::admin::Sort* release_sort_by();
  ::flyteidl::admin::Sort* mutable_sort_by();
  void set_allocated_sort_by(::flyteidl::admin::Sort* sort_by);
  private:
  const ::flyteidl::admin::Sort& _internal_sort_by() const;
  ::flyteidl::admin::Sort* _internal_mutable_sort_by();
  public:
  void unsafe_arena_set_allocated_sort_by(
      ::flyteidl::admin::Sort* sort_by);
  ::flyteidl::admin::Sort* unsafe_arena_release_sort_by();

  // uint32 limit = 1 [json_name = "limit"];
  void clear_limit();
  uint32_t limit() const;
  void set_limit(uint32_t value);
  private:
  uint32_t _internal_limit() const;
  void _internal_set_limit(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.admin.ProjectListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filters_;
  ::flyteidl::admin::Sort* sort_by_;
  uint32_t limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fproject_2eproto;
};
// -------------------------------------------------------------------

class ProjectRegisterRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.ProjectRegisterRequest) */ {
 public:
  inline ProjectRegisterRequest() : ProjectRegisterRequest(nullptr) {}
  ~ProjectRegisterRequest() override;
  explicit constexpr ProjectRegisterRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProjectRegisterRequest(const ProjectRegisterRequest& from);
  ProjectRegisterRequest(ProjectRegisterRequest&& from) noexcept
    : ProjectRegisterRequest() {
    *this = ::std::move(from);
  }

  inline ProjectRegisterRequest& operator=(const ProjectRegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProjectRegisterRequest& operator=(ProjectRegisterRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProjectRegisterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProjectRegisterRequest* internal_default_instance() {
    return reinterpret_cast<const ProjectRegisterRequest*>(
               &_ProjectRegisterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ProjectRegisterRequest& a, ProjectRegisterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ProjectRegisterRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProjectRegisterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProjectRegisterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProjectRegisterRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProjectRegisterRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.ProjectRegisterRequest";
  }
  protected:
  explicit ProjectRegisterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectFieldNumber = 1,
  };
  // .flyteidl.admin.Project project = 1 [json_name = "project"];
  bool has_project() const;
  private:
  bool _internal_has_project() const;
  public:
  void clear_project();
  const ::flyteidl::admin::Project& project() const;
  PROTOBUF_NODISCARD ::flyteidl::admin::Project* release_project();
  ::flyteidl::admin::Project* mutable_project();
  void set_allocated_project(::flyteidl::admin::Project* project);
  private:
  const ::flyteidl::admin::Project& _internal_project() const;
  ::flyteidl::admin::Project* _internal_mutable_project();
  public:
  void unsafe_arena_set_allocated_project(
      ::flyteidl::admin::Project* project);
  ::flyteidl::admin::Project* unsafe_arena_release_project();

  // @@protoc_insertion_point(class_scope:flyteidl.admin.ProjectRegisterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::flyteidl::admin::Project* project_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fproject_2eproto;
};
// -------------------------------------------------------------------

class ProjectRegisterResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:flyteidl.admin.ProjectRegisterResponse) */ {
 public:
  inline ProjectRegisterResponse() : ProjectRegisterResponse(nullptr) {}
  explicit constexpr ProjectRegisterResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProjectRegisterResponse(const ProjectRegisterResponse& from);
  ProjectRegisterResponse(ProjectRegisterResponse&& from) noexcept
    : ProjectRegisterResponse() {
    *this = ::std::move(from);
  }

  inline ProjectRegisterResponse& operator=(const ProjectRegisterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProjectRegisterResponse& operator=(ProjectRegisterResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProjectRegisterResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProjectRegisterResponse* internal_default_instance() {
    return reinterpret_cast<const ProjectRegisterResponse*>(
               &_ProjectRegisterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ProjectRegisterResponse& a, ProjectRegisterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ProjectRegisterResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProjectRegisterResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProjectRegisterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProjectRegisterResponse>(arena);
  }

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.ProjectRegisterResponse";
  }
  protected:
  explicit ProjectRegisterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyteidl.admin.ProjectRegisterResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fproject_2eproto;
};
// -------------------------------------------------------------------

class ProjectUpdateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:flyteidl.admin.ProjectUpdateResponse) */ {
 public:
  inline ProjectUpdateResponse() : ProjectUpdateResponse(nullptr) {}
  explicit constexpr ProjectUpdateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProjectUpdateResponse(const ProjectUpdateResponse& from);
  ProjectUpdateResponse(ProjectUpdateResponse&& from) noexcept
    : ProjectUpdateResponse() {
    *this = ::std::move(from);
  }

  inline ProjectUpdateResponse& operator=(const ProjectUpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProjectUpdateResponse& operator=(ProjectUpdateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProjectUpdateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProjectUpdateResponse* internal_default_instance() {
    return reinterpret_cast<const ProjectUpdateResponse*>(
               &_ProjectUpdateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ProjectUpdateResponse& a, ProjectUpdateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ProjectUpdateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProjectUpdateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProjectUpdateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProjectUpdateResponse>(arena);
  }

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.ProjectUpdateResponse";
  }
  protected:
  explicit ProjectUpdateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyteidl.admin.ProjectUpdateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fproject_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Domain

// string id = 1 [json_name = "id"];
inline void Domain::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Domain::id() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Domain.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Domain::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.Domain.id)
}
inline std::string* Domain::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Domain.id)
  return _s;
}
inline const std::string& Domain::_internal_id() const {
  return id_.Get();
}
inline void Domain::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Domain::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Domain::release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Domain.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Domain::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Domain.id)
}

// string name = 2 [json_name = "name"];
inline void Domain::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Domain::name() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Domain.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Domain::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.Domain.name)
}
inline std::string* Domain::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Domain.name)
  return _s;
}
inline const std::string& Domain::_internal_name() const {
  return name_.Get();
}
inline void Domain::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Domain::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Domain::release_name() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Domain.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Domain::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Domain.name)
}

// -------------------------------------------------------------------

// Project

// string id = 1 [json_name = "id"];
inline void Project::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Project::id() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Project.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Project::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.Project.id)
}
inline std::string* Project::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Project.id)
  return _s;
}
inline const std::string& Project::_internal_id() const {
  return id_.Get();
}
inline void Project::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Project::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Project::release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Project.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Project::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Project.id)
}

// string name = 2 [json_name = "name"];
inline void Project::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Project::name() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Project.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Project::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.Project.name)
}
inline std::string* Project::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Project.name)
  return _s;
}
inline const std::string& Project::_internal_name() const {
  return name_.Get();
}
inline void Project::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Project::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Project::release_name() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Project.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Project::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Project.name)
}

// repeated .flyteidl.admin.Domain domains = 3 [json_name = "domains"];
inline int Project::_internal_domains_size() const {
  return domains_.size();
}
inline int Project::domains_size() const {
  return _internal_domains_size();
}
inline void Project::clear_domains() {
  domains_.Clear();
}
inline ::flyteidl::admin::Domain* Project::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Project.domains)
  return domains_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::admin::Domain >*
Project::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.admin.Project.domains)
  return &domains_;
}
inline const ::flyteidl::admin::Domain& Project::_internal_domains(int index) const {
  return domains_.Get(index);
}
inline const ::flyteidl::admin::Domain& Project::domains(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Project.domains)
  return _internal_domains(index);
}
inline ::flyteidl::admin::Domain* Project::_internal_add_domains() {
  return domains_.Add();
}
inline ::flyteidl::admin::Domain* Project::add_domains() {
  ::flyteidl::admin::Domain* _add = _internal_add_domains();
  // @@protoc_insertion_point(field_add:flyteidl.admin.Project.domains)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::admin::Domain >&
Project::domains() const {
  // @@protoc_insertion_point(field_list:flyteidl.admin.Project.domains)
  return domains_;
}

// string description = 4 [json_name = "description"];
inline void Project::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& Project::description() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Project.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Project::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.Project.description)
}
inline std::string* Project::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Project.description)
  return _s;
}
inline const std::string& Project::_internal_description() const {
  return description_.Get();
}
inline void Project::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Project::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Project::release_description() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Project.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Project::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Project.description)
}

// .flyteidl.admin.Labels labels = 5 [json_name = "labels"];
inline bool Project::_internal_has_labels() const {
  return this != internal_default_instance() && labels_ != nullptr;
}
inline bool Project::has_labels() const {
  return _internal_has_labels();
}
inline const ::flyteidl::admin::Labels& Project::_internal_labels() const {
  const ::flyteidl::admin::Labels* p = labels_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::admin::Labels&>(
      ::flyteidl::admin::_Labels_default_instance_);
}
inline const ::flyteidl::admin::Labels& Project::labels() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Project.labels)
  return _internal_labels();
}
inline void Project::unsafe_arena_set_allocated_labels(
    ::flyteidl::admin::Labels* labels) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(labels_);
  }
  labels_ = labels;
  if (labels) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.Project.labels)
}
inline ::flyteidl::admin::Labels* Project::release_labels() {
  
  ::flyteidl::admin::Labels* temp = labels_;
  labels_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::admin::Labels* Project::unsafe_arena_release_labels() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Project.labels)
  
  ::flyteidl::admin::Labels* temp = labels_;
  labels_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::Labels* Project::_internal_mutable_labels() {
  
  if (labels_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::Labels>(GetArenaForAllocation());
    labels_ = p;
  }
  return labels_;
}
inline ::flyteidl::admin::Labels* Project::mutable_labels() {
  ::flyteidl::admin::Labels* _msg = _internal_mutable_labels();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Project.labels)
  return _msg;
}
inline void Project::set_allocated_labels(::flyteidl::admin::Labels* labels) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(labels_);
  }
  if (labels) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(labels));
    if (message_arena != submessage_arena) {
      labels = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, labels, submessage_arena);
    }
    
  } else {
    
  }
  labels_ = labels;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Project.labels)
}

// .flyteidl.admin.Project.ProjectState state = 6 [json_name = "state"];
inline void Project::clear_state() {
  state_ = 0;
}
inline ::flyteidl::admin::Project_ProjectState Project::_internal_state() const {
  return static_cast< ::flyteidl::admin::Project_ProjectState >(state_);
}
inline ::flyteidl::admin::Project_ProjectState Project::state() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Project.state)
  return _internal_state();
}
inline void Project::_internal_set_state(::flyteidl::admin::Project_ProjectState value) {
  
  state_ = value;
}
inline void Project::set_state(::flyteidl::admin::Project_ProjectState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.Project.state)
}

// -------------------------------------------------------------------

// Projects

// repeated .flyteidl.admin.Project projects = 1 [json_name = "projects"];
inline int Projects::_internal_projects_size() const {
  return projects_.size();
}
inline int Projects::projects_size() const {
  return _internal_projects_size();
}
inline void Projects::clear_projects() {
  projects_.Clear();
}
inline ::flyteidl::admin::Project* Projects::mutable_projects(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Projects.projects)
  return projects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::admin::Project >*
Projects::mutable_projects() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.admin.Projects.projects)
  return &projects_;
}
inline const ::flyteidl::admin::Project& Projects::_internal_projects(int index) const {
  return projects_.Get(index);
}
inline const ::flyteidl::admin::Project& Projects::projects(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Projects.projects)
  return _internal_projects(index);
}
inline ::flyteidl::admin::Project* Projects::_internal_add_projects() {
  return projects_.Add();
}
inline ::flyteidl::admin::Project* Projects::add_projects() {
  ::flyteidl::admin::Project* _add = _internal_add_projects();
  // @@protoc_insertion_point(field_add:flyteidl.admin.Projects.projects)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::admin::Project >&
Projects::projects() const {
  // @@protoc_insertion_point(field_list:flyteidl.admin.Projects.projects)
  return projects_;
}

// string token = 2 [json_name = "token"];
inline void Projects::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& Projects::token() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Projects.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Projects::set_token(ArgT0&& arg0, ArgT... args) {
 
 token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.Projects.token)
}
inline std::string* Projects::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Projects.token)
  return _s;
}
inline const std::string& Projects::_internal_token() const {
  return token_.Get();
}
inline void Projects::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Projects::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Projects::release_token() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Projects.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Projects::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Projects.token)
}

// -------------------------------------------------------------------

// ProjectListRequest

// uint32 limit = 1 [json_name = "limit"];
inline void ProjectListRequest::clear_limit() {
  limit_ = 0u;
}
inline uint32_t ProjectListRequest::_internal_limit() const {
  return limit_;
}
inline uint32_t ProjectListRequest::limit() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ProjectListRequest.limit)
  return _internal_limit();
}
inline void ProjectListRequest::_internal_set_limit(uint32_t value) {
  
  limit_ = value;
}
inline void ProjectListRequest::set_limit(uint32_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.ProjectListRequest.limit)
}

// string token = 2 [json_name = "token"];
inline void ProjectListRequest::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& ProjectListRequest::token() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ProjectListRequest.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProjectListRequest::set_token(ArgT0&& arg0, ArgT... args) {
 
 token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.ProjectListRequest.token)
}
inline std::string* ProjectListRequest::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ProjectListRequest.token)
  return _s;
}
inline const std::string& ProjectListRequest::_internal_token() const {
  return token_.Get();
}
inline void ProjectListRequest::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProjectListRequest::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProjectListRequest::release_token() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ProjectListRequest.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProjectListRequest::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ProjectListRequest.token)
}

// string filters = 3 [json_name = "filters"];
inline void ProjectListRequest::clear_filters() {
  filters_.ClearToEmpty();
}
inline const std::string& ProjectListRequest::filters() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ProjectListRequest.filters)
  return _internal_filters();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProjectListRequest::set_filters(ArgT0&& arg0, ArgT... args) {
 
 filters_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.ProjectListRequest.filters)
}
inline std::string* ProjectListRequest::mutable_filters() {
  std::string* _s = _internal_mutable_filters();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ProjectListRequest.filters)
  return _s;
}
inline const std::string& ProjectListRequest::_internal_filters() const {
  return filters_.Get();
}
inline void ProjectListRequest::_internal_set_filters(const std::string& value) {
  
  filters_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProjectListRequest::_internal_mutable_filters() {
  
  return filters_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProjectListRequest::release_filters() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ProjectListRequest.filters)
  return filters_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProjectListRequest::set_allocated_filters(std::string* filters) {
  if (filters != nullptr) {
    
  } else {
    
  }
  filters_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filters,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (filters_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    filters_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ProjectListRequest.filters)
}

// .flyteidl.admin.Sort sort_by = 4 [json_name = "sortBy"];
inline bool ProjectListRequest::_internal_has_sort_by() const {
  return this != internal_default_instance() && sort_by_ != nullptr;
}
inline bool ProjectListRequest::has_sort_by() const {
  return _internal_has_sort_by();
}
inline const ::flyteidl::admin::Sort& ProjectListRequest::_internal_sort_by() const {
  const ::flyteidl::admin::Sort* p = sort_by_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::admin::Sort&>(
      ::flyteidl::admin::_Sort_default_instance_);
}
inline const ::flyteidl::admin::Sort& ProjectListRequest::sort_by() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ProjectListRequest.sort_by)
  return _internal_sort_by();
}
inline void ProjectListRequest::unsafe_arena_set_allocated_sort_by(
    ::flyteidl::admin::Sort* sort_by) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sort_by_);
  }
  sort_by_ = sort_by;
  if (sort_by) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.ProjectListRequest.sort_by)
}
inline ::flyteidl::admin::Sort* ProjectListRequest::release_sort_by() {
  
  ::flyteidl::admin::Sort* temp = sort_by_;
  sort_by_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::admin::Sort* ProjectListRequest::unsafe_arena_release_sort_by() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ProjectListRequest.sort_by)
  
  ::flyteidl::admin::Sort* temp = sort_by_;
  sort_by_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::Sort* ProjectListRequest::_internal_mutable_sort_by() {
  
  if (sort_by_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::Sort>(GetArenaForAllocation());
    sort_by_ = p;
  }
  return sort_by_;
}
inline ::flyteidl::admin::Sort* ProjectListRequest::mutable_sort_by() {
  ::flyteidl::admin::Sort* _msg = _internal_mutable_sort_by();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ProjectListRequest.sort_by)
  return _msg;
}
inline void ProjectListRequest::set_allocated_sort_by(::flyteidl::admin::Sort* sort_by) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sort_by_);
  }
  if (sort_by) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sort_by));
    if (message_arena != submessage_arena) {
      sort_by = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sort_by, submessage_arena);
    }
    
  } else {
    
  }
  sort_by_ = sort_by;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ProjectListRequest.sort_by)
}

// -------------------------------------------------------------------

// ProjectRegisterRequest

// .flyteidl.admin.Project project = 1 [json_name = "project"];
inline bool ProjectRegisterRequest::_internal_has_project() const {
  return this != internal_default_instance() && project_ != nullptr;
}
inline bool ProjectRegisterRequest::has_project() const {
  return _internal_has_project();
}
inline void ProjectRegisterRequest::clear_project() {
  if (GetArenaForAllocation() == nullptr && project_ != nullptr) {
    delete project_;
  }
  project_ = nullptr;
}
inline const ::flyteidl::admin::Project& ProjectRegisterRequest::_internal_project() const {
  const ::flyteidl::admin::Project* p = project_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::admin::Project&>(
      ::flyteidl::admin::_Project_default_instance_);
}
inline const ::flyteidl::admin::Project& ProjectRegisterRequest::project() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ProjectRegisterRequest.project)
  return _internal_project();
}
inline void ProjectRegisterRequest::unsafe_arena_set_allocated_project(
    ::flyteidl::admin::Project* project) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(project_);
  }
  project_ = project;
  if (project) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.ProjectRegisterRequest.project)
}
inline ::flyteidl::admin::Project* ProjectRegisterRequest::release_project() {
  
  ::flyteidl::admin::Project* temp = project_;
  project_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::admin::Project* ProjectRegisterRequest::unsafe_arena_release_project() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ProjectRegisterRequest.project)
  
  ::flyteidl::admin::Project* temp = project_;
  project_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::Project* ProjectRegisterRequest::_internal_mutable_project() {
  
  if (project_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::Project>(GetArenaForAllocation());
    project_ = p;
  }
  return project_;
}
inline ::flyteidl::admin::Project* ProjectRegisterRequest::mutable_project() {
  ::flyteidl::admin::Project* _msg = _internal_mutable_project();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ProjectRegisterRequest.project)
  return _msg;
}
inline void ProjectRegisterRequest::set_allocated_project(::flyteidl::admin::Project* project) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete project_;
  }
  if (project) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::admin::Project>::GetOwningArena(project);
    if (message_arena != submessage_arena) {
      project = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, project, submessage_arena);
    }
    
  } else {
    
  }
  project_ = project;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ProjectRegisterRequest.project)
}

// -------------------------------------------------------------------

// ProjectRegisterResponse

// -------------------------------------------------------------------

// ProjectUpdateResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace admin
}  // namespace flyteidl

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::flyteidl::admin::Project_ProjectState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flyteidl::admin::Project_ProjectState>() {
  return ::flyteidl::admin::Project_ProjectState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fadmin_2fproject_2eproto
