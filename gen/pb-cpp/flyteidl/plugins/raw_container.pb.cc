// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/plugins/raw_container.proto

#include "flyteidl/plugins/raw_container.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace flyteidl {
namespace plugins {
class CoPilotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CoPilot> _instance;
} _CoPilot_default_instance_;
}  // namespace plugins
}  // namespace flyteidl
static void InitDefaultsCoPilot_flyteidl_2fplugins_2fraw_5fcontainer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::plugins::_CoPilot_default_instance_;
    new (ptr) ::flyteidl::plugins::CoPilot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::plugins::CoPilot::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CoPilot_flyteidl_2fplugins_2fraw_5fcontainer_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCoPilot_flyteidl_2fplugins_2fraw_5fcontainer_2eproto}, {}};

void InitDefaults_flyteidl_2fplugins_2fraw_5fcontainer_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CoPilot_flyteidl_2fplugins_2fraw_5fcontainer_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_flyteidl_2fplugins_2fraw_5fcontainer_2eproto[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_flyteidl_2fplugins_2fraw_5fcontainer_2eproto[1];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fplugins_2fraw_5fcontainer_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_flyteidl_2fplugins_2fraw_5fcontainer_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::CoPilot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::CoPilot, input_path_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::CoPilot, output_path_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::CoPilot, format_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::flyteidl::plugins::CoPilot)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::plugins::_CoPilot_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_flyteidl_2fplugins_2fraw_5fcontainer_2eproto = {
  {}, AddDescriptors_flyteidl_2fplugins_2fraw_5fcontainer_2eproto, "flyteidl/plugins/raw_container.proto", schemas,
  file_default_instances, TableStruct_flyteidl_2fplugins_2fraw_5fcontainer_2eproto::offsets,
  file_level_metadata_flyteidl_2fplugins_2fraw_5fcontainer_2eproto, 1, file_level_enum_descriptors_flyteidl_2fplugins_2fraw_5fcontainer_2eproto, file_level_service_descriptors_flyteidl_2fplugins_2fraw_5fcontainer_2eproto,
};

const char descriptor_table_protodef_flyteidl_2fplugins_2fraw_5fcontainer_2eproto[] =
  "\n$flyteidl/plugins/raw_container.proto\022\020"
  "flyteidl.plugins\"\235\001\n\007CoPilot\022\022\n\ninput_pa"
  "th\030\001 \001(\t\022\023\n\013output_path\030\002 \001(\t\0228\n\006format\030"
  "\003 \001(\0162(.flyteidl.plugins.CoPilot.Metadat"
  "aFormat\"/\n\016MetadataFormat\022\010\n\004JSON\020\000\022\010\n\004Y"
  "AML\020\001\022\t\n\005PROTO\020\002B5Z3github.com/lyft/flyt"
  "eidl/gen/pb-go/flyteidl/pluginsb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_flyteidl_2fplugins_2fraw_5fcontainer_2eproto = {
  false, InitDefaults_flyteidl_2fplugins_2fraw_5fcontainer_2eproto, 
  descriptor_table_protodef_flyteidl_2fplugins_2fraw_5fcontainer_2eproto,
  "flyteidl/plugins/raw_container.proto", &assign_descriptors_table_flyteidl_2fplugins_2fraw_5fcontainer_2eproto, 279,
};

void AddDescriptors_flyteidl_2fplugins_2fraw_5fcontainer_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_flyteidl_2fplugins_2fraw_5fcontainer_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_flyteidl_2fplugins_2fraw_5fcontainer_2eproto = []() { AddDescriptors_flyteidl_2fplugins_2fraw_5fcontainer_2eproto(); return true; }();
namespace flyteidl {
namespace plugins {
const ::google::protobuf::EnumDescriptor* CoPilot_MetadataFormat_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_flyteidl_2fplugins_2fraw_5fcontainer_2eproto);
  return file_level_enum_descriptors_flyteidl_2fplugins_2fraw_5fcontainer_2eproto[0];
}
bool CoPilot_MetadataFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CoPilot_MetadataFormat CoPilot::JSON;
const CoPilot_MetadataFormat CoPilot::YAML;
const CoPilot_MetadataFormat CoPilot::PROTO;
const CoPilot_MetadataFormat CoPilot::MetadataFormat_MIN;
const CoPilot_MetadataFormat CoPilot::MetadataFormat_MAX;
const int CoPilot::MetadataFormat_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void CoPilot::InitAsDefaultInstance() {
}
class CoPilot::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CoPilot::kInputPathFieldNumber;
const int CoPilot::kOutputPathFieldNumber;
const int CoPilot::kFormatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CoPilot::CoPilot()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.plugins.CoPilot)
}
CoPilot::CoPilot(const CoPilot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  input_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.input_path().size() > 0) {
    input_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_path_);
  }
  output_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.output_path().size() > 0) {
    output_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_path_);
  }
  format_ = from.format_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.plugins.CoPilot)
}

void CoPilot::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CoPilot_flyteidl_2fplugins_2fraw_5fcontainer_2eproto.base);
  input_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  format_ = 0;
}

CoPilot::~CoPilot() {
  // @@protoc_insertion_point(destructor:flyteidl.plugins.CoPilot)
  SharedDtor();
}

void CoPilot::SharedDtor() {
  input_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CoPilot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CoPilot& CoPilot::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CoPilot_flyteidl_2fplugins_2fraw_5fcontainer_2eproto.base);
  return *internal_default_instance();
}


void CoPilot::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.plugins.CoPilot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  format_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CoPilot::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CoPilot*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string input_path = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.plugins.CoPilot.input_path");
        object = msg->mutable_input_path();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string output_path = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.plugins.CoPilot.output_path");
        object = msg->mutable_output_path();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .flyteidl.plugins.CoPilot.MetadataFormat format = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_format(static_cast<::flyteidl::plugins::CoPilot_MetadataFormat>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CoPilot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.plugins.CoPilot)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string input_path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->input_path().data(), static_cast<int>(this->input_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.plugins.CoPilot.input_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string output_path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_output_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->output_path().data(), static_cast<int>(this->output_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.plugins.CoPilot.output_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.plugins.CoPilot.MetadataFormat format = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_format(static_cast< ::flyteidl::plugins::CoPilot_MetadataFormat >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.plugins.CoPilot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.plugins.CoPilot)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CoPilot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.plugins.CoPilot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string input_path = 1;
  if (this->input_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->input_path().data(), static_cast<int>(this->input_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.plugins.CoPilot.input_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->input_path(), output);
  }

  // string output_path = 2;
  if (this->output_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output_path().data(), static_cast<int>(this->output_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.plugins.CoPilot.output_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->output_path(), output);
  }

  // .flyteidl.plugins.CoPilot.MetadataFormat format = 3;
  if (this->format() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->format(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.plugins.CoPilot)
}

::google::protobuf::uint8* CoPilot::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.plugins.CoPilot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string input_path = 1;
  if (this->input_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->input_path().data(), static_cast<int>(this->input_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.plugins.CoPilot.input_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->input_path(), target);
  }

  // string output_path = 2;
  if (this->output_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output_path().data(), static_cast<int>(this->output_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.plugins.CoPilot.output_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->output_path(), target);
  }

  // .flyteidl.plugins.CoPilot.MetadataFormat format = 3;
  if (this->format() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->format(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.plugins.CoPilot)
  return target;
}

size_t CoPilot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.plugins.CoPilot)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string input_path = 1;
  if (this->input_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->input_path());
  }

  // string output_path = 2;
  if (this->output_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->output_path());
  }

  // .flyteidl.plugins.CoPilot.MetadataFormat format = 3;
  if (this->format() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->format());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CoPilot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.plugins.CoPilot)
  GOOGLE_DCHECK_NE(&from, this);
  const CoPilot* source =
      ::google::protobuf::DynamicCastToGenerated<CoPilot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.plugins.CoPilot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.plugins.CoPilot)
    MergeFrom(*source);
  }
}

void CoPilot::MergeFrom(const CoPilot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.plugins.CoPilot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.input_path().size() > 0) {

    input_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_path_);
  }
  if (from.output_path().size() > 0) {

    output_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_path_);
  }
  if (from.format() != 0) {
    set_format(from.format());
  }
}

void CoPilot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.plugins.CoPilot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoPilot::CopyFrom(const CoPilot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.plugins.CoPilot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoPilot::IsInitialized() const {
  return true;
}

void CoPilot::Swap(CoPilot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CoPilot::InternalSwap(CoPilot* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  input_path_.Swap(&other->input_path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  output_path_.Swap(&other->output_path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(format_, other->format_);
}

::google::protobuf::Metadata CoPilot::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fplugins_2fraw_5fcontainer_2eproto);
  return ::file_level_metadata_flyteidl_2fplugins_2fraw_5fcontainer_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace plugins
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::flyteidl::plugins::CoPilot* Arena::CreateMaybeMessage< ::flyteidl::plugins::CoPilot >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::plugins::CoPilot >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
