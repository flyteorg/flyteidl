// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/tasks.proto

package com.flyteidl.core;

/**
 * <pre>
 * Sql represents a generic sql workload with a statement and dialect.
 * </pre>
 *
 * Protobuf type {@code flyteidl.core.Sql}
 */
public final class Sql extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:flyteidl.core.Sql)
    SqlOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Sql.newBuilder() to construct.
  private Sql(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Sql() {
    statement_ = "";
    dialect_ = 0;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Sql();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private Sql(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            statement_ = s;
            break;
          }
          case 16: {
            int rawValue = input.readEnum();

            dialect_ = rawValue;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.flyteidl.core.TasksProto.internal_static_flyteidl_core_Sql_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.flyteidl.core.TasksProto.internal_static_flyteidl_core_Sql_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.flyteidl.core.Sql.class, com.flyteidl.core.Sql.Builder.class);
  }

  /**
   * <pre>
   * The dialect of the SQL statement. This is used to validate and parse SQL statements at compilation time to avoid
   * expensive runtime operations. If set to an unsupported dialect, no validation will be done on the statement.
   * We support the following dialect: ansi, hive.
   * </pre>
   *
   * Protobuf enum {@code flyteidl.core.Sql.Dialect}
   */
  public enum Dialect
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>UNDEFINED = 0;</code>
     */
    UNDEFINED(0),
    /**
     * <code>ANSI = 1;</code>
     */
    ANSI(1),
    /**
     * <code>HIVE = 2;</code>
     */
    HIVE(2),
    /**
     * <code>OTHER = 3;</code>
     */
    OTHER(3),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>UNDEFINED = 0;</code>
     */
    public static final int UNDEFINED_VALUE = 0;
    /**
     * <code>ANSI = 1;</code>
     */
    public static final int ANSI_VALUE = 1;
    /**
     * <code>HIVE = 2;</code>
     */
    public static final int HIVE_VALUE = 2;
    /**
     * <code>OTHER = 3;</code>
     */
    public static final int OTHER_VALUE = 3;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static Dialect valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static Dialect forNumber(int value) {
      switch (value) {
        case 0: return UNDEFINED;
        case 1: return ANSI;
        case 2: return HIVE;
        case 3: return OTHER;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Dialect>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        Dialect> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Dialect>() {
            public Dialect findValueByNumber(int number) {
              return Dialect.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.flyteidl.core.Sql.getDescriptor().getEnumTypes().get(0);
    }

    private static final Dialect[] VALUES = values();

    public static Dialect valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private Dialect(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:flyteidl.core.Sql.Dialect)
  }

  public static final int STATEMENT_FIELD_NUMBER = 1;
  private volatile java.lang.Object statement_;
  /**
   * <pre>
   * The actual query to run, the query can have templated parameters.
   * We use Flyte's Golang templating format for Query templating.
   * Refer to the templating documentation.
   * https://docs.flyte.org/projects/cookbook/en/latest/auto/integrations/external_services/hive/hive.html#sphx-glr-auto-integrations-external-services-hive-hive-py
   * For example,
   * insert overwrite directory '{{ .rawOutputDataPrefix }}' stored as parquet
   * select *
   * from my_table
   * where ds = '{{ .Inputs.ds }}'
   * </pre>
   *
   * <code>string statement = 1 [json_name = "statement"];</code>
   * @return The statement.
   */
  @java.lang.Override
  public java.lang.String getStatement() {
    java.lang.Object ref = statement_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      statement_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The actual query to run, the query can have templated parameters.
   * We use Flyte's Golang templating format for Query templating.
   * Refer to the templating documentation.
   * https://docs.flyte.org/projects/cookbook/en/latest/auto/integrations/external_services/hive/hive.html#sphx-glr-auto-integrations-external-services-hive-hive-py
   * For example,
   * insert overwrite directory '{{ .rawOutputDataPrefix }}' stored as parquet
   * select *
   * from my_table
   * where ds = '{{ .Inputs.ds }}'
   * </pre>
   *
   * <code>string statement = 1 [json_name = "statement"];</code>
   * @return The bytes for statement.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getStatementBytes() {
    java.lang.Object ref = statement_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      statement_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int DIALECT_FIELD_NUMBER = 2;
  private int dialect_;
  /**
   * <code>.flyteidl.core.Sql.Dialect dialect = 2 [json_name = "dialect"];</code>
   * @return The enum numeric value on the wire for dialect.
   */
  @java.lang.Override public int getDialectValue() {
    return dialect_;
  }
  /**
   * <code>.flyteidl.core.Sql.Dialect dialect = 2 [json_name = "dialect"];</code>
   * @return The dialect.
   */
  @java.lang.Override public com.flyteidl.core.Sql.Dialect getDialect() {
    @SuppressWarnings("deprecation")
    com.flyteidl.core.Sql.Dialect result = com.flyteidl.core.Sql.Dialect.valueOf(dialect_);
    return result == null ? com.flyteidl.core.Sql.Dialect.UNRECOGNIZED : result;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(statement_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, statement_);
    }
    if (dialect_ != com.flyteidl.core.Sql.Dialect.UNDEFINED.getNumber()) {
      output.writeEnum(2, dialect_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(statement_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, statement_);
    }
    if (dialect_ != com.flyteidl.core.Sql.Dialect.UNDEFINED.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(2, dialect_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.flyteidl.core.Sql)) {
      return super.equals(obj);
    }
    com.flyteidl.core.Sql other = (com.flyteidl.core.Sql) obj;

    if (!getStatement()
        .equals(other.getStatement())) return false;
    if (dialect_ != other.dialect_) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + STATEMENT_FIELD_NUMBER;
    hash = (53 * hash) + getStatement().hashCode();
    hash = (37 * hash) + DIALECT_FIELD_NUMBER;
    hash = (53 * hash) + dialect_;
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.flyteidl.core.Sql parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.flyteidl.core.Sql parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.flyteidl.core.Sql parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.flyteidl.core.Sql parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.flyteidl.core.Sql parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.flyteidl.core.Sql parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.flyteidl.core.Sql parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.flyteidl.core.Sql parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.flyteidl.core.Sql parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.flyteidl.core.Sql parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.flyteidl.core.Sql parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.flyteidl.core.Sql parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.flyteidl.core.Sql prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Sql represents a generic sql workload with a statement and dialect.
   * </pre>
   *
   * Protobuf type {@code flyteidl.core.Sql}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:flyteidl.core.Sql)
      com.flyteidl.core.SqlOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.flyteidl.core.TasksProto.internal_static_flyteidl_core_Sql_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.flyteidl.core.TasksProto.internal_static_flyteidl_core_Sql_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.flyteidl.core.Sql.class, com.flyteidl.core.Sql.Builder.class);
    }

    // Construct using com.flyteidl.core.Sql.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      statement_ = "";

      dialect_ = 0;

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.flyteidl.core.TasksProto.internal_static_flyteidl_core_Sql_descriptor;
    }

    @java.lang.Override
    public com.flyteidl.core.Sql getDefaultInstanceForType() {
      return com.flyteidl.core.Sql.getDefaultInstance();
    }

    @java.lang.Override
    public com.flyteidl.core.Sql build() {
      com.flyteidl.core.Sql result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.flyteidl.core.Sql buildPartial() {
      com.flyteidl.core.Sql result = new com.flyteidl.core.Sql(this);
      result.statement_ = statement_;
      result.dialect_ = dialect_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.flyteidl.core.Sql) {
        return mergeFrom((com.flyteidl.core.Sql)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.flyteidl.core.Sql other) {
      if (other == com.flyteidl.core.Sql.getDefaultInstance()) return this;
      if (!other.getStatement().isEmpty()) {
        statement_ = other.statement_;
        onChanged();
      }
      if (other.dialect_ != 0) {
        setDialectValue(other.getDialectValue());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.flyteidl.core.Sql parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.flyteidl.core.Sql) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private java.lang.Object statement_ = "";
    /**
     * <pre>
     * The actual query to run, the query can have templated parameters.
     * We use Flyte's Golang templating format for Query templating.
     * Refer to the templating documentation.
     * https://docs.flyte.org/projects/cookbook/en/latest/auto/integrations/external_services/hive/hive.html#sphx-glr-auto-integrations-external-services-hive-hive-py
     * For example,
     * insert overwrite directory '{{ .rawOutputDataPrefix }}' stored as parquet
     * select *
     * from my_table
     * where ds = '{{ .Inputs.ds }}'
     * </pre>
     *
     * <code>string statement = 1 [json_name = "statement"];</code>
     * @return The statement.
     */
    public java.lang.String getStatement() {
      java.lang.Object ref = statement_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        statement_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The actual query to run, the query can have templated parameters.
     * We use Flyte's Golang templating format for Query templating.
     * Refer to the templating documentation.
     * https://docs.flyte.org/projects/cookbook/en/latest/auto/integrations/external_services/hive/hive.html#sphx-glr-auto-integrations-external-services-hive-hive-py
     * For example,
     * insert overwrite directory '{{ .rawOutputDataPrefix }}' stored as parquet
     * select *
     * from my_table
     * where ds = '{{ .Inputs.ds }}'
     * </pre>
     *
     * <code>string statement = 1 [json_name = "statement"];</code>
     * @return The bytes for statement.
     */
    public com.google.protobuf.ByteString
        getStatementBytes() {
      java.lang.Object ref = statement_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        statement_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The actual query to run, the query can have templated parameters.
     * We use Flyte's Golang templating format for Query templating.
     * Refer to the templating documentation.
     * https://docs.flyte.org/projects/cookbook/en/latest/auto/integrations/external_services/hive/hive.html#sphx-glr-auto-integrations-external-services-hive-hive-py
     * For example,
     * insert overwrite directory '{{ .rawOutputDataPrefix }}' stored as parquet
     * select *
     * from my_table
     * where ds = '{{ .Inputs.ds }}'
     * </pre>
     *
     * <code>string statement = 1 [json_name = "statement"];</code>
     * @param value The statement to set.
     * @return This builder for chaining.
     */
    public Builder setStatement(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      statement_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The actual query to run, the query can have templated parameters.
     * We use Flyte's Golang templating format for Query templating.
     * Refer to the templating documentation.
     * https://docs.flyte.org/projects/cookbook/en/latest/auto/integrations/external_services/hive/hive.html#sphx-glr-auto-integrations-external-services-hive-hive-py
     * For example,
     * insert overwrite directory '{{ .rawOutputDataPrefix }}' stored as parquet
     * select *
     * from my_table
     * where ds = '{{ .Inputs.ds }}'
     * </pre>
     *
     * <code>string statement = 1 [json_name = "statement"];</code>
     * @return This builder for chaining.
     */
    public Builder clearStatement() {
      
      statement_ = getDefaultInstance().getStatement();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The actual query to run, the query can have templated parameters.
     * We use Flyte's Golang templating format for Query templating.
     * Refer to the templating documentation.
     * https://docs.flyte.org/projects/cookbook/en/latest/auto/integrations/external_services/hive/hive.html#sphx-glr-auto-integrations-external-services-hive-hive-py
     * For example,
     * insert overwrite directory '{{ .rawOutputDataPrefix }}' stored as parquet
     * select *
     * from my_table
     * where ds = '{{ .Inputs.ds }}'
     * </pre>
     *
     * <code>string statement = 1 [json_name = "statement"];</code>
     * @param value The bytes for statement to set.
     * @return This builder for chaining.
     */
    public Builder setStatementBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      statement_ = value;
      onChanged();
      return this;
    }

    private int dialect_ = 0;
    /**
     * <code>.flyteidl.core.Sql.Dialect dialect = 2 [json_name = "dialect"];</code>
     * @return The enum numeric value on the wire for dialect.
     */
    @java.lang.Override public int getDialectValue() {
      return dialect_;
    }
    /**
     * <code>.flyteidl.core.Sql.Dialect dialect = 2 [json_name = "dialect"];</code>
     * @param value The enum numeric value on the wire for dialect to set.
     * @return This builder for chaining.
     */
    public Builder setDialectValue(int value) {
      
      dialect_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>.flyteidl.core.Sql.Dialect dialect = 2 [json_name = "dialect"];</code>
     * @return The dialect.
     */
    @java.lang.Override
    public com.flyteidl.core.Sql.Dialect getDialect() {
      @SuppressWarnings("deprecation")
      com.flyteidl.core.Sql.Dialect result = com.flyteidl.core.Sql.Dialect.valueOf(dialect_);
      return result == null ? com.flyteidl.core.Sql.Dialect.UNRECOGNIZED : result;
    }
    /**
     * <code>.flyteidl.core.Sql.Dialect dialect = 2 [json_name = "dialect"];</code>
     * @param value The dialect to set.
     * @return This builder for chaining.
     */
    public Builder setDialect(com.flyteidl.core.Sql.Dialect value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      dialect_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <code>.flyteidl.core.Sql.Dialect dialect = 2 [json_name = "dialect"];</code>
     * @return This builder for chaining.
     */
    public Builder clearDialect() {
      
      dialect_ = 0;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:flyteidl.core.Sql)
  }

  // @@protoc_insertion_point(class_scope:flyteidl.core.Sql)
  private static final com.flyteidl.core.Sql DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.flyteidl.core.Sql();
  }

  public static com.flyteidl.core.Sql getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Sql>
      PARSER = new com.google.protobuf.AbstractParser<Sql>() {
    @java.lang.Override
    public Sql parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new Sql(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Sql> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Sql> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.flyteidl.core.Sql getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

