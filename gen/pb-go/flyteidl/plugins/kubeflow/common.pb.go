// Code generated by protoc-gen-go. DO NOT EDIT.
// source: flyteidl/plugins/kubeflow/common.proto

package plugins

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RestartPolicy int32

const (
	RestartPolicy_RESTART_POLICY_NEVER      RestartPolicy = 0
	RestartPolicy_RESTART_POLICY_ON_FAILURE RestartPolicy = 1
	RestartPolicy_RESTART_POLICY_ALWAYS     RestartPolicy = 2
)

var RestartPolicy_name = map[int32]string{
	0: "RESTART_POLICY_NEVER",
	1: "RESTART_POLICY_ON_FAILURE",
	2: "RESTART_POLICY_ALWAYS",
}

var RestartPolicy_value = map[string]int32{
	"RESTART_POLICY_NEVER":      0,
	"RESTART_POLICY_ON_FAILURE": 1,
	"RESTART_POLICY_ALWAYS":     2,
}

func (x RestartPolicy) String() string {
	return proto.EnumName(RestartPolicy_name, int32(x))
}

func (RestartPolicy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f625aa9156a15090, []int{0}
}

type CleanPodPolicy int32

const (
	CleanPodPolicy_CLEANPOD_POLICY_NONE    CleanPodPolicy = 0
	CleanPodPolicy_CLEANPOD_POLICY_RUNNING CleanPodPolicy = 1
	CleanPodPolicy_CLEANPOD_POLICY_ALL     CleanPodPolicy = 2
)

var CleanPodPolicy_name = map[int32]string{
	0: "CLEANPOD_POLICY_NONE",
	1: "CLEANPOD_POLICY_RUNNING",
	2: "CLEANPOD_POLICY_ALL",
}

var CleanPodPolicy_value = map[string]int32{
	"CLEANPOD_POLICY_NONE":    0,
	"CLEANPOD_POLICY_RUNNING": 1,
	"CLEANPOD_POLICY_ALL":     2,
}

func (x CleanPodPolicy) String() string {
	return proto.EnumName(CleanPodPolicy_name, int32(x))
}

func (CleanPodPolicy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f625aa9156a15090, []int{1}
}

type RunPolicy struct {
	// Defines the policy to kill pods after the job completes. Default to None.
	CleanPodPolicy CleanPodPolicy `protobuf:"varint,1,opt,name=clean_pod_policy,json=cleanPodPolicy,proto3,enum=flyteidl.plugins.kubeflow.CleanPodPolicy" json:"clean_pod_policy,omitempty"`
	// TTL to clean up jobs. Default to infinite.
	TtlSecondsAfterFinished int32 `protobuf:"varint,2,opt,name=ttl_seconds_after_finished,json=ttlSecondsAfterFinished,proto3" json:"ttl_seconds_after_finished,omitempty"`
	// Specifies the duration in seconds relative to the startTime that the job may be active
	// before the system tries to terminate it; value must be positive integer.
	ActiveDeadlineSeconds int32 `protobuf:"varint,3,opt,name=active_deadline_seconds,json=activeDeadlineSeconds,proto3" json:"active_deadline_seconds,omitempty"`
	// Number of retries before marking this job failed.
	BackoffLimit         int32    `protobuf:"varint,4,opt,name=backoff_limit,json=backoffLimit,proto3" json:"backoff_limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RunPolicy) Reset()         { *m = RunPolicy{} }
func (m *RunPolicy) String() string { return proto.CompactTextString(m) }
func (*RunPolicy) ProtoMessage()    {}
func (*RunPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_f625aa9156a15090, []int{0}
}

func (m *RunPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunPolicy.Unmarshal(m, b)
}
func (m *RunPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunPolicy.Marshal(b, m, deterministic)
}
func (m *RunPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunPolicy.Merge(m, src)
}
func (m *RunPolicy) XXX_Size() int {
	return xxx_messageInfo_RunPolicy.Size(m)
}
func (m *RunPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_RunPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_RunPolicy proto.InternalMessageInfo

func (m *RunPolicy) GetCleanPodPolicy() CleanPodPolicy {
	if m != nil {
		return m.CleanPodPolicy
	}
	return CleanPodPolicy_CLEANPOD_POLICY_NONE
}

func (m *RunPolicy) GetTtlSecondsAfterFinished() int32 {
	if m != nil {
		return m.TtlSecondsAfterFinished
	}
	return 0
}

func (m *RunPolicy) GetActiveDeadlineSeconds() int32 {
	if m != nil {
		return m.ActiveDeadlineSeconds
	}
	return 0
}

func (m *RunPolicy) GetBackoffLimit() int32 {
	if m != nil {
		return m.BackoffLimit
	}
	return 0
}

func init() {
	proto.RegisterEnum("flyteidl.plugins.kubeflow.RestartPolicy", RestartPolicy_name, RestartPolicy_value)
	proto.RegisterEnum("flyteidl.plugins.kubeflow.CleanPodPolicy", CleanPodPolicy_name, CleanPodPolicy_value)
	proto.RegisterType((*RunPolicy)(nil), "flyteidl.plugins.kubeflow.RunPolicy")
}

func init() {
	proto.RegisterFile("flyteidl/plugins/kubeflow/common.proto", fileDescriptor_f625aa9156a15090)
}

var fileDescriptor_f625aa9156a15090 = []byte{
	// 379 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xdf, 0xab, 0xd3, 0x30,
	0x1c, 0xc5, 0x6f, 0xe7, 0x0f, 0x30, 0x78, 0x47, 0x89, 0x5e, 0xda, 0x29, 0xc2, 0x50, 0x90, 0x39,
	0xb0, 0x05, 0x05, 0x45, 0x7c, 0xaa, 0x5b, 0x27, 0x83, 0xd2, 0x96, 0x74, 0x53, 0xe6, 0x4b, 0x6c,
	0xd3, 0xb4, 0x0b, 0x4b, 0x93, 0xd2, 0xa6, 0xca, 0xfe, 0x75, 0x9f, 0xa4, 0x5d, 0x37, 0x58, 0xe1,
	0x3e, 0xe6, 0x7c, 0xce, 0xf7, 0x7c, 0x43, 0x72, 0xc0, 0xdb, 0x8c, 0x1f, 0x15, 0x65, 0x29, 0xb7,
	0x4b, 0xde, 0xe4, 0x4c, 0xd4, 0xf6, 0xa1, 0x49, 0x68, 0xc6, 0xe5, 0x5f, 0x9b, 0xc8, 0xa2, 0x90,
	0xc2, 0x2a, 0x2b, 0xa9, 0x24, 0x9c, 0x9c, 0x7d, 0x56, 0xef, 0xb3, 0xce, 0xbe, 0xd7, 0xff, 0x34,
	0xf0, 0x04, 0x35, 0x22, 0x94, 0x9c, 0x91, 0x23, 0x8c, 0x80, 0x4e, 0x38, 0x8d, 0x05, 0x2e, 0x65,
	0x8a, 0xcb, 0x4e, 0x33, 0xb5, 0xa9, 0x36, 0x1b, 0x7f, 0x78, 0x67, 0xdd, 0x9b, 0x61, 0x2d, 0xda,
	0x91, 0x50, 0xa6, 0xa7, 0x10, 0x34, 0x26, 0x57, 0x67, 0xf8, 0x15, 0xbc, 0x50, 0x8a, 0xe3, 0x9a,
	0x12, 0x29, 0xd2, 0x1a, 0xc7, 0x99, 0xa2, 0x15, 0xce, 0x98, 0x60, 0xf5, 0x9e, 0xa6, 0xe6, 0x68,
	0xaa, 0xcd, 0x1e, 0x21, 0x43, 0x29, 0x1e, 0x9d, 0x0c, 0x4e, 0xcb, 0x57, 0x3d, 0x86, 0x9f, 0x80,
	0x11, 0x13, 0xc5, 0xfe, 0x50, 0x9c, 0xd2, 0x38, 0xe5, 0x4c, 0xd0, 0x73, 0x90, 0xf9, 0xa0, 0x9b,
	0xbc, 0x3b, 0xe1, 0x65, 0x4f, 0xfb, 0x10, 0xf8, 0x06, 0xdc, 0x26, 0x31, 0x39, 0xc8, 0x2c, 0xc3,
	0x9c, 0x15, 0x4c, 0x99, 0x0f, 0x3b, 0xf7, 0xd3, 0x5e, 0xf4, 0x5a, 0x6d, 0x4e, 0xc0, 0x2d, 0xa2,
	0xb5, 0x8a, 0x2b, 0xd5, 0x5f, 0xd5, 0x04, 0xcf, 0x91, 0x1b, 0x6d, 0x1c, 0xb4, 0xc1, 0x61, 0xe0,
	0xad, 0x17, 0x3b, 0xec, 0xbb, 0x3f, 0x5c, 0xa4, 0xdf, 0xc0, 0x57, 0x60, 0x32, 0x20, 0x81, 0x8f,
	0x57, 0xce, 0xda, 0xdb, 0x22, 0x57, 0xd7, 0xe0, 0x04, 0xdc, 0x0d, 0xb0, 0xe3, 0xfd, 0x74, 0x76,
	0x91, 0x3e, 0x9a, 0xff, 0x06, 0xe3, 0xeb, 0x07, 0x6a, 0xb7, 0x2c, 0x3c, 0xd7, 0xf1, 0xc3, 0x60,
	0x79, 0x59, 0x13, 0xf8, 0xae, 0x7e, 0x03, 0x5f, 0x02, 0x63, 0x48, 0xd0, 0xd6, 0xf7, 0xd7, 0xfe,
	0x77, 0x5d, 0x83, 0x06, 0x78, 0x36, 0x84, 0x8e, 0xe7, 0xe9, 0xa3, 0x6f, 0x5f, 0x7e, 0x7d, 0xce,
	0x99, 0xda, 0x37, 0x89, 0x45, 0x64, 0x61, 0x77, 0xff, 0x24, 0xab, 0xdc, 0xbe, 0x94, 0x23, 0xa7,
	0xc2, 0x2e, 0x93, 0xf7, 0xb9, 0xb4, 0x87, 0x7d, 0x49, 0x1e, 0x77, 0x05, 0xf9, 0xf8, 0x3f, 0x00,
	0x00, 0xff, 0xff, 0x98, 0x4b, 0x46, 0x68, 0x4a, 0x02, 0x00, 0x00,
}
