// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/workflow_attributes.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fadmin_2fworkflow_5fattributes_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fadmin_2fworkflow_5fattributes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "flyteidl/admin/matchable_resource.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fworkflow_5fattributes_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fadmin_2fworkflow_5fattributes_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fadmin_2fworkflow_5fattributes_2eproto;
namespace flyteidl {
namespace admin {
class WorkflowAttributes;
struct WorkflowAttributesDefaultTypeInternal;
extern WorkflowAttributesDefaultTypeInternal _WorkflowAttributes_default_instance_;
class WorkflowAttributesDeleteRequest;
struct WorkflowAttributesDeleteRequestDefaultTypeInternal;
extern WorkflowAttributesDeleteRequestDefaultTypeInternal _WorkflowAttributesDeleteRequest_default_instance_;
class WorkflowAttributesDeleteResponse;
struct WorkflowAttributesDeleteResponseDefaultTypeInternal;
extern WorkflowAttributesDeleteResponseDefaultTypeInternal _WorkflowAttributesDeleteResponse_default_instance_;
class WorkflowAttributesGetRequest;
struct WorkflowAttributesGetRequestDefaultTypeInternal;
extern WorkflowAttributesGetRequestDefaultTypeInternal _WorkflowAttributesGetRequest_default_instance_;
class WorkflowAttributesGetResponse;
struct WorkflowAttributesGetResponseDefaultTypeInternal;
extern WorkflowAttributesGetResponseDefaultTypeInternal _WorkflowAttributesGetResponse_default_instance_;
class WorkflowAttributesUpdateRequest;
struct WorkflowAttributesUpdateRequestDefaultTypeInternal;
extern WorkflowAttributesUpdateRequestDefaultTypeInternal _WorkflowAttributesUpdateRequest_default_instance_;
class WorkflowAttributesUpdateResponse;
struct WorkflowAttributesUpdateResponseDefaultTypeInternal;
extern WorkflowAttributesUpdateResponseDefaultTypeInternal _WorkflowAttributesUpdateResponse_default_instance_;
}  // namespace admin
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> ::flyteidl::admin::WorkflowAttributes* Arena::CreateMaybeMessage<::flyteidl::admin::WorkflowAttributes>(Arena*);
template<> ::flyteidl::admin::WorkflowAttributesDeleteRequest* Arena::CreateMaybeMessage<::flyteidl::admin::WorkflowAttributesDeleteRequest>(Arena*);
template<> ::flyteidl::admin::WorkflowAttributesDeleteResponse* Arena::CreateMaybeMessage<::flyteidl::admin::WorkflowAttributesDeleteResponse>(Arena*);
template<> ::flyteidl::admin::WorkflowAttributesGetRequest* Arena::CreateMaybeMessage<::flyteidl::admin::WorkflowAttributesGetRequest>(Arena*);
template<> ::flyteidl::admin::WorkflowAttributesGetResponse* Arena::CreateMaybeMessage<::flyteidl::admin::WorkflowAttributesGetResponse>(Arena*);
template<> ::flyteidl::admin::WorkflowAttributesUpdateRequest* Arena::CreateMaybeMessage<::flyteidl::admin::WorkflowAttributesUpdateRequest>(Arena*);
template<> ::flyteidl::admin::WorkflowAttributesUpdateResponse* Arena::CreateMaybeMessage<::flyteidl::admin::WorkflowAttributesUpdateResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace flyteidl {
namespace admin {

// ===================================================================

class WorkflowAttributes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.WorkflowAttributes) */ {
 public:
  inline WorkflowAttributes() : WorkflowAttributes(nullptr) {}
  ~WorkflowAttributes() override;
  explicit constexpr WorkflowAttributes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorkflowAttributes(const WorkflowAttributes& from);
  WorkflowAttributes(WorkflowAttributes&& from) noexcept
    : WorkflowAttributes() {
    *this = ::std::move(from);
  }

  inline WorkflowAttributes& operator=(const WorkflowAttributes& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkflowAttributes& operator=(WorkflowAttributes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorkflowAttributes& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkflowAttributes* internal_default_instance() {
    return reinterpret_cast<const WorkflowAttributes*>(
               &_WorkflowAttributes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WorkflowAttributes& a, WorkflowAttributes& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkflowAttributes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkflowAttributes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorkflowAttributes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorkflowAttributes>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkflowAttributes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.WorkflowAttributes";
  }
  protected:
  explicit WorkflowAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectFieldNumber = 1,
    kDomainFieldNumber = 2,
    kWorkflowFieldNumber = 3,
    kMatchingAttributesFieldNumber = 4,
  };
  // string project = 1 [json_name = "project"];
  void clear_project();
  const std::string& project() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_project(ArgT0&& arg0, ArgT... args);
  std::string* mutable_project();
  PROTOBUF_NODISCARD std::string* release_project();
  void set_allocated_project(std::string* project);
  private:
  const std::string& _internal_project() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_project(const std::string& value);
  std::string* _internal_mutable_project();
  public:

  // string domain = 2 [json_name = "domain"];
  void clear_domain();
  const std::string& domain() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_domain(ArgT0&& arg0, ArgT... args);
  std::string* mutable_domain();
  PROTOBUF_NODISCARD std::string* release_domain();
  void set_allocated_domain(std::string* domain);
  private:
  const std::string& _internal_domain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_domain(const std::string& value);
  std::string* _internal_mutable_domain();
  public:

  // string workflow = 3 [json_name = "workflow"];
  void clear_workflow();
  const std::string& workflow() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_workflow(ArgT0&& arg0, ArgT... args);
  std::string* mutable_workflow();
  PROTOBUF_NODISCARD std::string* release_workflow();
  void set_allocated_workflow(std::string* workflow);
  private:
  const std::string& _internal_workflow() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_workflow(const std::string& value);
  std::string* _internal_mutable_workflow();
  public:

  // .flyteidl.admin.MatchingAttributes matching_attributes = 4 [json_name = "matchingAttributes"];
  bool has_matching_attributes() const;
  private:
  bool _internal_has_matching_attributes() const;
  public:
  void clear_matching_attributes();
  const ::flyteidl::admin::MatchingAttributes& matching_attributes() const;
  PROTOBUF_NODISCARD ::flyteidl::admin::MatchingAttributes* release_matching_attributes();
  ::flyteidl::admin::MatchingAttributes* mutable_matching_attributes();
  void set_allocated_matching_attributes(::flyteidl::admin::MatchingAttributes* matching_attributes);
  private:
  const ::flyteidl::admin::MatchingAttributes& _internal_matching_attributes() const;
  ::flyteidl::admin::MatchingAttributes* _internal_mutable_matching_attributes();
  public:
  void unsafe_arena_set_allocated_matching_attributes(
      ::flyteidl::admin::MatchingAttributes* matching_attributes);
  ::flyteidl::admin::MatchingAttributes* unsafe_arena_release_matching_attributes();

  // @@protoc_insertion_point(class_scope:flyteidl.admin.WorkflowAttributes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workflow_;
  ::flyteidl::admin::MatchingAttributes* matching_attributes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fworkflow_5fattributes_2eproto;
};
// -------------------------------------------------------------------

class WorkflowAttributesUpdateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.WorkflowAttributesUpdateRequest) */ {
 public:
  inline WorkflowAttributesUpdateRequest() : WorkflowAttributesUpdateRequest(nullptr) {}
  ~WorkflowAttributesUpdateRequest() override;
  explicit constexpr WorkflowAttributesUpdateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorkflowAttributesUpdateRequest(const WorkflowAttributesUpdateRequest& from);
  WorkflowAttributesUpdateRequest(WorkflowAttributesUpdateRequest&& from) noexcept
    : WorkflowAttributesUpdateRequest() {
    *this = ::std::move(from);
  }

  inline WorkflowAttributesUpdateRequest& operator=(const WorkflowAttributesUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkflowAttributesUpdateRequest& operator=(WorkflowAttributesUpdateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorkflowAttributesUpdateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkflowAttributesUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const WorkflowAttributesUpdateRequest*>(
               &_WorkflowAttributesUpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WorkflowAttributesUpdateRequest& a, WorkflowAttributesUpdateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkflowAttributesUpdateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkflowAttributesUpdateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorkflowAttributesUpdateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorkflowAttributesUpdateRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkflowAttributesUpdateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.WorkflowAttributesUpdateRequest";
  }
  protected:
  explicit WorkflowAttributesUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributesFieldNumber = 1,
  };
  // .flyteidl.admin.WorkflowAttributes attributes = 1 [json_name = "attributes"];
  bool has_attributes() const;
  private:
  bool _internal_has_attributes() const;
  public:
  void clear_attributes();
  const ::flyteidl::admin::WorkflowAttributes& attributes() const;
  PROTOBUF_NODISCARD ::flyteidl::admin::WorkflowAttributes* release_attributes();
  ::flyteidl::admin::WorkflowAttributes* mutable_attributes();
  void set_allocated_attributes(::flyteidl::admin::WorkflowAttributes* attributes);
  private:
  const ::flyteidl::admin::WorkflowAttributes& _internal_attributes() const;
  ::flyteidl::admin::WorkflowAttributes* _internal_mutable_attributes();
  public:
  void unsafe_arena_set_allocated_attributes(
      ::flyteidl::admin::WorkflowAttributes* attributes);
  ::flyteidl::admin::WorkflowAttributes* unsafe_arena_release_attributes();

  // @@protoc_insertion_point(class_scope:flyteidl.admin.WorkflowAttributesUpdateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::flyteidl::admin::WorkflowAttributes* attributes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fworkflow_5fattributes_2eproto;
};
// -------------------------------------------------------------------

class WorkflowAttributesUpdateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:flyteidl.admin.WorkflowAttributesUpdateResponse) */ {
 public:
  inline WorkflowAttributesUpdateResponse() : WorkflowAttributesUpdateResponse(nullptr) {}
  explicit constexpr WorkflowAttributesUpdateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorkflowAttributesUpdateResponse(const WorkflowAttributesUpdateResponse& from);
  WorkflowAttributesUpdateResponse(WorkflowAttributesUpdateResponse&& from) noexcept
    : WorkflowAttributesUpdateResponse() {
    *this = ::std::move(from);
  }

  inline WorkflowAttributesUpdateResponse& operator=(const WorkflowAttributesUpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkflowAttributesUpdateResponse& operator=(WorkflowAttributesUpdateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorkflowAttributesUpdateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkflowAttributesUpdateResponse* internal_default_instance() {
    return reinterpret_cast<const WorkflowAttributesUpdateResponse*>(
               &_WorkflowAttributesUpdateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(WorkflowAttributesUpdateResponse& a, WorkflowAttributesUpdateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkflowAttributesUpdateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkflowAttributesUpdateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorkflowAttributesUpdateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorkflowAttributesUpdateResponse>(arena);
  }

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.WorkflowAttributesUpdateResponse";
  }
  protected:
  explicit WorkflowAttributesUpdateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyteidl.admin.WorkflowAttributesUpdateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fworkflow_5fattributes_2eproto;
};
// -------------------------------------------------------------------

class WorkflowAttributesGetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.WorkflowAttributesGetRequest) */ {
 public:
  inline WorkflowAttributesGetRequest() : WorkflowAttributesGetRequest(nullptr) {}
  ~WorkflowAttributesGetRequest() override;
  explicit constexpr WorkflowAttributesGetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorkflowAttributesGetRequest(const WorkflowAttributesGetRequest& from);
  WorkflowAttributesGetRequest(WorkflowAttributesGetRequest&& from) noexcept
    : WorkflowAttributesGetRequest() {
    *this = ::std::move(from);
  }

  inline WorkflowAttributesGetRequest& operator=(const WorkflowAttributesGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkflowAttributesGetRequest& operator=(WorkflowAttributesGetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorkflowAttributesGetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkflowAttributesGetRequest* internal_default_instance() {
    return reinterpret_cast<const WorkflowAttributesGetRequest*>(
               &_WorkflowAttributesGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(WorkflowAttributesGetRequest& a, WorkflowAttributesGetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkflowAttributesGetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkflowAttributesGetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorkflowAttributesGetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorkflowAttributesGetRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkflowAttributesGetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.WorkflowAttributesGetRequest";
  }
  protected:
  explicit WorkflowAttributesGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectFieldNumber = 1,
    kDomainFieldNumber = 2,
    kWorkflowFieldNumber = 3,
    kResourceTypeFieldNumber = 4,
  };
  // string project = 1 [json_name = "project"];
  void clear_project();
  const std::string& project() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_project(ArgT0&& arg0, ArgT... args);
  std::string* mutable_project();
  PROTOBUF_NODISCARD std::string* release_project();
  void set_allocated_project(std::string* project);
  private:
  const std::string& _internal_project() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_project(const std::string& value);
  std::string* _internal_mutable_project();
  public:

  // string domain = 2 [json_name = "domain"];
  void clear_domain();
  const std::string& domain() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_domain(ArgT0&& arg0, ArgT... args);
  std::string* mutable_domain();
  PROTOBUF_NODISCARD std::string* release_domain();
  void set_allocated_domain(std::string* domain);
  private:
  const std::string& _internal_domain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_domain(const std::string& value);
  std::string* _internal_mutable_domain();
  public:

  // string workflow = 3 [json_name = "workflow"];
  void clear_workflow();
  const std::string& workflow() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_workflow(ArgT0&& arg0, ArgT... args);
  std::string* mutable_workflow();
  PROTOBUF_NODISCARD std::string* release_workflow();
  void set_allocated_workflow(std::string* workflow);
  private:
  const std::string& _internal_workflow() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_workflow(const std::string& value);
  std::string* _internal_mutable_workflow();
  public:

  // .flyteidl.admin.MatchableResource resource_type = 4 [json_name = "resourceType"];
  void clear_resource_type();
  ::flyteidl::admin::MatchableResource resource_type() const;
  void set_resource_type(::flyteidl::admin::MatchableResource value);
  private:
  ::flyteidl::admin::MatchableResource _internal_resource_type() const;
  void _internal_set_resource_type(::flyteidl::admin::MatchableResource value);
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.admin.WorkflowAttributesGetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workflow_;
  int resource_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fworkflow_5fattributes_2eproto;
};
// -------------------------------------------------------------------

class WorkflowAttributesGetResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.WorkflowAttributesGetResponse) */ {
 public:
  inline WorkflowAttributesGetResponse() : WorkflowAttributesGetResponse(nullptr) {}
  ~WorkflowAttributesGetResponse() override;
  explicit constexpr WorkflowAttributesGetResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorkflowAttributesGetResponse(const WorkflowAttributesGetResponse& from);
  WorkflowAttributesGetResponse(WorkflowAttributesGetResponse&& from) noexcept
    : WorkflowAttributesGetResponse() {
    *this = ::std::move(from);
  }

  inline WorkflowAttributesGetResponse& operator=(const WorkflowAttributesGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkflowAttributesGetResponse& operator=(WorkflowAttributesGetResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorkflowAttributesGetResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkflowAttributesGetResponse* internal_default_instance() {
    return reinterpret_cast<const WorkflowAttributesGetResponse*>(
               &_WorkflowAttributesGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(WorkflowAttributesGetResponse& a, WorkflowAttributesGetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkflowAttributesGetResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkflowAttributesGetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorkflowAttributesGetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorkflowAttributesGetResponse>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkflowAttributesGetResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.WorkflowAttributesGetResponse";
  }
  protected:
  explicit WorkflowAttributesGetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributesFieldNumber = 1,
  };
  // .flyteidl.admin.WorkflowAttributes attributes = 1 [json_name = "attributes"];
  bool has_attributes() const;
  private:
  bool _internal_has_attributes() const;
  public:
  void clear_attributes();
  const ::flyteidl::admin::WorkflowAttributes& attributes() const;
  PROTOBUF_NODISCARD ::flyteidl::admin::WorkflowAttributes* release_attributes();
  ::flyteidl::admin::WorkflowAttributes* mutable_attributes();
  void set_allocated_attributes(::flyteidl::admin::WorkflowAttributes* attributes);
  private:
  const ::flyteidl::admin::WorkflowAttributes& _internal_attributes() const;
  ::flyteidl::admin::WorkflowAttributes* _internal_mutable_attributes();
  public:
  void unsafe_arena_set_allocated_attributes(
      ::flyteidl::admin::WorkflowAttributes* attributes);
  ::flyteidl::admin::WorkflowAttributes* unsafe_arena_release_attributes();

  // @@protoc_insertion_point(class_scope:flyteidl.admin.WorkflowAttributesGetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::flyteidl::admin::WorkflowAttributes* attributes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fworkflow_5fattributes_2eproto;
};
// -------------------------------------------------------------------

class WorkflowAttributesDeleteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.WorkflowAttributesDeleteRequest) */ {
 public:
  inline WorkflowAttributesDeleteRequest() : WorkflowAttributesDeleteRequest(nullptr) {}
  ~WorkflowAttributesDeleteRequest() override;
  explicit constexpr WorkflowAttributesDeleteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorkflowAttributesDeleteRequest(const WorkflowAttributesDeleteRequest& from);
  WorkflowAttributesDeleteRequest(WorkflowAttributesDeleteRequest&& from) noexcept
    : WorkflowAttributesDeleteRequest() {
    *this = ::std::move(from);
  }

  inline WorkflowAttributesDeleteRequest& operator=(const WorkflowAttributesDeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkflowAttributesDeleteRequest& operator=(WorkflowAttributesDeleteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorkflowAttributesDeleteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkflowAttributesDeleteRequest* internal_default_instance() {
    return reinterpret_cast<const WorkflowAttributesDeleteRequest*>(
               &_WorkflowAttributesDeleteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(WorkflowAttributesDeleteRequest& a, WorkflowAttributesDeleteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkflowAttributesDeleteRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkflowAttributesDeleteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorkflowAttributesDeleteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorkflowAttributesDeleteRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkflowAttributesDeleteRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.WorkflowAttributesDeleteRequest";
  }
  protected:
  explicit WorkflowAttributesDeleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectFieldNumber = 1,
    kDomainFieldNumber = 2,
    kWorkflowFieldNumber = 3,
    kResourceTypeFieldNumber = 4,
  };
  // string project = 1 [json_name = "project"];
  void clear_project();
  const std::string& project() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_project(ArgT0&& arg0, ArgT... args);
  std::string* mutable_project();
  PROTOBUF_NODISCARD std::string* release_project();
  void set_allocated_project(std::string* project);
  private:
  const std::string& _internal_project() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_project(const std::string& value);
  std::string* _internal_mutable_project();
  public:

  // string domain = 2 [json_name = "domain"];
  void clear_domain();
  const std::string& domain() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_domain(ArgT0&& arg0, ArgT... args);
  std::string* mutable_domain();
  PROTOBUF_NODISCARD std::string* release_domain();
  void set_allocated_domain(std::string* domain);
  private:
  const std::string& _internal_domain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_domain(const std::string& value);
  std::string* _internal_mutable_domain();
  public:

  // string workflow = 3 [json_name = "workflow"];
  void clear_workflow();
  const std::string& workflow() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_workflow(ArgT0&& arg0, ArgT... args);
  std::string* mutable_workflow();
  PROTOBUF_NODISCARD std::string* release_workflow();
  void set_allocated_workflow(std::string* workflow);
  private:
  const std::string& _internal_workflow() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_workflow(const std::string& value);
  std::string* _internal_mutable_workflow();
  public:

  // .flyteidl.admin.MatchableResource resource_type = 4 [json_name = "resourceType"];
  void clear_resource_type();
  ::flyteidl::admin::MatchableResource resource_type() const;
  void set_resource_type(::flyteidl::admin::MatchableResource value);
  private:
  ::flyteidl::admin::MatchableResource _internal_resource_type() const;
  void _internal_set_resource_type(::flyteidl::admin::MatchableResource value);
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.admin.WorkflowAttributesDeleteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workflow_;
  int resource_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fworkflow_5fattributes_2eproto;
};
// -------------------------------------------------------------------

class WorkflowAttributesDeleteResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:flyteidl.admin.WorkflowAttributesDeleteResponse) */ {
 public:
  inline WorkflowAttributesDeleteResponse() : WorkflowAttributesDeleteResponse(nullptr) {}
  explicit constexpr WorkflowAttributesDeleteResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorkflowAttributesDeleteResponse(const WorkflowAttributesDeleteResponse& from);
  WorkflowAttributesDeleteResponse(WorkflowAttributesDeleteResponse&& from) noexcept
    : WorkflowAttributesDeleteResponse() {
    *this = ::std::move(from);
  }

  inline WorkflowAttributesDeleteResponse& operator=(const WorkflowAttributesDeleteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkflowAttributesDeleteResponse& operator=(WorkflowAttributesDeleteResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorkflowAttributesDeleteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkflowAttributesDeleteResponse* internal_default_instance() {
    return reinterpret_cast<const WorkflowAttributesDeleteResponse*>(
               &_WorkflowAttributesDeleteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(WorkflowAttributesDeleteResponse& a, WorkflowAttributesDeleteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkflowAttributesDeleteResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkflowAttributesDeleteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorkflowAttributesDeleteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorkflowAttributesDeleteResponse>(arena);
  }

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.WorkflowAttributesDeleteResponse";
  }
  protected:
  explicit WorkflowAttributesDeleteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyteidl.admin.WorkflowAttributesDeleteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fworkflow_5fattributes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WorkflowAttributes

// string project = 1 [json_name = "project"];
inline void WorkflowAttributes::clear_project() {
  project_.ClearToEmpty();
}
inline const std::string& WorkflowAttributes::project() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.WorkflowAttributes.project)
  return _internal_project();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WorkflowAttributes::set_project(ArgT0&& arg0, ArgT... args) {
 
 project_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.WorkflowAttributes.project)
}
inline std::string* WorkflowAttributes::mutable_project() {
  std::string* _s = _internal_mutable_project();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.WorkflowAttributes.project)
  return _s;
}
inline const std::string& WorkflowAttributes::_internal_project() const {
  return project_.Get();
}
inline void WorkflowAttributes::_internal_set_project(const std::string& value) {
  
  project_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WorkflowAttributes::_internal_mutable_project() {
  
  return project_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WorkflowAttributes::release_project() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.WorkflowAttributes.project)
  return project_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WorkflowAttributes::set_allocated_project(std::string* project) {
  if (project != nullptr) {
    
  } else {
    
  }
  project_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), project,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (project_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    project_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.WorkflowAttributes.project)
}

// string domain = 2 [json_name = "domain"];
inline void WorkflowAttributes::clear_domain() {
  domain_.ClearToEmpty();
}
inline const std::string& WorkflowAttributes::domain() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.WorkflowAttributes.domain)
  return _internal_domain();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WorkflowAttributes::set_domain(ArgT0&& arg0, ArgT... args) {
 
 domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.WorkflowAttributes.domain)
}
inline std::string* WorkflowAttributes::mutable_domain() {
  std::string* _s = _internal_mutable_domain();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.WorkflowAttributes.domain)
  return _s;
}
inline const std::string& WorkflowAttributes::_internal_domain() const {
  return domain_.Get();
}
inline void WorkflowAttributes::_internal_set_domain(const std::string& value) {
  
  domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WorkflowAttributes::_internal_mutable_domain() {
  
  return domain_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WorkflowAttributes::release_domain() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.WorkflowAttributes.domain)
  return domain_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WorkflowAttributes::set_allocated_domain(std::string* domain) {
  if (domain != nullptr) {
    
  } else {
    
  }
  domain_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), domain,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (domain_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.WorkflowAttributes.domain)
}

// string workflow = 3 [json_name = "workflow"];
inline void WorkflowAttributes::clear_workflow() {
  workflow_.ClearToEmpty();
}
inline const std::string& WorkflowAttributes::workflow() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.WorkflowAttributes.workflow)
  return _internal_workflow();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WorkflowAttributes::set_workflow(ArgT0&& arg0, ArgT... args) {
 
 workflow_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.WorkflowAttributes.workflow)
}
inline std::string* WorkflowAttributes::mutable_workflow() {
  std::string* _s = _internal_mutable_workflow();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.WorkflowAttributes.workflow)
  return _s;
}
inline const std::string& WorkflowAttributes::_internal_workflow() const {
  return workflow_.Get();
}
inline void WorkflowAttributes::_internal_set_workflow(const std::string& value) {
  
  workflow_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WorkflowAttributes::_internal_mutable_workflow() {
  
  return workflow_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WorkflowAttributes::release_workflow() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.WorkflowAttributes.workflow)
  return workflow_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WorkflowAttributes::set_allocated_workflow(std::string* workflow) {
  if (workflow != nullptr) {
    
  } else {
    
  }
  workflow_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), workflow,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (workflow_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    workflow_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.WorkflowAttributes.workflow)
}

// .flyteidl.admin.MatchingAttributes matching_attributes = 4 [json_name = "matchingAttributes"];
inline bool WorkflowAttributes::_internal_has_matching_attributes() const {
  return this != internal_default_instance() && matching_attributes_ != nullptr;
}
inline bool WorkflowAttributes::has_matching_attributes() const {
  return _internal_has_matching_attributes();
}
inline const ::flyteidl::admin::MatchingAttributes& WorkflowAttributes::_internal_matching_attributes() const {
  const ::flyteidl::admin::MatchingAttributes* p = matching_attributes_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::admin::MatchingAttributes&>(
      ::flyteidl::admin::_MatchingAttributes_default_instance_);
}
inline const ::flyteidl::admin::MatchingAttributes& WorkflowAttributes::matching_attributes() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.WorkflowAttributes.matching_attributes)
  return _internal_matching_attributes();
}
inline void WorkflowAttributes::unsafe_arena_set_allocated_matching_attributes(
    ::flyteidl::admin::MatchingAttributes* matching_attributes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(matching_attributes_);
  }
  matching_attributes_ = matching_attributes;
  if (matching_attributes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.WorkflowAttributes.matching_attributes)
}
inline ::flyteidl::admin::MatchingAttributes* WorkflowAttributes::release_matching_attributes() {
  
  ::flyteidl::admin::MatchingAttributes* temp = matching_attributes_;
  matching_attributes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::admin::MatchingAttributes* WorkflowAttributes::unsafe_arena_release_matching_attributes() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.WorkflowAttributes.matching_attributes)
  
  ::flyteidl::admin::MatchingAttributes* temp = matching_attributes_;
  matching_attributes_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::MatchingAttributes* WorkflowAttributes::_internal_mutable_matching_attributes() {
  
  if (matching_attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::MatchingAttributes>(GetArenaForAllocation());
    matching_attributes_ = p;
  }
  return matching_attributes_;
}
inline ::flyteidl::admin::MatchingAttributes* WorkflowAttributes::mutable_matching_attributes() {
  ::flyteidl::admin::MatchingAttributes* _msg = _internal_mutable_matching_attributes();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.WorkflowAttributes.matching_attributes)
  return _msg;
}
inline void WorkflowAttributes::set_allocated_matching_attributes(::flyteidl::admin::MatchingAttributes* matching_attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(matching_attributes_);
  }
  if (matching_attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(matching_attributes));
    if (message_arena != submessage_arena) {
      matching_attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, matching_attributes, submessage_arena);
    }
    
  } else {
    
  }
  matching_attributes_ = matching_attributes;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.WorkflowAttributes.matching_attributes)
}

// -------------------------------------------------------------------

// WorkflowAttributesUpdateRequest

// .flyteidl.admin.WorkflowAttributes attributes = 1 [json_name = "attributes"];
inline bool WorkflowAttributesUpdateRequest::_internal_has_attributes() const {
  return this != internal_default_instance() && attributes_ != nullptr;
}
inline bool WorkflowAttributesUpdateRequest::has_attributes() const {
  return _internal_has_attributes();
}
inline void WorkflowAttributesUpdateRequest::clear_attributes() {
  if (GetArenaForAllocation() == nullptr && attributes_ != nullptr) {
    delete attributes_;
  }
  attributes_ = nullptr;
}
inline const ::flyteidl::admin::WorkflowAttributes& WorkflowAttributesUpdateRequest::_internal_attributes() const {
  const ::flyteidl::admin::WorkflowAttributes* p = attributes_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::admin::WorkflowAttributes&>(
      ::flyteidl::admin::_WorkflowAttributes_default_instance_);
}
inline const ::flyteidl::admin::WorkflowAttributes& WorkflowAttributesUpdateRequest::attributes() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.WorkflowAttributesUpdateRequest.attributes)
  return _internal_attributes();
}
inline void WorkflowAttributesUpdateRequest::unsafe_arena_set_allocated_attributes(
    ::flyteidl::admin::WorkflowAttributes* attributes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attributes_);
  }
  attributes_ = attributes;
  if (attributes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.WorkflowAttributesUpdateRequest.attributes)
}
inline ::flyteidl::admin::WorkflowAttributes* WorkflowAttributesUpdateRequest::release_attributes() {
  
  ::flyteidl::admin::WorkflowAttributes* temp = attributes_;
  attributes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::admin::WorkflowAttributes* WorkflowAttributesUpdateRequest::unsafe_arena_release_attributes() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.WorkflowAttributesUpdateRequest.attributes)
  
  ::flyteidl::admin::WorkflowAttributes* temp = attributes_;
  attributes_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::WorkflowAttributes* WorkflowAttributesUpdateRequest::_internal_mutable_attributes() {
  
  if (attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::WorkflowAttributes>(GetArenaForAllocation());
    attributes_ = p;
  }
  return attributes_;
}
inline ::flyteidl::admin::WorkflowAttributes* WorkflowAttributesUpdateRequest::mutable_attributes() {
  ::flyteidl::admin::WorkflowAttributes* _msg = _internal_mutable_attributes();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.WorkflowAttributesUpdateRequest.attributes)
  return _msg;
}
inline void WorkflowAttributesUpdateRequest::set_allocated_attributes(::flyteidl::admin::WorkflowAttributes* attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete attributes_;
  }
  if (attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::admin::WorkflowAttributes>::GetOwningArena(attributes);
    if (message_arena != submessage_arena) {
      attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attributes, submessage_arena);
    }
    
  } else {
    
  }
  attributes_ = attributes;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.WorkflowAttributesUpdateRequest.attributes)
}

// -------------------------------------------------------------------

// WorkflowAttributesUpdateResponse

// -------------------------------------------------------------------

// WorkflowAttributesGetRequest

// string project = 1 [json_name = "project"];
inline void WorkflowAttributesGetRequest::clear_project() {
  project_.ClearToEmpty();
}
inline const std::string& WorkflowAttributesGetRequest::project() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.WorkflowAttributesGetRequest.project)
  return _internal_project();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WorkflowAttributesGetRequest::set_project(ArgT0&& arg0, ArgT... args) {
 
 project_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.WorkflowAttributesGetRequest.project)
}
inline std::string* WorkflowAttributesGetRequest::mutable_project() {
  std::string* _s = _internal_mutable_project();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.WorkflowAttributesGetRequest.project)
  return _s;
}
inline const std::string& WorkflowAttributesGetRequest::_internal_project() const {
  return project_.Get();
}
inline void WorkflowAttributesGetRequest::_internal_set_project(const std::string& value) {
  
  project_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WorkflowAttributesGetRequest::_internal_mutable_project() {
  
  return project_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WorkflowAttributesGetRequest::release_project() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.WorkflowAttributesGetRequest.project)
  return project_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WorkflowAttributesGetRequest::set_allocated_project(std::string* project) {
  if (project != nullptr) {
    
  } else {
    
  }
  project_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), project,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (project_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    project_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.WorkflowAttributesGetRequest.project)
}

// string domain = 2 [json_name = "domain"];
inline void WorkflowAttributesGetRequest::clear_domain() {
  domain_.ClearToEmpty();
}
inline const std::string& WorkflowAttributesGetRequest::domain() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.WorkflowAttributesGetRequest.domain)
  return _internal_domain();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WorkflowAttributesGetRequest::set_domain(ArgT0&& arg0, ArgT... args) {
 
 domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.WorkflowAttributesGetRequest.domain)
}
inline std::string* WorkflowAttributesGetRequest::mutable_domain() {
  std::string* _s = _internal_mutable_domain();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.WorkflowAttributesGetRequest.domain)
  return _s;
}
inline const std::string& WorkflowAttributesGetRequest::_internal_domain() const {
  return domain_.Get();
}
inline void WorkflowAttributesGetRequest::_internal_set_domain(const std::string& value) {
  
  domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WorkflowAttributesGetRequest::_internal_mutable_domain() {
  
  return domain_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WorkflowAttributesGetRequest::release_domain() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.WorkflowAttributesGetRequest.domain)
  return domain_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WorkflowAttributesGetRequest::set_allocated_domain(std::string* domain) {
  if (domain != nullptr) {
    
  } else {
    
  }
  domain_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), domain,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (domain_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.WorkflowAttributesGetRequest.domain)
}

// string workflow = 3 [json_name = "workflow"];
inline void WorkflowAttributesGetRequest::clear_workflow() {
  workflow_.ClearToEmpty();
}
inline const std::string& WorkflowAttributesGetRequest::workflow() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.WorkflowAttributesGetRequest.workflow)
  return _internal_workflow();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WorkflowAttributesGetRequest::set_workflow(ArgT0&& arg0, ArgT... args) {
 
 workflow_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.WorkflowAttributesGetRequest.workflow)
}
inline std::string* WorkflowAttributesGetRequest::mutable_workflow() {
  std::string* _s = _internal_mutable_workflow();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.WorkflowAttributesGetRequest.workflow)
  return _s;
}
inline const std::string& WorkflowAttributesGetRequest::_internal_workflow() const {
  return workflow_.Get();
}
inline void WorkflowAttributesGetRequest::_internal_set_workflow(const std::string& value) {
  
  workflow_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WorkflowAttributesGetRequest::_internal_mutable_workflow() {
  
  return workflow_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WorkflowAttributesGetRequest::release_workflow() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.WorkflowAttributesGetRequest.workflow)
  return workflow_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WorkflowAttributesGetRequest::set_allocated_workflow(std::string* workflow) {
  if (workflow != nullptr) {
    
  } else {
    
  }
  workflow_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), workflow,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (workflow_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    workflow_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.WorkflowAttributesGetRequest.workflow)
}

// .flyteidl.admin.MatchableResource resource_type = 4 [json_name = "resourceType"];
inline void WorkflowAttributesGetRequest::clear_resource_type() {
  resource_type_ = 0;
}
inline ::flyteidl::admin::MatchableResource WorkflowAttributesGetRequest::_internal_resource_type() const {
  return static_cast< ::flyteidl::admin::MatchableResource >(resource_type_);
}
inline ::flyteidl::admin::MatchableResource WorkflowAttributesGetRequest::resource_type() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.WorkflowAttributesGetRequest.resource_type)
  return _internal_resource_type();
}
inline void WorkflowAttributesGetRequest::_internal_set_resource_type(::flyteidl::admin::MatchableResource value) {
  
  resource_type_ = value;
}
inline void WorkflowAttributesGetRequest::set_resource_type(::flyteidl::admin::MatchableResource value) {
  _internal_set_resource_type(value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.WorkflowAttributesGetRequest.resource_type)
}

// -------------------------------------------------------------------

// WorkflowAttributesGetResponse

// .flyteidl.admin.WorkflowAttributes attributes = 1 [json_name = "attributes"];
inline bool WorkflowAttributesGetResponse::_internal_has_attributes() const {
  return this != internal_default_instance() && attributes_ != nullptr;
}
inline bool WorkflowAttributesGetResponse::has_attributes() const {
  return _internal_has_attributes();
}
inline void WorkflowAttributesGetResponse::clear_attributes() {
  if (GetArenaForAllocation() == nullptr && attributes_ != nullptr) {
    delete attributes_;
  }
  attributes_ = nullptr;
}
inline const ::flyteidl::admin::WorkflowAttributes& WorkflowAttributesGetResponse::_internal_attributes() const {
  const ::flyteidl::admin::WorkflowAttributes* p = attributes_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::admin::WorkflowAttributes&>(
      ::flyteidl::admin::_WorkflowAttributes_default_instance_);
}
inline const ::flyteidl::admin::WorkflowAttributes& WorkflowAttributesGetResponse::attributes() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.WorkflowAttributesGetResponse.attributes)
  return _internal_attributes();
}
inline void WorkflowAttributesGetResponse::unsafe_arena_set_allocated_attributes(
    ::flyteidl::admin::WorkflowAttributes* attributes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attributes_);
  }
  attributes_ = attributes;
  if (attributes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.WorkflowAttributesGetResponse.attributes)
}
inline ::flyteidl::admin::WorkflowAttributes* WorkflowAttributesGetResponse::release_attributes() {
  
  ::flyteidl::admin::WorkflowAttributes* temp = attributes_;
  attributes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::admin::WorkflowAttributes* WorkflowAttributesGetResponse::unsafe_arena_release_attributes() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.WorkflowAttributesGetResponse.attributes)
  
  ::flyteidl::admin::WorkflowAttributes* temp = attributes_;
  attributes_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::WorkflowAttributes* WorkflowAttributesGetResponse::_internal_mutable_attributes() {
  
  if (attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::WorkflowAttributes>(GetArenaForAllocation());
    attributes_ = p;
  }
  return attributes_;
}
inline ::flyteidl::admin::WorkflowAttributes* WorkflowAttributesGetResponse::mutable_attributes() {
  ::flyteidl::admin::WorkflowAttributes* _msg = _internal_mutable_attributes();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.WorkflowAttributesGetResponse.attributes)
  return _msg;
}
inline void WorkflowAttributesGetResponse::set_allocated_attributes(::flyteidl::admin::WorkflowAttributes* attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete attributes_;
  }
  if (attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::admin::WorkflowAttributes>::GetOwningArena(attributes);
    if (message_arena != submessage_arena) {
      attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attributes, submessage_arena);
    }
    
  } else {
    
  }
  attributes_ = attributes;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.WorkflowAttributesGetResponse.attributes)
}

// -------------------------------------------------------------------

// WorkflowAttributesDeleteRequest

// string project = 1 [json_name = "project"];
inline void WorkflowAttributesDeleteRequest::clear_project() {
  project_.ClearToEmpty();
}
inline const std::string& WorkflowAttributesDeleteRequest::project() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.WorkflowAttributesDeleteRequest.project)
  return _internal_project();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WorkflowAttributesDeleteRequest::set_project(ArgT0&& arg0, ArgT... args) {
 
 project_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.WorkflowAttributesDeleteRequest.project)
}
inline std::string* WorkflowAttributesDeleteRequest::mutable_project() {
  std::string* _s = _internal_mutable_project();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.WorkflowAttributesDeleteRequest.project)
  return _s;
}
inline const std::string& WorkflowAttributesDeleteRequest::_internal_project() const {
  return project_.Get();
}
inline void WorkflowAttributesDeleteRequest::_internal_set_project(const std::string& value) {
  
  project_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WorkflowAttributesDeleteRequest::_internal_mutable_project() {
  
  return project_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WorkflowAttributesDeleteRequest::release_project() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.WorkflowAttributesDeleteRequest.project)
  return project_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WorkflowAttributesDeleteRequest::set_allocated_project(std::string* project) {
  if (project != nullptr) {
    
  } else {
    
  }
  project_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), project,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (project_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    project_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.WorkflowAttributesDeleteRequest.project)
}

// string domain = 2 [json_name = "domain"];
inline void WorkflowAttributesDeleteRequest::clear_domain() {
  domain_.ClearToEmpty();
}
inline const std::string& WorkflowAttributesDeleteRequest::domain() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.WorkflowAttributesDeleteRequest.domain)
  return _internal_domain();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WorkflowAttributesDeleteRequest::set_domain(ArgT0&& arg0, ArgT... args) {
 
 domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.WorkflowAttributesDeleteRequest.domain)
}
inline std::string* WorkflowAttributesDeleteRequest::mutable_domain() {
  std::string* _s = _internal_mutable_domain();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.WorkflowAttributesDeleteRequest.domain)
  return _s;
}
inline const std::string& WorkflowAttributesDeleteRequest::_internal_domain() const {
  return domain_.Get();
}
inline void WorkflowAttributesDeleteRequest::_internal_set_domain(const std::string& value) {
  
  domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WorkflowAttributesDeleteRequest::_internal_mutable_domain() {
  
  return domain_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WorkflowAttributesDeleteRequest::release_domain() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.WorkflowAttributesDeleteRequest.domain)
  return domain_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WorkflowAttributesDeleteRequest::set_allocated_domain(std::string* domain) {
  if (domain != nullptr) {
    
  } else {
    
  }
  domain_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), domain,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (domain_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.WorkflowAttributesDeleteRequest.domain)
}

// string workflow = 3 [json_name = "workflow"];
inline void WorkflowAttributesDeleteRequest::clear_workflow() {
  workflow_.ClearToEmpty();
}
inline const std::string& WorkflowAttributesDeleteRequest::workflow() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.WorkflowAttributesDeleteRequest.workflow)
  return _internal_workflow();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WorkflowAttributesDeleteRequest::set_workflow(ArgT0&& arg0, ArgT... args) {
 
 workflow_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.WorkflowAttributesDeleteRequest.workflow)
}
inline std::string* WorkflowAttributesDeleteRequest::mutable_workflow() {
  std::string* _s = _internal_mutable_workflow();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.WorkflowAttributesDeleteRequest.workflow)
  return _s;
}
inline const std::string& WorkflowAttributesDeleteRequest::_internal_workflow() const {
  return workflow_.Get();
}
inline void WorkflowAttributesDeleteRequest::_internal_set_workflow(const std::string& value) {
  
  workflow_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WorkflowAttributesDeleteRequest::_internal_mutable_workflow() {
  
  return workflow_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WorkflowAttributesDeleteRequest::release_workflow() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.WorkflowAttributesDeleteRequest.workflow)
  return workflow_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WorkflowAttributesDeleteRequest::set_allocated_workflow(std::string* workflow) {
  if (workflow != nullptr) {
    
  } else {
    
  }
  workflow_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), workflow,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (workflow_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    workflow_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.WorkflowAttributesDeleteRequest.workflow)
}

// .flyteidl.admin.MatchableResource resource_type = 4 [json_name = "resourceType"];
inline void WorkflowAttributesDeleteRequest::clear_resource_type() {
  resource_type_ = 0;
}
inline ::flyteidl::admin::MatchableResource WorkflowAttributesDeleteRequest::_internal_resource_type() const {
  return static_cast< ::flyteidl::admin::MatchableResource >(resource_type_);
}
inline ::flyteidl::admin::MatchableResource WorkflowAttributesDeleteRequest::resource_type() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.WorkflowAttributesDeleteRequest.resource_type)
  return _internal_resource_type();
}
inline void WorkflowAttributesDeleteRequest::_internal_set_resource_type(::flyteidl::admin::MatchableResource value) {
  
  resource_type_ = value;
}
inline void WorkflowAttributesDeleteRequest::set_resource_type(::flyteidl::admin::MatchableResource value) {
  _internal_set_resource_type(value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.WorkflowAttributesDeleteRequest.resource_type)
}

// -------------------------------------------------------------------

// WorkflowAttributesDeleteResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace admin
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fadmin_2fworkflow_5fattributes_2eproto
