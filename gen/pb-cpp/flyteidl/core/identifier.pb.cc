// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/identifier.proto

#include "flyteidl/core/identifier.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace flyteidl {
namespace core {
constexpr Identifier::Identifier(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : project_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , domain_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , resource_type_(0)
{}
struct IdentifierDefaultTypeInternal {
  constexpr IdentifierDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IdentifierDefaultTypeInternal() {}
  union {
    Identifier _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IdentifierDefaultTypeInternal _Identifier_default_instance_;
constexpr WorkflowExecutionIdentifier::WorkflowExecutionIdentifier(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : project_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , domain_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct WorkflowExecutionIdentifierDefaultTypeInternal {
  constexpr WorkflowExecutionIdentifierDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WorkflowExecutionIdentifierDefaultTypeInternal() {}
  union {
    WorkflowExecutionIdentifier _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WorkflowExecutionIdentifierDefaultTypeInternal _WorkflowExecutionIdentifier_default_instance_;
constexpr NodeExecutionIdentifier::NodeExecutionIdentifier(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : node_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , execution_id_(nullptr){}
struct NodeExecutionIdentifierDefaultTypeInternal {
  constexpr NodeExecutionIdentifierDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeExecutionIdentifierDefaultTypeInternal() {}
  union {
    NodeExecutionIdentifier _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeExecutionIdentifierDefaultTypeInternal _NodeExecutionIdentifier_default_instance_;
constexpr TaskExecutionIdentifier::TaskExecutionIdentifier(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : task_id_(nullptr)
  , node_execution_id_(nullptr)
  , retry_attempt_(0u){}
struct TaskExecutionIdentifierDefaultTypeInternal {
  constexpr TaskExecutionIdentifierDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskExecutionIdentifierDefaultTypeInternal() {}
  union {
    TaskExecutionIdentifier _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskExecutionIdentifierDefaultTypeInternal _TaskExecutionIdentifier_default_instance_;
}  // namespace core
}  // namespace flyteidl
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_flyteidl_2fcore_2fidentifier_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_flyteidl_2fcore_2fidentifier_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fcore_2fidentifier_2eproto = nullptr;

const uint32_t TableStruct_flyteidl_2fcore_2fidentifier_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Identifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Identifier, resource_type_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Identifier, project_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Identifier, domain_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Identifier, name_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Identifier, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::WorkflowExecutionIdentifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::WorkflowExecutionIdentifier, project_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::WorkflowExecutionIdentifier, domain_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::WorkflowExecutionIdentifier, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::NodeExecutionIdentifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::NodeExecutionIdentifier, node_id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::NodeExecutionIdentifier, execution_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskExecutionIdentifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskExecutionIdentifier, task_id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskExecutionIdentifier, node_execution_id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::TaskExecutionIdentifier, retry_attempt_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::flyteidl::core::Identifier)},
  { 11, -1, -1, sizeof(::flyteidl::core::WorkflowExecutionIdentifier)},
  { 20, -1, -1, sizeof(::flyteidl::core::NodeExecutionIdentifier)},
  { 28, -1, -1, sizeof(::flyteidl::core::TaskExecutionIdentifier)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_Identifier_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_WorkflowExecutionIdentifier_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_NodeExecutionIdentifier_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_TaskExecutionIdentifier_default_instance_),
};

const char descriptor_table_protodef_flyteidl_2fcore_2fidentifier_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036flyteidl/core/identifier.proto\022\rflytei"
  "dl.core\"\256\001\n\nIdentifier\022@\n\rresource_type\030"
  "\001 \001(\0162\033.flyteidl.core.ResourceTypeR\014reso"
  "urceType\022\030\n\007project\030\002 \001(\tR\007project\022\026\n\006do"
  "main\030\003 \001(\tR\006domain\022\022\n\004name\030\004 \001(\tR\004name\022\030"
  "\n\007version\030\005 \001(\tR\007version\"c\n\033WorkflowExec"
  "utionIdentifier\022\030\n\007project\030\001 \001(\tR\007projec"
  "t\022\026\n\006domain\030\002 \001(\tR\006domain\022\022\n\004name\030\004 \001(\tR"
  "\004name\"\201\001\n\027NodeExecutionIdentifier\022\027\n\007nod"
  "e_id\030\001 \001(\tR\006nodeId\022M\n\014execution_id\030\002 \001(\013"
  "2*.flyteidl.core.WorkflowExecutionIdenti"
  "fierR\013executionId\"\306\001\n\027TaskExecutionIdent"
  "ifier\0222\n\007task_id\030\001 \001(\0132\031.flyteidl.core.I"
  "dentifierR\006taskId\022R\n\021node_execution_id\030\002"
  " \001(\0132&.flyteidl.core.NodeExecutionIdenti"
  "fierR\017nodeExecutionId\022#\n\rretry_attempt\030\003"
  " \001(\rR\014retryAttempt*U\n\014ResourceType\022\017\n\013UN"
  "SPECIFIED\020\000\022\010\n\004TASK\020\001\022\014\n\010WORKFLOW\020\002\022\017\n\013L"
  "AUNCH_PLAN\020\003\022\013\n\007DATASET\020\004B\262\001\n\021com.flytei"
  "dl.coreB\017IdentifierProtoH\002Z4github.com/f"
  "lyteorg/flyteidl/gen/pb-go/flyteidl/core"
  "\370\001\000\242\002\003FCX\252\002\rFlyteidl.Core\312\002\rFlyteidl\\Cor"
  "e\342\002\031Flyteidl\\Core\\GPBMetadata\352\002\016Flyteidl"
  "::Coreb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_flyteidl_2fcore_2fidentifier_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fcore_2fidentifier_2eproto = {
  false, false, 934, descriptor_table_protodef_flyteidl_2fcore_2fidentifier_2eproto, "flyteidl/core/identifier.proto", 
  &descriptor_table_flyteidl_2fcore_2fidentifier_2eproto_once, nullptr, 0, 4,
  schemas, file_default_instances, TableStruct_flyteidl_2fcore_2fidentifier_2eproto::offsets,
  file_level_metadata_flyteidl_2fcore_2fidentifier_2eproto, file_level_enum_descriptors_flyteidl_2fcore_2fidentifier_2eproto, file_level_service_descriptors_flyteidl_2fcore_2fidentifier_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_flyteidl_2fcore_2fidentifier_2eproto_getter() {
  return &descriptor_table_flyteidl_2fcore_2fidentifier_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_flyteidl_2fcore_2fidentifier_2eproto(&descriptor_table_flyteidl_2fcore_2fidentifier_2eproto);
namespace flyteidl {
namespace core {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResourceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_flyteidl_2fcore_2fidentifier_2eproto);
  return file_level_enum_descriptors_flyteidl_2fcore_2fidentifier_2eproto[0];
}
bool ResourceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Identifier::_Internal {
 public:
};

Identifier::Identifier(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.Identifier)
}
Identifier::Identifier(const Identifier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  project_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    project_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_project().empty()) {
    project_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_project(), 
      GetArenaForAllocation());
  }
  domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_domain().empty()) {
    domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_domain(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArenaForAllocation());
  }
  resource_type_ = from.resource_type_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.Identifier)
}

inline void Identifier::SharedCtor() {
project_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  project_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
resource_type_ = 0;
}

Identifier::~Identifier() {
  // @@protoc_insertion_point(destructor:flyteidl.core.Identifier)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Identifier::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  project_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  domain_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Identifier::ArenaDtor(void* object) {
  Identifier* _this = reinterpret_cast< Identifier* >(object);
  (void)_this;
}
void Identifier::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Identifier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Identifier::InternalSwap(Identifier* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata Identifier::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2fidentifier_2eproto_getter, &descriptor_table_flyteidl_2fcore_2fidentifier_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2fidentifier_2eproto[0]);
}

// ===================================================================

class WorkflowExecutionIdentifier::_Internal {
 public:
};

WorkflowExecutionIdentifier::WorkflowExecutionIdentifier(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.WorkflowExecutionIdentifier)
}
WorkflowExecutionIdentifier::WorkflowExecutionIdentifier(const WorkflowExecutionIdentifier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  project_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    project_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_project().empty()) {
    project_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_project(), 
      GetArenaForAllocation());
  }
  domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_domain().empty()) {
    domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_domain(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.WorkflowExecutionIdentifier)
}

inline void WorkflowExecutionIdentifier::SharedCtor() {
project_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  project_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WorkflowExecutionIdentifier::~WorkflowExecutionIdentifier() {
  // @@protoc_insertion_point(destructor:flyteidl.core.WorkflowExecutionIdentifier)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WorkflowExecutionIdentifier::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  project_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  domain_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WorkflowExecutionIdentifier::ArenaDtor(void* object) {
  WorkflowExecutionIdentifier* _this = reinterpret_cast< WorkflowExecutionIdentifier* >(object);
  (void)_this;
}
void WorkflowExecutionIdentifier::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkflowExecutionIdentifier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WorkflowExecutionIdentifier::InternalSwap(WorkflowExecutionIdentifier* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata WorkflowExecutionIdentifier::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2fidentifier_2eproto_getter, &descriptor_table_flyteidl_2fcore_2fidentifier_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2fidentifier_2eproto[1]);
}

// ===================================================================

class NodeExecutionIdentifier::_Internal {
 public:
  static const ::flyteidl::core::WorkflowExecutionIdentifier& execution_id(const NodeExecutionIdentifier* msg);
};

const ::flyteidl::core::WorkflowExecutionIdentifier&
NodeExecutionIdentifier::_Internal::execution_id(const NodeExecutionIdentifier* msg) {
  return *msg->execution_id_;
}
NodeExecutionIdentifier::NodeExecutionIdentifier(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.NodeExecutionIdentifier)
}
NodeExecutionIdentifier::NodeExecutionIdentifier(const NodeExecutionIdentifier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node_id().empty()) {
    node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_execution_id()) {
    execution_id_ = new ::flyteidl::core::WorkflowExecutionIdentifier(*from.execution_id_);
  } else {
    execution_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.NodeExecutionIdentifier)
}

inline void NodeExecutionIdentifier::SharedCtor() {
node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
execution_id_ = nullptr;
}

NodeExecutionIdentifier::~NodeExecutionIdentifier() {
  // @@protoc_insertion_point(destructor:flyteidl.core.NodeExecutionIdentifier)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NodeExecutionIdentifier::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete execution_id_;
}

void NodeExecutionIdentifier::ArenaDtor(void* object) {
  NodeExecutionIdentifier* _this = reinterpret_cast< NodeExecutionIdentifier* >(object);
  (void)_this;
}
void NodeExecutionIdentifier::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeExecutionIdentifier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodeExecutionIdentifier::InternalSwap(NodeExecutionIdentifier* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata NodeExecutionIdentifier::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2fidentifier_2eproto_getter, &descriptor_table_flyteidl_2fcore_2fidentifier_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2fidentifier_2eproto[2]);
}

// ===================================================================

class TaskExecutionIdentifier::_Internal {
 public:
  static const ::flyteidl::core::Identifier& task_id(const TaskExecutionIdentifier* msg);
  static const ::flyteidl::core::NodeExecutionIdentifier& node_execution_id(const TaskExecutionIdentifier* msg);
};

const ::flyteidl::core::Identifier&
TaskExecutionIdentifier::_Internal::task_id(const TaskExecutionIdentifier* msg) {
  return *msg->task_id_;
}
const ::flyteidl::core::NodeExecutionIdentifier&
TaskExecutionIdentifier::_Internal::node_execution_id(const TaskExecutionIdentifier* msg) {
  return *msg->node_execution_id_;
}
TaskExecutionIdentifier::TaskExecutionIdentifier(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.TaskExecutionIdentifier)
}
TaskExecutionIdentifier::TaskExecutionIdentifier(const TaskExecutionIdentifier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_task_id()) {
    task_id_ = new ::flyteidl::core::Identifier(*from.task_id_);
  } else {
    task_id_ = nullptr;
  }
  if (from._internal_has_node_execution_id()) {
    node_execution_id_ = new ::flyteidl::core::NodeExecutionIdentifier(*from.node_execution_id_);
  } else {
    node_execution_id_ = nullptr;
  }
  retry_attempt_ = from.retry_attempt_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.TaskExecutionIdentifier)
}

inline void TaskExecutionIdentifier::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&task_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&retry_attempt_) -
    reinterpret_cast<char*>(&task_id_)) + sizeof(retry_attempt_));
}

TaskExecutionIdentifier::~TaskExecutionIdentifier() {
  // @@protoc_insertion_point(destructor:flyteidl.core.TaskExecutionIdentifier)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskExecutionIdentifier::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete task_id_;
  if (this != internal_default_instance()) delete node_execution_id_;
}

void TaskExecutionIdentifier::ArenaDtor(void* object) {
  TaskExecutionIdentifier* _this = reinterpret_cast< TaskExecutionIdentifier* >(object);
  (void)_this;
}
void TaskExecutionIdentifier::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskExecutionIdentifier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskExecutionIdentifier::InternalSwap(TaskExecutionIdentifier* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata TaskExecutionIdentifier::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2fidentifier_2eproto_getter, &descriptor_table_flyteidl_2fcore_2fidentifier_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2fidentifier_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace core
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::flyteidl::core::Identifier* Arena::CreateMaybeMessage< ::flyteidl::core::Identifier >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::Identifier >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::WorkflowExecutionIdentifier* Arena::CreateMaybeMessage< ::flyteidl::core::WorkflowExecutionIdentifier >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::WorkflowExecutionIdentifier >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::NodeExecutionIdentifier* Arena::CreateMaybeMessage< ::flyteidl::core::NodeExecutionIdentifier >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::NodeExecutionIdentifier >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::TaskExecutionIdentifier* Arena::CreateMaybeMessage< ::flyteidl::core::TaskExecutionIdentifier >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::TaskExecutionIdentifier >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
