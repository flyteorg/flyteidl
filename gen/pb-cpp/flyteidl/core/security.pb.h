// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/security.proto

#ifndef PROTOBUF_INCLUDED_flyteidl_2fcore_2fsecurity_2eproto
#define PROTOBUF_INCLUDED_flyteidl_2fcore_2fsecurity_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fsecurity_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fcore_2fsecurity_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_flyteidl_2fcore_2fsecurity_2eproto();
namespace flyteidl {
namespace core {
class Identity;
class IdentityDefaultTypeInternal;
extern IdentityDefaultTypeInternal _Identity_default_instance_;
class OAuth2Client;
class OAuth2ClientDefaultTypeInternal;
extern OAuth2ClientDefaultTypeInternal _OAuth2Client_default_instance_;
class OAuth2TokenRequest;
class OAuth2TokenRequestDefaultTypeInternal;
extern OAuth2TokenRequestDefaultTypeInternal _OAuth2TokenRequest_default_instance_;
class Secret;
class SecretDefaultTypeInternal;
extern SecretDefaultTypeInternal _Secret_default_instance_;
class SecurityContext;
class SecurityContextDefaultTypeInternal;
extern SecurityContextDefaultTypeInternal _SecurityContext_default_instance_;
}  // namespace core
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> ::flyteidl::core::Identity* Arena::CreateMaybeMessage<::flyteidl::core::Identity>(Arena*);
template<> ::flyteidl::core::OAuth2Client* Arena::CreateMaybeMessage<::flyteidl::core::OAuth2Client>(Arena*);
template<> ::flyteidl::core::OAuth2TokenRequest* Arena::CreateMaybeMessage<::flyteidl::core::OAuth2TokenRequest>(Arena*);
template<> ::flyteidl::core::Secret* Arena::CreateMaybeMessage<::flyteidl::core::Secret>(Arena*);
template<> ::flyteidl::core::SecurityContext* Arena::CreateMaybeMessage<::flyteidl::core::SecurityContext>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace flyteidl {
namespace core {

enum Secret_MountType {
  Secret_MountType_ANY = 0,
  Secret_MountType_ENV_VAR = 1,
  Secret_MountType_FILE = 2,
  Secret_MountType_Secret_MountType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  Secret_MountType_Secret_MountType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool Secret_MountType_IsValid(int value);
const Secret_MountType Secret_MountType_MountType_MIN = Secret_MountType_ANY;
const Secret_MountType Secret_MountType_MountType_MAX = Secret_MountType_FILE;
const int Secret_MountType_MountType_ARRAYSIZE = Secret_MountType_MountType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Secret_MountType_descriptor();
inline const ::std::string& Secret_MountType_Name(Secret_MountType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Secret_MountType_descriptor(), value);
}
inline bool Secret_MountType_Parse(
    const ::std::string& name, Secret_MountType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Secret_MountType>(
    Secret_MountType_descriptor(), name, value);
}
enum OAuth2TokenRequest_Type {
  OAuth2TokenRequest_Type_CLIENT_CREDENTIALS = 0,
  OAuth2TokenRequest_Type_OAuth2TokenRequest_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  OAuth2TokenRequest_Type_OAuth2TokenRequest_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool OAuth2TokenRequest_Type_IsValid(int value);
const OAuth2TokenRequest_Type OAuth2TokenRequest_Type_Type_MIN = OAuth2TokenRequest_Type_CLIENT_CREDENTIALS;
const OAuth2TokenRequest_Type OAuth2TokenRequest_Type_Type_MAX = OAuth2TokenRequest_Type_CLIENT_CREDENTIALS;
const int OAuth2TokenRequest_Type_Type_ARRAYSIZE = OAuth2TokenRequest_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* OAuth2TokenRequest_Type_descriptor();
inline const ::std::string& OAuth2TokenRequest_Type_Name(OAuth2TokenRequest_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    OAuth2TokenRequest_Type_descriptor(), value);
}
inline bool OAuth2TokenRequest_Type_Parse(
    const ::std::string& name, OAuth2TokenRequest_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OAuth2TokenRequest_Type>(
    OAuth2TokenRequest_Type_descriptor(), name, value);
}
// ===================================================================

class Secret final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.Secret) */ {
 public:
  Secret();
  virtual ~Secret();

  Secret(const Secret& from);

  inline Secret& operator=(const Secret& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Secret(Secret&& from) noexcept
    : Secret() {
    *this = ::std::move(from);
  }

  inline Secret& operator=(Secret&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Secret& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Secret* internal_default_instance() {
    return reinterpret_cast<const Secret*>(
               &_Secret_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Secret* other);
  friend void swap(Secret& a, Secret& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Secret* New() const final {
    return CreateMaybeMessage<Secret>(nullptr);
  }

  Secret* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Secret>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Secret& from);
  void MergeFrom(const Secret& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Secret* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Secret_MountType MountType;
  static const MountType ANY =
    Secret_MountType_ANY;
  static const MountType ENV_VAR =
    Secret_MountType_ENV_VAR;
  static const MountType FILE =
    Secret_MountType_FILE;
  static inline bool MountType_IsValid(int value) {
    return Secret_MountType_IsValid(value);
  }
  static const MountType MountType_MIN =
    Secret_MountType_MountType_MIN;
  static const MountType MountType_MAX =
    Secret_MountType_MountType_MAX;
  static const int MountType_ARRAYSIZE =
    Secret_MountType_MountType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MountType_descriptor() {
    return Secret_MountType_descriptor();
  }
  static inline const ::std::string& MountType_Name(MountType value) {
    return Secret_MountType_Name(value);
  }
  static inline bool MountType_Parse(const ::std::string& name,
      MountType* value) {
    return Secret_MountType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string group = 1;
  void clear_group();
  static const int kGroupFieldNumber = 1;
  const ::std::string& group() const;
  void set_group(const ::std::string& value);
  #if LANG_CXX11
  void set_group(::std::string&& value);
  #endif
  void set_group(const char* value);
  void set_group(const char* value, size_t size);
  ::std::string* mutable_group();
  ::std::string* release_group();
  void set_allocated_group(::std::string* group);

  // string group_version = 2;
  void clear_group_version();
  static const int kGroupVersionFieldNumber = 2;
  const ::std::string& group_version() const;
  void set_group_version(const ::std::string& value);
  #if LANG_CXX11
  void set_group_version(::std::string&& value);
  #endif
  void set_group_version(const char* value);
  void set_group_version(const char* value, size_t size);
  ::std::string* mutable_group_version();
  ::std::string* release_group_version();
  void set_allocated_group_version(::std::string* group_version);

  // string key = 3;
  void clear_key();
  static const int kKeyFieldNumber = 3;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string env_name = 5;
  void clear_env_name();
  static const int kEnvNameFieldNumber = 5;
  const ::std::string& env_name() const;
  void set_env_name(const ::std::string& value);
  #if LANG_CXX11
  void set_env_name(::std::string&& value);
  #endif
  void set_env_name(const char* value);
  void set_env_name(const char* value, size_t size);
  ::std::string* mutable_env_name();
  ::std::string* release_env_name();
  void set_allocated_env_name(::std::string* env_name);

  // .flyteidl.core.Secret.MountType mount_requirement = 4;
  void clear_mount_requirement();
  static const int kMountRequirementFieldNumber = 4;
  ::flyteidl::core::Secret_MountType mount_requirement() const;
  void set_mount_requirement(::flyteidl::core::Secret_MountType value);

  // @@protoc_insertion_point(class_scope:flyteidl.core.Secret)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr group_;
  ::google::protobuf::internal::ArenaStringPtr group_version_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr env_name_;
  int mount_requirement_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2fsecurity_2eproto;
};
// -------------------------------------------------------------------

class OAuth2Client final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.OAuth2Client) */ {
 public:
  OAuth2Client();
  virtual ~OAuth2Client();

  OAuth2Client(const OAuth2Client& from);

  inline OAuth2Client& operator=(const OAuth2Client& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OAuth2Client(OAuth2Client&& from) noexcept
    : OAuth2Client() {
    *this = ::std::move(from);
  }

  inline OAuth2Client& operator=(OAuth2Client&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const OAuth2Client& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OAuth2Client* internal_default_instance() {
    return reinterpret_cast<const OAuth2Client*>(
               &_OAuth2Client_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(OAuth2Client* other);
  friend void swap(OAuth2Client& a, OAuth2Client& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OAuth2Client* New() const final {
    return CreateMaybeMessage<OAuth2Client>(nullptr);
  }

  OAuth2Client* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OAuth2Client>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OAuth2Client& from);
  void MergeFrom(const OAuth2Client& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OAuth2Client* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string client_id = 1;
  void clear_client_id();
  static const int kClientIdFieldNumber = 1;
  const ::std::string& client_id() const;
  void set_client_id(const ::std::string& value);
  #if LANG_CXX11
  void set_client_id(::std::string&& value);
  #endif
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  ::std::string* mutable_client_id();
  ::std::string* release_client_id();
  void set_allocated_client_id(::std::string* client_id);

  // .flyteidl.core.Secret client_secret = 2;
  bool has_client_secret() const;
  void clear_client_secret();
  static const int kClientSecretFieldNumber = 2;
  const ::flyteidl::core::Secret& client_secret() const;
  ::flyteidl::core::Secret* release_client_secret();
  ::flyteidl::core::Secret* mutable_client_secret();
  void set_allocated_client_secret(::flyteidl::core::Secret* client_secret);

  // @@protoc_insertion_point(class_scope:flyteidl.core.OAuth2Client)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr client_id_;
  ::flyteidl::core::Secret* client_secret_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2fsecurity_2eproto;
};
// -------------------------------------------------------------------

class Identity final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.Identity) */ {
 public:
  Identity();
  virtual ~Identity();

  Identity(const Identity& from);

  inline Identity& operator=(const Identity& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Identity(Identity&& from) noexcept
    : Identity() {
    *this = ::std::move(from);
  }

  inline Identity& operator=(Identity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Identity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Identity* internal_default_instance() {
    return reinterpret_cast<const Identity*>(
               &_Identity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Identity* other);
  friend void swap(Identity& a, Identity& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Identity* New() const final {
    return CreateMaybeMessage<Identity>(nullptr);
  }

  Identity* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Identity>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Identity& from);
  void MergeFrom(const Identity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Identity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string iam_role = 1;
  void clear_iam_role();
  static const int kIamRoleFieldNumber = 1;
  const ::std::string& iam_role() const;
  void set_iam_role(const ::std::string& value);
  #if LANG_CXX11
  void set_iam_role(::std::string&& value);
  #endif
  void set_iam_role(const char* value);
  void set_iam_role(const char* value, size_t size);
  ::std::string* mutable_iam_role();
  ::std::string* release_iam_role();
  void set_allocated_iam_role(::std::string* iam_role);

  // string k8s_service_account = 2;
  void clear_k8s_service_account();
  static const int kK8SServiceAccountFieldNumber = 2;
  const ::std::string& k8s_service_account() const;
  void set_k8s_service_account(const ::std::string& value);
  #if LANG_CXX11
  void set_k8s_service_account(::std::string&& value);
  #endif
  void set_k8s_service_account(const char* value);
  void set_k8s_service_account(const char* value, size_t size);
  ::std::string* mutable_k8s_service_account();
  ::std::string* release_k8s_service_account();
  void set_allocated_k8s_service_account(::std::string* k8s_service_account);

  // string execution_identity = 4;
  void clear_execution_identity();
  static const int kExecutionIdentityFieldNumber = 4;
  const ::std::string& execution_identity() const;
  void set_execution_identity(const ::std::string& value);
  #if LANG_CXX11
  void set_execution_identity(::std::string&& value);
  #endif
  void set_execution_identity(const char* value);
  void set_execution_identity(const char* value, size_t size);
  ::std::string* mutable_execution_identity();
  ::std::string* release_execution_identity();
  void set_allocated_execution_identity(::std::string* execution_identity);

  // .flyteidl.core.OAuth2Client oauth2_client = 3;
  bool has_oauth2_client() const;
  void clear_oauth2_client();
  static const int kOauth2ClientFieldNumber = 3;
  const ::flyteidl::core::OAuth2Client& oauth2_client() const;
  ::flyteidl::core::OAuth2Client* release_oauth2_client();
  ::flyteidl::core::OAuth2Client* mutable_oauth2_client();
  void set_allocated_oauth2_client(::flyteidl::core::OAuth2Client* oauth2_client);

  // @@protoc_insertion_point(class_scope:flyteidl.core.Identity)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr iam_role_;
  ::google::protobuf::internal::ArenaStringPtr k8s_service_account_;
  ::google::protobuf::internal::ArenaStringPtr execution_identity_;
  ::flyteidl::core::OAuth2Client* oauth2_client_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2fsecurity_2eproto;
};
// -------------------------------------------------------------------

class OAuth2TokenRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.OAuth2TokenRequest) */ {
 public:
  OAuth2TokenRequest();
  virtual ~OAuth2TokenRequest();

  OAuth2TokenRequest(const OAuth2TokenRequest& from);

  inline OAuth2TokenRequest& operator=(const OAuth2TokenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OAuth2TokenRequest(OAuth2TokenRequest&& from) noexcept
    : OAuth2TokenRequest() {
    *this = ::std::move(from);
  }

  inline OAuth2TokenRequest& operator=(OAuth2TokenRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const OAuth2TokenRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OAuth2TokenRequest* internal_default_instance() {
    return reinterpret_cast<const OAuth2TokenRequest*>(
               &_OAuth2TokenRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(OAuth2TokenRequest* other);
  friend void swap(OAuth2TokenRequest& a, OAuth2TokenRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OAuth2TokenRequest* New() const final {
    return CreateMaybeMessage<OAuth2TokenRequest>(nullptr);
  }

  OAuth2TokenRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OAuth2TokenRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OAuth2TokenRequest& from);
  void MergeFrom(const OAuth2TokenRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OAuth2TokenRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef OAuth2TokenRequest_Type Type;
  static const Type CLIENT_CREDENTIALS =
    OAuth2TokenRequest_Type_CLIENT_CREDENTIALS;
  static inline bool Type_IsValid(int value) {
    return OAuth2TokenRequest_Type_IsValid(value);
  }
  static const Type Type_MIN =
    OAuth2TokenRequest_Type_Type_MIN;
  static const Type Type_MAX =
    OAuth2TokenRequest_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    OAuth2TokenRequest_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return OAuth2TokenRequest_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return OAuth2TokenRequest_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return OAuth2TokenRequest_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string idp_discovery_endpoint = 4;
  void clear_idp_discovery_endpoint();
  static const int kIdpDiscoveryEndpointFieldNumber = 4;
  const ::std::string& idp_discovery_endpoint() const;
  void set_idp_discovery_endpoint(const ::std::string& value);
  #if LANG_CXX11
  void set_idp_discovery_endpoint(::std::string&& value);
  #endif
  void set_idp_discovery_endpoint(const char* value);
  void set_idp_discovery_endpoint(const char* value, size_t size);
  ::std::string* mutable_idp_discovery_endpoint();
  ::std::string* release_idp_discovery_endpoint();
  void set_allocated_idp_discovery_endpoint(::std::string* idp_discovery_endpoint);

  // string token_endpoint = 5;
  void clear_token_endpoint();
  static const int kTokenEndpointFieldNumber = 5;
  const ::std::string& token_endpoint() const;
  void set_token_endpoint(const ::std::string& value);
  #if LANG_CXX11
  void set_token_endpoint(::std::string&& value);
  #endif
  void set_token_endpoint(const char* value);
  void set_token_endpoint(const char* value, size_t size);
  ::std::string* mutable_token_endpoint();
  ::std::string* release_token_endpoint();
  void set_allocated_token_endpoint(::std::string* token_endpoint);

  // .flyteidl.core.OAuth2Client client = 3;
  bool has_client() const;
  void clear_client();
  static const int kClientFieldNumber = 3;
  const ::flyteidl::core::OAuth2Client& client() const;
  ::flyteidl::core::OAuth2Client* release_client();
  ::flyteidl::core::OAuth2Client* mutable_client();
  void set_allocated_client(::flyteidl::core::OAuth2Client* client);

  // .flyteidl.core.OAuth2TokenRequest.Type type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::flyteidl::core::OAuth2TokenRequest_Type type() const;
  void set_type(::flyteidl::core::OAuth2TokenRequest_Type value);

  // @@protoc_insertion_point(class_scope:flyteidl.core.OAuth2TokenRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr idp_discovery_endpoint_;
  ::google::protobuf::internal::ArenaStringPtr token_endpoint_;
  ::flyteidl::core::OAuth2Client* client_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2fsecurity_2eproto;
};
// -------------------------------------------------------------------

class SecurityContext final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.SecurityContext) */ {
 public:
  SecurityContext();
  virtual ~SecurityContext();

  SecurityContext(const SecurityContext& from);

  inline SecurityContext& operator=(const SecurityContext& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SecurityContext(SecurityContext&& from) noexcept
    : SecurityContext() {
    *this = ::std::move(from);
  }

  inline SecurityContext& operator=(SecurityContext&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SecurityContext& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecurityContext* internal_default_instance() {
    return reinterpret_cast<const SecurityContext*>(
               &_SecurityContext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(SecurityContext* other);
  friend void swap(SecurityContext& a, SecurityContext& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SecurityContext* New() const final {
    return CreateMaybeMessage<SecurityContext>(nullptr);
  }

  SecurityContext* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SecurityContext>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SecurityContext& from);
  void MergeFrom(const SecurityContext& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecurityContext* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .flyteidl.core.Secret secrets = 2;
  int secrets_size() const;
  void clear_secrets();
  static const int kSecretsFieldNumber = 2;
  ::flyteidl::core::Secret* mutable_secrets(int index);
  ::google::protobuf::RepeatedPtrField< ::flyteidl::core::Secret >*
      mutable_secrets();
  const ::flyteidl::core::Secret& secrets(int index) const;
  ::flyteidl::core::Secret* add_secrets();
  const ::google::protobuf::RepeatedPtrField< ::flyteidl::core::Secret >&
      secrets() const;

  // repeated .flyteidl.core.OAuth2TokenRequest tokens = 3;
  int tokens_size() const;
  void clear_tokens();
  static const int kTokensFieldNumber = 3;
  ::flyteidl::core::OAuth2TokenRequest* mutable_tokens(int index);
  ::google::protobuf::RepeatedPtrField< ::flyteidl::core::OAuth2TokenRequest >*
      mutable_tokens();
  const ::flyteidl::core::OAuth2TokenRequest& tokens(int index) const;
  ::flyteidl::core::OAuth2TokenRequest* add_tokens();
  const ::google::protobuf::RepeatedPtrField< ::flyteidl::core::OAuth2TokenRequest >&
      tokens() const;

  // .flyteidl.core.Identity run_as = 1;
  bool has_run_as() const;
  void clear_run_as();
  static const int kRunAsFieldNumber = 1;
  const ::flyteidl::core::Identity& run_as() const;
  ::flyteidl::core::Identity* release_run_as();
  ::flyteidl::core::Identity* mutable_run_as();
  void set_allocated_run_as(::flyteidl::core::Identity* run_as);

  // @@protoc_insertion_point(class_scope:flyteidl.core.SecurityContext)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::flyteidl::core::Secret > secrets_;
  ::google::protobuf::RepeatedPtrField< ::flyteidl::core::OAuth2TokenRequest > tokens_;
  ::flyteidl::core::Identity* run_as_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2fsecurity_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Secret

// string group = 1;
inline void Secret::clear_group() {
  group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Secret::group() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Secret.group)
  return group_.GetNoArena();
}
inline void Secret::set_group(const ::std::string& value) {
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.core.Secret.group)
}
#if LANG_CXX11
inline void Secret::set_group(::std::string&& value) {
  
  group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.core.Secret.group)
}
#endif
inline void Secret::set_group(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.core.Secret.group)
}
inline void Secret::set_group(const char* value, size_t size) {
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.core.Secret.group)
}
inline ::std::string* Secret::mutable_group() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Secret.group)
  return group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Secret::release_group() {
  // @@protoc_insertion_point(field_release:flyteidl.core.Secret.group)
  
  return group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Secret::set_allocated_group(::std::string* group) {
  if (group != nullptr) {
    
  } else {
    
  }
  group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Secret.group)
}

// string group_version = 2;
inline void Secret::clear_group_version() {
  group_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Secret::group_version() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Secret.group_version)
  return group_version_.GetNoArena();
}
inline void Secret::set_group_version(const ::std::string& value) {
  
  group_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.core.Secret.group_version)
}
#if LANG_CXX11
inline void Secret::set_group_version(::std::string&& value) {
  
  group_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.core.Secret.group_version)
}
#endif
inline void Secret::set_group_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.core.Secret.group_version)
}
inline void Secret::set_group_version(const char* value, size_t size) {
  
  group_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.core.Secret.group_version)
}
inline ::std::string* Secret::mutable_group_version() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Secret.group_version)
  return group_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Secret::release_group_version() {
  // @@protoc_insertion_point(field_release:flyteidl.core.Secret.group_version)
  
  return group_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Secret::set_allocated_group_version(::std::string* group_version) {
  if (group_version != nullptr) {
    
  } else {
    
  }
  group_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_version);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Secret.group_version)
}

// string key = 3;
inline void Secret::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Secret::key() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Secret.key)
  return key_.GetNoArena();
}
inline void Secret::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.core.Secret.key)
}
#if LANG_CXX11
inline void Secret::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.core.Secret.key)
}
#endif
inline void Secret::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.core.Secret.key)
}
inline void Secret::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.core.Secret.key)
}
inline ::std::string* Secret::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Secret.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Secret::release_key() {
  // @@protoc_insertion_point(field_release:flyteidl.core.Secret.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Secret::set_allocated_key(::std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Secret.key)
}

// .flyteidl.core.Secret.MountType mount_requirement = 4;
inline void Secret::clear_mount_requirement() {
  mount_requirement_ = 0;
}
inline ::flyteidl::core::Secret_MountType Secret::mount_requirement() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Secret.mount_requirement)
  return static_cast< ::flyteidl::core::Secret_MountType >(mount_requirement_);
}
inline void Secret::set_mount_requirement(::flyteidl::core::Secret_MountType value) {
  
  mount_requirement_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.core.Secret.mount_requirement)
}

// string env_name = 5;
inline void Secret::clear_env_name() {
  env_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Secret::env_name() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Secret.env_name)
  return env_name_.GetNoArena();
}
inline void Secret::set_env_name(const ::std::string& value) {
  
  env_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.core.Secret.env_name)
}
#if LANG_CXX11
inline void Secret::set_env_name(::std::string&& value) {
  
  env_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.core.Secret.env_name)
}
#endif
inline void Secret::set_env_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  env_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.core.Secret.env_name)
}
inline void Secret::set_env_name(const char* value, size_t size) {
  
  env_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.core.Secret.env_name)
}
inline ::std::string* Secret::mutable_env_name() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Secret.env_name)
  return env_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Secret::release_env_name() {
  // @@protoc_insertion_point(field_release:flyteidl.core.Secret.env_name)
  
  return env_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Secret::set_allocated_env_name(::std::string* env_name) {
  if (env_name != nullptr) {
    
  } else {
    
  }
  env_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), env_name);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Secret.env_name)
}

// -------------------------------------------------------------------

// OAuth2Client

// string client_id = 1;
inline void OAuth2Client::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OAuth2Client::client_id() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.OAuth2Client.client_id)
  return client_id_.GetNoArena();
}
inline void OAuth2Client::set_client_id(const ::std::string& value) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.core.OAuth2Client.client_id)
}
#if LANG_CXX11
inline void OAuth2Client::set_client_id(::std::string&& value) {
  
  client_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.core.OAuth2Client.client_id)
}
#endif
inline void OAuth2Client::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.core.OAuth2Client.client_id)
}
inline void OAuth2Client::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.core.OAuth2Client.client_id)
}
inline ::std::string* OAuth2Client::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.core.OAuth2Client.client_id)
  return client_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OAuth2Client::release_client_id() {
  // @@protoc_insertion_point(field_release:flyteidl.core.OAuth2Client.client_id)
  
  return client_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OAuth2Client::set_allocated_client_id(::std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.OAuth2Client.client_id)
}

// .flyteidl.core.Secret client_secret = 2;
inline bool OAuth2Client::has_client_secret() const {
  return this != internal_default_instance() && client_secret_ != nullptr;
}
inline void OAuth2Client::clear_client_secret() {
  if (GetArenaNoVirtual() == nullptr && client_secret_ != nullptr) {
    delete client_secret_;
  }
  client_secret_ = nullptr;
}
inline const ::flyteidl::core::Secret& OAuth2Client::client_secret() const {
  const ::flyteidl::core::Secret* p = client_secret_;
  // @@protoc_insertion_point(field_get:flyteidl.core.OAuth2Client.client_secret)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::Secret*>(
      &::flyteidl::core::_Secret_default_instance_);
}
inline ::flyteidl::core::Secret* OAuth2Client::release_client_secret() {
  // @@protoc_insertion_point(field_release:flyteidl.core.OAuth2Client.client_secret)
  
  ::flyteidl::core::Secret* temp = client_secret_;
  client_secret_ = nullptr;
  return temp;
}
inline ::flyteidl::core::Secret* OAuth2Client::mutable_client_secret() {
  
  if (client_secret_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::Secret>(GetArenaNoVirtual());
    client_secret_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.OAuth2Client.client_secret)
  return client_secret_;
}
inline void OAuth2Client::set_allocated_client_secret(::flyteidl::core::Secret* client_secret) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete client_secret_;
  }
  if (client_secret) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      client_secret = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, client_secret, submessage_arena);
    }
    
  } else {
    
  }
  client_secret_ = client_secret;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.OAuth2Client.client_secret)
}

// -------------------------------------------------------------------

// Identity

// string iam_role = 1;
inline void Identity::clear_iam_role() {
  iam_role_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Identity::iam_role() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Identity.iam_role)
  return iam_role_.GetNoArena();
}
inline void Identity::set_iam_role(const ::std::string& value) {
  
  iam_role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.core.Identity.iam_role)
}
#if LANG_CXX11
inline void Identity::set_iam_role(::std::string&& value) {
  
  iam_role_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.core.Identity.iam_role)
}
#endif
inline void Identity::set_iam_role(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  iam_role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.core.Identity.iam_role)
}
inline void Identity::set_iam_role(const char* value, size_t size) {
  
  iam_role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.core.Identity.iam_role)
}
inline ::std::string* Identity::mutable_iam_role() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Identity.iam_role)
  return iam_role_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Identity::release_iam_role() {
  // @@protoc_insertion_point(field_release:flyteidl.core.Identity.iam_role)
  
  return iam_role_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Identity::set_allocated_iam_role(::std::string* iam_role) {
  if (iam_role != nullptr) {
    
  } else {
    
  }
  iam_role_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iam_role);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Identity.iam_role)
}

// string k8s_service_account = 2;
inline void Identity::clear_k8s_service_account() {
  k8s_service_account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Identity::k8s_service_account() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Identity.k8s_service_account)
  return k8s_service_account_.GetNoArena();
}
inline void Identity::set_k8s_service_account(const ::std::string& value) {
  
  k8s_service_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.core.Identity.k8s_service_account)
}
#if LANG_CXX11
inline void Identity::set_k8s_service_account(::std::string&& value) {
  
  k8s_service_account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.core.Identity.k8s_service_account)
}
#endif
inline void Identity::set_k8s_service_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  k8s_service_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.core.Identity.k8s_service_account)
}
inline void Identity::set_k8s_service_account(const char* value, size_t size) {
  
  k8s_service_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.core.Identity.k8s_service_account)
}
inline ::std::string* Identity::mutable_k8s_service_account() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Identity.k8s_service_account)
  return k8s_service_account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Identity::release_k8s_service_account() {
  // @@protoc_insertion_point(field_release:flyteidl.core.Identity.k8s_service_account)
  
  return k8s_service_account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Identity::set_allocated_k8s_service_account(::std::string* k8s_service_account) {
  if (k8s_service_account != nullptr) {
    
  } else {
    
  }
  k8s_service_account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), k8s_service_account);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Identity.k8s_service_account)
}

// .flyteidl.core.OAuth2Client oauth2_client = 3;
inline bool Identity::has_oauth2_client() const {
  return this != internal_default_instance() && oauth2_client_ != nullptr;
}
inline void Identity::clear_oauth2_client() {
  if (GetArenaNoVirtual() == nullptr && oauth2_client_ != nullptr) {
    delete oauth2_client_;
  }
  oauth2_client_ = nullptr;
}
inline const ::flyteidl::core::OAuth2Client& Identity::oauth2_client() const {
  const ::flyteidl::core::OAuth2Client* p = oauth2_client_;
  // @@protoc_insertion_point(field_get:flyteidl.core.Identity.oauth2_client)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::OAuth2Client*>(
      &::flyteidl::core::_OAuth2Client_default_instance_);
}
inline ::flyteidl::core::OAuth2Client* Identity::release_oauth2_client() {
  // @@protoc_insertion_point(field_release:flyteidl.core.Identity.oauth2_client)
  
  ::flyteidl::core::OAuth2Client* temp = oauth2_client_;
  oauth2_client_ = nullptr;
  return temp;
}
inline ::flyteidl::core::OAuth2Client* Identity::mutable_oauth2_client() {
  
  if (oauth2_client_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::OAuth2Client>(GetArenaNoVirtual());
    oauth2_client_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Identity.oauth2_client)
  return oauth2_client_;
}
inline void Identity::set_allocated_oauth2_client(::flyteidl::core::OAuth2Client* oauth2_client) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete oauth2_client_;
  }
  if (oauth2_client) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      oauth2_client = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, oauth2_client, submessage_arena);
    }
    
  } else {
    
  }
  oauth2_client_ = oauth2_client;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Identity.oauth2_client)
}

// string execution_identity = 4;
inline void Identity::clear_execution_identity() {
  execution_identity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Identity::execution_identity() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Identity.execution_identity)
  return execution_identity_.GetNoArena();
}
inline void Identity::set_execution_identity(const ::std::string& value) {
  
  execution_identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.core.Identity.execution_identity)
}
#if LANG_CXX11
inline void Identity::set_execution_identity(::std::string&& value) {
  
  execution_identity_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.core.Identity.execution_identity)
}
#endif
inline void Identity::set_execution_identity(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  execution_identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.core.Identity.execution_identity)
}
inline void Identity::set_execution_identity(const char* value, size_t size) {
  
  execution_identity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.core.Identity.execution_identity)
}
inline ::std::string* Identity::mutable_execution_identity() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Identity.execution_identity)
  return execution_identity_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Identity::release_execution_identity() {
  // @@protoc_insertion_point(field_release:flyteidl.core.Identity.execution_identity)
  
  return execution_identity_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Identity::set_allocated_execution_identity(::std::string* execution_identity) {
  if (execution_identity != nullptr) {
    
  } else {
    
  }
  execution_identity_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), execution_identity);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Identity.execution_identity)
}

// -------------------------------------------------------------------

// OAuth2TokenRequest

// string name = 1;
inline void OAuth2TokenRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OAuth2TokenRequest::name() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.OAuth2TokenRequest.name)
  return name_.GetNoArena();
}
inline void OAuth2TokenRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.core.OAuth2TokenRequest.name)
}
#if LANG_CXX11
inline void OAuth2TokenRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.core.OAuth2TokenRequest.name)
}
#endif
inline void OAuth2TokenRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.core.OAuth2TokenRequest.name)
}
inline void OAuth2TokenRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.core.OAuth2TokenRequest.name)
}
inline ::std::string* OAuth2TokenRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.core.OAuth2TokenRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OAuth2TokenRequest::release_name() {
  // @@protoc_insertion_point(field_release:flyteidl.core.OAuth2TokenRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OAuth2TokenRequest::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.OAuth2TokenRequest.name)
}

// .flyteidl.core.OAuth2TokenRequest.Type type = 2;
inline void OAuth2TokenRequest::clear_type() {
  type_ = 0;
}
inline ::flyteidl::core::OAuth2TokenRequest_Type OAuth2TokenRequest::type() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.OAuth2TokenRequest.type)
  return static_cast< ::flyteidl::core::OAuth2TokenRequest_Type >(type_);
}
inline void OAuth2TokenRequest::set_type(::flyteidl::core::OAuth2TokenRequest_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.core.OAuth2TokenRequest.type)
}

// .flyteidl.core.OAuth2Client client = 3;
inline bool OAuth2TokenRequest::has_client() const {
  return this != internal_default_instance() && client_ != nullptr;
}
inline void OAuth2TokenRequest::clear_client() {
  if (GetArenaNoVirtual() == nullptr && client_ != nullptr) {
    delete client_;
  }
  client_ = nullptr;
}
inline const ::flyteidl::core::OAuth2Client& OAuth2TokenRequest::client() const {
  const ::flyteidl::core::OAuth2Client* p = client_;
  // @@protoc_insertion_point(field_get:flyteidl.core.OAuth2TokenRequest.client)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::OAuth2Client*>(
      &::flyteidl::core::_OAuth2Client_default_instance_);
}
inline ::flyteidl::core::OAuth2Client* OAuth2TokenRequest::release_client() {
  // @@protoc_insertion_point(field_release:flyteidl.core.OAuth2TokenRequest.client)
  
  ::flyteidl::core::OAuth2Client* temp = client_;
  client_ = nullptr;
  return temp;
}
inline ::flyteidl::core::OAuth2Client* OAuth2TokenRequest::mutable_client() {
  
  if (client_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::OAuth2Client>(GetArenaNoVirtual());
    client_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.OAuth2TokenRequest.client)
  return client_;
}
inline void OAuth2TokenRequest::set_allocated_client(::flyteidl::core::OAuth2Client* client) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete client_;
  }
  if (client) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      client = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, client, submessage_arena);
    }
    
  } else {
    
  }
  client_ = client;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.OAuth2TokenRequest.client)
}

// string idp_discovery_endpoint = 4;
inline void OAuth2TokenRequest::clear_idp_discovery_endpoint() {
  idp_discovery_endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OAuth2TokenRequest::idp_discovery_endpoint() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.OAuth2TokenRequest.idp_discovery_endpoint)
  return idp_discovery_endpoint_.GetNoArena();
}
inline void OAuth2TokenRequest::set_idp_discovery_endpoint(const ::std::string& value) {
  
  idp_discovery_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.core.OAuth2TokenRequest.idp_discovery_endpoint)
}
#if LANG_CXX11
inline void OAuth2TokenRequest::set_idp_discovery_endpoint(::std::string&& value) {
  
  idp_discovery_endpoint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.core.OAuth2TokenRequest.idp_discovery_endpoint)
}
#endif
inline void OAuth2TokenRequest::set_idp_discovery_endpoint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  idp_discovery_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.core.OAuth2TokenRequest.idp_discovery_endpoint)
}
inline void OAuth2TokenRequest::set_idp_discovery_endpoint(const char* value, size_t size) {
  
  idp_discovery_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.core.OAuth2TokenRequest.idp_discovery_endpoint)
}
inline ::std::string* OAuth2TokenRequest::mutable_idp_discovery_endpoint() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.core.OAuth2TokenRequest.idp_discovery_endpoint)
  return idp_discovery_endpoint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OAuth2TokenRequest::release_idp_discovery_endpoint() {
  // @@protoc_insertion_point(field_release:flyteidl.core.OAuth2TokenRequest.idp_discovery_endpoint)
  
  return idp_discovery_endpoint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OAuth2TokenRequest::set_allocated_idp_discovery_endpoint(::std::string* idp_discovery_endpoint) {
  if (idp_discovery_endpoint != nullptr) {
    
  } else {
    
  }
  idp_discovery_endpoint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), idp_discovery_endpoint);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.OAuth2TokenRequest.idp_discovery_endpoint)
}

// string token_endpoint = 5;
inline void OAuth2TokenRequest::clear_token_endpoint() {
  token_endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OAuth2TokenRequest::token_endpoint() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.OAuth2TokenRequest.token_endpoint)
  return token_endpoint_.GetNoArena();
}
inline void OAuth2TokenRequest::set_token_endpoint(const ::std::string& value) {
  
  token_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.core.OAuth2TokenRequest.token_endpoint)
}
#if LANG_CXX11
inline void OAuth2TokenRequest::set_token_endpoint(::std::string&& value) {
  
  token_endpoint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.core.OAuth2TokenRequest.token_endpoint)
}
#endif
inline void OAuth2TokenRequest::set_token_endpoint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.core.OAuth2TokenRequest.token_endpoint)
}
inline void OAuth2TokenRequest::set_token_endpoint(const char* value, size_t size) {
  
  token_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.core.OAuth2TokenRequest.token_endpoint)
}
inline ::std::string* OAuth2TokenRequest::mutable_token_endpoint() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.core.OAuth2TokenRequest.token_endpoint)
  return token_endpoint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OAuth2TokenRequest::release_token_endpoint() {
  // @@protoc_insertion_point(field_release:flyteidl.core.OAuth2TokenRequest.token_endpoint)
  
  return token_endpoint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OAuth2TokenRequest::set_allocated_token_endpoint(::std::string* token_endpoint) {
  if (token_endpoint != nullptr) {
    
  } else {
    
  }
  token_endpoint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token_endpoint);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.OAuth2TokenRequest.token_endpoint)
}

// -------------------------------------------------------------------

// SecurityContext

// .flyteidl.core.Identity run_as = 1;
inline bool SecurityContext::has_run_as() const {
  return this != internal_default_instance() && run_as_ != nullptr;
}
inline void SecurityContext::clear_run_as() {
  if (GetArenaNoVirtual() == nullptr && run_as_ != nullptr) {
    delete run_as_;
  }
  run_as_ = nullptr;
}
inline const ::flyteidl::core::Identity& SecurityContext::run_as() const {
  const ::flyteidl::core::Identity* p = run_as_;
  // @@protoc_insertion_point(field_get:flyteidl.core.SecurityContext.run_as)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::Identity*>(
      &::flyteidl::core::_Identity_default_instance_);
}
inline ::flyteidl::core::Identity* SecurityContext::release_run_as() {
  // @@protoc_insertion_point(field_release:flyteidl.core.SecurityContext.run_as)
  
  ::flyteidl::core::Identity* temp = run_as_;
  run_as_ = nullptr;
  return temp;
}
inline ::flyteidl::core::Identity* SecurityContext::mutable_run_as() {
  
  if (run_as_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::Identity>(GetArenaNoVirtual());
    run_as_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.SecurityContext.run_as)
  return run_as_;
}
inline void SecurityContext::set_allocated_run_as(::flyteidl::core::Identity* run_as) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete run_as_;
  }
  if (run_as) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      run_as = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, run_as, submessage_arena);
    }
    
  } else {
    
  }
  run_as_ = run_as;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.SecurityContext.run_as)
}

// repeated .flyteidl.core.Secret secrets = 2;
inline int SecurityContext::secrets_size() const {
  return secrets_.size();
}
inline void SecurityContext::clear_secrets() {
  secrets_.Clear();
}
inline ::flyteidl::core::Secret* SecurityContext::mutable_secrets(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.core.SecurityContext.secrets)
  return secrets_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::flyteidl::core::Secret >*
SecurityContext::mutable_secrets() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.core.SecurityContext.secrets)
  return &secrets_;
}
inline const ::flyteidl::core::Secret& SecurityContext::secrets(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.core.SecurityContext.secrets)
  return secrets_.Get(index);
}
inline ::flyteidl::core::Secret* SecurityContext::add_secrets() {
  // @@protoc_insertion_point(field_add:flyteidl.core.SecurityContext.secrets)
  return secrets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::flyteidl::core::Secret >&
SecurityContext::secrets() const {
  // @@protoc_insertion_point(field_list:flyteidl.core.SecurityContext.secrets)
  return secrets_;
}

// repeated .flyteidl.core.OAuth2TokenRequest tokens = 3;
inline int SecurityContext::tokens_size() const {
  return tokens_.size();
}
inline void SecurityContext::clear_tokens() {
  tokens_.Clear();
}
inline ::flyteidl::core::OAuth2TokenRequest* SecurityContext::mutable_tokens(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.core.SecurityContext.tokens)
  return tokens_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::flyteidl::core::OAuth2TokenRequest >*
SecurityContext::mutable_tokens() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.core.SecurityContext.tokens)
  return &tokens_;
}
inline const ::flyteidl::core::OAuth2TokenRequest& SecurityContext::tokens(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.core.SecurityContext.tokens)
  return tokens_.Get(index);
}
inline ::flyteidl::core::OAuth2TokenRequest* SecurityContext::add_tokens() {
  // @@protoc_insertion_point(field_add:flyteidl.core.SecurityContext.tokens)
  return tokens_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::flyteidl::core::OAuth2TokenRequest >&
SecurityContext::tokens() const {
  // @@protoc_insertion_point(field_list:flyteidl.core.SecurityContext.tokens)
  return tokens_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace core
}  // namespace flyteidl

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::flyteidl::core::Secret_MountType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flyteidl::core::Secret_MountType>() {
  return ::flyteidl::core::Secret_MountType_descriptor();
}
template <> struct is_proto_enum< ::flyteidl::core::OAuth2TokenRequest_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flyteidl::core::OAuth2TokenRequest_Type>() {
  return ::flyteidl::core::OAuth2TokenRequest_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_flyteidl_2fcore_2fsecurity_2eproto
