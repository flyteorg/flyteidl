// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/event/event.proto

package com.flyteidl.event;

public interface TaskExecutionMetadataOrBuilder extends
    // @@protoc_insertion_point(interface_extends:flyteidl.event.TaskExecutionMetadata)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Unique, generated name for this task execution used by the backend.
   * </pre>
   *
   * <code>string generated_name = 1 [json_name = "generatedName"];</code>
   * @return The generatedName.
   */
  java.lang.String getGeneratedName();
  /**
   * <pre>
   * Unique, generated name for this task execution used by the backend.
   * </pre>
   *
   * <code>string generated_name = 1 [json_name = "generatedName"];</code>
   * @return The bytes for generatedName.
   */
  com.google.protobuf.ByteString
      getGeneratedNameBytes();

  /**
   * <pre>
   * Additional data on external resources on other back-ends or platforms (e.g. Hive, Qubole, etc) launched by this task execution.
   * </pre>
   *
   * <code>repeated .flyteidl.event.ExternalResourceInfo external_resources = 2 [json_name = "externalResources"];</code>
   */
  java.util.List<com.flyteidl.event.ExternalResourceInfo> 
      getExternalResourcesList();
  /**
   * <pre>
   * Additional data on external resources on other back-ends or platforms (e.g. Hive, Qubole, etc) launched by this task execution.
   * </pre>
   *
   * <code>repeated .flyteidl.event.ExternalResourceInfo external_resources = 2 [json_name = "externalResources"];</code>
   */
  com.flyteidl.event.ExternalResourceInfo getExternalResources(int index);
  /**
   * <pre>
   * Additional data on external resources on other back-ends or platforms (e.g. Hive, Qubole, etc) launched by this task execution.
   * </pre>
   *
   * <code>repeated .flyteidl.event.ExternalResourceInfo external_resources = 2 [json_name = "externalResources"];</code>
   */
  int getExternalResourcesCount();
  /**
   * <pre>
   * Additional data on external resources on other back-ends or platforms (e.g. Hive, Qubole, etc) launched by this task execution.
   * </pre>
   *
   * <code>repeated .flyteidl.event.ExternalResourceInfo external_resources = 2 [json_name = "externalResources"];</code>
   */
  java.util.List<? extends com.flyteidl.event.ExternalResourceInfoOrBuilder> 
      getExternalResourcesOrBuilderList();
  /**
   * <pre>
   * Additional data on external resources on other back-ends or platforms (e.g. Hive, Qubole, etc) launched by this task execution.
   * </pre>
   *
   * <code>repeated .flyteidl.event.ExternalResourceInfo external_resources = 2 [json_name = "externalResources"];</code>
   */
  com.flyteidl.event.ExternalResourceInfoOrBuilder getExternalResourcesOrBuilder(
      int index);

  /**
   * <pre>
   * Includes additional data on concurrent resource management used during execution..
   * This is a repeated field because a plugin can request multiple resource allocations during execution.
   * </pre>
   *
   * <code>repeated .flyteidl.event.ResourcePoolInfo resource_pool_info = 3 [json_name = "resourcePoolInfo"];</code>
   */
  java.util.List<com.flyteidl.event.ResourcePoolInfo> 
      getResourcePoolInfoList();
  /**
   * <pre>
   * Includes additional data on concurrent resource management used during execution..
   * This is a repeated field because a plugin can request multiple resource allocations during execution.
   * </pre>
   *
   * <code>repeated .flyteidl.event.ResourcePoolInfo resource_pool_info = 3 [json_name = "resourcePoolInfo"];</code>
   */
  com.flyteidl.event.ResourcePoolInfo getResourcePoolInfo(int index);
  /**
   * <pre>
   * Includes additional data on concurrent resource management used during execution..
   * This is a repeated field because a plugin can request multiple resource allocations during execution.
   * </pre>
   *
   * <code>repeated .flyteidl.event.ResourcePoolInfo resource_pool_info = 3 [json_name = "resourcePoolInfo"];</code>
   */
  int getResourcePoolInfoCount();
  /**
   * <pre>
   * Includes additional data on concurrent resource management used during execution..
   * This is a repeated field because a plugin can request multiple resource allocations during execution.
   * </pre>
   *
   * <code>repeated .flyteidl.event.ResourcePoolInfo resource_pool_info = 3 [json_name = "resourcePoolInfo"];</code>
   */
  java.util.List<? extends com.flyteidl.event.ResourcePoolInfoOrBuilder> 
      getResourcePoolInfoOrBuilderList();
  /**
   * <pre>
   * Includes additional data on concurrent resource management used during execution..
   * This is a repeated field because a plugin can request multiple resource allocations during execution.
   * </pre>
   *
   * <code>repeated .flyteidl.event.ResourcePoolInfo resource_pool_info = 3 [json_name = "resourcePoolInfo"];</code>
   */
  com.flyteidl.event.ResourcePoolInfoOrBuilder getResourcePoolInfoOrBuilder(
      int index);

  /**
   * <pre>
   * The identifier of the plugin used to execute this task.
   * </pre>
   *
   * <code>string plugin_identifier = 4 [json_name = "pluginIdentifier"];</code>
   * @return The pluginIdentifier.
   */
  java.lang.String getPluginIdentifier();
  /**
   * <pre>
   * The identifier of the plugin used to execute this task.
   * </pre>
   *
   * <code>string plugin_identifier = 4 [json_name = "pluginIdentifier"];</code>
   * @return The bytes for pluginIdentifier.
   */
  com.google.protobuf.ByteString
      getPluginIdentifierBytes();

  /**
   * <code>.flyteidl.event.TaskExecutionMetadata.InstanceClass instance_class = 16 [json_name = "instanceClass"];</code>
   * @return The enum numeric value on the wire for instanceClass.
   */
  int getInstanceClassValue();
  /**
   * <code>.flyteidl.event.TaskExecutionMetadata.InstanceClass instance_class = 16 [json_name = "instanceClass"];</code>
   * @return The instanceClass.
   */
  com.flyteidl.event.TaskExecutionMetadata.InstanceClass getInstanceClass();
}
