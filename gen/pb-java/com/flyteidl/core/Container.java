// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/tasks.proto

package com.flyteidl.core;

/**
 * Protobuf type {@code flyteidl.core.Container}
 */
public final class Container extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:flyteidl.core.Container)
    ContainerOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Container.newBuilder() to construct.
  private Container(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Container() {
    image_ = "";
    command_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    args_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    env_ = java.util.Collections.emptyList();
    config_ = java.util.Collections.emptyList();
    ports_ = java.util.Collections.emptyList();
    architecture_ = 0;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Container();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private Container(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            image_ = s;
            break;
          }
          case 18: {
            java.lang.String s = input.readStringRequireUtf8();
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              command_ = new com.google.protobuf.LazyStringArrayList();
              mutable_bitField0_ |= 0x00000001;
            }
            command_.add(s);
            break;
          }
          case 26: {
            java.lang.String s = input.readStringRequireUtf8();
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              args_ = new com.google.protobuf.LazyStringArrayList();
              mutable_bitField0_ |= 0x00000002;
            }
            args_.add(s);
            break;
          }
          case 34: {
            com.flyteidl.core.Resources.Builder subBuilder = null;
            if (resources_ != null) {
              subBuilder = resources_.toBuilder();
            }
            resources_ = input.readMessage(com.flyteidl.core.Resources.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(resources_);
              resources_ = subBuilder.buildPartial();
            }

            break;
          }
          case 42: {
            if (!((mutable_bitField0_ & 0x00000004) != 0)) {
              env_ = new java.util.ArrayList<com.flyteidl.core.KeyValuePair>();
              mutable_bitField0_ |= 0x00000004;
            }
            env_.add(
                input.readMessage(com.flyteidl.core.KeyValuePair.parser(), extensionRegistry));
            break;
          }
          case 50: {
            if (!((mutable_bitField0_ & 0x00000008) != 0)) {
              config_ = new java.util.ArrayList<com.flyteidl.core.KeyValuePair>();
              mutable_bitField0_ |= 0x00000008;
            }
            config_.add(
                input.readMessage(com.flyteidl.core.KeyValuePair.parser(), extensionRegistry));
            break;
          }
          case 58: {
            if (!((mutable_bitField0_ & 0x00000010) != 0)) {
              ports_ = new java.util.ArrayList<com.flyteidl.core.ContainerPort>();
              mutable_bitField0_ |= 0x00000010;
            }
            ports_.add(
                input.readMessage(com.flyteidl.core.ContainerPort.parser(), extensionRegistry));
            break;
          }
          case 74: {
            com.flyteidl.core.DataLoadingConfig.Builder subBuilder = null;
            if (dataConfig_ != null) {
              subBuilder = dataConfig_.toBuilder();
            }
            dataConfig_ = input.readMessage(com.flyteidl.core.DataLoadingConfig.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(dataConfig_);
              dataConfig_ = subBuilder.buildPartial();
            }

            break;
          }
          case 80: {
            int rawValue = input.readEnum();

            architecture_ = rawValue;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        command_ = command_.getUnmodifiableView();
      }
      if (((mutable_bitField0_ & 0x00000002) != 0)) {
        args_ = args_.getUnmodifiableView();
      }
      if (((mutable_bitField0_ & 0x00000004) != 0)) {
        env_ = java.util.Collections.unmodifiableList(env_);
      }
      if (((mutable_bitField0_ & 0x00000008) != 0)) {
        config_ = java.util.Collections.unmodifiableList(config_);
      }
      if (((mutable_bitField0_ & 0x00000010) != 0)) {
        ports_ = java.util.Collections.unmodifiableList(ports_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.flyteidl.core.TasksProto.internal_static_flyteidl_core_Container_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.flyteidl.core.TasksProto.internal_static_flyteidl_core_Container_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.flyteidl.core.Container.class, com.flyteidl.core.Container.Builder.class);
  }

  /**
   * <pre>
   * Architecture-type the container image supports.
   * </pre>
   *
   * Protobuf enum {@code flyteidl.core.Container.Architecture}
   */
  public enum Architecture
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>UNKNOWN = 0;</code>
     */
    UNKNOWN(0),
    /**
     * <code>AMD64 = 1;</code>
     */
    AMD64(1),
    /**
     * <code>ARM64 = 2;</code>
     */
    ARM64(2),
    /**
     * <code>ARM_V6 = 3;</code>
     */
    ARM_V6(3),
    /**
     * <code>ARM_V7 = 4;</code>
     */
    ARM_V7(4),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>UNKNOWN = 0;</code>
     */
    public static final int UNKNOWN_VALUE = 0;
    /**
     * <code>AMD64 = 1;</code>
     */
    public static final int AMD64_VALUE = 1;
    /**
     * <code>ARM64 = 2;</code>
     */
    public static final int ARM64_VALUE = 2;
    /**
     * <code>ARM_V6 = 3;</code>
     */
    public static final int ARM_V6_VALUE = 3;
    /**
     * <code>ARM_V7 = 4;</code>
     */
    public static final int ARM_V7_VALUE = 4;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static Architecture valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static Architecture forNumber(int value) {
      switch (value) {
        case 0: return UNKNOWN;
        case 1: return AMD64;
        case 2: return ARM64;
        case 3: return ARM_V6;
        case 4: return ARM_V7;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Architecture>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        Architecture> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Architecture>() {
            public Architecture findValueByNumber(int number) {
              return Architecture.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.flyteidl.core.Container.getDescriptor().getEnumTypes().get(0);
    }

    private static final Architecture[] VALUES = values();

    public static Architecture valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private Architecture(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:flyteidl.core.Container.Architecture)
  }

  public static final int IMAGE_FIELD_NUMBER = 1;
  private volatile java.lang.Object image_;
  /**
   * <pre>
   * Container image url. Eg: docker/redis:latest
   * </pre>
   *
   * <code>string image = 1 [json_name = "image"];</code>
   * @return The image.
   */
  @java.lang.Override
  public java.lang.String getImage() {
    java.lang.Object ref = image_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      image_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Container image url. Eg: docker/redis:latest
   * </pre>
   *
   * <code>string image = 1 [json_name = "image"];</code>
   * @return The bytes for image.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getImageBytes() {
    java.lang.Object ref = image_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      image_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int COMMAND_FIELD_NUMBER = 2;
  private com.google.protobuf.LazyStringList command_;
  /**
   * <pre>
   * Command to be executed, if not provided, the default entrypoint in the container image will be used.
   * </pre>
   *
   * <code>repeated string command = 2 [json_name = "command"];</code>
   * @return A list containing the command.
   */
  public com.google.protobuf.ProtocolStringList
      getCommandList() {
    return command_;
  }
  /**
   * <pre>
   * Command to be executed, if not provided, the default entrypoint in the container image will be used.
   * </pre>
   *
   * <code>repeated string command = 2 [json_name = "command"];</code>
   * @return The count of command.
   */
  public int getCommandCount() {
    return command_.size();
  }
  /**
   * <pre>
   * Command to be executed, if not provided, the default entrypoint in the container image will be used.
   * </pre>
   *
   * <code>repeated string command = 2 [json_name = "command"];</code>
   * @param index The index of the element to return.
   * @return The command at the given index.
   */
  public java.lang.String getCommand(int index) {
    return command_.get(index);
  }
  /**
   * <pre>
   * Command to be executed, if not provided, the default entrypoint in the container image will be used.
   * </pre>
   *
   * <code>repeated string command = 2 [json_name = "command"];</code>
   * @param index The index of the value to return.
   * @return The bytes of the command at the given index.
   */
  public com.google.protobuf.ByteString
      getCommandBytes(int index) {
    return command_.getByteString(index);
  }

  public static final int ARGS_FIELD_NUMBER = 3;
  private com.google.protobuf.LazyStringList args_;
  /**
   * <pre>
   * These will default to Flyte given paths. If provided, the system will not append known paths. If the task still
   * needs flyte's inputs and outputs path, add $(FLYTE_INPUT_FILE), $(FLYTE_OUTPUT_FILE) wherever makes sense and the
   * system will populate these before executing the container.
   * </pre>
   *
   * <code>repeated string args = 3 [json_name = "args"];</code>
   * @return A list containing the args.
   */
  public com.google.protobuf.ProtocolStringList
      getArgsList() {
    return args_;
  }
  /**
   * <pre>
   * These will default to Flyte given paths. If provided, the system will not append known paths. If the task still
   * needs flyte's inputs and outputs path, add $(FLYTE_INPUT_FILE), $(FLYTE_OUTPUT_FILE) wherever makes sense and the
   * system will populate these before executing the container.
   * </pre>
   *
   * <code>repeated string args = 3 [json_name = "args"];</code>
   * @return The count of args.
   */
  public int getArgsCount() {
    return args_.size();
  }
  /**
   * <pre>
   * These will default to Flyte given paths. If provided, the system will not append known paths. If the task still
   * needs flyte's inputs and outputs path, add $(FLYTE_INPUT_FILE), $(FLYTE_OUTPUT_FILE) wherever makes sense and the
   * system will populate these before executing the container.
   * </pre>
   *
   * <code>repeated string args = 3 [json_name = "args"];</code>
   * @param index The index of the element to return.
   * @return The args at the given index.
   */
  public java.lang.String getArgs(int index) {
    return args_.get(index);
  }
  /**
   * <pre>
   * These will default to Flyte given paths. If provided, the system will not append known paths. If the task still
   * needs flyte's inputs and outputs path, add $(FLYTE_INPUT_FILE), $(FLYTE_OUTPUT_FILE) wherever makes sense and the
   * system will populate these before executing the container.
   * </pre>
   *
   * <code>repeated string args = 3 [json_name = "args"];</code>
   * @param index The index of the value to return.
   * @return The bytes of the args at the given index.
   */
  public com.google.protobuf.ByteString
      getArgsBytes(int index) {
    return args_.getByteString(index);
  }

  public static final int RESOURCES_FIELD_NUMBER = 4;
  private com.flyteidl.core.Resources resources_;
  /**
   * <pre>
   * Container resources requirement as specified by the container engine.
   * </pre>
   *
   * <code>.flyteidl.core.Resources resources = 4 [json_name = "resources"];</code>
   * @return Whether the resources field is set.
   */
  @java.lang.Override
  public boolean hasResources() {
    return resources_ != null;
  }
  /**
   * <pre>
   * Container resources requirement as specified by the container engine.
   * </pre>
   *
   * <code>.flyteidl.core.Resources resources = 4 [json_name = "resources"];</code>
   * @return The resources.
   */
  @java.lang.Override
  public com.flyteidl.core.Resources getResources() {
    return resources_ == null ? com.flyteidl.core.Resources.getDefaultInstance() : resources_;
  }
  /**
   * <pre>
   * Container resources requirement as specified by the container engine.
   * </pre>
   *
   * <code>.flyteidl.core.Resources resources = 4 [json_name = "resources"];</code>
   */
  @java.lang.Override
  public com.flyteidl.core.ResourcesOrBuilder getResourcesOrBuilder() {
    return getResources();
  }

  public static final int ENV_FIELD_NUMBER = 5;
  private java.util.List<com.flyteidl.core.KeyValuePair> env_;
  /**
   * <pre>
   * Environment variables will be set as the container is starting up.
   * </pre>
   *
   * <code>repeated .flyteidl.core.KeyValuePair env = 5 [json_name = "env"];</code>
   */
  @java.lang.Override
  public java.util.List<com.flyteidl.core.KeyValuePair> getEnvList() {
    return env_;
  }
  /**
   * <pre>
   * Environment variables will be set as the container is starting up.
   * </pre>
   *
   * <code>repeated .flyteidl.core.KeyValuePair env = 5 [json_name = "env"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.flyteidl.core.KeyValuePairOrBuilder> 
      getEnvOrBuilderList() {
    return env_;
  }
  /**
   * <pre>
   * Environment variables will be set as the container is starting up.
   * </pre>
   *
   * <code>repeated .flyteidl.core.KeyValuePair env = 5 [json_name = "env"];</code>
   */
  @java.lang.Override
  public int getEnvCount() {
    return env_.size();
  }
  /**
   * <pre>
   * Environment variables will be set as the container is starting up.
   * </pre>
   *
   * <code>repeated .flyteidl.core.KeyValuePair env = 5 [json_name = "env"];</code>
   */
  @java.lang.Override
  public com.flyteidl.core.KeyValuePair getEnv(int index) {
    return env_.get(index);
  }
  /**
   * <pre>
   * Environment variables will be set as the container is starting up.
   * </pre>
   *
   * <code>repeated .flyteidl.core.KeyValuePair env = 5 [json_name = "env"];</code>
   */
  @java.lang.Override
  public com.flyteidl.core.KeyValuePairOrBuilder getEnvOrBuilder(
      int index) {
    return env_.get(index);
  }

  public static final int CONFIG_FIELD_NUMBER = 6;
  private java.util.List<com.flyteidl.core.KeyValuePair> config_;
  /**
   * <pre>
   * Allows extra configs to be available for the container.
   * TODO: elaborate on how configs will become available.
   * Deprecated, please use TaskTemplate.config instead.
   * </pre>
   *
   * <code>repeated .flyteidl.core.KeyValuePair config = 6 [json_name = "config", deprecated = true];</code>
   */
  @java.lang.Override
  @java.lang.Deprecated public java.util.List<com.flyteidl.core.KeyValuePair> getConfigList() {
    return config_;
  }
  /**
   * <pre>
   * Allows extra configs to be available for the container.
   * TODO: elaborate on how configs will become available.
   * Deprecated, please use TaskTemplate.config instead.
   * </pre>
   *
   * <code>repeated .flyteidl.core.KeyValuePair config = 6 [json_name = "config", deprecated = true];</code>
   */
  @java.lang.Override
  @java.lang.Deprecated public java.util.List<? extends com.flyteidl.core.KeyValuePairOrBuilder> 
      getConfigOrBuilderList() {
    return config_;
  }
  /**
   * <pre>
   * Allows extra configs to be available for the container.
   * TODO: elaborate on how configs will become available.
   * Deprecated, please use TaskTemplate.config instead.
   * </pre>
   *
   * <code>repeated .flyteidl.core.KeyValuePair config = 6 [json_name = "config", deprecated = true];</code>
   */
  @java.lang.Override
  @java.lang.Deprecated public int getConfigCount() {
    return config_.size();
  }
  /**
   * <pre>
   * Allows extra configs to be available for the container.
   * TODO: elaborate on how configs will become available.
   * Deprecated, please use TaskTemplate.config instead.
   * </pre>
   *
   * <code>repeated .flyteidl.core.KeyValuePair config = 6 [json_name = "config", deprecated = true];</code>
   */
  @java.lang.Override
  @java.lang.Deprecated public com.flyteidl.core.KeyValuePair getConfig(int index) {
    return config_.get(index);
  }
  /**
   * <pre>
   * Allows extra configs to be available for the container.
   * TODO: elaborate on how configs will become available.
   * Deprecated, please use TaskTemplate.config instead.
   * </pre>
   *
   * <code>repeated .flyteidl.core.KeyValuePair config = 6 [json_name = "config", deprecated = true];</code>
   */
  @java.lang.Override
  @java.lang.Deprecated public com.flyteidl.core.KeyValuePairOrBuilder getConfigOrBuilder(
      int index) {
    return config_.get(index);
  }

  public static final int PORTS_FIELD_NUMBER = 7;
  private java.util.List<com.flyteidl.core.ContainerPort> ports_;
  /**
   * <pre>
   * Ports to open in the container. This feature is not supported by all execution engines. (e.g. supported on K8s but
   * not supported on AWS Batch)
   * Only K8s
   * </pre>
   *
   * <code>repeated .flyteidl.core.ContainerPort ports = 7 [json_name = "ports"];</code>
   */
  @java.lang.Override
  public java.util.List<com.flyteidl.core.ContainerPort> getPortsList() {
    return ports_;
  }
  /**
   * <pre>
   * Ports to open in the container. This feature is not supported by all execution engines. (e.g. supported on K8s but
   * not supported on AWS Batch)
   * Only K8s
   * </pre>
   *
   * <code>repeated .flyteidl.core.ContainerPort ports = 7 [json_name = "ports"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.flyteidl.core.ContainerPortOrBuilder> 
      getPortsOrBuilderList() {
    return ports_;
  }
  /**
   * <pre>
   * Ports to open in the container. This feature is not supported by all execution engines. (e.g. supported on K8s but
   * not supported on AWS Batch)
   * Only K8s
   * </pre>
   *
   * <code>repeated .flyteidl.core.ContainerPort ports = 7 [json_name = "ports"];</code>
   */
  @java.lang.Override
  public int getPortsCount() {
    return ports_.size();
  }
  /**
   * <pre>
   * Ports to open in the container. This feature is not supported by all execution engines. (e.g. supported on K8s but
   * not supported on AWS Batch)
   * Only K8s
   * </pre>
   *
   * <code>repeated .flyteidl.core.ContainerPort ports = 7 [json_name = "ports"];</code>
   */
  @java.lang.Override
  public com.flyteidl.core.ContainerPort getPorts(int index) {
    return ports_.get(index);
  }
  /**
   * <pre>
   * Ports to open in the container. This feature is not supported by all execution engines. (e.g. supported on K8s but
   * not supported on AWS Batch)
   * Only K8s
   * </pre>
   *
   * <code>repeated .flyteidl.core.ContainerPort ports = 7 [json_name = "ports"];</code>
   */
  @java.lang.Override
  public com.flyteidl.core.ContainerPortOrBuilder getPortsOrBuilder(
      int index) {
    return ports_.get(index);
  }

  public static final int DATA_CONFIG_FIELD_NUMBER = 9;
  private com.flyteidl.core.DataLoadingConfig dataConfig_;
  /**
   * <pre>
   * BETA: Optional configuration for DataLoading. If not specified, then default values are used.
   * This makes it possible to to run a completely portable container, that uses inputs and outputs
   * only from the local file-system and without having any reference to flyteidl. This is supported only on K8s at the moment.
   * If data loading is enabled, then data will be mounted in accompanying directories specified in the DataLoadingConfig. If the directories
   * are not specified, inputs will be mounted onto and outputs will be uploaded from a pre-determined file-system path. Refer to the documentation
   * to understand the default paths.
   * Only K8s
   * </pre>
   *
   * <code>.flyteidl.core.DataLoadingConfig data_config = 9 [json_name = "dataConfig"];</code>
   * @return Whether the dataConfig field is set.
   */
  @java.lang.Override
  public boolean hasDataConfig() {
    return dataConfig_ != null;
  }
  /**
   * <pre>
   * BETA: Optional configuration for DataLoading. If not specified, then default values are used.
   * This makes it possible to to run a completely portable container, that uses inputs and outputs
   * only from the local file-system and without having any reference to flyteidl. This is supported only on K8s at the moment.
   * If data loading is enabled, then data will be mounted in accompanying directories specified in the DataLoadingConfig. If the directories
   * are not specified, inputs will be mounted onto and outputs will be uploaded from a pre-determined file-system path. Refer to the documentation
   * to understand the default paths.
   * Only K8s
   * </pre>
   *
   * <code>.flyteidl.core.DataLoadingConfig data_config = 9 [json_name = "dataConfig"];</code>
   * @return The dataConfig.
   */
  @java.lang.Override
  public com.flyteidl.core.DataLoadingConfig getDataConfig() {
    return dataConfig_ == null ? com.flyteidl.core.DataLoadingConfig.getDefaultInstance() : dataConfig_;
  }
  /**
   * <pre>
   * BETA: Optional configuration for DataLoading. If not specified, then default values are used.
   * This makes it possible to to run a completely portable container, that uses inputs and outputs
   * only from the local file-system and without having any reference to flyteidl. This is supported only on K8s at the moment.
   * If data loading is enabled, then data will be mounted in accompanying directories specified in the DataLoadingConfig. If the directories
   * are not specified, inputs will be mounted onto and outputs will be uploaded from a pre-determined file-system path. Refer to the documentation
   * to understand the default paths.
   * Only K8s
   * </pre>
   *
   * <code>.flyteidl.core.DataLoadingConfig data_config = 9 [json_name = "dataConfig"];</code>
   */
  @java.lang.Override
  public com.flyteidl.core.DataLoadingConfigOrBuilder getDataConfigOrBuilder() {
    return getDataConfig();
  }

  public static final int ARCHITECTURE_FIELD_NUMBER = 10;
  private int architecture_;
  /**
   * <code>.flyteidl.core.Container.Architecture architecture = 10 [json_name = "architecture"];</code>
   * @return The enum numeric value on the wire for architecture.
   */
  @java.lang.Override public int getArchitectureValue() {
    return architecture_;
  }
  /**
   * <code>.flyteidl.core.Container.Architecture architecture = 10 [json_name = "architecture"];</code>
   * @return The architecture.
   */
  @java.lang.Override public com.flyteidl.core.Container.Architecture getArchitecture() {
    @SuppressWarnings("deprecation")
    com.flyteidl.core.Container.Architecture result = com.flyteidl.core.Container.Architecture.valueOf(architecture_);
    return result == null ? com.flyteidl.core.Container.Architecture.UNRECOGNIZED : result;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(image_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, image_);
    }
    for (int i = 0; i < command_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, command_.getRaw(i));
    }
    for (int i = 0; i < args_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, args_.getRaw(i));
    }
    if (resources_ != null) {
      output.writeMessage(4, getResources());
    }
    for (int i = 0; i < env_.size(); i++) {
      output.writeMessage(5, env_.get(i));
    }
    for (int i = 0; i < config_.size(); i++) {
      output.writeMessage(6, config_.get(i));
    }
    for (int i = 0; i < ports_.size(); i++) {
      output.writeMessage(7, ports_.get(i));
    }
    if (dataConfig_ != null) {
      output.writeMessage(9, getDataConfig());
    }
    if (architecture_ != com.flyteidl.core.Container.Architecture.UNKNOWN.getNumber()) {
      output.writeEnum(10, architecture_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(image_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, image_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < command_.size(); i++) {
        dataSize += computeStringSizeNoTag(command_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getCommandList().size();
    }
    {
      int dataSize = 0;
      for (int i = 0; i < args_.size(); i++) {
        dataSize += computeStringSizeNoTag(args_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getArgsList().size();
    }
    if (resources_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getResources());
    }
    for (int i = 0; i < env_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, env_.get(i));
    }
    for (int i = 0; i < config_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, config_.get(i));
    }
    for (int i = 0; i < ports_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, ports_.get(i));
    }
    if (dataConfig_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(9, getDataConfig());
    }
    if (architecture_ != com.flyteidl.core.Container.Architecture.UNKNOWN.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(10, architecture_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.flyteidl.core.Container)) {
      return super.equals(obj);
    }
    com.flyteidl.core.Container other = (com.flyteidl.core.Container) obj;

    if (!getImage()
        .equals(other.getImage())) return false;
    if (!getCommandList()
        .equals(other.getCommandList())) return false;
    if (!getArgsList()
        .equals(other.getArgsList())) return false;
    if (hasResources() != other.hasResources()) return false;
    if (hasResources()) {
      if (!getResources()
          .equals(other.getResources())) return false;
    }
    if (!getEnvList()
        .equals(other.getEnvList())) return false;
    if (!getConfigList()
        .equals(other.getConfigList())) return false;
    if (!getPortsList()
        .equals(other.getPortsList())) return false;
    if (hasDataConfig() != other.hasDataConfig()) return false;
    if (hasDataConfig()) {
      if (!getDataConfig()
          .equals(other.getDataConfig())) return false;
    }
    if (architecture_ != other.architecture_) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + IMAGE_FIELD_NUMBER;
    hash = (53 * hash) + getImage().hashCode();
    if (getCommandCount() > 0) {
      hash = (37 * hash) + COMMAND_FIELD_NUMBER;
      hash = (53 * hash) + getCommandList().hashCode();
    }
    if (getArgsCount() > 0) {
      hash = (37 * hash) + ARGS_FIELD_NUMBER;
      hash = (53 * hash) + getArgsList().hashCode();
    }
    if (hasResources()) {
      hash = (37 * hash) + RESOURCES_FIELD_NUMBER;
      hash = (53 * hash) + getResources().hashCode();
    }
    if (getEnvCount() > 0) {
      hash = (37 * hash) + ENV_FIELD_NUMBER;
      hash = (53 * hash) + getEnvList().hashCode();
    }
    if (getConfigCount() > 0) {
      hash = (37 * hash) + CONFIG_FIELD_NUMBER;
      hash = (53 * hash) + getConfigList().hashCode();
    }
    if (getPortsCount() > 0) {
      hash = (37 * hash) + PORTS_FIELD_NUMBER;
      hash = (53 * hash) + getPortsList().hashCode();
    }
    if (hasDataConfig()) {
      hash = (37 * hash) + DATA_CONFIG_FIELD_NUMBER;
      hash = (53 * hash) + getDataConfig().hashCode();
    }
    hash = (37 * hash) + ARCHITECTURE_FIELD_NUMBER;
    hash = (53 * hash) + architecture_;
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.flyteidl.core.Container parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.flyteidl.core.Container parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.flyteidl.core.Container parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.flyteidl.core.Container parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.flyteidl.core.Container parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.flyteidl.core.Container parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.flyteidl.core.Container parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.flyteidl.core.Container parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.flyteidl.core.Container parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.flyteidl.core.Container parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.flyteidl.core.Container parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.flyteidl.core.Container parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.flyteidl.core.Container prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code flyteidl.core.Container}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:flyteidl.core.Container)
      com.flyteidl.core.ContainerOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.flyteidl.core.TasksProto.internal_static_flyteidl_core_Container_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.flyteidl.core.TasksProto.internal_static_flyteidl_core_Container_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.flyteidl.core.Container.class, com.flyteidl.core.Container.Builder.class);
    }

    // Construct using com.flyteidl.core.Container.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getEnvFieldBuilder();
        getConfigFieldBuilder();
        getPortsFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      image_ = "";

      command_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000001);
      args_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000002);
      if (resourcesBuilder_ == null) {
        resources_ = null;
      } else {
        resources_ = null;
        resourcesBuilder_ = null;
      }
      if (envBuilder_ == null) {
        env_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
      } else {
        envBuilder_.clear();
      }
      if (configBuilder_ == null) {
        config_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
      } else {
        configBuilder_.clear();
      }
      if (portsBuilder_ == null) {
        ports_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
      } else {
        portsBuilder_.clear();
      }
      if (dataConfigBuilder_ == null) {
        dataConfig_ = null;
      } else {
        dataConfig_ = null;
        dataConfigBuilder_ = null;
      }
      architecture_ = 0;

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.flyteidl.core.TasksProto.internal_static_flyteidl_core_Container_descriptor;
    }

    @java.lang.Override
    public com.flyteidl.core.Container getDefaultInstanceForType() {
      return com.flyteidl.core.Container.getDefaultInstance();
    }

    @java.lang.Override
    public com.flyteidl.core.Container build() {
      com.flyteidl.core.Container result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.flyteidl.core.Container buildPartial() {
      com.flyteidl.core.Container result = new com.flyteidl.core.Container(this);
      int from_bitField0_ = bitField0_;
      result.image_ = image_;
      if (((bitField0_ & 0x00000001) != 0)) {
        command_ = command_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000001);
      }
      result.command_ = command_;
      if (((bitField0_ & 0x00000002) != 0)) {
        args_ = args_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000002);
      }
      result.args_ = args_;
      if (resourcesBuilder_ == null) {
        result.resources_ = resources_;
      } else {
        result.resources_ = resourcesBuilder_.build();
      }
      if (envBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0)) {
          env_ = java.util.Collections.unmodifiableList(env_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.env_ = env_;
      } else {
        result.env_ = envBuilder_.build();
      }
      if (configBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0)) {
          config_ = java.util.Collections.unmodifiableList(config_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.config_ = config_;
      } else {
        result.config_ = configBuilder_.build();
      }
      if (portsBuilder_ == null) {
        if (((bitField0_ & 0x00000010) != 0)) {
          ports_ = java.util.Collections.unmodifiableList(ports_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.ports_ = ports_;
      } else {
        result.ports_ = portsBuilder_.build();
      }
      if (dataConfigBuilder_ == null) {
        result.dataConfig_ = dataConfig_;
      } else {
        result.dataConfig_ = dataConfigBuilder_.build();
      }
      result.architecture_ = architecture_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.flyteidl.core.Container) {
        return mergeFrom((com.flyteidl.core.Container)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.flyteidl.core.Container other) {
      if (other == com.flyteidl.core.Container.getDefaultInstance()) return this;
      if (!other.getImage().isEmpty()) {
        image_ = other.image_;
        onChanged();
      }
      if (!other.command_.isEmpty()) {
        if (command_.isEmpty()) {
          command_ = other.command_;
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          ensureCommandIsMutable();
          command_.addAll(other.command_);
        }
        onChanged();
      }
      if (!other.args_.isEmpty()) {
        if (args_.isEmpty()) {
          args_ = other.args_;
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          ensureArgsIsMutable();
          args_.addAll(other.args_);
        }
        onChanged();
      }
      if (other.hasResources()) {
        mergeResources(other.getResources());
      }
      if (envBuilder_ == null) {
        if (!other.env_.isEmpty()) {
          if (env_.isEmpty()) {
            env_ = other.env_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureEnvIsMutable();
            env_.addAll(other.env_);
          }
          onChanged();
        }
      } else {
        if (!other.env_.isEmpty()) {
          if (envBuilder_.isEmpty()) {
            envBuilder_.dispose();
            envBuilder_ = null;
            env_ = other.env_;
            bitField0_ = (bitField0_ & ~0x00000004);
            envBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getEnvFieldBuilder() : null;
          } else {
            envBuilder_.addAllMessages(other.env_);
          }
        }
      }
      if (configBuilder_ == null) {
        if (!other.config_.isEmpty()) {
          if (config_.isEmpty()) {
            config_ = other.config_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureConfigIsMutable();
            config_.addAll(other.config_);
          }
          onChanged();
        }
      } else {
        if (!other.config_.isEmpty()) {
          if (configBuilder_.isEmpty()) {
            configBuilder_.dispose();
            configBuilder_ = null;
            config_ = other.config_;
            bitField0_ = (bitField0_ & ~0x00000008);
            configBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getConfigFieldBuilder() : null;
          } else {
            configBuilder_.addAllMessages(other.config_);
          }
        }
      }
      if (portsBuilder_ == null) {
        if (!other.ports_.isEmpty()) {
          if (ports_.isEmpty()) {
            ports_ = other.ports_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensurePortsIsMutable();
            ports_.addAll(other.ports_);
          }
          onChanged();
        }
      } else {
        if (!other.ports_.isEmpty()) {
          if (portsBuilder_.isEmpty()) {
            portsBuilder_.dispose();
            portsBuilder_ = null;
            ports_ = other.ports_;
            bitField0_ = (bitField0_ & ~0x00000010);
            portsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getPortsFieldBuilder() : null;
          } else {
            portsBuilder_.addAllMessages(other.ports_);
          }
        }
      }
      if (other.hasDataConfig()) {
        mergeDataConfig(other.getDataConfig());
      }
      if (other.architecture_ != 0) {
        setArchitectureValue(other.getArchitectureValue());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.flyteidl.core.Container parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.flyteidl.core.Container) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.lang.Object image_ = "";
    /**
     * <pre>
     * Container image url. Eg: docker/redis:latest
     * </pre>
     *
     * <code>string image = 1 [json_name = "image"];</code>
     * @return The image.
     */
    public java.lang.String getImage() {
      java.lang.Object ref = image_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        image_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Container image url. Eg: docker/redis:latest
     * </pre>
     *
     * <code>string image = 1 [json_name = "image"];</code>
     * @return The bytes for image.
     */
    public com.google.protobuf.ByteString
        getImageBytes() {
      java.lang.Object ref = image_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        image_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Container image url. Eg: docker/redis:latest
     * </pre>
     *
     * <code>string image = 1 [json_name = "image"];</code>
     * @param value The image to set.
     * @return This builder for chaining.
     */
    public Builder setImage(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      image_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Container image url. Eg: docker/redis:latest
     * </pre>
     *
     * <code>string image = 1 [json_name = "image"];</code>
     * @return This builder for chaining.
     */
    public Builder clearImage() {
      
      image_ = getDefaultInstance().getImage();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Container image url. Eg: docker/redis:latest
     * </pre>
     *
     * <code>string image = 1 [json_name = "image"];</code>
     * @param value The bytes for image to set.
     * @return This builder for chaining.
     */
    public Builder setImageBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      image_ = value;
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringList command_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureCommandIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        command_ = new com.google.protobuf.LazyStringArrayList(command_);
        bitField0_ |= 0x00000001;
       }
    }
    /**
     * <pre>
     * Command to be executed, if not provided, the default entrypoint in the container image will be used.
     * </pre>
     *
     * <code>repeated string command = 2 [json_name = "command"];</code>
     * @return A list containing the command.
     */
    public com.google.protobuf.ProtocolStringList
        getCommandList() {
      return command_.getUnmodifiableView();
    }
    /**
     * <pre>
     * Command to be executed, if not provided, the default entrypoint in the container image will be used.
     * </pre>
     *
     * <code>repeated string command = 2 [json_name = "command"];</code>
     * @return The count of command.
     */
    public int getCommandCount() {
      return command_.size();
    }
    /**
     * <pre>
     * Command to be executed, if not provided, the default entrypoint in the container image will be used.
     * </pre>
     *
     * <code>repeated string command = 2 [json_name = "command"];</code>
     * @param index The index of the element to return.
     * @return The command at the given index.
     */
    public java.lang.String getCommand(int index) {
      return command_.get(index);
    }
    /**
     * <pre>
     * Command to be executed, if not provided, the default entrypoint in the container image will be used.
     * </pre>
     *
     * <code>repeated string command = 2 [json_name = "command"];</code>
     * @param index The index of the value to return.
     * @return The bytes of the command at the given index.
     */
    public com.google.protobuf.ByteString
        getCommandBytes(int index) {
      return command_.getByteString(index);
    }
    /**
     * <pre>
     * Command to be executed, if not provided, the default entrypoint in the container image will be used.
     * </pre>
     *
     * <code>repeated string command = 2 [json_name = "command"];</code>
     * @param index The index to set the value at.
     * @param value The command to set.
     * @return This builder for chaining.
     */
    public Builder setCommand(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureCommandIsMutable();
      command_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Command to be executed, if not provided, the default entrypoint in the container image will be used.
     * </pre>
     *
     * <code>repeated string command = 2 [json_name = "command"];</code>
     * @param value The command to add.
     * @return This builder for chaining.
     */
    public Builder addCommand(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureCommandIsMutable();
      command_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Command to be executed, if not provided, the default entrypoint in the container image will be used.
     * </pre>
     *
     * <code>repeated string command = 2 [json_name = "command"];</code>
     * @param values The command to add.
     * @return This builder for chaining.
     */
    public Builder addAllCommand(
        java.lang.Iterable<java.lang.String> values) {
      ensureCommandIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, command_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Command to be executed, if not provided, the default entrypoint in the container image will be used.
     * </pre>
     *
     * <code>repeated string command = 2 [json_name = "command"];</code>
     * @return This builder for chaining.
     */
    public Builder clearCommand() {
      command_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Command to be executed, if not provided, the default entrypoint in the container image will be used.
     * </pre>
     *
     * <code>repeated string command = 2 [json_name = "command"];</code>
     * @param value The bytes of the command to add.
     * @return This builder for chaining.
     */
    public Builder addCommandBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureCommandIsMutable();
      command_.add(value);
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringList args_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureArgsIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        args_ = new com.google.protobuf.LazyStringArrayList(args_);
        bitField0_ |= 0x00000002;
       }
    }
    /**
     * <pre>
     * These will default to Flyte given paths. If provided, the system will not append known paths. If the task still
     * needs flyte's inputs and outputs path, add $(FLYTE_INPUT_FILE), $(FLYTE_OUTPUT_FILE) wherever makes sense and the
     * system will populate these before executing the container.
     * </pre>
     *
     * <code>repeated string args = 3 [json_name = "args"];</code>
     * @return A list containing the args.
     */
    public com.google.protobuf.ProtocolStringList
        getArgsList() {
      return args_.getUnmodifiableView();
    }
    /**
     * <pre>
     * These will default to Flyte given paths. If provided, the system will not append known paths. If the task still
     * needs flyte's inputs and outputs path, add $(FLYTE_INPUT_FILE), $(FLYTE_OUTPUT_FILE) wherever makes sense and the
     * system will populate these before executing the container.
     * </pre>
     *
     * <code>repeated string args = 3 [json_name = "args"];</code>
     * @return The count of args.
     */
    public int getArgsCount() {
      return args_.size();
    }
    /**
     * <pre>
     * These will default to Flyte given paths. If provided, the system will not append known paths. If the task still
     * needs flyte's inputs and outputs path, add $(FLYTE_INPUT_FILE), $(FLYTE_OUTPUT_FILE) wherever makes sense and the
     * system will populate these before executing the container.
     * </pre>
     *
     * <code>repeated string args = 3 [json_name = "args"];</code>
     * @param index The index of the element to return.
     * @return The args at the given index.
     */
    public java.lang.String getArgs(int index) {
      return args_.get(index);
    }
    /**
     * <pre>
     * These will default to Flyte given paths. If provided, the system will not append known paths. If the task still
     * needs flyte's inputs and outputs path, add $(FLYTE_INPUT_FILE), $(FLYTE_OUTPUT_FILE) wherever makes sense and the
     * system will populate these before executing the container.
     * </pre>
     *
     * <code>repeated string args = 3 [json_name = "args"];</code>
     * @param index The index of the value to return.
     * @return The bytes of the args at the given index.
     */
    public com.google.protobuf.ByteString
        getArgsBytes(int index) {
      return args_.getByteString(index);
    }
    /**
     * <pre>
     * These will default to Flyte given paths. If provided, the system will not append known paths. If the task still
     * needs flyte's inputs and outputs path, add $(FLYTE_INPUT_FILE), $(FLYTE_OUTPUT_FILE) wherever makes sense and the
     * system will populate these before executing the container.
     * </pre>
     *
     * <code>repeated string args = 3 [json_name = "args"];</code>
     * @param index The index to set the value at.
     * @param value The args to set.
     * @return This builder for chaining.
     */
    public Builder setArgs(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureArgsIsMutable();
      args_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * These will default to Flyte given paths. If provided, the system will not append known paths. If the task still
     * needs flyte's inputs and outputs path, add $(FLYTE_INPUT_FILE), $(FLYTE_OUTPUT_FILE) wherever makes sense and the
     * system will populate these before executing the container.
     * </pre>
     *
     * <code>repeated string args = 3 [json_name = "args"];</code>
     * @param value The args to add.
     * @return This builder for chaining.
     */
    public Builder addArgs(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureArgsIsMutable();
      args_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * These will default to Flyte given paths. If provided, the system will not append known paths. If the task still
     * needs flyte's inputs and outputs path, add $(FLYTE_INPUT_FILE), $(FLYTE_OUTPUT_FILE) wherever makes sense and the
     * system will populate these before executing the container.
     * </pre>
     *
     * <code>repeated string args = 3 [json_name = "args"];</code>
     * @param values The args to add.
     * @return This builder for chaining.
     */
    public Builder addAllArgs(
        java.lang.Iterable<java.lang.String> values) {
      ensureArgsIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, args_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * These will default to Flyte given paths. If provided, the system will not append known paths. If the task still
     * needs flyte's inputs and outputs path, add $(FLYTE_INPUT_FILE), $(FLYTE_OUTPUT_FILE) wherever makes sense and the
     * system will populate these before executing the container.
     * </pre>
     *
     * <code>repeated string args = 3 [json_name = "args"];</code>
     * @return This builder for chaining.
     */
    public Builder clearArgs() {
      args_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * These will default to Flyte given paths. If provided, the system will not append known paths. If the task still
     * needs flyte's inputs and outputs path, add $(FLYTE_INPUT_FILE), $(FLYTE_OUTPUT_FILE) wherever makes sense and the
     * system will populate these before executing the container.
     * </pre>
     *
     * <code>repeated string args = 3 [json_name = "args"];</code>
     * @param value The bytes of the args to add.
     * @return This builder for chaining.
     */
    public Builder addArgsBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureArgsIsMutable();
      args_.add(value);
      onChanged();
      return this;
    }

    private com.flyteidl.core.Resources resources_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.flyteidl.core.Resources, com.flyteidl.core.Resources.Builder, com.flyteidl.core.ResourcesOrBuilder> resourcesBuilder_;
    /**
     * <pre>
     * Container resources requirement as specified by the container engine.
     * </pre>
     *
     * <code>.flyteidl.core.Resources resources = 4 [json_name = "resources"];</code>
     * @return Whether the resources field is set.
     */
    public boolean hasResources() {
      return resourcesBuilder_ != null || resources_ != null;
    }
    /**
     * <pre>
     * Container resources requirement as specified by the container engine.
     * </pre>
     *
     * <code>.flyteidl.core.Resources resources = 4 [json_name = "resources"];</code>
     * @return The resources.
     */
    public com.flyteidl.core.Resources getResources() {
      if (resourcesBuilder_ == null) {
        return resources_ == null ? com.flyteidl.core.Resources.getDefaultInstance() : resources_;
      } else {
        return resourcesBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Container resources requirement as specified by the container engine.
     * </pre>
     *
     * <code>.flyteidl.core.Resources resources = 4 [json_name = "resources"];</code>
     */
    public Builder setResources(com.flyteidl.core.Resources value) {
      if (resourcesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        resources_ = value;
        onChanged();
      } else {
        resourcesBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Container resources requirement as specified by the container engine.
     * </pre>
     *
     * <code>.flyteidl.core.Resources resources = 4 [json_name = "resources"];</code>
     */
    public Builder setResources(
        com.flyteidl.core.Resources.Builder builderForValue) {
      if (resourcesBuilder_ == null) {
        resources_ = builderForValue.build();
        onChanged();
      } else {
        resourcesBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Container resources requirement as specified by the container engine.
     * </pre>
     *
     * <code>.flyteidl.core.Resources resources = 4 [json_name = "resources"];</code>
     */
    public Builder mergeResources(com.flyteidl.core.Resources value) {
      if (resourcesBuilder_ == null) {
        if (resources_ != null) {
          resources_ =
            com.flyteidl.core.Resources.newBuilder(resources_).mergeFrom(value).buildPartial();
        } else {
          resources_ = value;
        }
        onChanged();
      } else {
        resourcesBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Container resources requirement as specified by the container engine.
     * </pre>
     *
     * <code>.flyteidl.core.Resources resources = 4 [json_name = "resources"];</code>
     */
    public Builder clearResources() {
      if (resourcesBuilder_ == null) {
        resources_ = null;
        onChanged();
      } else {
        resources_ = null;
        resourcesBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Container resources requirement as specified by the container engine.
     * </pre>
     *
     * <code>.flyteidl.core.Resources resources = 4 [json_name = "resources"];</code>
     */
    public com.flyteidl.core.Resources.Builder getResourcesBuilder() {
      
      onChanged();
      return getResourcesFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Container resources requirement as specified by the container engine.
     * </pre>
     *
     * <code>.flyteidl.core.Resources resources = 4 [json_name = "resources"];</code>
     */
    public com.flyteidl.core.ResourcesOrBuilder getResourcesOrBuilder() {
      if (resourcesBuilder_ != null) {
        return resourcesBuilder_.getMessageOrBuilder();
      } else {
        return resources_ == null ?
            com.flyteidl.core.Resources.getDefaultInstance() : resources_;
      }
    }
    /**
     * <pre>
     * Container resources requirement as specified by the container engine.
     * </pre>
     *
     * <code>.flyteidl.core.Resources resources = 4 [json_name = "resources"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.flyteidl.core.Resources, com.flyteidl.core.Resources.Builder, com.flyteidl.core.ResourcesOrBuilder> 
        getResourcesFieldBuilder() {
      if (resourcesBuilder_ == null) {
        resourcesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.flyteidl.core.Resources, com.flyteidl.core.Resources.Builder, com.flyteidl.core.ResourcesOrBuilder>(
                getResources(),
                getParentForChildren(),
                isClean());
        resources_ = null;
      }
      return resourcesBuilder_;
    }

    private java.util.List<com.flyteidl.core.KeyValuePair> env_ =
      java.util.Collections.emptyList();
    private void ensureEnvIsMutable() {
      if (!((bitField0_ & 0x00000004) != 0)) {
        env_ = new java.util.ArrayList<com.flyteidl.core.KeyValuePair>(env_);
        bitField0_ |= 0x00000004;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.flyteidl.core.KeyValuePair, com.flyteidl.core.KeyValuePair.Builder, com.flyteidl.core.KeyValuePairOrBuilder> envBuilder_;

    /**
     * <pre>
     * Environment variables will be set as the container is starting up.
     * </pre>
     *
     * <code>repeated .flyteidl.core.KeyValuePair env = 5 [json_name = "env"];</code>
     */
    public java.util.List<com.flyteidl.core.KeyValuePair> getEnvList() {
      if (envBuilder_ == null) {
        return java.util.Collections.unmodifiableList(env_);
      } else {
        return envBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Environment variables will be set as the container is starting up.
     * </pre>
     *
     * <code>repeated .flyteidl.core.KeyValuePair env = 5 [json_name = "env"];</code>
     */
    public int getEnvCount() {
      if (envBuilder_ == null) {
        return env_.size();
      } else {
        return envBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Environment variables will be set as the container is starting up.
     * </pre>
     *
     * <code>repeated .flyteidl.core.KeyValuePair env = 5 [json_name = "env"];</code>
     */
    public com.flyteidl.core.KeyValuePair getEnv(int index) {
      if (envBuilder_ == null) {
        return env_.get(index);
      } else {
        return envBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Environment variables will be set as the container is starting up.
     * </pre>
     *
     * <code>repeated .flyteidl.core.KeyValuePair env = 5 [json_name = "env"];</code>
     */
    public Builder setEnv(
        int index, com.flyteidl.core.KeyValuePair value) {
      if (envBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureEnvIsMutable();
        env_.set(index, value);
        onChanged();
      } else {
        envBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Environment variables will be set as the container is starting up.
     * </pre>
     *
     * <code>repeated .flyteidl.core.KeyValuePair env = 5 [json_name = "env"];</code>
     */
    public Builder setEnv(
        int index, com.flyteidl.core.KeyValuePair.Builder builderForValue) {
      if (envBuilder_ == null) {
        ensureEnvIsMutable();
        env_.set(index, builderForValue.build());
        onChanged();
      } else {
        envBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Environment variables will be set as the container is starting up.
     * </pre>
     *
     * <code>repeated .flyteidl.core.KeyValuePair env = 5 [json_name = "env"];</code>
     */
    public Builder addEnv(com.flyteidl.core.KeyValuePair value) {
      if (envBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureEnvIsMutable();
        env_.add(value);
        onChanged();
      } else {
        envBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Environment variables will be set as the container is starting up.
     * </pre>
     *
     * <code>repeated .flyteidl.core.KeyValuePair env = 5 [json_name = "env"];</code>
     */
    public Builder addEnv(
        int index, com.flyteidl.core.KeyValuePair value) {
      if (envBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureEnvIsMutable();
        env_.add(index, value);
        onChanged();
      } else {
        envBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Environment variables will be set as the container is starting up.
     * </pre>
     *
     * <code>repeated .flyteidl.core.KeyValuePair env = 5 [json_name = "env"];</code>
     */
    public Builder addEnv(
        com.flyteidl.core.KeyValuePair.Builder builderForValue) {
      if (envBuilder_ == null) {
        ensureEnvIsMutable();
        env_.add(builderForValue.build());
        onChanged();
      } else {
        envBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Environment variables will be set as the container is starting up.
     * </pre>
     *
     * <code>repeated .flyteidl.core.KeyValuePair env = 5 [json_name = "env"];</code>
     */
    public Builder addEnv(
        int index, com.flyteidl.core.KeyValuePair.Builder builderForValue) {
      if (envBuilder_ == null) {
        ensureEnvIsMutable();
        env_.add(index, builderForValue.build());
        onChanged();
      } else {
        envBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Environment variables will be set as the container is starting up.
     * </pre>
     *
     * <code>repeated .flyteidl.core.KeyValuePair env = 5 [json_name = "env"];</code>
     */
    public Builder addAllEnv(
        java.lang.Iterable<? extends com.flyteidl.core.KeyValuePair> values) {
      if (envBuilder_ == null) {
        ensureEnvIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, env_);
        onChanged();
      } else {
        envBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Environment variables will be set as the container is starting up.
     * </pre>
     *
     * <code>repeated .flyteidl.core.KeyValuePair env = 5 [json_name = "env"];</code>
     */
    public Builder clearEnv() {
      if (envBuilder_ == null) {
        env_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
      } else {
        envBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Environment variables will be set as the container is starting up.
     * </pre>
     *
     * <code>repeated .flyteidl.core.KeyValuePair env = 5 [json_name = "env"];</code>
     */
    public Builder removeEnv(int index) {
      if (envBuilder_ == null) {
        ensureEnvIsMutable();
        env_.remove(index);
        onChanged();
      } else {
        envBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Environment variables will be set as the container is starting up.
     * </pre>
     *
     * <code>repeated .flyteidl.core.KeyValuePair env = 5 [json_name = "env"];</code>
     */
    public com.flyteidl.core.KeyValuePair.Builder getEnvBuilder(
        int index) {
      return getEnvFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Environment variables will be set as the container is starting up.
     * </pre>
     *
     * <code>repeated .flyteidl.core.KeyValuePair env = 5 [json_name = "env"];</code>
     */
    public com.flyteidl.core.KeyValuePairOrBuilder getEnvOrBuilder(
        int index) {
      if (envBuilder_ == null) {
        return env_.get(index);  } else {
        return envBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Environment variables will be set as the container is starting up.
     * </pre>
     *
     * <code>repeated .flyteidl.core.KeyValuePair env = 5 [json_name = "env"];</code>
     */
    public java.util.List<? extends com.flyteidl.core.KeyValuePairOrBuilder> 
         getEnvOrBuilderList() {
      if (envBuilder_ != null) {
        return envBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(env_);
      }
    }
    /**
     * <pre>
     * Environment variables will be set as the container is starting up.
     * </pre>
     *
     * <code>repeated .flyteidl.core.KeyValuePair env = 5 [json_name = "env"];</code>
     */
    public com.flyteidl.core.KeyValuePair.Builder addEnvBuilder() {
      return getEnvFieldBuilder().addBuilder(
          com.flyteidl.core.KeyValuePair.getDefaultInstance());
    }
    /**
     * <pre>
     * Environment variables will be set as the container is starting up.
     * </pre>
     *
     * <code>repeated .flyteidl.core.KeyValuePair env = 5 [json_name = "env"];</code>
     */
    public com.flyteidl.core.KeyValuePair.Builder addEnvBuilder(
        int index) {
      return getEnvFieldBuilder().addBuilder(
          index, com.flyteidl.core.KeyValuePair.getDefaultInstance());
    }
    /**
     * <pre>
     * Environment variables will be set as the container is starting up.
     * </pre>
     *
     * <code>repeated .flyteidl.core.KeyValuePair env = 5 [json_name = "env"];</code>
     */
    public java.util.List<com.flyteidl.core.KeyValuePair.Builder> 
         getEnvBuilderList() {
      return getEnvFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.flyteidl.core.KeyValuePair, com.flyteidl.core.KeyValuePair.Builder, com.flyteidl.core.KeyValuePairOrBuilder> 
        getEnvFieldBuilder() {
      if (envBuilder_ == null) {
        envBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.flyteidl.core.KeyValuePair, com.flyteidl.core.KeyValuePair.Builder, com.flyteidl.core.KeyValuePairOrBuilder>(
                env_,
                ((bitField0_ & 0x00000004) != 0),
                getParentForChildren(),
                isClean());
        env_ = null;
      }
      return envBuilder_;
    }

    private java.util.List<com.flyteidl.core.KeyValuePair> config_ =
      java.util.Collections.emptyList();
    private void ensureConfigIsMutable() {
      if (!((bitField0_ & 0x00000008) != 0)) {
        config_ = new java.util.ArrayList<com.flyteidl.core.KeyValuePair>(config_);
        bitField0_ |= 0x00000008;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.flyteidl.core.KeyValuePair, com.flyteidl.core.KeyValuePair.Builder, com.flyteidl.core.KeyValuePairOrBuilder> configBuilder_;

    /**
     * <pre>
     * Allows extra configs to be available for the container.
     * TODO: elaborate on how configs will become available.
     * Deprecated, please use TaskTemplate.config instead.
     * </pre>
     *
     * <code>repeated .flyteidl.core.KeyValuePair config = 6 [json_name = "config", deprecated = true];</code>
     */
    @java.lang.Deprecated public java.util.List<com.flyteidl.core.KeyValuePair> getConfigList() {
      if (configBuilder_ == null) {
        return java.util.Collections.unmodifiableList(config_);
      } else {
        return configBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Allows extra configs to be available for the container.
     * TODO: elaborate on how configs will become available.
     * Deprecated, please use TaskTemplate.config instead.
     * </pre>
     *
     * <code>repeated .flyteidl.core.KeyValuePair config = 6 [json_name = "config", deprecated = true];</code>
     */
    @java.lang.Deprecated public int getConfigCount() {
      if (configBuilder_ == null) {
        return config_.size();
      } else {
        return configBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Allows extra configs to be available for the container.
     * TODO: elaborate on how configs will become available.
     * Deprecated, please use TaskTemplate.config instead.
     * </pre>
     *
     * <code>repeated .flyteidl.core.KeyValuePair config = 6 [json_name = "config", deprecated = true];</code>
     */
    @java.lang.Deprecated public com.flyteidl.core.KeyValuePair getConfig(int index) {
      if (configBuilder_ == null) {
        return config_.get(index);
      } else {
        return configBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Allows extra configs to be available for the container.
     * TODO: elaborate on how configs will become available.
     * Deprecated, please use TaskTemplate.config instead.
     * </pre>
     *
     * <code>repeated .flyteidl.core.KeyValuePair config = 6 [json_name = "config", deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder setConfig(
        int index, com.flyteidl.core.KeyValuePair value) {
      if (configBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureConfigIsMutable();
        config_.set(index, value);
        onChanged();
      } else {
        configBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Allows extra configs to be available for the container.
     * TODO: elaborate on how configs will become available.
     * Deprecated, please use TaskTemplate.config instead.
     * </pre>
     *
     * <code>repeated .flyteidl.core.KeyValuePair config = 6 [json_name = "config", deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder setConfig(
        int index, com.flyteidl.core.KeyValuePair.Builder builderForValue) {
      if (configBuilder_ == null) {
        ensureConfigIsMutable();
        config_.set(index, builderForValue.build());
        onChanged();
      } else {
        configBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Allows extra configs to be available for the container.
     * TODO: elaborate on how configs will become available.
     * Deprecated, please use TaskTemplate.config instead.
     * </pre>
     *
     * <code>repeated .flyteidl.core.KeyValuePair config = 6 [json_name = "config", deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder addConfig(com.flyteidl.core.KeyValuePair value) {
      if (configBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureConfigIsMutable();
        config_.add(value);
        onChanged();
      } else {
        configBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Allows extra configs to be available for the container.
     * TODO: elaborate on how configs will become available.
     * Deprecated, please use TaskTemplate.config instead.
     * </pre>
     *
     * <code>repeated .flyteidl.core.KeyValuePair config = 6 [json_name = "config", deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder addConfig(
        int index, com.flyteidl.core.KeyValuePair value) {
      if (configBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureConfigIsMutable();
        config_.add(index, value);
        onChanged();
      } else {
        configBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Allows extra configs to be available for the container.
     * TODO: elaborate on how configs will become available.
     * Deprecated, please use TaskTemplate.config instead.
     * </pre>
     *
     * <code>repeated .flyteidl.core.KeyValuePair config = 6 [json_name = "config", deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder addConfig(
        com.flyteidl.core.KeyValuePair.Builder builderForValue) {
      if (configBuilder_ == null) {
        ensureConfigIsMutable();
        config_.add(builderForValue.build());
        onChanged();
      } else {
        configBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Allows extra configs to be available for the container.
     * TODO: elaborate on how configs will become available.
     * Deprecated, please use TaskTemplate.config instead.
     * </pre>
     *
     * <code>repeated .flyteidl.core.KeyValuePair config = 6 [json_name = "config", deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder addConfig(
        int index, com.flyteidl.core.KeyValuePair.Builder builderForValue) {
      if (configBuilder_ == null) {
        ensureConfigIsMutable();
        config_.add(index, builderForValue.build());
        onChanged();
      } else {
        configBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Allows extra configs to be available for the container.
     * TODO: elaborate on how configs will become available.
     * Deprecated, please use TaskTemplate.config instead.
     * </pre>
     *
     * <code>repeated .flyteidl.core.KeyValuePair config = 6 [json_name = "config", deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder addAllConfig(
        java.lang.Iterable<? extends com.flyteidl.core.KeyValuePair> values) {
      if (configBuilder_ == null) {
        ensureConfigIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, config_);
        onChanged();
      } else {
        configBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Allows extra configs to be available for the container.
     * TODO: elaborate on how configs will become available.
     * Deprecated, please use TaskTemplate.config instead.
     * </pre>
     *
     * <code>repeated .flyteidl.core.KeyValuePair config = 6 [json_name = "config", deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder clearConfig() {
      if (configBuilder_ == null) {
        config_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
      } else {
        configBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Allows extra configs to be available for the container.
     * TODO: elaborate on how configs will become available.
     * Deprecated, please use TaskTemplate.config instead.
     * </pre>
     *
     * <code>repeated .flyteidl.core.KeyValuePair config = 6 [json_name = "config", deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder removeConfig(int index) {
      if (configBuilder_ == null) {
        ensureConfigIsMutable();
        config_.remove(index);
        onChanged();
      } else {
        configBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Allows extra configs to be available for the container.
     * TODO: elaborate on how configs will become available.
     * Deprecated, please use TaskTemplate.config instead.
     * </pre>
     *
     * <code>repeated .flyteidl.core.KeyValuePair config = 6 [json_name = "config", deprecated = true];</code>
     */
    @java.lang.Deprecated public com.flyteidl.core.KeyValuePair.Builder getConfigBuilder(
        int index) {
      return getConfigFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Allows extra configs to be available for the container.
     * TODO: elaborate on how configs will become available.
     * Deprecated, please use TaskTemplate.config instead.
     * </pre>
     *
     * <code>repeated .flyteidl.core.KeyValuePair config = 6 [json_name = "config", deprecated = true];</code>
     */
    @java.lang.Deprecated public com.flyteidl.core.KeyValuePairOrBuilder getConfigOrBuilder(
        int index) {
      if (configBuilder_ == null) {
        return config_.get(index);  } else {
        return configBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Allows extra configs to be available for the container.
     * TODO: elaborate on how configs will become available.
     * Deprecated, please use TaskTemplate.config instead.
     * </pre>
     *
     * <code>repeated .flyteidl.core.KeyValuePair config = 6 [json_name = "config", deprecated = true];</code>
     */
    @java.lang.Deprecated public java.util.List<? extends com.flyteidl.core.KeyValuePairOrBuilder> 
         getConfigOrBuilderList() {
      if (configBuilder_ != null) {
        return configBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(config_);
      }
    }
    /**
     * <pre>
     * Allows extra configs to be available for the container.
     * TODO: elaborate on how configs will become available.
     * Deprecated, please use TaskTemplate.config instead.
     * </pre>
     *
     * <code>repeated .flyteidl.core.KeyValuePair config = 6 [json_name = "config", deprecated = true];</code>
     */
    @java.lang.Deprecated public com.flyteidl.core.KeyValuePair.Builder addConfigBuilder() {
      return getConfigFieldBuilder().addBuilder(
          com.flyteidl.core.KeyValuePair.getDefaultInstance());
    }
    /**
     * <pre>
     * Allows extra configs to be available for the container.
     * TODO: elaborate on how configs will become available.
     * Deprecated, please use TaskTemplate.config instead.
     * </pre>
     *
     * <code>repeated .flyteidl.core.KeyValuePair config = 6 [json_name = "config", deprecated = true];</code>
     */
    @java.lang.Deprecated public com.flyteidl.core.KeyValuePair.Builder addConfigBuilder(
        int index) {
      return getConfigFieldBuilder().addBuilder(
          index, com.flyteidl.core.KeyValuePair.getDefaultInstance());
    }
    /**
     * <pre>
     * Allows extra configs to be available for the container.
     * TODO: elaborate on how configs will become available.
     * Deprecated, please use TaskTemplate.config instead.
     * </pre>
     *
     * <code>repeated .flyteidl.core.KeyValuePair config = 6 [json_name = "config", deprecated = true];</code>
     */
    @java.lang.Deprecated public java.util.List<com.flyteidl.core.KeyValuePair.Builder> 
         getConfigBuilderList() {
      return getConfigFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.flyteidl.core.KeyValuePair, com.flyteidl.core.KeyValuePair.Builder, com.flyteidl.core.KeyValuePairOrBuilder> 
        getConfigFieldBuilder() {
      if (configBuilder_ == null) {
        configBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.flyteidl.core.KeyValuePair, com.flyteidl.core.KeyValuePair.Builder, com.flyteidl.core.KeyValuePairOrBuilder>(
                config_,
                ((bitField0_ & 0x00000008) != 0),
                getParentForChildren(),
                isClean());
        config_ = null;
      }
      return configBuilder_;
    }

    private java.util.List<com.flyteidl.core.ContainerPort> ports_ =
      java.util.Collections.emptyList();
    private void ensurePortsIsMutable() {
      if (!((bitField0_ & 0x00000010) != 0)) {
        ports_ = new java.util.ArrayList<com.flyteidl.core.ContainerPort>(ports_);
        bitField0_ |= 0x00000010;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.flyteidl.core.ContainerPort, com.flyteidl.core.ContainerPort.Builder, com.flyteidl.core.ContainerPortOrBuilder> portsBuilder_;

    /**
     * <pre>
     * Ports to open in the container. This feature is not supported by all execution engines. (e.g. supported on K8s but
     * not supported on AWS Batch)
     * Only K8s
     * </pre>
     *
     * <code>repeated .flyteidl.core.ContainerPort ports = 7 [json_name = "ports"];</code>
     */
    public java.util.List<com.flyteidl.core.ContainerPort> getPortsList() {
      if (portsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(ports_);
      } else {
        return portsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Ports to open in the container. This feature is not supported by all execution engines. (e.g. supported on K8s but
     * not supported on AWS Batch)
     * Only K8s
     * </pre>
     *
     * <code>repeated .flyteidl.core.ContainerPort ports = 7 [json_name = "ports"];</code>
     */
    public int getPortsCount() {
      if (portsBuilder_ == null) {
        return ports_.size();
      } else {
        return portsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Ports to open in the container. This feature is not supported by all execution engines. (e.g. supported on K8s but
     * not supported on AWS Batch)
     * Only K8s
     * </pre>
     *
     * <code>repeated .flyteidl.core.ContainerPort ports = 7 [json_name = "ports"];</code>
     */
    public com.flyteidl.core.ContainerPort getPorts(int index) {
      if (portsBuilder_ == null) {
        return ports_.get(index);
      } else {
        return portsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Ports to open in the container. This feature is not supported by all execution engines. (e.g. supported on K8s but
     * not supported on AWS Batch)
     * Only K8s
     * </pre>
     *
     * <code>repeated .flyteidl.core.ContainerPort ports = 7 [json_name = "ports"];</code>
     */
    public Builder setPorts(
        int index, com.flyteidl.core.ContainerPort value) {
      if (portsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePortsIsMutable();
        ports_.set(index, value);
        onChanged();
      } else {
        portsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Ports to open in the container. This feature is not supported by all execution engines. (e.g. supported on K8s but
     * not supported on AWS Batch)
     * Only K8s
     * </pre>
     *
     * <code>repeated .flyteidl.core.ContainerPort ports = 7 [json_name = "ports"];</code>
     */
    public Builder setPorts(
        int index, com.flyteidl.core.ContainerPort.Builder builderForValue) {
      if (portsBuilder_ == null) {
        ensurePortsIsMutable();
        ports_.set(index, builderForValue.build());
        onChanged();
      } else {
        portsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Ports to open in the container. This feature is not supported by all execution engines. (e.g. supported on K8s but
     * not supported on AWS Batch)
     * Only K8s
     * </pre>
     *
     * <code>repeated .flyteidl.core.ContainerPort ports = 7 [json_name = "ports"];</code>
     */
    public Builder addPorts(com.flyteidl.core.ContainerPort value) {
      if (portsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePortsIsMutable();
        ports_.add(value);
        onChanged();
      } else {
        portsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Ports to open in the container. This feature is not supported by all execution engines. (e.g. supported on K8s but
     * not supported on AWS Batch)
     * Only K8s
     * </pre>
     *
     * <code>repeated .flyteidl.core.ContainerPort ports = 7 [json_name = "ports"];</code>
     */
    public Builder addPorts(
        int index, com.flyteidl.core.ContainerPort value) {
      if (portsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePortsIsMutable();
        ports_.add(index, value);
        onChanged();
      } else {
        portsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Ports to open in the container. This feature is not supported by all execution engines. (e.g. supported on K8s but
     * not supported on AWS Batch)
     * Only K8s
     * </pre>
     *
     * <code>repeated .flyteidl.core.ContainerPort ports = 7 [json_name = "ports"];</code>
     */
    public Builder addPorts(
        com.flyteidl.core.ContainerPort.Builder builderForValue) {
      if (portsBuilder_ == null) {
        ensurePortsIsMutable();
        ports_.add(builderForValue.build());
        onChanged();
      } else {
        portsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Ports to open in the container. This feature is not supported by all execution engines. (e.g. supported on K8s but
     * not supported on AWS Batch)
     * Only K8s
     * </pre>
     *
     * <code>repeated .flyteidl.core.ContainerPort ports = 7 [json_name = "ports"];</code>
     */
    public Builder addPorts(
        int index, com.flyteidl.core.ContainerPort.Builder builderForValue) {
      if (portsBuilder_ == null) {
        ensurePortsIsMutable();
        ports_.add(index, builderForValue.build());
        onChanged();
      } else {
        portsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Ports to open in the container. This feature is not supported by all execution engines. (e.g. supported on K8s but
     * not supported on AWS Batch)
     * Only K8s
     * </pre>
     *
     * <code>repeated .flyteidl.core.ContainerPort ports = 7 [json_name = "ports"];</code>
     */
    public Builder addAllPorts(
        java.lang.Iterable<? extends com.flyteidl.core.ContainerPort> values) {
      if (portsBuilder_ == null) {
        ensurePortsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, ports_);
        onChanged();
      } else {
        portsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Ports to open in the container. This feature is not supported by all execution engines. (e.g. supported on K8s but
     * not supported on AWS Batch)
     * Only K8s
     * </pre>
     *
     * <code>repeated .flyteidl.core.ContainerPort ports = 7 [json_name = "ports"];</code>
     */
    public Builder clearPorts() {
      if (portsBuilder_ == null) {
        ports_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
      } else {
        portsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Ports to open in the container. This feature is not supported by all execution engines. (e.g. supported on K8s but
     * not supported on AWS Batch)
     * Only K8s
     * </pre>
     *
     * <code>repeated .flyteidl.core.ContainerPort ports = 7 [json_name = "ports"];</code>
     */
    public Builder removePorts(int index) {
      if (portsBuilder_ == null) {
        ensurePortsIsMutable();
        ports_.remove(index);
        onChanged();
      } else {
        portsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Ports to open in the container. This feature is not supported by all execution engines. (e.g. supported on K8s but
     * not supported on AWS Batch)
     * Only K8s
     * </pre>
     *
     * <code>repeated .flyteidl.core.ContainerPort ports = 7 [json_name = "ports"];</code>
     */
    public com.flyteidl.core.ContainerPort.Builder getPortsBuilder(
        int index) {
      return getPortsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Ports to open in the container. This feature is not supported by all execution engines. (e.g. supported on K8s but
     * not supported on AWS Batch)
     * Only K8s
     * </pre>
     *
     * <code>repeated .flyteidl.core.ContainerPort ports = 7 [json_name = "ports"];</code>
     */
    public com.flyteidl.core.ContainerPortOrBuilder getPortsOrBuilder(
        int index) {
      if (portsBuilder_ == null) {
        return ports_.get(index);  } else {
        return portsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Ports to open in the container. This feature is not supported by all execution engines. (e.g. supported on K8s but
     * not supported on AWS Batch)
     * Only K8s
     * </pre>
     *
     * <code>repeated .flyteidl.core.ContainerPort ports = 7 [json_name = "ports"];</code>
     */
    public java.util.List<? extends com.flyteidl.core.ContainerPortOrBuilder> 
         getPortsOrBuilderList() {
      if (portsBuilder_ != null) {
        return portsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(ports_);
      }
    }
    /**
     * <pre>
     * Ports to open in the container. This feature is not supported by all execution engines. (e.g. supported on K8s but
     * not supported on AWS Batch)
     * Only K8s
     * </pre>
     *
     * <code>repeated .flyteidl.core.ContainerPort ports = 7 [json_name = "ports"];</code>
     */
    public com.flyteidl.core.ContainerPort.Builder addPortsBuilder() {
      return getPortsFieldBuilder().addBuilder(
          com.flyteidl.core.ContainerPort.getDefaultInstance());
    }
    /**
     * <pre>
     * Ports to open in the container. This feature is not supported by all execution engines. (e.g. supported on K8s but
     * not supported on AWS Batch)
     * Only K8s
     * </pre>
     *
     * <code>repeated .flyteidl.core.ContainerPort ports = 7 [json_name = "ports"];</code>
     */
    public com.flyteidl.core.ContainerPort.Builder addPortsBuilder(
        int index) {
      return getPortsFieldBuilder().addBuilder(
          index, com.flyteidl.core.ContainerPort.getDefaultInstance());
    }
    /**
     * <pre>
     * Ports to open in the container. This feature is not supported by all execution engines. (e.g. supported on K8s but
     * not supported on AWS Batch)
     * Only K8s
     * </pre>
     *
     * <code>repeated .flyteidl.core.ContainerPort ports = 7 [json_name = "ports"];</code>
     */
    public java.util.List<com.flyteidl.core.ContainerPort.Builder> 
         getPortsBuilderList() {
      return getPortsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.flyteidl.core.ContainerPort, com.flyteidl.core.ContainerPort.Builder, com.flyteidl.core.ContainerPortOrBuilder> 
        getPortsFieldBuilder() {
      if (portsBuilder_ == null) {
        portsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.flyteidl.core.ContainerPort, com.flyteidl.core.ContainerPort.Builder, com.flyteidl.core.ContainerPortOrBuilder>(
                ports_,
                ((bitField0_ & 0x00000010) != 0),
                getParentForChildren(),
                isClean());
        ports_ = null;
      }
      return portsBuilder_;
    }

    private com.flyteidl.core.DataLoadingConfig dataConfig_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.flyteidl.core.DataLoadingConfig, com.flyteidl.core.DataLoadingConfig.Builder, com.flyteidl.core.DataLoadingConfigOrBuilder> dataConfigBuilder_;
    /**
     * <pre>
     * BETA: Optional configuration for DataLoading. If not specified, then default values are used.
     * This makes it possible to to run a completely portable container, that uses inputs and outputs
     * only from the local file-system and without having any reference to flyteidl. This is supported only on K8s at the moment.
     * If data loading is enabled, then data will be mounted in accompanying directories specified in the DataLoadingConfig. If the directories
     * are not specified, inputs will be mounted onto and outputs will be uploaded from a pre-determined file-system path. Refer to the documentation
     * to understand the default paths.
     * Only K8s
     * </pre>
     *
     * <code>.flyteidl.core.DataLoadingConfig data_config = 9 [json_name = "dataConfig"];</code>
     * @return Whether the dataConfig field is set.
     */
    public boolean hasDataConfig() {
      return dataConfigBuilder_ != null || dataConfig_ != null;
    }
    /**
     * <pre>
     * BETA: Optional configuration for DataLoading. If not specified, then default values are used.
     * This makes it possible to to run a completely portable container, that uses inputs and outputs
     * only from the local file-system and without having any reference to flyteidl. This is supported only on K8s at the moment.
     * If data loading is enabled, then data will be mounted in accompanying directories specified in the DataLoadingConfig. If the directories
     * are not specified, inputs will be mounted onto and outputs will be uploaded from a pre-determined file-system path. Refer to the documentation
     * to understand the default paths.
     * Only K8s
     * </pre>
     *
     * <code>.flyteidl.core.DataLoadingConfig data_config = 9 [json_name = "dataConfig"];</code>
     * @return The dataConfig.
     */
    public com.flyteidl.core.DataLoadingConfig getDataConfig() {
      if (dataConfigBuilder_ == null) {
        return dataConfig_ == null ? com.flyteidl.core.DataLoadingConfig.getDefaultInstance() : dataConfig_;
      } else {
        return dataConfigBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * BETA: Optional configuration for DataLoading. If not specified, then default values are used.
     * This makes it possible to to run a completely portable container, that uses inputs and outputs
     * only from the local file-system and without having any reference to flyteidl. This is supported only on K8s at the moment.
     * If data loading is enabled, then data will be mounted in accompanying directories specified in the DataLoadingConfig. If the directories
     * are not specified, inputs will be mounted onto and outputs will be uploaded from a pre-determined file-system path. Refer to the documentation
     * to understand the default paths.
     * Only K8s
     * </pre>
     *
     * <code>.flyteidl.core.DataLoadingConfig data_config = 9 [json_name = "dataConfig"];</code>
     */
    public Builder setDataConfig(com.flyteidl.core.DataLoadingConfig value) {
      if (dataConfigBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        dataConfig_ = value;
        onChanged();
      } else {
        dataConfigBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * BETA: Optional configuration for DataLoading. If not specified, then default values are used.
     * This makes it possible to to run a completely portable container, that uses inputs and outputs
     * only from the local file-system and without having any reference to flyteidl. This is supported only on K8s at the moment.
     * If data loading is enabled, then data will be mounted in accompanying directories specified in the DataLoadingConfig. If the directories
     * are not specified, inputs will be mounted onto and outputs will be uploaded from a pre-determined file-system path. Refer to the documentation
     * to understand the default paths.
     * Only K8s
     * </pre>
     *
     * <code>.flyteidl.core.DataLoadingConfig data_config = 9 [json_name = "dataConfig"];</code>
     */
    public Builder setDataConfig(
        com.flyteidl.core.DataLoadingConfig.Builder builderForValue) {
      if (dataConfigBuilder_ == null) {
        dataConfig_ = builderForValue.build();
        onChanged();
      } else {
        dataConfigBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * BETA: Optional configuration for DataLoading. If not specified, then default values are used.
     * This makes it possible to to run a completely portable container, that uses inputs and outputs
     * only from the local file-system and without having any reference to flyteidl. This is supported only on K8s at the moment.
     * If data loading is enabled, then data will be mounted in accompanying directories specified in the DataLoadingConfig. If the directories
     * are not specified, inputs will be mounted onto and outputs will be uploaded from a pre-determined file-system path. Refer to the documentation
     * to understand the default paths.
     * Only K8s
     * </pre>
     *
     * <code>.flyteidl.core.DataLoadingConfig data_config = 9 [json_name = "dataConfig"];</code>
     */
    public Builder mergeDataConfig(com.flyteidl.core.DataLoadingConfig value) {
      if (dataConfigBuilder_ == null) {
        if (dataConfig_ != null) {
          dataConfig_ =
            com.flyteidl.core.DataLoadingConfig.newBuilder(dataConfig_).mergeFrom(value).buildPartial();
        } else {
          dataConfig_ = value;
        }
        onChanged();
      } else {
        dataConfigBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * BETA: Optional configuration for DataLoading. If not specified, then default values are used.
     * This makes it possible to to run a completely portable container, that uses inputs and outputs
     * only from the local file-system and without having any reference to flyteidl. This is supported only on K8s at the moment.
     * If data loading is enabled, then data will be mounted in accompanying directories specified in the DataLoadingConfig. If the directories
     * are not specified, inputs will be mounted onto and outputs will be uploaded from a pre-determined file-system path. Refer to the documentation
     * to understand the default paths.
     * Only K8s
     * </pre>
     *
     * <code>.flyteidl.core.DataLoadingConfig data_config = 9 [json_name = "dataConfig"];</code>
     */
    public Builder clearDataConfig() {
      if (dataConfigBuilder_ == null) {
        dataConfig_ = null;
        onChanged();
      } else {
        dataConfig_ = null;
        dataConfigBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * BETA: Optional configuration for DataLoading. If not specified, then default values are used.
     * This makes it possible to to run a completely portable container, that uses inputs and outputs
     * only from the local file-system and without having any reference to flyteidl. This is supported only on K8s at the moment.
     * If data loading is enabled, then data will be mounted in accompanying directories specified in the DataLoadingConfig. If the directories
     * are not specified, inputs will be mounted onto and outputs will be uploaded from a pre-determined file-system path. Refer to the documentation
     * to understand the default paths.
     * Only K8s
     * </pre>
     *
     * <code>.flyteidl.core.DataLoadingConfig data_config = 9 [json_name = "dataConfig"];</code>
     */
    public com.flyteidl.core.DataLoadingConfig.Builder getDataConfigBuilder() {
      
      onChanged();
      return getDataConfigFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * BETA: Optional configuration for DataLoading. If not specified, then default values are used.
     * This makes it possible to to run a completely portable container, that uses inputs and outputs
     * only from the local file-system and without having any reference to flyteidl. This is supported only on K8s at the moment.
     * If data loading is enabled, then data will be mounted in accompanying directories specified in the DataLoadingConfig. If the directories
     * are not specified, inputs will be mounted onto and outputs will be uploaded from a pre-determined file-system path. Refer to the documentation
     * to understand the default paths.
     * Only K8s
     * </pre>
     *
     * <code>.flyteidl.core.DataLoadingConfig data_config = 9 [json_name = "dataConfig"];</code>
     */
    public com.flyteidl.core.DataLoadingConfigOrBuilder getDataConfigOrBuilder() {
      if (dataConfigBuilder_ != null) {
        return dataConfigBuilder_.getMessageOrBuilder();
      } else {
        return dataConfig_ == null ?
            com.flyteidl.core.DataLoadingConfig.getDefaultInstance() : dataConfig_;
      }
    }
    /**
     * <pre>
     * BETA: Optional configuration for DataLoading. If not specified, then default values are used.
     * This makes it possible to to run a completely portable container, that uses inputs and outputs
     * only from the local file-system and without having any reference to flyteidl. This is supported only on K8s at the moment.
     * If data loading is enabled, then data will be mounted in accompanying directories specified in the DataLoadingConfig. If the directories
     * are not specified, inputs will be mounted onto and outputs will be uploaded from a pre-determined file-system path. Refer to the documentation
     * to understand the default paths.
     * Only K8s
     * </pre>
     *
     * <code>.flyteidl.core.DataLoadingConfig data_config = 9 [json_name = "dataConfig"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.flyteidl.core.DataLoadingConfig, com.flyteidl.core.DataLoadingConfig.Builder, com.flyteidl.core.DataLoadingConfigOrBuilder> 
        getDataConfigFieldBuilder() {
      if (dataConfigBuilder_ == null) {
        dataConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.flyteidl.core.DataLoadingConfig, com.flyteidl.core.DataLoadingConfig.Builder, com.flyteidl.core.DataLoadingConfigOrBuilder>(
                getDataConfig(),
                getParentForChildren(),
                isClean());
        dataConfig_ = null;
      }
      return dataConfigBuilder_;
    }

    private int architecture_ = 0;
    /**
     * <code>.flyteidl.core.Container.Architecture architecture = 10 [json_name = "architecture"];</code>
     * @return The enum numeric value on the wire for architecture.
     */
    @java.lang.Override public int getArchitectureValue() {
      return architecture_;
    }
    /**
     * <code>.flyteidl.core.Container.Architecture architecture = 10 [json_name = "architecture"];</code>
     * @param value The enum numeric value on the wire for architecture to set.
     * @return This builder for chaining.
     */
    public Builder setArchitectureValue(int value) {
      
      architecture_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>.flyteidl.core.Container.Architecture architecture = 10 [json_name = "architecture"];</code>
     * @return The architecture.
     */
    @java.lang.Override
    public com.flyteidl.core.Container.Architecture getArchitecture() {
      @SuppressWarnings("deprecation")
      com.flyteidl.core.Container.Architecture result = com.flyteidl.core.Container.Architecture.valueOf(architecture_);
      return result == null ? com.flyteidl.core.Container.Architecture.UNRECOGNIZED : result;
    }
    /**
     * <code>.flyteidl.core.Container.Architecture architecture = 10 [json_name = "architecture"];</code>
     * @param value The architecture to set.
     * @return This builder for chaining.
     */
    public Builder setArchitecture(com.flyteidl.core.Container.Architecture value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      architecture_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <code>.flyteidl.core.Container.Architecture architecture = 10 [json_name = "architecture"];</code>
     * @return This builder for chaining.
     */
    public Builder clearArchitecture() {
      
      architecture_ = 0;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:flyteidl.core.Container)
  }

  // @@protoc_insertion_point(class_scope:flyteidl.core.Container)
  private static final com.flyteidl.core.Container DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.flyteidl.core.Container();
  }

  public static com.flyteidl.core.Container getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Container>
      PARSER = new com.google.protobuf.AbstractParser<Container>() {
    @java.lang.Override
    public Container parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new Container(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Container> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Container> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.flyteidl.core.Container getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

