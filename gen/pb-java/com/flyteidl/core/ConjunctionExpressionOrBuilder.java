// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/condition.proto

package com.flyteidl.core;

public interface ConjunctionExpressionOrBuilder extends
    // @@protoc_insertion_point(interface_extends:flyteidl.core.ConjunctionExpression)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>.flyteidl.core.ConjunctionExpression.LogicalOperator operator = 1 [json_name = "operator"];</code>
   * @return The enum numeric value on the wire for operator.
   */
  int getOperatorValue();
  /**
   * <code>.flyteidl.core.ConjunctionExpression.LogicalOperator operator = 1 [json_name = "operator"];</code>
   * @return The operator.
   */
  com.flyteidl.core.ConjunctionExpression.LogicalOperator getOperator();

  /**
   * <code>.flyteidl.core.BooleanExpression left_expression = 2 [json_name = "leftExpression"];</code>
   * @return Whether the leftExpression field is set.
   */
  boolean hasLeftExpression();
  /**
   * <code>.flyteidl.core.BooleanExpression left_expression = 2 [json_name = "leftExpression"];</code>
   * @return The leftExpression.
   */
  com.flyteidl.core.BooleanExpression getLeftExpression();
  /**
   * <code>.flyteidl.core.BooleanExpression left_expression = 2 [json_name = "leftExpression"];</code>
   */
  com.flyteidl.core.BooleanExpressionOrBuilder getLeftExpressionOrBuilder();

  /**
   * <code>.flyteidl.core.BooleanExpression right_expression = 3 [json_name = "rightExpression"];</code>
   * @return Whether the rightExpression field is set.
   */
  boolean hasRightExpression();
  /**
   * <code>.flyteidl.core.BooleanExpression right_expression = 3 [json_name = "rightExpression"];</code>
   * @return The rightExpression.
   */
  com.flyteidl.core.BooleanExpression getRightExpression();
  /**
   * <code>.flyteidl.core.BooleanExpression right_expression = 3 [json_name = "rightExpression"];</code>
   */
  com.flyteidl.core.BooleanExpressionOrBuilder getRightExpressionOrBuilder();
}
