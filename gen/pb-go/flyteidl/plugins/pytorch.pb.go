// Code generated by protoc-gen-go. DO NOT EDIT.
// source: flyteidl/plugins/pytorch.proto

package plugins

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Custom proto for plugin that enables distributed training using https://github.com/kubeflow/pytorch-operator
type DistributedPyTorchTrainingTask struct {
	// number of worker replicas spawned in the cluster for this job
	Workers int32 `protobuf:"varint,1,opt,name=workers,proto3" json:"workers,omitempty"`
	// config for an elastic pytorch job
	// https://github.com/kubeflow/training-operator/blob/master/pkg/apis/kubeflow.org/v1/pytorch_types.go
	RDZVBackend          string   `protobuf:"bytes,2,opt,name=RDZVBackend,proto3" json:"RDZVBackend,omitempty"`
	MinReplicas          int32    `protobuf:"varint,3,opt,name=minReplicas,proto3" json:"minReplicas,omitempty"`
	MaxReplicas          int32    `protobuf:"varint,4,opt,name=maxReplicas,proto3" json:"maxReplicas,omitempty"`
	NProcPerNode         int32    `protobuf:"varint,5,opt,name=nProcPerNode,proto3" json:"nProcPerNode,omitempty"`
	MaxRestarts          int32    `protobuf:"varint,6,opt,name=maxRestarts,proto3" json:"maxRestarts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DistributedPyTorchTrainingTask) Reset()         { *m = DistributedPyTorchTrainingTask{} }
func (m *DistributedPyTorchTrainingTask) String() string { return proto.CompactTextString(m) }
func (*DistributedPyTorchTrainingTask) ProtoMessage()    {}
func (*DistributedPyTorchTrainingTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_4df8a9374b28b766, []int{0}
}

func (m *DistributedPyTorchTrainingTask) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DistributedPyTorchTrainingTask.Unmarshal(m, b)
}
func (m *DistributedPyTorchTrainingTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DistributedPyTorchTrainingTask.Marshal(b, m, deterministic)
}
func (m *DistributedPyTorchTrainingTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DistributedPyTorchTrainingTask.Merge(m, src)
}
func (m *DistributedPyTorchTrainingTask) XXX_Size() int {
	return xxx_messageInfo_DistributedPyTorchTrainingTask.Size(m)
}
func (m *DistributedPyTorchTrainingTask) XXX_DiscardUnknown() {
	xxx_messageInfo_DistributedPyTorchTrainingTask.DiscardUnknown(m)
}

var xxx_messageInfo_DistributedPyTorchTrainingTask proto.InternalMessageInfo

func (m *DistributedPyTorchTrainingTask) GetWorkers() int32 {
	if m != nil {
		return m.Workers
	}
	return 0
}

func (m *DistributedPyTorchTrainingTask) GetRDZVBackend() string {
	if m != nil {
		return m.RDZVBackend
	}
	return ""
}

func (m *DistributedPyTorchTrainingTask) GetMinReplicas() int32 {
	if m != nil {
		return m.MinReplicas
	}
	return 0
}

func (m *DistributedPyTorchTrainingTask) GetMaxReplicas() int32 {
	if m != nil {
		return m.MaxReplicas
	}
	return 0
}

func (m *DistributedPyTorchTrainingTask) GetNProcPerNode() int32 {
	if m != nil {
		return m.NProcPerNode
	}
	return 0
}

func (m *DistributedPyTorchTrainingTask) GetMaxRestarts() int32 {
	if m != nil {
		return m.MaxRestarts
	}
	return 0
}

func init() {
	proto.RegisterType((*DistributedPyTorchTrainingTask)(nil), "flyteidl.plugins.DistributedPyTorchTrainingTask")
}

func init() { proto.RegisterFile("flyteidl/plugins/pytorch.proto", fileDescriptor_4df8a9374b28b766) }

var fileDescriptor_4df8a9374b28b766 = []byte{
	// 238 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0x31, 0x4f, 0xc3, 0x30,
	0x10, 0x46, 0x15, 0xa0, 0x45, 0x18, 0x06, 0x94, 0xc9, 0x53, 0x15, 0x75, 0xea, 0x42, 0x3c, 0x30,
	0x20, 0xd6, 0xaa, 0x33, 0x8a, 0xa2, 0x88, 0xa1, 0x9b, 0xe3, 0x18, 0xf7, 0x94, 0xd4, 0x67, 0x9d,
	0x1d, 0x41, 0xfe, 0x30, 0xbf, 0x03, 0xd5, 0x34, 0x21, 0x74, 0xf4, 0xbb, 0xe7, 0x6f, 0x78, 0x6c,
	0xf5, 0xd1, 0x0d, 0x41, 0x43, 0xd3, 0x09, 0xd7, 0xf5, 0x06, 0xac, 0x17, 0x6e, 0x08, 0x48, 0xea,
	0x90, 0x3b, 0xc2, 0x80, 0xe9, 0xe3, 0x78, 0xcf, 0xcf, 0xf7, 0xf5, 0x77, 0xc2, 0x56, 0x3b, 0xf0,
	0x81, 0xa0, 0xee, 0x83, 0x6e, 0x8a, 0xa1, 0x3a, 0xe9, 0x15, 0x49, 0xb0, 0x60, 0x4d, 0x25, 0x7d,
	0x9b, 0x72, 0x76, 0xfb, 0x89, 0xd4, 0x6a, 0xf2, 0x3c, 0xc9, 0x92, 0xcd, 0xa2, 0x1c, 0x9f, 0x69,
	0xc6, 0xee, 0xcb, 0xdd, 0xfe, 0x7d, 0x2b, 0x55, 0xab, 0x6d, 0xc3, 0xaf, 0xb2, 0x64, 0x73, 0x57,
	0xce, 0xd1, 0xc9, 0x38, 0x82, 0x2d, 0xb5, 0xeb, 0x40, 0x49, 0xcf, 0xaf, 0xe3, 0xff, 0x39, 0x8a,
	0x86, 0xfc, 0x9a, 0x8c, 0x9b, 0xb3, 0xf1, 0x87, 0xd2, 0x35, 0x7b, 0xb0, 0x05, 0xa1, 0x2a, 0x34,
	0xbd, 0x61, 0xa3, 0xf9, 0x22, 0x2a, 0xff, 0xd8, 0xb4, 0xe2, 0x83, 0xa4, 0xe0, 0xf9, 0x72, 0xb6,
	0xf2, 0x8b, 0xb6, 0xaf, 0xfb, 0x17, 0x03, 0xe1, 0xd0, 0xd7, 0xb9, 0xc2, 0xa3, 0x88, 0x1d, 0x90,
	0x8c, 0x98, 0x82, 0x19, 0x6d, 0x85, 0xab, 0x9f, 0x0c, 0x8a, 0xcb, 0x86, 0xf5, 0x32, 0xc6, 0x7b,
	0xfe, 0x09, 0x00, 0x00, 0xff, 0xff, 0x5b, 0x03, 0x64, 0x09, 0x5e, 0x01, 0x00, 0x00,
}
