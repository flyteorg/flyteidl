// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/security.proto

package com.flyteidl.core;

public final class SecurityProto {
  private SecurityProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface SecretOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flyteidl.core.Secret)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The name of the secret group where to find the key referenced below. For K8s secrets, this should be the name of
     * the v1/secret object. For Confidant, this should be the Credential name. For Vault, this should be the secret name.
     * For AWS Secret Manager, this should be the name of the secret.
     * +required
     * </pre>
     *
     * <code>string group = 1 [json_name = "group"];</code>
     * @return The group.
     */
    java.lang.String getGroup();
    /**
     * <pre>
     * The name of the secret group where to find the key referenced below. For K8s secrets, this should be the name of
     * the v1/secret object. For Confidant, this should be the Credential name. For Vault, this should be the secret name.
     * For AWS Secret Manager, this should be the name of the secret.
     * +required
     * </pre>
     *
     * <code>string group = 1 [json_name = "group"];</code>
     * @return The bytes for group.
     */
    com.google.protobuf.ByteString
        getGroupBytes();

    /**
     * <pre>
     * The group version to fetch. This is not supported in all secret management systems. It'll be ignored for the ones
     * that do not support it.
     * +optional
     * </pre>
     *
     * <code>string group_version = 2 [json_name = "groupVersion"];</code>
     * @return The groupVersion.
     */
    java.lang.String getGroupVersion();
    /**
     * <pre>
     * The group version to fetch. This is not supported in all secret management systems. It'll be ignored for the ones
     * that do not support it.
     * +optional
     * </pre>
     *
     * <code>string group_version = 2 [json_name = "groupVersion"];</code>
     * @return The bytes for groupVersion.
     */
    com.google.protobuf.ByteString
        getGroupVersionBytes();

    /**
     * <pre>
     * The name of the secret to mount. This has to match an existing secret in the system. It's up to the implementation
     * of the secret management system to require case sensitivity. For K8s secrets, Confidant and Vault, this should
     * match one of the keys inside the secret. For AWS Secret Manager, it's ignored.
     * +optional
     * </pre>
     *
     * <code>string key = 3 [json_name = "key"];</code>
     * @return The key.
     */
    java.lang.String getKey();
    /**
     * <pre>
     * The name of the secret to mount. This has to match an existing secret in the system. It's up to the implementation
     * of the secret management system to require case sensitivity. For K8s secrets, Confidant and Vault, this should
     * match one of the keys inside the secret. For AWS Secret Manager, it's ignored.
     * +optional
     * </pre>
     *
     * <code>string key = 3 [json_name = "key"];</code>
     * @return The bytes for key.
     */
    com.google.protobuf.ByteString
        getKeyBytes();

    /**
     * <pre>
     * mount_requirement is optional. Indicates where the secret has to be mounted. If provided, the execution will fail
     * if the underlying key management system cannot satisfy that requirement. If not provided, the default location
     * will depend on the key management system.
     * +optional
     * </pre>
     *
     * <code>.flyteidl.core.Secret.MountType mount_requirement = 4 [json_name = "mountRequirement"];</code>
     * @return The enum numeric value on the wire for mountRequirement.
     */
    int getMountRequirementValue();
    /**
     * <pre>
     * mount_requirement is optional. Indicates where the secret has to be mounted. If provided, the execution will fail
     * if the underlying key management system cannot satisfy that requirement. If not provided, the default location
     * will depend on the key management system.
     * +optional
     * </pre>
     *
     * <code>.flyteidl.core.Secret.MountType mount_requirement = 4 [json_name = "mountRequirement"];</code>
     * @return The mountRequirement.
     */
    com.flyteidl.core.SecurityProto.Secret.MountType getMountRequirement();
  }
  /**
   * <pre>
   * Secret encapsulates information about the secret a task needs to proceed. An environment variable
   * FLYTE_SECRETS_ENV_PREFIX will be passed to indicate the prefix of the environment variables that will be present if
   * secrets are passed through environment variables.
   * FLYTE_SECRETS_DEFAULT_DIR will be passed to indicate the prefix of the path where secrets will be mounted if secrets
   * are passed through file mounts.
   * </pre>
   *
   * Protobuf type {@code flyteidl.core.Secret}
   */
  public static final class Secret extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flyteidl.core.Secret)
      SecretOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Secret.newBuilder() to construct.
    private Secret(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Secret() {
      group_ = "";
      groupVersion_ = "";
      key_ = "";
      mountRequirement_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Secret();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.flyteidl.core.SecurityProto.internal_static_flyteidl_core_Secret_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.flyteidl.core.SecurityProto.internal_static_flyteidl_core_Secret_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.flyteidl.core.SecurityProto.Secret.class, com.flyteidl.core.SecurityProto.Secret.Builder.class);
    }

    /**
     * Protobuf enum {@code flyteidl.core.Secret.MountType}
     */
    public enum MountType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <pre>
       * Default case, indicates the client can tolerate either mounting options.
       * </pre>
       *
       * <code>ANY = 0;</code>
       */
      ANY(0),
      /**
       * <pre>
       * ENV_VAR indicates the secret needs to be mounted as an environment variable.
       * </pre>
       *
       * <code>ENV_VAR = 1;</code>
       */
      ENV_VAR(1),
      /**
       * <pre>
       * FILE indicates the secret needs to be mounted as a file.
       * </pre>
       *
       * <code>FILE = 2;</code>
       */
      FILE(2),
      UNRECOGNIZED(-1),
      ;

      /**
       * <pre>
       * Default case, indicates the client can tolerate either mounting options.
       * </pre>
       *
       * <code>ANY = 0;</code>
       */
      public static final int ANY_VALUE = 0;
      /**
       * <pre>
       * ENV_VAR indicates the secret needs to be mounted as an environment variable.
       * </pre>
       *
       * <code>ENV_VAR = 1;</code>
       */
      public static final int ENV_VAR_VALUE = 1;
      /**
       * <pre>
       * FILE indicates the secret needs to be mounted as a file.
       * </pre>
       *
       * <code>FILE = 2;</code>
       */
      public static final int FILE_VALUE = 2;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static MountType valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static MountType forNumber(int value) {
        switch (value) {
          case 0: return ANY;
          case 1: return ENV_VAR;
          case 2: return FILE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<MountType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          MountType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<MountType>() {
              public MountType findValueByNumber(int number) {
                return MountType.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.flyteidl.core.SecurityProto.Secret.getDescriptor().getEnumTypes().get(0);
      }

      private static final MountType[] VALUES = values();

      public static MountType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private MountType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:flyteidl.core.Secret.MountType)
    }

    public static final int GROUP_FIELD_NUMBER = 1;
    private volatile java.lang.Object group_;
    /**
     * <pre>
     * The name of the secret group where to find the key referenced below. For K8s secrets, this should be the name of
     * the v1/secret object. For Confidant, this should be the Credential name. For Vault, this should be the secret name.
     * For AWS Secret Manager, this should be the name of the secret.
     * +required
     * </pre>
     *
     * <code>string group = 1 [json_name = "group"];</code>
     * @return The group.
     */
    @java.lang.Override
    public java.lang.String getGroup() {
      java.lang.Object ref = group_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        group_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The name of the secret group where to find the key referenced below. For K8s secrets, this should be the name of
     * the v1/secret object. For Confidant, this should be the Credential name. For Vault, this should be the secret name.
     * For AWS Secret Manager, this should be the name of the secret.
     * +required
     * </pre>
     *
     * <code>string group = 1 [json_name = "group"];</code>
     * @return The bytes for group.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getGroupBytes() {
      java.lang.Object ref = group_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        group_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int GROUP_VERSION_FIELD_NUMBER = 2;
    private volatile java.lang.Object groupVersion_;
    /**
     * <pre>
     * The group version to fetch. This is not supported in all secret management systems. It'll be ignored for the ones
     * that do not support it.
     * +optional
     * </pre>
     *
     * <code>string group_version = 2 [json_name = "groupVersion"];</code>
     * @return The groupVersion.
     */
    @java.lang.Override
    public java.lang.String getGroupVersion() {
      java.lang.Object ref = groupVersion_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        groupVersion_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The group version to fetch. This is not supported in all secret management systems. It'll be ignored for the ones
     * that do not support it.
     * +optional
     * </pre>
     *
     * <code>string group_version = 2 [json_name = "groupVersion"];</code>
     * @return The bytes for groupVersion.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getGroupVersionBytes() {
      java.lang.Object ref = groupVersion_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        groupVersion_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int KEY_FIELD_NUMBER = 3;
    private volatile java.lang.Object key_;
    /**
     * <pre>
     * The name of the secret to mount. This has to match an existing secret in the system. It's up to the implementation
     * of the secret management system to require case sensitivity. For K8s secrets, Confidant and Vault, this should
     * match one of the keys inside the secret. For AWS Secret Manager, it's ignored.
     * +optional
     * </pre>
     *
     * <code>string key = 3 [json_name = "key"];</code>
     * @return The key.
     */
    @java.lang.Override
    public java.lang.String getKey() {
      java.lang.Object ref = key_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        key_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The name of the secret to mount. This has to match an existing secret in the system. It's up to the implementation
     * of the secret management system to require case sensitivity. For K8s secrets, Confidant and Vault, this should
     * match one of the keys inside the secret. For AWS Secret Manager, it's ignored.
     * +optional
     * </pre>
     *
     * <code>string key = 3 [json_name = "key"];</code>
     * @return The bytes for key.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getKeyBytes() {
      java.lang.Object ref = key_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        key_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int MOUNT_REQUIREMENT_FIELD_NUMBER = 4;
    private int mountRequirement_;
    /**
     * <pre>
     * mount_requirement is optional. Indicates where the secret has to be mounted. If provided, the execution will fail
     * if the underlying key management system cannot satisfy that requirement. If not provided, the default location
     * will depend on the key management system.
     * +optional
     * </pre>
     *
     * <code>.flyteidl.core.Secret.MountType mount_requirement = 4 [json_name = "mountRequirement"];</code>
     * @return The enum numeric value on the wire for mountRequirement.
     */
    @java.lang.Override public int getMountRequirementValue() {
      return mountRequirement_;
    }
    /**
     * <pre>
     * mount_requirement is optional. Indicates where the secret has to be mounted. If provided, the execution will fail
     * if the underlying key management system cannot satisfy that requirement. If not provided, the default location
     * will depend on the key management system.
     * +optional
     * </pre>
     *
     * <code>.flyteidl.core.Secret.MountType mount_requirement = 4 [json_name = "mountRequirement"];</code>
     * @return The mountRequirement.
     */
    @java.lang.Override public com.flyteidl.core.SecurityProto.Secret.MountType getMountRequirement() {
      @SuppressWarnings("deprecation")
      com.flyteidl.core.SecurityProto.Secret.MountType result = com.flyteidl.core.SecurityProto.Secret.MountType.valueOf(mountRequirement_);
      return result == null ? com.flyteidl.core.SecurityProto.Secret.MountType.UNRECOGNIZED : result;
    }

    public static com.flyteidl.core.SecurityProto.Secret parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.flyteidl.core.SecurityProto.Secret parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.flyteidl.core.SecurityProto.Secret parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.flyteidl.core.SecurityProto.Secret parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.flyteidl.core.SecurityProto.Secret parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.flyteidl.core.SecurityProto.Secret parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.flyteidl.core.SecurityProto.Secret parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.flyteidl.core.SecurityProto.Secret parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.flyteidl.core.SecurityProto.Secret parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.flyteidl.core.SecurityProto.Secret parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.flyteidl.core.SecurityProto.Secret parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.flyteidl.core.SecurityProto.Secret parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.flyteidl.core.SecurityProto.Secret prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Secret encapsulates information about the secret a task needs to proceed. An environment variable
     * FLYTE_SECRETS_ENV_PREFIX will be passed to indicate the prefix of the environment variables that will be present if
     * secrets are passed through environment variables.
     * FLYTE_SECRETS_DEFAULT_DIR will be passed to indicate the prefix of the path where secrets will be mounted if secrets
     * are passed through file mounts.
     * </pre>
     *
     * Protobuf type {@code flyteidl.core.Secret}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flyteidl.core.Secret)
        com.flyteidl.core.SecurityProto.SecretOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.flyteidl.core.SecurityProto.internal_static_flyteidl_core_Secret_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.flyteidl.core.SecurityProto.internal_static_flyteidl_core_Secret_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.flyteidl.core.SecurityProto.Secret.class, com.flyteidl.core.SecurityProto.Secret.Builder.class);
      }

      // Construct using com.flyteidl.core.SecurityProto.Secret.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        group_ = "";

        groupVersion_ = "";

        key_ = "";

        mountRequirement_ = 0;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.flyteidl.core.SecurityProto.internal_static_flyteidl_core_Secret_descriptor;
      }

      @java.lang.Override
      public com.flyteidl.core.SecurityProto.Secret getDefaultInstanceForType() {
        return com.flyteidl.core.SecurityProto.Secret.getDefaultInstance();
      }

      @java.lang.Override
      public com.flyteidl.core.SecurityProto.Secret build() {
        com.flyteidl.core.SecurityProto.Secret result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.flyteidl.core.SecurityProto.Secret buildPartial() {
        com.flyteidl.core.SecurityProto.Secret result = new com.flyteidl.core.SecurityProto.Secret(this);
        result.group_ = group_;
        result.groupVersion_ = groupVersion_;
        result.key_ = key_;
        result.mountRequirement_ = mountRequirement_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }

      private java.lang.Object group_ = "";
      /**
       * <pre>
       * The name of the secret group where to find the key referenced below. For K8s secrets, this should be the name of
       * the v1/secret object. For Confidant, this should be the Credential name. For Vault, this should be the secret name.
       * For AWS Secret Manager, this should be the name of the secret.
       * +required
       * </pre>
       *
       * <code>string group = 1 [json_name = "group"];</code>
       * @return The group.
       */
      public java.lang.String getGroup() {
        java.lang.Object ref = group_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          group_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The name of the secret group where to find the key referenced below. For K8s secrets, this should be the name of
       * the v1/secret object. For Confidant, this should be the Credential name. For Vault, this should be the secret name.
       * For AWS Secret Manager, this should be the name of the secret.
       * +required
       * </pre>
       *
       * <code>string group = 1 [json_name = "group"];</code>
       * @return The bytes for group.
       */
      public com.google.protobuf.ByteString
          getGroupBytes() {
        java.lang.Object ref = group_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          group_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The name of the secret group where to find the key referenced below. For K8s secrets, this should be the name of
       * the v1/secret object. For Confidant, this should be the Credential name. For Vault, this should be the secret name.
       * For AWS Secret Manager, this should be the name of the secret.
       * +required
       * </pre>
       *
       * <code>string group = 1 [json_name = "group"];</code>
       * @param value The group to set.
       * @return This builder for chaining.
       */
      public Builder setGroup(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        group_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The name of the secret group where to find the key referenced below. For K8s secrets, this should be the name of
       * the v1/secret object. For Confidant, this should be the Credential name. For Vault, this should be the secret name.
       * For AWS Secret Manager, this should be the name of the secret.
       * +required
       * </pre>
       *
       * <code>string group = 1 [json_name = "group"];</code>
       * @return This builder for chaining.
       */
      public Builder clearGroup() {
        
        group_ = getDefaultInstance().getGroup();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The name of the secret group where to find the key referenced below. For K8s secrets, this should be the name of
       * the v1/secret object. For Confidant, this should be the Credential name. For Vault, this should be the secret name.
       * For AWS Secret Manager, this should be the name of the secret.
       * +required
       * </pre>
       *
       * <code>string group = 1 [json_name = "group"];</code>
       * @param value The bytes for group to set.
       * @return This builder for chaining.
       */
      public Builder setGroupBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        group_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object groupVersion_ = "";
      /**
       * <pre>
       * The group version to fetch. This is not supported in all secret management systems. It'll be ignored for the ones
       * that do not support it.
       * +optional
       * </pre>
       *
       * <code>string group_version = 2 [json_name = "groupVersion"];</code>
       * @return The groupVersion.
       */
      public java.lang.String getGroupVersion() {
        java.lang.Object ref = groupVersion_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          groupVersion_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The group version to fetch. This is not supported in all secret management systems. It'll be ignored for the ones
       * that do not support it.
       * +optional
       * </pre>
       *
       * <code>string group_version = 2 [json_name = "groupVersion"];</code>
       * @return The bytes for groupVersion.
       */
      public com.google.protobuf.ByteString
          getGroupVersionBytes() {
        java.lang.Object ref = groupVersion_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          groupVersion_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The group version to fetch. This is not supported in all secret management systems. It'll be ignored for the ones
       * that do not support it.
       * +optional
       * </pre>
       *
       * <code>string group_version = 2 [json_name = "groupVersion"];</code>
       * @param value The groupVersion to set.
       * @return This builder for chaining.
       */
      public Builder setGroupVersion(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        groupVersion_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The group version to fetch. This is not supported in all secret management systems. It'll be ignored for the ones
       * that do not support it.
       * +optional
       * </pre>
       *
       * <code>string group_version = 2 [json_name = "groupVersion"];</code>
       * @return This builder for chaining.
       */
      public Builder clearGroupVersion() {
        
        groupVersion_ = getDefaultInstance().getGroupVersion();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The group version to fetch. This is not supported in all secret management systems. It'll be ignored for the ones
       * that do not support it.
       * +optional
       * </pre>
       *
       * <code>string group_version = 2 [json_name = "groupVersion"];</code>
       * @param value The bytes for groupVersion to set.
       * @return This builder for chaining.
       */
      public Builder setGroupVersionBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        groupVersion_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object key_ = "";
      /**
       * <pre>
       * The name of the secret to mount. This has to match an existing secret in the system. It's up to the implementation
       * of the secret management system to require case sensitivity. For K8s secrets, Confidant and Vault, this should
       * match one of the keys inside the secret. For AWS Secret Manager, it's ignored.
       * +optional
       * </pre>
       *
       * <code>string key = 3 [json_name = "key"];</code>
       * @return The key.
       */
      public java.lang.String getKey() {
        java.lang.Object ref = key_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          key_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The name of the secret to mount. This has to match an existing secret in the system. It's up to the implementation
       * of the secret management system to require case sensitivity. For K8s secrets, Confidant and Vault, this should
       * match one of the keys inside the secret. For AWS Secret Manager, it's ignored.
       * +optional
       * </pre>
       *
       * <code>string key = 3 [json_name = "key"];</code>
       * @return The bytes for key.
       */
      public com.google.protobuf.ByteString
          getKeyBytes() {
        java.lang.Object ref = key_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          key_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The name of the secret to mount. This has to match an existing secret in the system. It's up to the implementation
       * of the secret management system to require case sensitivity. For K8s secrets, Confidant and Vault, this should
       * match one of the keys inside the secret. For AWS Secret Manager, it's ignored.
       * +optional
       * </pre>
       *
       * <code>string key = 3 [json_name = "key"];</code>
       * @param value The key to set.
       * @return This builder for chaining.
       */
      public Builder setKey(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        key_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The name of the secret to mount. This has to match an existing secret in the system. It's up to the implementation
       * of the secret management system to require case sensitivity. For K8s secrets, Confidant and Vault, this should
       * match one of the keys inside the secret. For AWS Secret Manager, it's ignored.
       * +optional
       * </pre>
       *
       * <code>string key = 3 [json_name = "key"];</code>
       * @return This builder for chaining.
       */
      public Builder clearKey() {
        
        key_ = getDefaultInstance().getKey();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The name of the secret to mount. This has to match an existing secret in the system. It's up to the implementation
       * of the secret management system to require case sensitivity. For K8s secrets, Confidant and Vault, this should
       * match one of the keys inside the secret. For AWS Secret Manager, it's ignored.
       * +optional
       * </pre>
       *
       * <code>string key = 3 [json_name = "key"];</code>
       * @param value The bytes for key to set.
       * @return This builder for chaining.
       */
      public Builder setKeyBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        key_ = value;
        onChanged();
        return this;
      }

      private int mountRequirement_ = 0;
      /**
       * <pre>
       * mount_requirement is optional. Indicates where the secret has to be mounted. If provided, the execution will fail
       * if the underlying key management system cannot satisfy that requirement. If not provided, the default location
       * will depend on the key management system.
       * +optional
       * </pre>
       *
       * <code>.flyteidl.core.Secret.MountType mount_requirement = 4 [json_name = "mountRequirement"];</code>
       * @return The enum numeric value on the wire for mountRequirement.
       */
      @java.lang.Override public int getMountRequirementValue() {
        return mountRequirement_;
      }
      /**
       * <pre>
       * mount_requirement is optional. Indicates where the secret has to be mounted. If provided, the execution will fail
       * if the underlying key management system cannot satisfy that requirement. If not provided, the default location
       * will depend on the key management system.
       * +optional
       * </pre>
       *
       * <code>.flyteidl.core.Secret.MountType mount_requirement = 4 [json_name = "mountRequirement"];</code>
       * @param value The enum numeric value on the wire for mountRequirement to set.
       * @return This builder for chaining.
       */
      public Builder setMountRequirementValue(int value) {
        
        mountRequirement_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * mount_requirement is optional. Indicates where the secret has to be mounted. If provided, the execution will fail
       * if the underlying key management system cannot satisfy that requirement. If not provided, the default location
       * will depend on the key management system.
       * +optional
       * </pre>
       *
       * <code>.flyteidl.core.Secret.MountType mount_requirement = 4 [json_name = "mountRequirement"];</code>
       * @return The mountRequirement.
       */
      @java.lang.Override
      public com.flyteidl.core.SecurityProto.Secret.MountType getMountRequirement() {
        @SuppressWarnings("deprecation")
        com.flyteidl.core.SecurityProto.Secret.MountType result = com.flyteidl.core.SecurityProto.Secret.MountType.valueOf(mountRequirement_);
        return result == null ? com.flyteidl.core.SecurityProto.Secret.MountType.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * mount_requirement is optional. Indicates where the secret has to be mounted. If provided, the execution will fail
       * if the underlying key management system cannot satisfy that requirement. If not provided, the default location
       * will depend on the key management system.
       * +optional
       * </pre>
       *
       * <code>.flyteidl.core.Secret.MountType mount_requirement = 4 [json_name = "mountRequirement"];</code>
       * @param value The mountRequirement to set.
       * @return This builder for chaining.
       */
      public Builder setMountRequirement(com.flyteidl.core.SecurityProto.Secret.MountType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        mountRequirement_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * mount_requirement is optional. Indicates where the secret has to be mounted. If provided, the execution will fail
       * if the underlying key management system cannot satisfy that requirement. If not provided, the default location
       * will depend on the key management system.
       * +optional
       * </pre>
       *
       * <code>.flyteidl.core.Secret.MountType mount_requirement = 4 [json_name = "mountRequirement"];</code>
       * @return This builder for chaining.
       */
      public Builder clearMountRequirement() {
        
        mountRequirement_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flyteidl.core.Secret)
    }

    // @@protoc_insertion_point(class_scope:flyteidl.core.Secret)
    private static final com.flyteidl.core.SecurityProto.Secret DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.flyteidl.core.SecurityProto.Secret();
    }

    public static com.flyteidl.core.SecurityProto.Secret getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Secret>
        PARSER = new com.google.protobuf.AbstractParser<Secret>() {
      @java.lang.Override
      public Secret parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(
                  builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Secret> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Secret> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.flyteidl.core.SecurityProto.Secret getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface OAuth2ClientOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flyteidl.core.OAuth2Client)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * client_id is the public id for the client to use. The system will not perform any pre-auth validation that the
     * secret requested matches the client_id indicated here.
     * +required
     * </pre>
     *
     * <code>string client_id = 1 [json_name = "clientId"];</code>
     * @return The clientId.
     */
    java.lang.String getClientId();
    /**
     * <pre>
     * client_id is the public id for the client to use. The system will not perform any pre-auth validation that the
     * secret requested matches the client_id indicated here.
     * +required
     * </pre>
     *
     * <code>string client_id = 1 [json_name = "clientId"];</code>
     * @return The bytes for clientId.
     */
    com.google.protobuf.ByteString
        getClientIdBytes();

    /**
     * <pre>
     * client_secret is a reference to the secret used to authenticate the OAuth2 client.
     * +required
     * </pre>
     *
     * <code>.flyteidl.core.Secret client_secret = 2 [json_name = "clientSecret"];</code>
     * @return Whether the clientSecret field is set.
     */
    boolean hasClientSecret();
    /**
     * <pre>
     * client_secret is a reference to the secret used to authenticate the OAuth2 client.
     * +required
     * </pre>
     *
     * <code>.flyteidl.core.Secret client_secret = 2 [json_name = "clientSecret"];</code>
     * @return The clientSecret.
     */
    com.flyteidl.core.SecurityProto.Secret getClientSecret();
    /**
     * <pre>
     * client_secret is a reference to the secret used to authenticate the OAuth2 client.
     * +required
     * </pre>
     *
     * <code>.flyteidl.core.Secret client_secret = 2 [json_name = "clientSecret"];</code>
     */
    com.flyteidl.core.SecurityProto.SecretOrBuilder getClientSecretOrBuilder();
  }
  /**
   * <pre>
   * OAuth2Client encapsulates OAuth2 Client Credentials to be used when making calls on behalf of that task.
   * </pre>
   *
   * Protobuf type {@code flyteidl.core.OAuth2Client}
   */
  public static final class OAuth2Client extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flyteidl.core.OAuth2Client)
      OAuth2ClientOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use OAuth2Client.newBuilder() to construct.
    private OAuth2Client(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private OAuth2Client() {
      clientId_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new OAuth2Client();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.flyteidl.core.SecurityProto.internal_static_flyteidl_core_OAuth2Client_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.flyteidl.core.SecurityProto.internal_static_flyteidl_core_OAuth2Client_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.flyteidl.core.SecurityProto.OAuth2Client.class, com.flyteidl.core.SecurityProto.OAuth2Client.Builder.class);
    }

    public static final int CLIENT_ID_FIELD_NUMBER = 1;
    private volatile java.lang.Object clientId_;
    /**
     * <pre>
     * client_id is the public id for the client to use. The system will not perform any pre-auth validation that the
     * secret requested matches the client_id indicated here.
     * +required
     * </pre>
     *
     * <code>string client_id = 1 [json_name = "clientId"];</code>
     * @return The clientId.
     */
    @java.lang.Override
    public java.lang.String getClientId() {
      java.lang.Object ref = clientId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        clientId_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * client_id is the public id for the client to use. The system will not perform any pre-auth validation that the
     * secret requested matches the client_id indicated here.
     * +required
     * </pre>
     *
     * <code>string client_id = 1 [json_name = "clientId"];</code>
     * @return The bytes for clientId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getClientIdBytes() {
      java.lang.Object ref = clientId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        clientId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int CLIENT_SECRET_FIELD_NUMBER = 2;
    private com.flyteidl.core.SecurityProto.Secret clientSecret_;
    /**
     * <pre>
     * client_secret is a reference to the secret used to authenticate the OAuth2 client.
     * +required
     * </pre>
     *
     * <code>.flyteidl.core.Secret client_secret = 2 [json_name = "clientSecret"];</code>
     * @return Whether the clientSecret field is set.
     */
    @java.lang.Override
    public boolean hasClientSecret() {
      return clientSecret_ != null;
    }
    /**
     * <pre>
     * client_secret is a reference to the secret used to authenticate the OAuth2 client.
     * +required
     * </pre>
     *
     * <code>.flyteidl.core.Secret client_secret = 2 [json_name = "clientSecret"];</code>
     * @return The clientSecret.
     */
    @java.lang.Override
    public com.flyteidl.core.SecurityProto.Secret getClientSecret() {
      return clientSecret_ == null ? com.flyteidl.core.SecurityProto.Secret.getDefaultInstance() : clientSecret_;
    }
    /**
     * <pre>
     * client_secret is a reference to the secret used to authenticate the OAuth2 client.
     * +required
     * </pre>
     *
     * <code>.flyteidl.core.Secret client_secret = 2 [json_name = "clientSecret"];</code>
     */
    @java.lang.Override
    public com.flyteidl.core.SecurityProto.SecretOrBuilder getClientSecretOrBuilder() {
      return getClientSecret();
    }

    public static com.flyteidl.core.SecurityProto.OAuth2Client parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.flyteidl.core.SecurityProto.OAuth2Client parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.flyteidl.core.SecurityProto.OAuth2Client parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.flyteidl.core.SecurityProto.OAuth2Client parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.flyteidl.core.SecurityProto.OAuth2Client parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.flyteidl.core.SecurityProto.OAuth2Client parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.flyteidl.core.SecurityProto.OAuth2Client parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.flyteidl.core.SecurityProto.OAuth2Client parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.flyteidl.core.SecurityProto.OAuth2Client parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.flyteidl.core.SecurityProto.OAuth2Client parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.flyteidl.core.SecurityProto.OAuth2Client parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.flyteidl.core.SecurityProto.OAuth2Client parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.flyteidl.core.SecurityProto.OAuth2Client prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * OAuth2Client encapsulates OAuth2 Client Credentials to be used when making calls on behalf of that task.
     * </pre>
     *
     * Protobuf type {@code flyteidl.core.OAuth2Client}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flyteidl.core.OAuth2Client)
        com.flyteidl.core.SecurityProto.OAuth2ClientOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.flyteidl.core.SecurityProto.internal_static_flyteidl_core_OAuth2Client_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.flyteidl.core.SecurityProto.internal_static_flyteidl_core_OAuth2Client_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.flyteidl.core.SecurityProto.OAuth2Client.class, com.flyteidl.core.SecurityProto.OAuth2Client.Builder.class);
      }

      // Construct using com.flyteidl.core.SecurityProto.OAuth2Client.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        clientId_ = "";

        if (clientSecretBuilder_ == null) {
          clientSecret_ = null;
        } else {
          clientSecret_ = null;
          clientSecretBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.flyteidl.core.SecurityProto.internal_static_flyteidl_core_OAuth2Client_descriptor;
      }

      @java.lang.Override
      public com.flyteidl.core.SecurityProto.OAuth2Client getDefaultInstanceForType() {
        return com.flyteidl.core.SecurityProto.OAuth2Client.getDefaultInstance();
      }

      @java.lang.Override
      public com.flyteidl.core.SecurityProto.OAuth2Client build() {
        com.flyteidl.core.SecurityProto.OAuth2Client result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.flyteidl.core.SecurityProto.OAuth2Client buildPartial() {
        com.flyteidl.core.SecurityProto.OAuth2Client result = new com.flyteidl.core.SecurityProto.OAuth2Client(this);
        result.clientId_ = clientId_;
        if (clientSecretBuilder_ == null) {
          result.clientSecret_ = clientSecret_;
        } else {
          result.clientSecret_ = clientSecretBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }

      private java.lang.Object clientId_ = "";
      /**
       * <pre>
       * client_id is the public id for the client to use. The system will not perform any pre-auth validation that the
       * secret requested matches the client_id indicated here.
       * +required
       * </pre>
       *
       * <code>string client_id = 1 [json_name = "clientId"];</code>
       * @return The clientId.
       */
      public java.lang.String getClientId() {
        java.lang.Object ref = clientId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          clientId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * client_id is the public id for the client to use. The system will not perform any pre-auth validation that the
       * secret requested matches the client_id indicated here.
       * +required
       * </pre>
       *
       * <code>string client_id = 1 [json_name = "clientId"];</code>
       * @return The bytes for clientId.
       */
      public com.google.protobuf.ByteString
          getClientIdBytes() {
        java.lang.Object ref = clientId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          clientId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * client_id is the public id for the client to use. The system will not perform any pre-auth validation that the
       * secret requested matches the client_id indicated here.
       * +required
       * </pre>
       *
       * <code>string client_id = 1 [json_name = "clientId"];</code>
       * @param value The clientId to set.
       * @return This builder for chaining.
       */
      public Builder setClientId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        clientId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * client_id is the public id for the client to use. The system will not perform any pre-auth validation that the
       * secret requested matches the client_id indicated here.
       * +required
       * </pre>
       *
       * <code>string client_id = 1 [json_name = "clientId"];</code>
       * @return This builder for chaining.
       */
      public Builder clearClientId() {
        
        clientId_ = getDefaultInstance().getClientId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * client_id is the public id for the client to use. The system will not perform any pre-auth validation that the
       * secret requested matches the client_id indicated here.
       * +required
       * </pre>
       *
       * <code>string client_id = 1 [json_name = "clientId"];</code>
       * @param value The bytes for clientId to set.
       * @return This builder for chaining.
       */
      public Builder setClientIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        clientId_ = value;
        onChanged();
        return this;
      }

      private com.flyteidl.core.SecurityProto.Secret clientSecret_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.flyteidl.core.SecurityProto.Secret, com.flyteidl.core.SecurityProto.Secret.Builder, com.flyteidl.core.SecurityProto.SecretOrBuilder> clientSecretBuilder_;
      /**
       * <pre>
       * client_secret is a reference to the secret used to authenticate the OAuth2 client.
       * +required
       * </pre>
       *
       * <code>.flyteidl.core.Secret client_secret = 2 [json_name = "clientSecret"];</code>
       * @return Whether the clientSecret field is set.
       */
      public boolean hasClientSecret() {
        return clientSecretBuilder_ != null || clientSecret_ != null;
      }
      /**
       * <pre>
       * client_secret is a reference to the secret used to authenticate the OAuth2 client.
       * +required
       * </pre>
       *
       * <code>.flyteidl.core.Secret client_secret = 2 [json_name = "clientSecret"];</code>
       * @return The clientSecret.
       */
      public com.flyteidl.core.SecurityProto.Secret getClientSecret() {
        if (clientSecretBuilder_ == null) {
          return clientSecret_ == null ? com.flyteidl.core.SecurityProto.Secret.getDefaultInstance() : clientSecret_;
        } else {
          return clientSecretBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * client_secret is a reference to the secret used to authenticate the OAuth2 client.
       * +required
       * </pre>
       *
       * <code>.flyteidl.core.Secret client_secret = 2 [json_name = "clientSecret"];</code>
       */
      public Builder setClientSecret(com.flyteidl.core.SecurityProto.Secret value) {
        if (clientSecretBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          clientSecret_ = value;
          onChanged();
        } else {
          clientSecretBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * client_secret is a reference to the secret used to authenticate the OAuth2 client.
       * +required
       * </pre>
       *
       * <code>.flyteidl.core.Secret client_secret = 2 [json_name = "clientSecret"];</code>
       */
      public Builder setClientSecret(
          com.flyteidl.core.SecurityProto.Secret.Builder builderForValue) {
        if (clientSecretBuilder_ == null) {
          clientSecret_ = builderForValue.build();
          onChanged();
        } else {
          clientSecretBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * client_secret is a reference to the secret used to authenticate the OAuth2 client.
       * +required
       * </pre>
       *
       * <code>.flyteidl.core.Secret client_secret = 2 [json_name = "clientSecret"];</code>
       */
      public Builder mergeClientSecret(com.flyteidl.core.SecurityProto.Secret value) {
        if (clientSecretBuilder_ == null) {
          if (clientSecret_ != null) {
            clientSecret_ =
              com.flyteidl.core.SecurityProto.Secret.newBuilder(clientSecret_).mergeFrom(value).buildPartial();
          } else {
            clientSecret_ = value;
          }
          onChanged();
        } else {
          clientSecretBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * client_secret is a reference to the secret used to authenticate the OAuth2 client.
       * +required
       * </pre>
       *
       * <code>.flyteidl.core.Secret client_secret = 2 [json_name = "clientSecret"];</code>
       */
      public Builder clearClientSecret() {
        if (clientSecretBuilder_ == null) {
          clientSecret_ = null;
          onChanged();
        } else {
          clientSecret_ = null;
          clientSecretBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * client_secret is a reference to the secret used to authenticate the OAuth2 client.
       * +required
       * </pre>
       *
       * <code>.flyteidl.core.Secret client_secret = 2 [json_name = "clientSecret"];</code>
       */
      public com.flyteidl.core.SecurityProto.Secret.Builder getClientSecretBuilder() {
        
        onChanged();
        return getClientSecretFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * client_secret is a reference to the secret used to authenticate the OAuth2 client.
       * +required
       * </pre>
       *
       * <code>.flyteidl.core.Secret client_secret = 2 [json_name = "clientSecret"];</code>
       */
      public com.flyteidl.core.SecurityProto.SecretOrBuilder getClientSecretOrBuilder() {
        if (clientSecretBuilder_ != null) {
          return clientSecretBuilder_.getMessageOrBuilder();
        } else {
          return clientSecret_ == null ?
              com.flyteidl.core.SecurityProto.Secret.getDefaultInstance() : clientSecret_;
        }
      }
      /**
       * <pre>
       * client_secret is a reference to the secret used to authenticate the OAuth2 client.
       * +required
       * </pre>
       *
       * <code>.flyteidl.core.Secret client_secret = 2 [json_name = "clientSecret"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.flyteidl.core.SecurityProto.Secret, com.flyteidl.core.SecurityProto.Secret.Builder, com.flyteidl.core.SecurityProto.SecretOrBuilder> 
          getClientSecretFieldBuilder() {
        if (clientSecretBuilder_ == null) {
          clientSecretBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.flyteidl.core.SecurityProto.Secret, com.flyteidl.core.SecurityProto.Secret.Builder, com.flyteidl.core.SecurityProto.SecretOrBuilder>(
                  getClientSecret(),
                  getParentForChildren(),
                  isClean());
          clientSecret_ = null;
        }
        return clientSecretBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flyteidl.core.OAuth2Client)
    }

    // @@protoc_insertion_point(class_scope:flyteidl.core.OAuth2Client)
    private static final com.flyteidl.core.SecurityProto.OAuth2Client DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.flyteidl.core.SecurityProto.OAuth2Client();
    }

    public static com.flyteidl.core.SecurityProto.OAuth2Client getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<OAuth2Client>
        PARSER = new com.google.protobuf.AbstractParser<OAuth2Client>() {
      @java.lang.Override
      public OAuth2Client parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(
                  builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<OAuth2Client> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<OAuth2Client> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.flyteidl.core.SecurityProto.OAuth2Client getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface IdentityOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flyteidl.core.Identity)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * iam_role references the fully qualified name of Identity &amp; Access Management role to impersonate.
     * </pre>
     *
     * <code>string iam_role = 1 [json_name = "iamRole"];</code>
     * @return The iamRole.
     */
    java.lang.String getIamRole();
    /**
     * <pre>
     * iam_role references the fully qualified name of Identity &amp; Access Management role to impersonate.
     * </pre>
     *
     * <code>string iam_role = 1 [json_name = "iamRole"];</code>
     * @return The bytes for iamRole.
     */
    com.google.protobuf.ByteString
        getIamRoleBytes();

    /**
     * <pre>
     * k8s_service_account references a kubernetes service account to impersonate.
     * </pre>
     *
     * <code>string k8s_service_account = 2 [json_name = "k8sServiceAccount"];</code>
     * @return The k8sServiceAccount.
     */
    java.lang.String getK8SServiceAccount();
    /**
     * <pre>
     * k8s_service_account references a kubernetes service account to impersonate.
     * </pre>
     *
     * <code>string k8s_service_account = 2 [json_name = "k8sServiceAccount"];</code>
     * @return The bytes for k8sServiceAccount.
     */
    com.google.protobuf.ByteString
        getK8SServiceAccountBytes();

    /**
     * <pre>
     * oauth2_client references an oauth2 client. Backend plugins can use this information to impersonate the client when
     * making external calls.
     * </pre>
     *
     * <code>.flyteidl.core.OAuth2Client oauth2_client = 3 [json_name = "oauth2Client"];</code>
     * @return Whether the oauth2Client field is set.
     */
    boolean hasOauth2Client();
    /**
     * <pre>
     * oauth2_client references an oauth2 client. Backend plugins can use this information to impersonate the client when
     * making external calls.
     * </pre>
     *
     * <code>.flyteidl.core.OAuth2Client oauth2_client = 3 [json_name = "oauth2Client"];</code>
     * @return The oauth2Client.
     */
    com.flyteidl.core.SecurityProto.OAuth2Client getOauth2Client();
    /**
     * <pre>
     * oauth2_client references an oauth2 client. Backend plugins can use this information to impersonate the client when
     * making external calls.
     * </pre>
     *
     * <code>.flyteidl.core.OAuth2Client oauth2_client = 3 [json_name = "oauth2Client"];</code>
     */
    com.flyteidl.core.SecurityProto.OAuth2ClientOrBuilder getOauth2ClientOrBuilder();
  }
  /**
   * <pre>
   * Identity encapsulates the various security identities a task can run as. It's up to the underlying plugin to pick the
   * right identity for the execution environment.
   * </pre>
   *
   * Protobuf type {@code flyteidl.core.Identity}
   */
  public static final class Identity extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flyteidl.core.Identity)
      IdentityOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Identity.newBuilder() to construct.
    private Identity(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Identity() {
      iamRole_ = "";
      k8SServiceAccount_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Identity();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.flyteidl.core.SecurityProto.internal_static_flyteidl_core_Identity_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.flyteidl.core.SecurityProto.internal_static_flyteidl_core_Identity_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.flyteidl.core.SecurityProto.Identity.class, com.flyteidl.core.SecurityProto.Identity.Builder.class);
    }

    public static final int IAM_ROLE_FIELD_NUMBER = 1;
    private volatile java.lang.Object iamRole_;
    /**
     * <pre>
     * iam_role references the fully qualified name of Identity &amp; Access Management role to impersonate.
     * </pre>
     *
     * <code>string iam_role = 1 [json_name = "iamRole"];</code>
     * @return The iamRole.
     */
    @java.lang.Override
    public java.lang.String getIamRole() {
      java.lang.Object ref = iamRole_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        iamRole_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * iam_role references the fully qualified name of Identity &amp; Access Management role to impersonate.
     * </pre>
     *
     * <code>string iam_role = 1 [json_name = "iamRole"];</code>
     * @return The bytes for iamRole.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getIamRoleBytes() {
      java.lang.Object ref = iamRole_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        iamRole_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int K8S_SERVICE_ACCOUNT_FIELD_NUMBER = 2;
    private volatile java.lang.Object k8SServiceAccount_;
    /**
     * <pre>
     * k8s_service_account references a kubernetes service account to impersonate.
     * </pre>
     *
     * <code>string k8s_service_account = 2 [json_name = "k8sServiceAccount"];</code>
     * @return The k8sServiceAccount.
     */
    @java.lang.Override
    public java.lang.String getK8SServiceAccount() {
      java.lang.Object ref = k8SServiceAccount_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        k8SServiceAccount_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * k8s_service_account references a kubernetes service account to impersonate.
     * </pre>
     *
     * <code>string k8s_service_account = 2 [json_name = "k8sServiceAccount"];</code>
     * @return The bytes for k8sServiceAccount.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getK8SServiceAccountBytes() {
      java.lang.Object ref = k8SServiceAccount_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        k8SServiceAccount_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int OAUTH2_CLIENT_FIELD_NUMBER = 3;
    private com.flyteidl.core.SecurityProto.OAuth2Client oauth2Client_;
    /**
     * <pre>
     * oauth2_client references an oauth2 client. Backend plugins can use this information to impersonate the client when
     * making external calls.
     * </pre>
     *
     * <code>.flyteidl.core.OAuth2Client oauth2_client = 3 [json_name = "oauth2Client"];</code>
     * @return Whether the oauth2Client field is set.
     */
    @java.lang.Override
    public boolean hasOauth2Client() {
      return oauth2Client_ != null;
    }
    /**
     * <pre>
     * oauth2_client references an oauth2 client. Backend plugins can use this information to impersonate the client when
     * making external calls.
     * </pre>
     *
     * <code>.flyteidl.core.OAuth2Client oauth2_client = 3 [json_name = "oauth2Client"];</code>
     * @return The oauth2Client.
     */
    @java.lang.Override
    public com.flyteidl.core.SecurityProto.OAuth2Client getOauth2Client() {
      return oauth2Client_ == null ? com.flyteidl.core.SecurityProto.OAuth2Client.getDefaultInstance() : oauth2Client_;
    }
    /**
     * <pre>
     * oauth2_client references an oauth2 client. Backend plugins can use this information to impersonate the client when
     * making external calls.
     * </pre>
     *
     * <code>.flyteidl.core.OAuth2Client oauth2_client = 3 [json_name = "oauth2Client"];</code>
     */
    @java.lang.Override
    public com.flyteidl.core.SecurityProto.OAuth2ClientOrBuilder getOauth2ClientOrBuilder() {
      return getOauth2Client();
    }

    public static com.flyteidl.core.SecurityProto.Identity parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.flyteidl.core.SecurityProto.Identity parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.flyteidl.core.SecurityProto.Identity parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.flyteidl.core.SecurityProto.Identity parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.flyteidl.core.SecurityProto.Identity parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.flyteidl.core.SecurityProto.Identity parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.flyteidl.core.SecurityProto.Identity parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.flyteidl.core.SecurityProto.Identity parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.flyteidl.core.SecurityProto.Identity parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.flyteidl.core.SecurityProto.Identity parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.flyteidl.core.SecurityProto.Identity parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.flyteidl.core.SecurityProto.Identity parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.flyteidl.core.SecurityProto.Identity prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Identity encapsulates the various security identities a task can run as. It's up to the underlying plugin to pick the
     * right identity for the execution environment.
     * </pre>
     *
     * Protobuf type {@code flyteidl.core.Identity}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flyteidl.core.Identity)
        com.flyteidl.core.SecurityProto.IdentityOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.flyteidl.core.SecurityProto.internal_static_flyteidl_core_Identity_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.flyteidl.core.SecurityProto.internal_static_flyteidl_core_Identity_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.flyteidl.core.SecurityProto.Identity.class, com.flyteidl.core.SecurityProto.Identity.Builder.class);
      }

      // Construct using com.flyteidl.core.SecurityProto.Identity.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        iamRole_ = "";

        k8SServiceAccount_ = "";

        if (oauth2ClientBuilder_ == null) {
          oauth2Client_ = null;
        } else {
          oauth2Client_ = null;
          oauth2ClientBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.flyteidl.core.SecurityProto.internal_static_flyteidl_core_Identity_descriptor;
      }

      @java.lang.Override
      public com.flyteidl.core.SecurityProto.Identity getDefaultInstanceForType() {
        return com.flyteidl.core.SecurityProto.Identity.getDefaultInstance();
      }

      @java.lang.Override
      public com.flyteidl.core.SecurityProto.Identity build() {
        com.flyteidl.core.SecurityProto.Identity result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.flyteidl.core.SecurityProto.Identity buildPartial() {
        com.flyteidl.core.SecurityProto.Identity result = new com.flyteidl.core.SecurityProto.Identity(this);
        result.iamRole_ = iamRole_;
        result.k8SServiceAccount_ = k8SServiceAccount_;
        if (oauth2ClientBuilder_ == null) {
          result.oauth2Client_ = oauth2Client_;
        } else {
          result.oauth2Client_ = oauth2ClientBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }

      private java.lang.Object iamRole_ = "";
      /**
       * <pre>
       * iam_role references the fully qualified name of Identity &amp; Access Management role to impersonate.
       * </pre>
       *
       * <code>string iam_role = 1 [json_name = "iamRole"];</code>
       * @return The iamRole.
       */
      public java.lang.String getIamRole() {
        java.lang.Object ref = iamRole_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          iamRole_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * iam_role references the fully qualified name of Identity &amp; Access Management role to impersonate.
       * </pre>
       *
       * <code>string iam_role = 1 [json_name = "iamRole"];</code>
       * @return The bytes for iamRole.
       */
      public com.google.protobuf.ByteString
          getIamRoleBytes() {
        java.lang.Object ref = iamRole_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          iamRole_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * iam_role references the fully qualified name of Identity &amp; Access Management role to impersonate.
       * </pre>
       *
       * <code>string iam_role = 1 [json_name = "iamRole"];</code>
       * @param value The iamRole to set.
       * @return This builder for chaining.
       */
      public Builder setIamRole(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        iamRole_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * iam_role references the fully qualified name of Identity &amp; Access Management role to impersonate.
       * </pre>
       *
       * <code>string iam_role = 1 [json_name = "iamRole"];</code>
       * @return This builder for chaining.
       */
      public Builder clearIamRole() {
        
        iamRole_ = getDefaultInstance().getIamRole();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * iam_role references the fully qualified name of Identity &amp; Access Management role to impersonate.
       * </pre>
       *
       * <code>string iam_role = 1 [json_name = "iamRole"];</code>
       * @param value The bytes for iamRole to set.
       * @return This builder for chaining.
       */
      public Builder setIamRoleBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        iamRole_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object k8SServiceAccount_ = "";
      /**
       * <pre>
       * k8s_service_account references a kubernetes service account to impersonate.
       * </pre>
       *
       * <code>string k8s_service_account = 2 [json_name = "k8sServiceAccount"];</code>
       * @return The k8sServiceAccount.
       */
      public java.lang.String getK8SServiceAccount() {
        java.lang.Object ref = k8SServiceAccount_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          k8SServiceAccount_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * k8s_service_account references a kubernetes service account to impersonate.
       * </pre>
       *
       * <code>string k8s_service_account = 2 [json_name = "k8sServiceAccount"];</code>
       * @return The bytes for k8sServiceAccount.
       */
      public com.google.protobuf.ByteString
          getK8SServiceAccountBytes() {
        java.lang.Object ref = k8SServiceAccount_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          k8SServiceAccount_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * k8s_service_account references a kubernetes service account to impersonate.
       * </pre>
       *
       * <code>string k8s_service_account = 2 [json_name = "k8sServiceAccount"];</code>
       * @param value The k8sServiceAccount to set.
       * @return This builder for chaining.
       */
      public Builder setK8SServiceAccount(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        k8SServiceAccount_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * k8s_service_account references a kubernetes service account to impersonate.
       * </pre>
       *
       * <code>string k8s_service_account = 2 [json_name = "k8sServiceAccount"];</code>
       * @return This builder for chaining.
       */
      public Builder clearK8SServiceAccount() {
        
        k8SServiceAccount_ = getDefaultInstance().getK8SServiceAccount();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * k8s_service_account references a kubernetes service account to impersonate.
       * </pre>
       *
       * <code>string k8s_service_account = 2 [json_name = "k8sServiceAccount"];</code>
       * @param value The bytes for k8sServiceAccount to set.
       * @return This builder for chaining.
       */
      public Builder setK8SServiceAccountBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        k8SServiceAccount_ = value;
        onChanged();
        return this;
      }

      private com.flyteidl.core.SecurityProto.OAuth2Client oauth2Client_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.flyteidl.core.SecurityProto.OAuth2Client, com.flyteidl.core.SecurityProto.OAuth2Client.Builder, com.flyteidl.core.SecurityProto.OAuth2ClientOrBuilder> oauth2ClientBuilder_;
      /**
       * <pre>
       * oauth2_client references an oauth2 client. Backend plugins can use this information to impersonate the client when
       * making external calls.
       * </pre>
       *
       * <code>.flyteidl.core.OAuth2Client oauth2_client = 3 [json_name = "oauth2Client"];</code>
       * @return Whether the oauth2Client field is set.
       */
      public boolean hasOauth2Client() {
        return oauth2ClientBuilder_ != null || oauth2Client_ != null;
      }
      /**
       * <pre>
       * oauth2_client references an oauth2 client. Backend plugins can use this information to impersonate the client when
       * making external calls.
       * </pre>
       *
       * <code>.flyteidl.core.OAuth2Client oauth2_client = 3 [json_name = "oauth2Client"];</code>
       * @return The oauth2Client.
       */
      public com.flyteidl.core.SecurityProto.OAuth2Client getOauth2Client() {
        if (oauth2ClientBuilder_ == null) {
          return oauth2Client_ == null ? com.flyteidl.core.SecurityProto.OAuth2Client.getDefaultInstance() : oauth2Client_;
        } else {
          return oauth2ClientBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * oauth2_client references an oauth2 client. Backend plugins can use this information to impersonate the client when
       * making external calls.
       * </pre>
       *
       * <code>.flyteidl.core.OAuth2Client oauth2_client = 3 [json_name = "oauth2Client"];</code>
       */
      public Builder setOauth2Client(com.flyteidl.core.SecurityProto.OAuth2Client value) {
        if (oauth2ClientBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          oauth2Client_ = value;
          onChanged();
        } else {
          oauth2ClientBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * oauth2_client references an oauth2 client. Backend plugins can use this information to impersonate the client when
       * making external calls.
       * </pre>
       *
       * <code>.flyteidl.core.OAuth2Client oauth2_client = 3 [json_name = "oauth2Client"];</code>
       */
      public Builder setOauth2Client(
          com.flyteidl.core.SecurityProto.OAuth2Client.Builder builderForValue) {
        if (oauth2ClientBuilder_ == null) {
          oauth2Client_ = builderForValue.build();
          onChanged();
        } else {
          oauth2ClientBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * oauth2_client references an oauth2 client. Backend plugins can use this information to impersonate the client when
       * making external calls.
       * </pre>
       *
       * <code>.flyteidl.core.OAuth2Client oauth2_client = 3 [json_name = "oauth2Client"];</code>
       */
      public Builder mergeOauth2Client(com.flyteidl.core.SecurityProto.OAuth2Client value) {
        if (oauth2ClientBuilder_ == null) {
          if (oauth2Client_ != null) {
            oauth2Client_ =
              com.flyteidl.core.SecurityProto.OAuth2Client.newBuilder(oauth2Client_).mergeFrom(value).buildPartial();
          } else {
            oauth2Client_ = value;
          }
          onChanged();
        } else {
          oauth2ClientBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * oauth2_client references an oauth2 client. Backend plugins can use this information to impersonate the client when
       * making external calls.
       * </pre>
       *
       * <code>.flyteidl.core.OAuth2Client oauth2_client = 3 [json_name = "oauth2Client"];</code>
       */
      public Builder clearOauth2Client() {
        if (oauth2ClientBuilder_ == null) {
          oauth2Client_ = null;
          onChanged();
        } else {
          oauth2Client_ = null;
          oauth2ClientBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * oauth2_client references an oauth2 client. Backend plugins can use this information to impersonate the client when
       * making external calls.
       * </pre>
       *
       * <code>.flyteidl.core.OAuth2Client oauth2_client = 3 [json_name = "oauth2Client"];</code>
       */
      public com.flyteidl.core.SecurityProto.OAuth2Client.Builder getOauth2ClientBuilder() {
        
        onChanged();
        return getOauth2ClientFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * oauth2_client references an oauth2 client. Backend plugins can use this information to impersonate the client when
       * making external calls.
       * </pre>
       *
       * <code>.flyteidl.core.OAuth2Client oauth2_client = 3 [json_name = "oauth2Client"];</code>
       */
      public com.flyteidl.core.SecurityProto.OAuth2ClientOrBuilder getOauth2ClientOrBuilder() {
        if (oauth2ClientBuilder_ != null) {
          return oauth2ClientBuilder_.getMessageOrBuilder();
        } else {
          return oauth2Client_ == null ?
              com.flyteidl.core.SecurityProto.OAuth2Client.getDefaultInstance() : oauth2Client_;
        }
      }
      /**
       * <pre>
       * oauth2_client references an oauth2 client. Backend plugins can use this information to impersonate the client when
       * making external calls.
       * </pre>
       *
       * <code>.flyteidl.core.OAuth2Client oauth2_client = 3 [json_name = "oauth2Client"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.flyteidl.core.SecurityProto.OAuth2Client, com.flyteidl.core.SecurityProto.OAuth2Client.Builder, com.flyteidl.core.SecurityProto.OAuth2ClientOrBuilder> 
          getOauth2ClientFieldBuilder() {
        if (oauth2ClientBuilder_ == null) {
          oauth2ClientBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.flyteidl.core.SecurityProto.OAuth2Client, com.flyteidl.core.SecurityProto.OAuth2Client.Builder, com.flyteidl.core.SecurityProto.OAuth2ClientOrBuilder>(
                  getOauth2Client(),
                  getParentForChildren(),
                  isClean());
          oauth2Client_ = null;
        }
        return oauth2ClientBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flyteidl.core.Identity)
    }

    // @@protoc_insertion_point(class_scope:flyteidl.core.Identity)
    private static final com.flyteidl.core.SecurityProto.Identity DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.flyteidl.core.SecurityProto.Identity();
    }

    public static com.flyteidl.core.SecurityProto.Identity getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Identity>
        PARSER = new com.google.protobuf.AbstractParser<Identity>() {
      @java.lang.Override
      public Identity parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(
                  builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Identity> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Identity> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.flyteidl.core.SecurityProto.Identity getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface OAuth2TokenRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flyteidl.core.OAuth2TokenRequest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * name indicates a unique id for the token request within this task token requests. It'll be used as a suffix for
     * environment variables and as a filename for mounting tokens as files.
     * +required
     * </pre>
     *
     * <code>string name = 1 [json_name = "name"];</code>
     * @return The name.
     */
    java.lang.String getName();
    /**
     * <pre>
     * name indicates a unique id for the token request within this task token requests. It'll be used as a suffix for
     * environment variables and as a filename for mounting tokens as files.
     * +required
     * </pre>
     *
     * <code>string name = 1 [json_name = "name"];</code>
     * @return The bytes for name.
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * type indicates the type of the request to make. Defaults to CLIENT_CREDENTIALS.
     * +required
     * </pre>
     *
     * <code>.flyteidl.core.OAuth2TokenRequest.Type type = 2 [json_name = "type"];</code>
     * @return The enum numeric value on the wire for type.
     */
    int getTypeValue();
    /**
     * <pre>
     * type indicates the type of the request to make. Defaults to CLIENT_CREDENTIALS.
     * +required
     * </pre>
     *
     * <code>.flyteidl.core.OAuth2TokenRequest.Type type = 2 [json_name = "type"];</code>
     * @return The type.
     */
    com.flyteidl.core.SecurityProto.OAuth2TokenRequest.Type getType();

    /**
     * <pre>
     * client references the client_id/secret to use to request the OAuth2 token.
     * +required
     * </pre>
     *
     * <code>.flyteidl.core.OAuth2Client client = 3 [json_name = "client"];</code>
     * @return Whether the client field is set.
     */
    boolean hasClient();
    /**
     * <pre>
     * client references the client_id/secret to use to request the OAuth2 token.
     * +required
     * </pre>
     *
     * <code>.flyteidl.core.OAuth2Client client = 3 [json_name = "client"];</code>
     * @return The client.
     */
    com.flyteidl.core.SecurityProto.OAuth2Client getClient();
    /**
     * <pre>
     * client references the client_id/secret to use to request the OAuth2 token.
     * +required
     * </pre>
     *
     * <code>.flyteidl.core.OAuth2Client client = 3 [json_name = "client"];</code>
     */
    com.flyteidl.core.SecurityProto.OAuth2ClientOrBuilder getClientOrBuilder();

    /**
     * <pre>
     * idp_discovery_endpoint references the discovery endpoint used to retrieve token endpoint and other related
     * information.
     * +optional
     * </pre>
     *
     * <code>string idp_discovery_endpoint = 4 [json_name = "idpDiscoveryEndpoint"];</code>
     * @return The idpDiscoveryEndpoint.
     */
    java.lang.String getIdpDiscoveryEndpoint();
    /**
     * <pre>
     * idp_discovery_endpoint references the discovery endpoint used to retrieve token endpoint and other related
     * information.
     * +optional
     * </pre>
     *
     * <code>string idp_discovery_endpoint = 4 [json_name = "idpDiscoveryEndpoint"];</code>
     * @return The bytes for idpDiscoveryEndpoint.
     */
    com.google.protobuf.ByteString
        getIdpDiscoveryEndpointBytes();

    /**
     * <pre>
     * token_endpoint references the token issuance endpoint. If idp_discovery_endpoint is not provided, this parameter is
     * mandatory.
     * +optional
     * </pre>
     *
     * <code>string token_endpoint = 5 [json_name = "tokenEndpoint"];</code>
     * @return The tokenEndpoint.
     */
    java.lang.String getTokenEndpoint();
    /**
     * <pre>
     * token_endpoint references the token issuance endpoint. If idp_discovery_endpoint is not provided, this parameter is
     * mandatory.
     * +optional
     * </pre>
     *
     * <code>string token_endpoint = 5 [json_name = "tokenEndpoint"];</code>
     * @return The bytes for tokenEndpoint.
     */
    com.google.protobuf.ByteString
        getTokenEndpointBytes();
  }
  /**
   * <pre>
   * OAuth2TokenRequest encapsulates information needed to request an OAuth2 token.
   * FLYTE_TOKENS_ENV_PREFIX will be passed to indicate the prefix of the environment variables that will be present if
   * tokens are passed through environment variables.
   * FLYTE_TOKENS_PATH_PREFIX will be passed to indicate the prefix of the path where secrets will be mounted if tokens
   * are passed through file mounts.
   * </pre>
   *
   * Protobuf type {@code flyteidl.core.OAuth2TokenRequest}
   */
  public static final class OAuth2TokenRequest extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flyteidl.core.OAuth2TokenRequest)
      OAuth2TokenRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use OAuth2TokenRequest.newBuilder() to construct.
    private OAuth2TokenRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private OAuth2TokenRequest() {
      name_ = "";
      type_ = 0;
      idpDiscoveryEndpoint_ = "";
      tokenEndpoint_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new OAuth2TokenRequest();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.flyteidl.core.SecurityProto.internal_static_flyteidl_core_OAuth2TokenRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.flyteidl.core.SecurityProto.internal_static_flyteidl_core_OAuth2TokenRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.flyteidl.core.SecurityProto.OAuth2TokenRequest.class, com.flyteidl.core.SecurityProto.OAuth2TokenRequest.Builder.class);
    }

    /**
     * <pre>
     * Type of the token requested.
     * </pre>
     *
     * Protobuf enum {@code flyteidl.core.OAuth2TokenRequest.Type}
     */
    public enum Type
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <pre>
       * CLIENT_CREDENTIALS indicates a 2-legged OAuth token requested using client credentials.
       * </pre>
       *
       * <code>CLIENT_CREDENTIALS = 0;</code>
       */
      CLIENT_CREDENTIALS(0),
      UNRECOGNIZED(-1),
      ;

      /**
       * <pre>
       * CLIENT_CREDENTIALS indicates a 2-legged OAuth token requested using client credentials.
       * </pre>
       *
       * <code>CLIENT_CREDENTIALS = 0;</code>
       */
      public static final int CLIENT_CREDENTIALS_VALUE = 0;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Type valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static Type forNumber(int value) {
        switch (value) {
          case 0: return CLIENT_CREDENTIALS;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Type>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          Type> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Type>() {
              public Type findValueByNumber(int number) {
                return Type.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.flyteidl.core.SecurityProto.OAuth2TokenRequest.getDescriptor().getEnumTypes().get(0);
      }

      private static final Type[] VALUES = values();

      public static Type valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private Type(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:flyteidl.core.OAuth2TokenRequest.Type)
    }

    public static final int NAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object name_;
    /**
     * <pre>
     * name indicates a unique id for the token request within this task token requests. It'll be used as a suffix for
     * environment variables and as a filename for mounting tokens as files.
     * +required
     * </pre>
     *
     * <code>string name = 1 [json_name = "name"];</code>
     * @return The name.
     */
    @java.lang.Override
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * name indicates a unique id for the token request within this task token requests. It'll be used as a suffix for
     * environment variables and as a filename for mounting tokens as files.
     * +required
     * </pre>
     *
     * <code>string name = 1 [json_name = "name"];</code>
     * @return The bytes for name.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TYPE_FIELD_NUMBER = 2;
    private int type_;
    /**
     * <pre>
     * type indicates the type of the request to make. Defaults to CLIENT_CREDENTIALS.
     * +required
     * </pre>
     *
     * <code>.flyteidl.core.OAuth2TokenRequest.Type type = 2 [json_name = "type"];</code>
     * @return The enum numeric value on the wire for type.
     */
    @java.lang.Override public int getTypeValue() {
      return type_;
    }
    /**
     * <pre>
     * type indicates the type of the request to make. Defaults to CLIENT_CREDENTIALS.
     * +required
     * </pre>
     *
     * <code>.flyteidl.core.OAuth2TokenRequest.Type type = 2 [json_name = "type"];</code>
     * @return The type.
     */
    @java.lang.Override public com.flyteidl.core.SecurityProto.OAuth2TokenRequest.Type getType() {
      @SuppressWarnings("deprecation")
      com.flyteidl.core.SecurityProto.OAuth2TokenRequest.Type result = com.flyteidl.core.SecurityProto.OAuth2TokenRequest.Type.valueOf(type_);
      return result == null ? com.flyteidl.core.SecurityProto.OAuth2TokenRequest.Type.UNRECOGNIZED : result;
    }

    public static final int CLIENT_FIELD_NUMBER = 3;
    private com.flyteidl.core.SecurityProto.OAuth2Client client_;
    /**
     * <pre>
     * client references the client_id/secret to use to request the OAuth2 token.
     * +required
     * </pre>
     *
     * <code>.flyteidl.core.OAuth2Client client = 3 [json_name = "client"];</code>
     * @return Whether the client field is set.
     */
    @java.lang.Override
    public boolean hasClient() {
      return client_ != null;
    }
    /**
     * <pre>
     * client references the client_id/secret to use to request the OAuth2 token.
     * +required
     * </pre>
     *
     * <code>.flyteidl.core.OAuth2Client client = 3 [json_name = "client"];</code>
     * @return The client.
     */
    @java.lang.Override
    public com.flyteidl.core.SecurityProto.OAuth2Client getClient() {
      return client_ == null ? com.flyteidl.core.SecurityProto.OAuth2Client.getDefaultInstance() : client_;
    }
    /**
     * <pre>
     * client references the client_id/secret to use to request the OAuth2 token.
     * +required
     * </pre>
     *
     * <code>.flyteidl.core.OAuth2Client client = 3 [json_name = "client"];</code>
     */
    @java.lang.Override
    public com.flyteidl.core.SecurityProto.OAuth2ClientOrBuilder getClientOrBuilder() {
      return getClient();
    }

    public static final int IDP_DISCOVERY_ENDPOINT_FIELD_NUMBER = 4;
    private volatile java.lang.Object idpDiscoveryEndpoint_;
    /**
     * <pre>
     * idp_discovery_endpoint references the discovery endpoint used to retrieve token endpoint and other related
     * information.
     * +optional
     * </pre>
     *
     * <code>string idp_discovery_endpoint = 4 [json_name = "idpDiscoveryEndpoint"];</code>
     * @return The idpDiscoveryEndpoint.
     */
    @java.lang.Override
    public java.lang.String getIdpDiscoveryEndpoint() {
      java.lang.Object ref = idpDiscoveryEndpoint_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        idpDiscoveryEndpoint_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * idp_discovery_endpoint references the discovery endpoint used to retrieve token endpoint and other related
     * information.
     * +optional
     * </pre>
     *
     * <code>string idp_discovery_endpoint = 4 [json_name = "idpDiscoveryEndpoint"];</code>
     * @return The bytes for idpDiscoveryEndpoint.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getIdpDiscoveryEndpointBytes() {
      java.lang.Object ref = idpDiscoveryEndpoint_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        idpDiscoveryEndpoint_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TOKEN_ENDPOINT_FIELD_NUMBER = 5;
    private volatile java.lang.Object tokenEndpoint_;
    /**
     * <pre>
     * token_endpoint references the token issuance endpoint. If idp_discovery_endpoint is not provided, this parameter is
     * mandatory.
     * +optional
     * </pre>
     *
     * <code>string token_endpoint = 5 [json_name = "tokenEndpoint"];</code>
     * @return The tokenEndpoint.
     */
    @java.lang.Override
    public java.lang.String getTokenEndpoint() {
      java.lang.Object ref = tokenEndpoint_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        tokenEndpoint_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * token_endpoint references the token issuance endpoint. If idp_discovery_endpoint is not provided, this parameter is
     * mandatory.
     * +optional
     * </pre>
     *
     * <code>string token_endpoint = 5 [json_name = "tokenEndpoint"];</code>
     * @return The bytes for tokenEndpoint.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getTokenEndpointBytes() {
      java.lang.Object ref = tokenEndpoint_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        tokenEndpoint_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static com.flyteidl.core.SecurityProto.OAuth2TokenRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.flyteidl.core.SecurityProto.OAuth2TokenRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.flyteidl.core.SecurityProto.OAuth2TokenRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.flyteidl.core.SecurityProto.OAuth2TokenRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.flyteidl.core.SecurityProto.OAuth2TokenRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.flyteidl.core.SecurityProto.OAuth2TokenRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.flyteidl.core.SecurityProto.OAuth2TokenRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.flyteidl.core.SecurityProto.OAuth2TokenRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.flyteidl.core.SecurityProto.OAuth2TokenRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.flyteidl.core.SecurityProto.OAuth2TokenRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.flyteidl.core.SecurityProto.OAuth2TokenRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.flyteidl.core.SecurityProto.OAuth2TokenRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.flyteidl.core.SecurityProto.OAuth2TokenRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * OAuth2TokenRequest encapsulates information needed to request an OAuth2 token.
     * FLYTE_TOKENS_ENV_PREFIX will be passed to indicate the prefix of the environment variables that will be present if
     * tokens are passed through environment variables.
     * FLYTE_TOKENS_PATH_PREFIX will be passed to indicate the prefix of the path where secrets will be mounted if tokens
     * are passed through file mounts.
     * </pre>
     *
     * Protobuf type {@code flyteidl.core.OAuth2TokenRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flyteidl.core.OAuth2TokenRequest)
        com.flyteidl.core.SecurityProto.OAuth2TokenRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.flyteidl.core.SecurityProto.internal_static_flyteidl_core_OAuth2TokenRequest_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.flyteidl.core.SecurityProto.internal_static_flyteidl_core_OAuth2TokenRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.flyteidl.core.SecurityProto.OAuth2TokenRequest.class, com.flyteidl.core.SecurityProto.OAuth2TokenRequest.Builder.class);
      }

      // Construct using com.flyteidl.core.SecurityProto.OAuth2TokenRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        name_ = "";

        type_ = 0;

        if (clientBuilder_ == null) {
          client_ = null;
        } else {
          client_ = null;
          clientBuilder_ = null;
        }
        idpDiscoveryEndpoint_ = "";

        tokenEndpoint_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.flyteidl.core.SecurityProto.internal_static_flyteidl_core_OAuth2TokenRequest_descriptor;
      }

      @java.lang.Override
      public com.flyteidl.core.SecurityProto.OAuth2TokenRequest getDefaultInstanceForType() {
        return com.flyteidl.core.SecurityProto.OAuth2TokenRequest.getDefaultInstance();
      }

      @java.lang.Override
      public com.flyteidl.core.SecurityProto.OAuth2TokenRequest build() {
        com.flyteidl.core.SecurityProto.OAuth2TokenRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.flyteidl.core.SecurityProto.OAuth2TokenRequest buildPartial() {
        com.flyteidl.core.SecurityProto.OAuth2TokenRequest result = new com.flyteidl.core.SecurityProto.OAuth2TokenRequest(this);
        result.name_ = name_;
        result.type_ = type_;
        if (clientBuilder_ == null) {
          result.client_ = client_;
        } else {
          result.client_ = clientBuilder_.build();
        }
        result.idpDiscoveryEndpoint_ = idpDiscoveryEndpoint_;
        result.tokenEndpoint_ = tokenEndpoint_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * name indicates a unique id for the token request within this task token requests. It'll be used as a suffix for
       * environment variables and as a filename for mounting tokens as files.
       * +required
       * </pre>
       *
       * <code>string name = 1 [json_name = "name"];</code>
       * @return The name.
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * name indicates a unique id for the token request within this task token requests. It'll be used as a suffix for
       * environment variables and as a filename for mounting tokens as files.
       * +required
       * </pre>
       *
       * <code>string name = 1 [json_name = "name"];</code>
       * @return The bytes for name.
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * name indicates a unique id for the token request within this task token requests. It'll be used as a suffix for
       * environment variables and as a filename for mounting tokens as files.
       * +required
       * </pre>
       *
       * <code>string name = 1 [json_name = "name"];</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * name indicates a unique id for the token request within this task token requests. It'll be used as a suffix for
       * environment variables and as a filename for mounting tokens as files.
       * +required
       * </pre>
       *
       * <code>string name = 1 [json_name = "name"];</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * name indicates a unique id for the token request within this task token requests. It'll be used as a suffix for
       * environment variables and as a filename for mounting tokens as files.
       * +required
       * </pre>
       *
       * <code>string name = 1 [json_name = "name"];</code>
       * @param value The bytes for name to set.
       * @return This builder for chaining.
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        name_ = value;
        onChanged();
        return this;
      }

      private int type_ = 0;
      /**
       * <pre>
       * type indicates the type of the request to make. Defaults to CLIENT_CREDENTIALS.
       * +required
       * </pre>
       *
       * <code>.flyteidl.core.OAuth2TokenRequest.Type type = 2 [json_name = "type"];</code>
       * @return The enum numeric value on the wire for type.
       */
      @java.lang.Override public int getTypeValue() {
        return type_;
      }
      /**
       * <pre>
       * type indicates the type of the request to make. Defaults to CLIENT_CREDENTIALS.
       * +required
       * </pre>
       *
       * <code>.flyteidl.core.OAuth2TokenRequest.Type type = 2 [json_name = "type"];</code>
       * @param value The enum numeric value on the wire for type to set.
       * @return This builder for chaining.
       */
      public Builder setTypeValue(int value) {
        
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * type indicates the type of the request to make. Defaults to CLIENT_CREDENTIALS.
       * +required
       * </pre>
       *
       * <code>.flyteidl.core.OAuth2TokenRequest.Type type = 2 [json_name = "type"];</code>
       * @return The type.
       */
      @java.lang.Override
      public com.flyteidl.core.SecurityProto.OAuth2TokenRequest.Type getType() {
        @SuppressWarnings("deprecation")
        com.flyteidl.core.SecurityProto.OAuth2TokenRequest.Type result = com.flyteidl.core.SecurityProto.OAuth2TokenRequest.Type.valueOf(type_);
        return result == null ? com.flyteidl.core.SecurityProto.OAuth2TokenRequest.Type.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * type indicates the type of the request to make. Defaults to CLIENT_CREDENTIALS.
       * +required
       * </pre>
       *
       * <code>.flyteidl.core.OAuth2TokenRequest.Type type = 2 [json_name = "type"];</code>
       * @param value The type to set.
       * @return This builder for chaining.
       */
      public Builder setType(com.flyteidl.core.SecurityProto.OAuth2TokenRequest.Type value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        type_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * type indicates the type of the request to make. Defaults to CLIENT_CREDENTIALS.
       * +required
       * </pre>
       *
       * <code>.flyteidl.core.OAuth2TokenRequest.Type type = 2 [json_name = "type"];</code>
       * @return This builder for chaining.
       */
      public Builder clearType() {
        
        type_ = 0;
        onChanged();
        return this;
      }

      private com.flyteidl.core.SecurityProto.OAuth2Client client_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.flyteidl.core.SecurityProto.OAuth2Client, com.flyteidl.core.SecurityProto.OAuth2Client.Builder, com.flyteidl.core.SecurityProto.OAuth2ClientOrBuilder> clientBuilder_;
      /**
       * <pre>
       * client references the client_id/secret to use to request the OAuth2 token.
       * +required
       * </pre>
       *
       * <code>.flyteidl.core.OAuth2Client client = 3 [json_name = "client"];</code>
       * @return Whether the client field is set.
       */
      public boolean hasClient() {
        return clientBuilder_ != null || client_ != null;
      }
      /**
       * <pre>
       * client references the client_id/secret to use to request the OAuth2 token.
       * +required
       * </pre>
       *
       * <code>.flyteidl.core.OAuth2Client client = 3 [json_name = "client"];</code>
       * @return The client.
       */
      public com.flyteidl.core.SecurityProto.OAuth2Client getClient() {
        if (clientBuilder_ == null) {
          return client_ == null ? com.flyteidl.core.SecurityProto.OAuth2Client.getDefaultInstance() : client_;
        } else {
          return clientBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * client references the client_id/secret to use to request the OAuth2 token.
       * +required
       * </pre>
       *
       * <code>.flyteidl.core.OAuth2Client client = 3 [json_name = "client"];</code>
       */
      public Builder setClient(com.flyteidl.core.SecurityProto.OAuth2Client value) {
        if (clientBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          client_ = value;
          onChanged();
        } else {
          clientBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * client references the client_id/secret to use to request the OAuth2 token.
       * +required
       * </pre>
       *
       * <code>.flyteidl.core.OAuth2Client client = 3 [json_name = "client"];</code>
       */
      public Builder setClient(
          com.flyteidl.core.SecurityProto.OAuth2Client.Builder builderForValue) {
        if (clientBuilder_ == null) {
          client_ = builderForValue.build();
          onChanged();
        } else {
          clientBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * client references the client_id/secret to use to request the OAuth2 token.
       * +required
       * </pre>
       *
       * <code>.flyteidl.core.OAuth2Client client = 3 [json_name = "client"];</code>
       */
      public Builder mergeClient(com.flyteidl.core.SecurityProto.OAuth2Client value) {
        if (clientBuilder_ == null) {
          if (client_ != null) {
            client_ =
              com.flyteidl.core.SecurityProto.OAuth2Client.newBuilder(client_).mergeFrom(value).buildPartial();
          } else {
            client_ = value;
          }
          onChanged();
        } else {
          clientBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * client references the client_id/secret to use to request the OAuth2 token.
       * +required
       * </pre>
       *
       * <code>.flyteidl.core.OAuth2Client client = 3 [json_name = "client"];</code>
       */
      public Builder clearClient() {
        if (clientBuilder_ == null) {
          client_ = null;
          onChanged();
        } else {
          client_ = null;
          clientBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * client references the client_id/secret to use to request the OAuth2 token.
       * +required
       * </pre>
       *
       * <code>.flyteidl.core.OAuth2Client client = 3 [json_name = "client"];</code>
       */
      public com.flyteidl.core.SecurityProto.OAuth2Client.Builder getClientBuilder() {
        
        onChanged();
        return getClientFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * client references the client_id/secret to use to request the OAuth2 token.
       * +required
       * </pre>
       *
       * <code>.flyteidl.core.OAuth2Client client = 3 [json_name = "client"];</code>
       */
      public com.flyteidl.core.SecurityProto.OAuth2ClientOrBuilder getClientOrBuilder() {
        if (clientBuilder_ != null) {
          return clientBuilder_.getMessageOrBuilder();
        } else {
          return client_ == null ?
              com.flyteidl.core.SecurityProto.OAuth2Client.getDefaultInstance() : client_;
        }
      }
      /**
       * <pre>
       * client references the client_id/secret to use to request the OAuth2 token.
       * +required
       * </pre>
       *
       * <code>.flyteidl.core.OAuth2Client client = 3 [json_name = "client"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.flyteidl.core.SecurityProto.OAuth2Client, com.flyteidl.core.SecurityProto.OAuth2Client.Builder, com.flyteidl.core.SecurityProto.OAuth2ClientOrBuilder> 
          getClientFieldBuilder() {
        if (clientBuilder_ == null) {
          clientBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.flyteidl.core.SecurityProto.OAuth2Client, com.flyteidl.core.SecurityProto.OAuth2Client.Builder, com.flyteidl.core.SecurityProto.OAuth2ClientOrBuilder>(
                  getClient(),
                  getParentForChildren(),
                  isClean());
          client_ = null;
        }
        return clientBuilder_;
      }

      private java.lang.Object idpDiscoveryEndpoint_ = "";
      /**
       * <pre>
       * idp_discovery_endpoint references the discovery endpoint used to retrieve token endpoint and other related
       * information.
       * +optional
       * </pre>
       *
       * <code>string idp_discovery_endpoint = 4 [json_name = "idpDiscoveryEndpoint"];</code>
       * @return The idpDiscoveryEndpoint.
       */
      public java.lang.String getIdpDiscoveryEndpoint() {
        java.lang.Object ref = idpDiscoveryEndpoint_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          idpDiscoveryEndpoint_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * idp_discovery_endpoint references the discovery endpoint used to retrieve token endpoint and other related
       * information.
       * +optional
       * </pre>
       *
       * <code>string idp_discovery_endpoint = 4 [json_name = "idpDiscoveryEndpoint"];</code>
       * @return The bytes for idpDiscoveryEndpoint.
       */
      public com.google.protobuf.ByteString
          getIdpDiscoveryEndpointBytes() {
        java.lang.Object ref = idpDiscoveryEndpoint_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          idpDiscoveryEndpoint_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * idp_discovery_endpoint references the discovery endpoint used to retrieve token endpoint and other related
       * information.
       * +optional
       * </pre>
       *
       * <code>string idp_discovery_endpoint = 4 [json_name = "idpDiscoveryEndpoint"];</code>
       * @param value The idpDiscoveryEndpoint to set.
       * @return This builder for chaining.
       */
      public Builder setIdpDiscoveryEndpoint(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        idpDiscoveryEndpoint_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * idp_discovery_endpoint references the discovery endpoint used to retrieve token endpoint and other related
       * information.
       * +optional
       * </pre>
       *
       * <code>string idp_discovery_endpoint = 4 [json_name = "idpDiscoveryEndpoint"];</code>
       * @return This builder for chaining.
       */
      public Builder clearIdpDiscoveryEndpoint() {
        
        idpDiscoveryEndpoint_ = getDefaultInstance().getIdpDiscoveryEndpoint();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * idp_discovery_endpoint references the discovery endpoint used to retrieve token endpoint and other related
       * information.
       * +optional
       * </pre>
       *
       * <code>string idp_discovery_endpoint = 4 [json_name = "idpDiscoveryEndpoint"];</code>
       * @param value The bytes for idpDiscoveryEndpoint to set.
       * @return This builder for chaining.
       */
      public Builder setIdpDiscoveryEndpointBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        idpDiscoveryEndpoint_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object tokenEndpoint_ = "";
      /**
       * <pre>
       * token_endpoint references the token issuance endpoint. If idp_discovery_endpoint is not provided, this parameter is
       * mandatory.
       * +optional
       * </pre>
       *
       * <code>string token_endpoint = 5 [json_name = "tokenEndpoint"];</code>
       * @return The tokenEndpoint.
       */
      public java.lang.String getTokenEndpoint() {
        java.lang.Object ref = tokenEndpoint_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          tokenEndpoint_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * token_endpoint references the token issuance endpoint. If idp_discovery_endpoint is not provided, this parameter is
       * mandatory.
       * +optional
       * </pre>
       *
       * <code>string token_endpoint = 5 [json_name = "tokenEndpoint"];</code>
       * @return The bytes for tokenEndpoint.
       */
      public com.google.protobuf.ByteString
          getTokenEndpointBytes() {
        java.lang.Object ref = tokenEndpoint_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          tokenEndpoint_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * token_endpoint references the token issuance endpoint. If idp_discovery_endpoint is not provided, this parameter is
       * mandatory.
       * +optional
       * </pre>
       *
       * <code>string token_endpoint = 5 [json_name = "tokenEndpoint"];</code>
       * @param value The tokenEndpoint to set.
       * @return This builder for chaining.
       */
      public Builder setTokenEndpoint(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        tokenEndpoint_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * token_endpoint references the token issuance endpoint. If idp_discovery_endpoint is not provided, this parameter is
       * mandatory.
       * +optional
       * </pre>
       *
       * <code>string token_endpoint = 5 [json_name = "tokenEndpoint"];</code>
       * @return This builder for chaining.
       */
      public Builder clearTokenEndpoint() {
        
        tokenEndpoint_ = getDefaultInstance().getTokenEndpoint();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * token_endpoint references the token issuance endpoint. If idp_discovery_endpoint is not provided, this parameter is
       * mandatory.
       * +optional
       * </pre>
       *
       * <code>string token_endpoint = 5 [json_name = "tokenEndpoint"];</code>
       * @param value The bytes for tokenEndpoint to set.
       * @return This builder for chaining.
       */
      public Builder setTokenEndpointBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        tokenEndpoint_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flyteidl.core.OAuth2TokenRequest)
    }

    // @@protoc_insertion_point(class_scope:flyteidl.core.OAuth2TokenRequest)
    private static final com.flyteidl.core.SecurityProto.OAuth2TokenRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.flyteidl.core.SecurityProto.OAuth2TokenRequest();
    }

    public static com.flyteidl.core.SecurityProto.OAuth2TokenRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<OAuth2TokenRequest>
        PARSER = new com.google.protobuf.AbstractParser<OAuth2TokenRequest>() {
      @java.lang.Override
      public OAuth2TokenRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(
                  builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<OAuth2TokenRequest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<OAuth2TokenRequest> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.flyteidl.core.SecurityProto.OAuth2TokenRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SecurityContextOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flyteidl.core.SecurityContext)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * run_as encapsulates the identity a pod should run as. If the task fills in multiple fields here, it'll be up to the
     * backend plugin to choose the appropriate identity for the execution engine the task will run on.
     * </pre>
     *
     * <code>.flyteidl.core.Identity run_as = 1 [json_name = "runAs"];</code>
     * @return Whether the runAs field is set.
     */
    boolean hasRunAs();
    /**
     * <pre>
     * run_as encapsulates the identity a pod should run as. If the task fills in multiple fields here, it'll be up to the
     * backend plugin to choose the appropriate identity for the execution engine the task will run on.
     * </pre>
     *
     * <code>.flyteidl.core.Identity run_as = 1 [json_name = "runAs"];</code>
     * @return The runAs.
     */
    com.flyteidl.core.SecurityProto.Identity getRunAs();
    /**
     * <pre>
     * run_as encapsulates the identity a pod should run as. If the task fills in multiple fields here, it'll be up to the
     * backend plugin to choose the appropriate identity for the execution engine the task will run on.
     * </pre>
     *
     * <code>.flyteidl.core.Identity run_as = 1 [json_name = "runAs"];</code>
     */
    com.flyteidl.core.SecurityProto.IdentityOrBuilder getRunAsOrBuilder();

    /**
     * <pre>
     * secrets indicate the list of secrets the task needs in order to proceed. Secrets will be mounted/passed to the
     * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
     * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
     * to the secret) and to pass it to the remote execution engine.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Secret secrets = 2 [json_name = "secrets"];</code>
     */
    java.util.List<com.flyteidl.core.SecurityProto.Secret> 
        getSecretsList();
    /**
     * <pre>
     * secrets indicate the list of secrets the task needs in order to proceed. Secrets will be mounted/passed to the
     * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
     * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
     * to the secret) and to pass it to the remote execution engine.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Secret secrets = 2 [json_name = "secrets"];</code>
     */
    com.flyteidl.core.SecurityProto.Secret getSecrets(int index);
    /**
     * <pre>
     * secrets indicate the list of secrets the task needs in order to proceed. Secrets will be mounted/passed to the
     * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
     * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
     * to the secret) and to pass it to the remote execution engine.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Secret secrets = 2 [json_name = "secrets"];</code>
     */
    int getSecretsCount();
    /**
     * <pre>
     * secrets indicate the list of secrets the task needs in order to proceed. Secrets will be mounted/passed to the
     * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
     * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
     * to the secret) and to pass it to the remote execution engine.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Secret secrets = 2 [json_name = "secrets"];</code>
     */
    java.util.List<? extends com.flyteidl.core.SecurityProto.SecretOrBuilder> 
        getSecretsOrBuilderList();
    /**
     * <pre>
     * secrets indicate the list of secrets the task needs in order to proceed. Secrets will be mounted/passed to the
     * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
     * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
     * to the secret) and to pass it to the remote execution engine.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Secret secrets = 2 [json_name = "secrets"];</code>
     */
    com.flyteidl.core.SecurityProto.SecretOrBuilder getSecretsOrBuilder(
        int index);

    /**
     * <pre>
     * tokens indicate the list of token requests the task needs in order to proceed. Tokens will be mounted/passed to the
     * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
     * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
     * to the secret) and to pass it to the remote execution engine.
     * </pre>
     *
     * <code>repeated .flyteidl.core.OAuth2TokenRequest tokens = 3 [json_name = "tokens"];</code>
     */
    java.util.List<com.flyteidl.core.SecurityProto.OAuth2TokenRequest> 
        getTokensList();
    /**
     * <pre>
     * tokens indicate the list of token requests the task needs in order to proceed. Tokens will be mounted/passed to the
     * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
     * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
     * to the secret) and to pass it to the remote execution engine.
     * </pre>
     *
     * <code>repeated .flyteidl.core.OAuth2TokenRequest tokens = 3 [json_name = "tokens"];</code>
     */
    com.flyteidl.core.SecurityProto.OAuth2TokenRequest getTokens(int index);
    /**
     * <pre>
     * tokens indicate the list of token requests the task needs in order to proceed. Tokens will be mounted/passed to the
     * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
     * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
     * to the secret) and to pass it to the remote execution engine.
     * </pre>
     *
     * <code>repeated .flyteidl.core.OAuth2TokenRequest tokens = 3 [json_name = "tokens"];</code>
     */
    int getTokensCount();
    /**
     * <pre>
     * tokens indicate the list of token requests the task needs in order to proceed. Tokens will be mounted/passed to the
     * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
     * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
     * to the secret) and to pass it to the remote execution engine.
     * </pre>
     *
     * <code>repeated .flyteidl.core.OAuth2TokenRequest tokens = 3 [json_name = "tokens"];</code>
     */
    java.util.List<? extends com.flyteidl.core.SecurityProto.OAuth2TokenRequestOrBuilder> 
        getTokensOrBuilderList();
    /**
     * <pre>
     * tokens indicate the list of token requests the task needs in order to proceed. Tokens will be mounted/passed to the
     * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
     * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
     * to the secret) and to pass it to the remote execution engine.
     * </pre>
     *
     * <code>repeated .flyteidl.core.OAuth2TokenRequest tokens = 3 [json_name = "tokens"];</code>
     */
    com.flyteidl.core.SecurityProto.OAuth2TokenRequestOrBuilder getTokensOrBuilder(
        int index);
  }
  /**
   * <pre>
   * SecurityContext holds security attributes that apply to tasks.
   * </pre>
   *
   * Protobuf type {@code flyteidl.core.SecurityContext}
   */
  public static final class SecurityContext extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flyteidl.core.SecurityContext)
      SecurityContextOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use SecurityContext.newBuilder() to construct.
    private SecurityContext(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SecurityContext() {
      secrets_ = java.util.Collections.emptyList();
      tokens_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new SecurityContext();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.flyteidl.core.SecurityProto.internal_static_flyteidl_core_SecurityContext_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.flyteidl.core.SecurityProto.internal_static_flyteidl_core_SecurityContext_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.flyteidl.core.SecurityProto.SecurityContext.class, com.flyteidl.core.SecurityProto.SecurityContext.Builder.class);
    }

    public static final int RUN_AS_FIELD_NUMBER = 1;
    private com.flyteidl.core.SecurityProto.Identity runAs_;
    /**
     * <pre>
     * run_as encapsulates the identity a pod should run as. If the task fills in multiple fields here, it'll be up to the
     * backend plugin to choose the appropriate identity for the execution engine the task will run on.
     * </pre>
     *
     * <code>.flyteidl.core.Identity run_as = 1 [json_name = "runAs"];</code>
     * @return Whether the runAs field is set.
     */
    @java.lang.Override
    public boolean hasRunAs() {
      return runAs_ != null;
    }
    /**
     * <pre>
     * run_as encapsulates the identity a pod should run as. If the task fills in multiple fields here, it'll be up to the
     * backend plugin to choose the appropriate identity for the execution engine the task will run on.
     * </pre>
     *
     * <code>.flyteidl.core.Identity run_as = 1 [json_name = "runAs"];</code>
     * @return The runAs.
     */
    @java.lang.Override
    public com.flyteidl.core.SecurityProto.Identity getRunAs() {
      return runAs_ == null ? com.flyteidl.core.SecurityProto.Identity.getDefaultInstance() : runAs_;
    }
    /**
     * <pre>
     * run_as encapsulates the identity a pod should run as. If the task fills in multiple fields here, it'll be up to the
     * backend plugin to choose the appropriate identity for the execution engine the task will run on.
     * </pre>
     *
     * <code>.flyteidl.core.Identity run_as = 1 [json_name = "runAs"];</code>
     */
    @java.lang.Override
    public com.flyteidl.core.SecurityProto.IdentityOrBuilder getRunAsOrBuilder() {
      return getRunAs();
    }

    public static final int SECRETS_FIELD_NUMBER = 2;
    private java.util.List<com.flyteidl.core.SecurityProto.Secret> secrets_;
    /**
     * <pre>
     * secrets indicate the list of secrets the task needs in order to proceed. Secrets will be mounted/passed to the
     * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
     * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
     * to the secret) and to pass it to the remote execution engine.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Secret secrets = 2 [json_name = "secrets"];</code>
     */
    @java.lang.Override
    public java.util.List<com.flyteidl.core.SecurityProto.Secret> getSecretsList() {
      return secrets_;
    }
    /**
     * <pre>
     * secrets indicate the list of secrets the task needs in order to proceed. Secrets will be mounted/passed to the
     * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
     * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
     * to the secret) and to pass it to the remote execution engine.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Secret secrets = 2 [json_name = "secrets"];</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.flyteidl.core.SecurityProto.SecretOrBuilder> 
        getSecretsOrBuilderList() {
      return secrets_;
    }
    /**
     * <pre>
     * secrets indicate the list of secrets the task needs in order to proceed. Secrets will be mounted/passed to the
     * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
     * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
     * to the secret) and to pass it to the remote execution engine.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Secret secrets = 2 [json_name = "secrets"];</code>
     */
    @java.lang.Override
    public int getSecretsCount() {
      return secrets_.size();
    }
    /**
     * <pre>
     * secrets indicate the list of secrets the task needs in order to proceed. Secrets will be mounted/passed to the
     * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
     * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
     * to the secret) and to pass it to the remote execution engine.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Secret secrets = 2 [json_name = "secrets"];</code>
     */
    @java.lang.Override
    public com.flyteidl.core.SecurityProto.Secret getSecrets(int index) {
      return secrets_.get(index);
    }
    /**
     * <pre>
     * secrets indicate the list of secrets the task needs in order to proceed. Secrets will be mounted/passed to the
     * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
     * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
     * to the secret) and to pass it to the remote execution engine.
     * </pre>
     *
     * <code>repeated .flyteidl.core.Secret secrets = 2 [json_name = "secrets"];</code>
     */
    @java.lang.Override
    public com.flyteidl.core.SecurityProto.SecretOrBuilder getSecretsOrBuilder(
        int index) {
      return secrets_.get(index);
    }

    public static final int TOKENS_FIELD_NUMBER = 3;
    private java.util.List<com.flyteidl.core.SecurityProto.OAuth2TokenRequest> tokens_;
    /**
     * <pre>
     * tokens indicate the list of token requests the task needs in order to proceed. Tokens will be mounted/passed to the
     * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
     * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
     * to the secret) and to pass it to the remote execution engine.
     * </pre>
     *
     * <code>repeated .flyteidl.core.OAuth2TokenRequest tokens = 3 [json_name = "tokens"];</code>
     */
    @java.lang.Override
    public java.util.List<com.flyteidl.core.SecurityProto.OAuth2TokenRequest> getTokensList() {
      return tokens_;
    }
    /**
     * <pre>
     * tokens indicate the list of token requests the task needs in order to proceed. Tokens will be mounted/passed to the
     * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
     * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
     * to the secret) and to pass it to the remote execution engine.
     * </pre>
     *
     * <code>repeated .flyteidl.core.OAuth2TokenRequest tokens = 3 [json_name = "tokens"];</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.flyteidl.core.SecurityProto.OAuth2TokenRequestOrBuilder> 
        getTokensOrBuilderList() {
      return tokens_;
    }
    /**
     * <pre>
     * tokens indicate the list of token requests the task needs in order to proceed. Tokens will be mounted/passed to the
     * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
     * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
     * to the secret) and to pass it to the remote execution engine.
     * </pre>
     *
     * <code>repeated .flyteidl.core.OAuth2TokenRequest tokens = 3 [json_name = "tokens"];</code>
     */
    @java.lang.Override
    public int getTokensCount() {
      return tokens_.size();
    }
    /**
     * <pre>
     * tokens indicate the list of token requests the task needs in order to proceed. Tokens will be mounted/passed to the
     * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
     * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
     * to the secret) and to pass it to the remote execution engine.
     * </pre>
     *
     * <code>repeated .flyteidl.core.OAuth2TokenRequest tokens = 3 [json_name = "tokens"];</code>
     */
    @java.lang.Override
    public com.flyteidl.core.SecurityProto.OAuth2TokenRequest getTokens(int index) {
      return tokens_.get(index);
    }
    /**
     * <pre>
     * tokens indicate the list of token requests the task needs in order to proceed. Tokens will be mounted/passed to the
     * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
     * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
     * to the secret) and to pass it to the remote execution engine.
     * </pre>
     *
     * <code>repeated .flyteidl.core.OAuth2TokenRequest tokens = 3 [json_name = "tokens"];</code>
     */
    @java.lang.Override
    public com.flyteidl.core.SecurityProto.OAuth2TokenRequestOrBuilder getTokensOrBuilder(
        int index) {
      return tokens_.get(index);
    }

    public static com.flyteidl.core.SecurityProto.SecurityContext parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.flyteidl.core.SecurityProto.SecurityContext parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.flyteidl.core.SecurityProto.SecurityContext parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.flyteidl.core.SecurityProto.SecurityContext parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.flyteidl.core.SecurityProto.SecurityContext parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.flyteidl.core.SecurityProto.SecurityContext parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.flyteidl.core.SecurityProto.SecurityContext parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.flyteidl.core.SecurityProto.SecurityContext parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.flyteidl.core.SecurityProto.SecurityContext parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.flyteidl.core.SecurityProto.SecurityContext parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.flyteidl.core.SecurityProto.SecurityContext parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.flyteidl.core.SecurityProto.SecurityContext parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.flyteidl.core.SecurityProto.SecurityContext prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * SecurityContext holds security attributes that apply to tasks.
     * </pre>
     *
     * Protobuf type {@code flyteidl.core.SecurityContext}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flyteidl.core.SecurityContext)
        com.flyteidl.core.SecurityProto.SecurityContextOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.flyteidl.core.SecurityProto.internal_static_flyteidl_core_SecurityContext_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.flyteidl.core.SecurityProto.internal_static_flyteidl_core_SecurityContext_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.flyteidl.core.SecurityProto.SecurityContext.class, com.flyteidl.core.SecurityProto.SecurityContext.Builder.class);
      }

      // Construct using com.flyteidl.core.SecurityProto.SecurityContext.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getSecretsFieldBuilder();
          getTokensFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (runAsBuilder_ == null) {
          runAs_ = null;
        } else {
          runAs_ = null;
          runAsBuilder_ = null;
        }
        if (secretsBuilder_ == null) {
          secrets_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          secretsBuilder_.clear();
        }
        if (tokensBuilder_ == null) {
          tokens_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          tokensBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.flyteidl.core.SecurityProto.internal_static_flyteidl_core_SecurityContext_descriptor;
      }

      @java.lang.Override
      public com.flyteidl.core.SecurityProto.SecurityContext getDefaultInstanceForType() {
        return com.flyteidl.core.SecurityProto.SecurityContext.getDefaultInstance();
      }

      @java.lang.Override
      public com.flyteidl.core.SecurityProto.SecurityContext build() {
        com.flyteidl.core.SecurityProto.SecurityContext result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.flyteidl.core.SecurityProto.SecurityContext buildPartial() {
        com.flyteidl.core.SecurityProto.SecurityContext result = new com.flyteidl.core.SecurityProto.SecurityContext(this);
        int from_bitField0_ = bitField0_;
        if (runAsBuilder_ == null) {
          result.runAs_ = runAs_;
        } else {
          result.runAs_ = runAsBuilder_.build();
        }
        if (secretsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            secrets_ = java.util.Collections.unmodifiableList(secrets_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.secrets_ = secrets_;
        } else {
          result.secrets_ = secretsBuilder_.build();
        }
        if (tokensBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            tokens_ = java.util.Collections.unmodifiableList(tokens_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.tokens_ = tokens_;
        } else {
          result.tokens_ = tokensBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      private int bitField0_;

      private com.flyteidl.core.SecurityProto.Identity runAs_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.flyteidl.core.SecurityProto.Identity, com.flyteidl.core.SecurityProto.Identity.Builder, com.flyteidl.core.SecurityProto.IdentityOrBuilder> runAsBuilder_;
      /**
       * <pre>
       * run_as encapsulates the identity a pod should run as. If the task fills in multiple fields here, it'll be up to the
       * backend plugin to choose the appropriate identity for the execution engine the task will run on.
       * </pre>
       *
       * <code>.flyteidl.core.Identity run_as = 1 [json_name = "runAs"];</code>
       * @return Whether the runAs field is set.
       */
      public boolean hasRunAs() {
        return runAsBuilder_ != null || runAs_ != null;
      }
      /**
       * <pre>
       * run_as encapsulates the identity a pod should run as. If the task fills in multiple fields here, it'll be up to the
       * backend plugin to choose the appropriate identity for the execution engine the task will run on.
       * </pre>
       *
       * <code>.flyteidl.core.Identity run_as = 1 [json_name = "runAs"];</code>
       * @return The runAs.
       */
      public com.flyteidl.core.SecurityProto.Identity getRunAs() {
        if (runAsBuilder_ == null) {
          return runAs_ == null ? com.flyteidl.core.SecurityProto.Identity.getDefaultInstance() : runAs_;
        } else {
          return runAsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * run_as encapsulates the identity a pod should run as. If the task fills in multiple fields here, it'll be up to the
       * backend plugin to choose the appropriate identity for the execution engine the task will run on.
       * </pre>
       *
       * <code>.flyteidl.core.Identity run_as = 1 [json_name = "runAs"];</code>
       */
      public Builder setRunAs(com.flyteidl.core.SecurityProto.Identity value) {
        if (runAsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          runAs_ = value;
          onChanged();
        } else {
          runAsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * run_as encapsulates the identity a pod should run as. If the task fills in multiple fields here, it'll be up to the
       * backend plugin to choose the appropriate identity for the execution engine the task will run on.
       * </pre>
       *
       * <code>.flyteidl.core.Identity run_as = 1 [json_name = "runAs"];</code>
       */
      public Builder setRunAs(
          com.flyteidl.core.SecurityProto.Identity.Builder builderForValue) {
        if (runAsBuilder_ == null) {
          runAs_ = builderForValue.build();
          onChanged();
        } else {
          runAsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * run_as encapsulates the identity a pod should run as. If the task fills in multiple fields here, it'll be up to the
       * backend plugin to choose the appropriate identity for the execution engine the task will run on.
       * </pre>
       *
       * <code>.flyteidl.core.Identity run_as = 1 [json_name = "runAs"];</code>
       */
      public Builder mergeRunAs(com.flyteidl.core.SecurityProto.Identity value) {
        if (runAsBuilder_ == null) {
          if (runAs_ != null) {
            runAs_ =
              com.flyteidl.core.SecurityProto.Identity.newBuilder(runAs_).mergeFrom(value).buildPartial();
          } else {
            runAs_ = value;
          }
          onChanged();
        } else {
          runAsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * run_as encapsulates the identity a pod should run as. If the task fills in multiple fields here, it'll be up to the
       * backend plugin to choose the appropriate identity for the execution engine the task will run on.
       * </pre>
       *
       * <code>.flyteidl.core.Identity run_as = 1 [json_name = "runAs"];</code>
       */
      public Builder clearRunAs() {
        if (runAsBuilder_ == null) {
          runAs_ = null;
          onChanged();
        } else {
          runAs_ = null;
          runAsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * run_as encapsulates the identity a pod should run as. If the task fills in multiple fields here, it'll be up to the
       * backend plugin to choose the appropriate identity for the execution engine the task will run on.
       * </pre>
       *
       * <code>.flyteidl.core.Identity run_as = 1 [json_name = "runAs"];</code>
       */
      public com.flyteidl.core.SecurityProto.Identity.Builder getRunAsBuilder() {
        
        onChanged();
        return getRunAsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * run_as encapsulates the identity a pod should run as. If the task fills in multiple fields here, it'll be up to the
       * backend plugin to choose the appropriate identity for the execution engine the task will run on.
       * </pre>
       *
       * <code>.flyteidl.core.Identity run_as = 1 [json_name = "runAs"];</code>
       */
      public com.flyteidl.core.SecurityProto.IdentityOrBuilder getRunAsOrBuilder() {
        if (runAsBuilder_ != null) {
          return runAsBuilder_.getMessageOrBuilder();
        } else {
          return runAs_ == null ?
              com.flyteidl.core.SecurityProto.Identity.getDefaultInstance() : runAs_;
        }
      }
      /**
       * <pre>
       * run_as encapsulates the identity a pod should run as. If the task fills in multiple fields here, it'll be up to the
       * backend plugin to choose the appropriate identity for the execution engine the task will run on.
       * </pre>
       *
       * <code>.flyteidl.core.Identity run_as = 1 [json_name = "runAs"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.flyteidl.core.SecurityProto.Identity, com.flyteidl.core.SecurityProto.Identity.Builder, com.flyteidl.core.SecurityProto.IdentityOrBuilder> 
          getRunAsFieldBuilder() {
        if (runAsBuilder_ == null) {
          runAsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.flyteidl.core.SecurityProto.Identity, com.flyteidl.core.SecurityProto.Identity.Builder, com.flyteidl.core.SecurityProto.IdentityOrBuilder>(
                  getRunAs(),
                  getParentForChildren(),
                  isClean());
          runAs_ = null;
        }
        return runAsBuilder_;
      }

      private java.util.List<com.flyteidl.core.SecurityProto.Secret> secrets_ =
        java.util.Collections.emptyList();
      private void ensureSecretsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          secrets_ = new java.util.ArrayList<com.flyteidl.core.SecurityProto.Secret>(secrets_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.flyteidl.core.SecurityProto.Secret, com.flyteidl.core.SecurityProto.Secret.Builder, com.flyteidl.core.SecurityProto.SecretOrBuilder> secretsBuilder_;

      /**
       * <pre>
       * secrets indicate the list of secrets the task needs in order to proceed. Secrets will be mounted/passed to the
       * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
       * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
       * to the secret) and to pass it to the remote execution engine.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Secret secrets = 2 [json_name = "secrets"];</code>
       */
      public java.util.List<com.flyteidl.core.SecurityProto.Secret> getSecretsList() {
        if (secretsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(secrets_);
        } else {
          return secretsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * secrets indicate the list of secrets the task needs in order to proceed. Secrets will be mounted/passed to the
       * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
       * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
       * to the secret) and to pass it to the remote execution engine.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Secret secrets = 2 [json_name = "secrets"];</code>
       */
      public int getSecretsCount() {
        if (secretsBuilder_ == null) {
          return secrets_.size();
        } else {
          return secretsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * secrets indicate the list of secrets the task needs in order to proceed. Secrets will be mounted/passed to the
       * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
       * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
       * to the secret) and to pass it to the remote execution engine.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Secret secrets = 2 [json_name = "secrets"];</code>
       */
      public com.flyteidl.core.SecurityProto.Secret getSecrets(int index) {
        if (secretsBuilder_ == null) {
          return secrets_.get(index);
        } else {
          return secretsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * secrets indicate the list of secrets the task needs in order to proceed. Secrets will be mounted/passed to the
       * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
       * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
       * to the secret) and to pass it to the remote execution engine.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Secret secrets = 2 [json_name = "secrets"];</code>
       */
      public Builder setSecrets(
          int index, com.flyteidl.core.SecurityProto.Secret value) {
        if (secretsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSecretsIsMutable();
          secrets_.set(index, value);
          onChanged();
        } else {
          secretsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * secrets indicate the list of secrets the task needs in order to proceed. Secrets will be mounted/passed to the
       * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
       * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
       * to the secret) and to pass it to the remote execution engine.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Secret secrets = 2 [json_name = "secrets"];</code>
       */
      public Builder setSecrets(
          int index, com.flyteidl.core.SecurityProto.Secret.Builder builderForValue) {
        if (secretsBuilder_ == null) {
          ensureSecretsIsMutable();
          secrets_.set(index, builderForValue.build());
          onChanged();
        } else {
          secretsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * secrets indicate the list of secrets the task needs in order to proceed. Secrets will be mounted/passed to the
       * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
       * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
       * to the secret) and to pass it to the remote execution engine.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Secret secrets = 2 [json_name = "secrets"];</code>
       */
      public Builder addSecrets(com.flyteidl.core.SecurityProto.Secret value) {
        if (secretsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSecretsIsMutable();
          secrets_.add(value);
          onChanged();
        } else {
          secretsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * secrets indicate the list of secrets the task needs in order to proceed. Secrets will be mounted/passed to the
       * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
       * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
       * to the secret) and to pass it to the remote execution engine.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Secret secrets = 2 [json_name = "secrets"];</code>
       */
      public Builder addSecrets(
          int index, com.flyteidl.core.SecurityProto.Secret value) {
        if (secretsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSecretsIsMutable();
          secrets_.add(index, value);
          onChanged();
        } else {
          secretsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * secrets indicate the list of secrets the task needs in order to proceed. Secrets will be mounted/passed to the
       * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
       * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
       * to the secret) and to pass it to the remote execution engine.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Secret secrets = 2 [json_name = "secrets"];</code>
       */
      public Builder addSecrets(
          com.flyteidl.core.SecurityProto.Secret.Builder builderForValue) {
        if (secretsBuilder_ == null) {
          ensureSecretsIsMutable();
          secrets_.add(builderForValue.build());
          onChanged();
        } else {
          secretsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * secrets indicate the list of secrets the task needs in order to proceed. Secrets will be mounted/passed to the
       * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
       * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
       * to the secret) and to pass it to the remote execution engine.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Secret secrets = 2 [json_name = "secrets"];</code>
       */
      public Builder addSecrets(
          int index, com.flyteidl.core.SecurityProto.Secret.Builder builderForValue) {
        if (secretsBuilder_ == null) {
          ensureSecretsIsMutable();
          secrets_.add(index, builderForValue.build());
          onChanged();
        } else {
          secretsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * secrets indicate the list of secrets the task needs in order to proceed. Secrets will be mounted/passed to the
       * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
       * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
       * to the secret) and to pass it to the remote execution engine.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Secret secrets = 2 [json_name = "secrets"];</code>
       */
      public Builder addAllSecrets(
          java.lang.Iterable<? extends com.flyteidl.core.SecurityProto.Secret> values) {
        if (secretsBuilder_ == null) {
          ensureSecretsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, secrets_);
          onChanged();
        } else {
          secretsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * secrets indicate the list of secrets the task needs in order to proceed. Secrets will be mounted/passed to the
       * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
       * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
       * to the secret) and to pass it to the remote execution engine.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Secret secrets = 2 [json_name = "secrets"];</code>
       */
      public Builder clearSecrets() {
        if (secretsBuilder_ == null) {
          secrets_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          secretsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * secrets indicate the list of secrets the task needs in order to proceed. Secrets will be mounted/passed to the
       * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
       * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
       * to the secret) and to pass it to the remote execution engine.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Secret secrets = 2 [json_name = "secrets"];</code>
       */
      public Builder removeSecrets(int index) {
        if (secretsBuilder_ == null) {
          ensureSecretsIsMutable();
          secrets_.remove(index);
          onChanged();
        } else {
          secretsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * secrets indicate the list of secrets the task needs in order to proceed. Secrets will be mounted/passed to the
       * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
       * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
       * to the secret) and to pass it to the remote execution engine.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Secret secrets = 2 [json_name = "secrets"];</code>
       */
      public com.flyteidl.core.SecurityProto.Secret.Builder getSecretsBuilder(
          int index) {
        return getSecretsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * secrets indicate the list of secrets the task needs in order to proceed. Secrets will be mounted/passed to the
       * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
       * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
       * to the secret) and to pass it to the remote execution engine.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Secret secrets = 2 [json_name = "secrets"];</code>
       */
      public com.flyteidl.core.SecurityProto.SecretOrBuilder getSecretsOrBuilder(
          int index) {
        if (secretsBuilder_ == null) {
          return secrets_.get(index);  } else {
          return secretsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * secrets indicate the list of secrets the task needs in order to proceed. Secrets will be mounted/passed to the
       * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
       * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
       * to the secret) and to pass it to the remote execution engine.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Secret secrets = 2 [json_name = "secrets"];</code>
       */
      public java.util.List<? extends com.flyteidl.core.SecurityProto.SecretOrBuilder> 
           getSecretsOrBuilderList() {
        if (secretsBuilder_ != null) {
          return secretsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(secrets_);
        }
      }
      /**
       * <pre>
       * secrets indicate the list of secrets the task needs in order to proceed. Secrets will be mounted/passed to the
       * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
       * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
       * to the secret) and to pass it to the remote execution engine.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Secret secrets = 2 [json_name = "secrets"];</code>
       */
      public com.flyteidl.core.SecurityProto.Secret.Builder addSecretsBuilder() {
        return getSecretsFieldBuilder().addBuilder(
            com.flyteidl.core.SecurityProto.Secret.getDefaultInstance());
      }
      /**
       * <pre>
       * secrets indicate the list of secrets the task needs in order to proceed. Secrets will be mounted/passed to the
       * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
       * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
       * to the secret) and to pass it to the remote execution engine.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Secret secrets = 2 [json_name = "secrets"];</code>
       */
      public com.flyteidl.core.SecurityProto.Secret.Builder addSecretsBuilder(
          int index) {
        return getSecretsFieldBuilder().addBuilder(
            index, com.flyteidl.core.SecurityProto.Secret.getDefaultInstance());
      }
      /**
       * <pre>
       * secrets indicate the list of secrets the task needs in order to proceed. Secrets will be mounted/passed to the
       * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
       * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
       * to the secret) and to pass it to the remote execution engine.
       * </pre>
       *
       * <code>repeated .flyteidl.core.Secret secrets = 2 [json_name = "secrets"];</code>
       */
      public java.util.List<com.flyteidl.core.SecurityProto.Secret.Builder> 
           getSecretsBuilderList() {
        return getSecretsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.flyteidl.core.SecurityProto.Secret, com.flyteidl.core.SecurityProto.Secret.Builder, com.flyteidl.core.SecurityProto.SecretOrBuilder> 
          getSecretsFieldBuilder() {
        if (secretsBuilder_ == null) {
          secretsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.flyteidl.core.SecurityProto.Secret, com.flyteidl.core.SecurityProto.Secret.Builder, com.flyteidl.core.SecurityProto.SecretOrBuilder>(
                  secrets_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          secrets_ = null;
        }
        return secretsBuilder_;
      }

      private java.util.List<com.flyteidl.core.SecurityProto.OAuth2TokenRequest> tokens_ =
        java.util.Collections.emptyList();
      private void ensureTokensIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          tokens_ = new java.util.ArrayList<com.flyteidl.core.SecurityProto.OAuth2TokenRequest>(tokens_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.flyteidl.core.SecurityProto.OAuth2TokenRequest, com.flyteidl.core.SecurityProto.OAuth2TokenRequest.Builder, com.flyteidl.core.SecurityProto.OAuth2TokenRequestOrBuilder> tokensBuilder_;

      /**
       * <pre>
       * tokens indicate the list of token requests the task needs in order to proceed. Tokens will be mounted/passed to the
       * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
       * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
       * to the secret) and to pass it to the remote execution engine.
       * </pre>
       *
       * <code>repeated .flyteidl.core.OAuth2TokenRequest tokens = 3 [json_name = "tokens"];</code>
       */
      public java.util.List<com.flyteidl.core.SecurityProto.OAuth2TokenRequest> getTokensList() {
        if (tokensBuilder_ == null) {
          return java.util.Collections.unmodifiableList(tokens_);
        } else {
          return tokensBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * tokens indicate the list of token requests the task needs in order to proceed. Tokens will be mounted/passed to the
       * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
       * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
       * to the secret) and to pass it to the remote execution engine.
       * </pre>
       *
       * <code>repeated .flyteidl.core.OAuth2TokenRequest tokens = 3 [json_name = "tokens"];</code>
       */
      public int getTokensCount() {
        if (tokensBuilder_ == null) {
          return tokens_.size();
        } else {
          return tokensBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * tokens indicate the list of token requests the task needs in order to proceed. Tokens will be mounted/passed to the
       * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
       * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
       * to the secret) and to pass it to the remote execution engine.
       * </pre>
       *
       * <code>repeated .flyteidl.core.OAuth2TokenRequest tokens = 3 [json_name = "tokens"];</code>
       */
      public com.flyteidl.core.SecurityProto.OAuth2TokenRequest getTokens(int index) {
        if (tokensBuilder_ == null) {
          return tokens_.get(index);
        } else {
          return tokensBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * tokens indicate the list of token requests the task needs in order to proceed. Tokens will be mounted/passed to the
       * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
       * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
       * to the secret) and to pass it to the remote execution engine.
       * </pre>
       *
       * <code>repeated .flyteidl.core.OAuth2TokenRequest tokens = 3 [json_name = "tokens"];</code>
       */
      public Builder setTokens(
          int index, com.flyteidl.core.SecurityProto.OAuth2TokenRequest value) {
        if (tokensBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTokensIsMutable();
          tokens_.set(index, value);
          onChanged();
        } else {
          tokensBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * tokens indicate the list of token requests the task needs in order to proceed. Tokens will be mounted/passed to the
       * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
       * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
       * to the secret) and to pass it to the remote execution engine.
       * </pre>
       *
       * <code>repeated .flyteidl.core.OAuth2TokenRequest tokens = 3 [json_name = "tokens"];</code>
       */
      public Builder setTokens(
          int index, com.flyteidl.core.SecurityProto.OAuth2TokenRequest.Builder builderForValue) {
        if (tokensBuilder_ == null) {
          ensureTokensIsMutable();
          tokens_.set(index, builderForValue.build());
          onChanged();
        } else {
          tokensBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * tokens indicate the list of token requests the task needs in order to proceed. Tokens will be mounted/passed to the
       * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
       * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
       * to the secret) and to pass it to the remote execution engine.
       * </pre>
       *
       * <code>repeated .flyteidl.core.OAuth2TokenRequest tokens = 3 [json_name = "tokens"];</code>
       */
      public Builder addTokens(com.flyteidl.core.SecurityProto.OAuth2TokenRequest value) {
        if (tokensBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTokensIsMutable();
          tokens_.add(value);
          onChanged();
        } else {
          tokensBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * tokens indicate the list of token requests the task needs in order to proceed. Tokens will be mounted/passed to the
       * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
       * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
       * to the secret) and to pass it to the remote execution engine.
       * </pre>
       *
       * <code>repeated .flyteidl.core.OAuth2TokenRequest tokens = 3 [json_name = "tokens"];</code>
       */
      public Builder addTokens(
          int index, com.flyteidl.core.SecurityProto.OAuth2TokenRequest value) {
        if (tokensBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTokensIsMutable();
          tokens_.add(index, value);
          onChanged();
        } else {
          tokensBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * tokens indicate the list of token requests the task needs in order to proceed. Tokens will be mounted/passed to the
       * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
       * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
       * to the secret) and to pass it to the remote execution engine.
       * </pre>
       *
       * <code>repeated .flyteidl.core.OAuth2TokenRequest tokens = 3 [json_name = "tokens"];</code>
       */
      public Builder addTokens(
          com.flyteidl.core.SecurityProto.OAuth2TokenRequest.Builder builderForValue) {
        if (tokensBuilder_ == null) {
          ensureTokensIsMutable();
          tokens_.add(builderForValue.build());
          onChanged();
        } else {
          tokensBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * tokens indicate the list of token requests the task needs in order to proceed. Tokens will be mounted/passed to the
       * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
       * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
       * to the secret) and to pass it to the remote execution engine.
       * </pre>
       *
       * <code>repeated .flyteidl.core.OAuth2TokenRequest tokens = 3 [json_name = "tokens"];</code>
       */
      public Builder addTokens(
          int index, com.flyteidl.core.SecurityProto.OAuth2TokenRequest.Builder builderForValue) {
        if (tokensBuilder_ == null) {
          ensureTokensIsMutable();
          tokens_.add(index, builderForValue.build());
          onChanged();
        } else {
          tokensBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * tokens indicate the list of token requests the task needs in order to proceed. Tokens will be mounted/passed to the
       * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
       * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
       * to the secret) and to pass it to the remote execution engine.
       * </pre>
       *
       * <code>repeated .flyteidl.core.OAuth2TokenRequest tokens = 3 [json_name = "tokens"];</code>
       */
      public Builder addAllTokens(
          java.lang.Iterable<? extends com.flyteidl.core.SecurityProto.OAuth2TokenRequest> values) {
        if (tokensBuilder_ == null) {
          ensureTokensIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, tokens_);
          onChanged();
        } else {
          tokensBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * tokens indicate the list of token requests the task needs in order to proceed. Tokens will be mounted/passed to the
       * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
       * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
       * to the secret) and to pass it to the remote execution engine.
       * </pre>
       *
       * <code>repeated .flyteidl.core.OAuth2TokenRequest tokens = 3 [json_name = "tokens"];</code>
       */
      public Builder clearTokens() {
        if (tokensBuilder_ == null) {
          tokens_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          tokensBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * tokens indicate the list of token requests the task needs in order to proceed. Tokens will be mounted/passed to the
       * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
       * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
       * to the secret) and to pass it to the remote execution engine.
       * </pre>
       *
       * <code>repeated .flyteidl.core.OAuth2TokenRequest tokens = 3 [json_name = "tokens"];</code>
       */
      public Builder removeTokens(int index) {
        if (tokensBuilder_ == null) {
          ensureTokensIsMutable();
          tokens_.remove(index);
          onChanged();
        } else {
          tokensBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * tokens indicate the list of token requests the task needs in order to proceed. Tokens will be mounted/passed to the
       * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
       * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
       * to the secret) and to pass it to the remote execution engine.
       * </pre>
       *
       * <code>repeated .flyteidl.core.OAuth2TokenRequest tokens = 3 [json_name = "tokens"];</code>
       */
      public com.flyteidl.core.SecurityProto.OAuth2TokenRequest.Builder getTokensBuilder(
          int index) {
        return getTokensFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * tokens indicate the list of token requests the task needs in order to proceed. Tokens will be mounted/passed to the
       * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
       * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
       * to the secret) and to pass it to the remote execution engine.
       * </pre>
       *
       * <code>repeated .flyteidl.core.OAuth2TokenRequest tokens = 3 [json_name = "tokens"];</code>
       */
      public com.flyteidl.core.SecurityProto.OAuth2TokenRequestOrBuilder getTokensOrBuilder(
          int index) {
        if (tokensBuilder_ == null) {
          return tokens_.get(index);  } else {
          return tokensBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * tokens indicate the list of token requests the task needs in order to proceed. Tokens will be mounted/passed to the
       * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
       * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
       * to the secret) and to pass it to the remote execution engine.
       * </pre>
       *
       * <code>repeated .flyteidl.core.OAuth2TokenRequest tokens = 3 [json_name = "tokens"];</code>
       */
      public java.util.List<? extends com.flyteidl.core.SecurityProto.OAuth2TokenRequestOrBuilder> 
           getTokensOrBuilderList() {
        if (tokensBuilder_ != null) {
          return tokensBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(tokens_);
        }
      }
      /**
       * <pre>
       * tokens indicate the list of token requests the task needs in order to proceed. Tokens will be mounted/passed to the
       * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
       * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
       * to the secret) and to pass it to the remote execution engine.
       * </pre>
       *
       * <code>repeated .flyteidl.core.OAuth2TokenRequest tokens = 3 [json_name = "tokens"];</code>
       */
      public com.flyteidl.core.SecurityProto.OAuth2TokenRequest.Builder addTokensBuilder() {
        return getTokensFieldBuilder().addBuilder(
            com.flyteidl.core.SecurityProto.OAuth2TokenRequest.getDefaultInstance());
      }
      /**
       * <pre>
       * tokens indicate the list of token requests the task needs in order to proceed. Tokens will be mounted/passed to the
       * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
       * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
       * to the secret) and to pass it to the remote execution engine.
       * </pre>
       *
       * <code>repeated .flyteidl.core.OAuth2TokenRequest tokens = 3 [json_name = "tokens"];</code>
       */
      public com.flyteidl.core.SecurityProto.OAuth2TokenRequest.Builder addTokensBuilder(
          int index) {
        return getTokensFieldBuilder().addBuilder(
            index, com.flyteidl.core.SecurityProto.OAuth2TokenRequest.getDefaultInstance());
      }
      /**
       * <pre>
       * tokens indicate the list of token requests the task needs in order to proceed. Tokens will be mounted/passed to the
       * pod as it starts. If the plugin responsible for kicking of the task will not run it on a flyte cluster (e.g. AWS
       * Batch), it's the responsibility of the plugin to fetch the secret (which means propeller identity will need access
       * to the secret) and to pass it to the remote execution engine.
       * </pre>
       *
       * <code>repeated .flyteidl.core.OAuth2TokenRequest tokens = 3 [json_name = "tokens"];</code>
       */
      public java.util.List<com.flyteidl.core.SecurityProto.OAuth2TokenRequest.Builder> 
           getTokensBuilderList() {
        return getTokensFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.flyteidl.core.SecurityProto.OAuth2TokenRequest, com.flyteidl.core.SecurityProto.OAuth2TokenRequest.Builder, com.flyteidl.core.SecurityProto.OAuth2TokenRequestOrBuilder> 
          getTokensFieldBuilder() {
        if (tokensBuilder_ == null) {
          tokensBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.flyteidl.core.SecurityProto.OAuth2TokenRequest, com.flyteidl.core.SecurityProto.OAuth2TokenRequest.Builder, com.flyteidl.core.SecurityProto.OAuth2TokenRequestOrBuilder>(
                  tokens_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          tokens_ = null;
        }
        return tokensBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flyteidl.core.SecurityContext)
    }

    // @@protoc_insertion_point(class_scope:flyteidl.core.SecurityContext)
    private static final com.flyteidl.core.SecurityProto.SecurityContext DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.flyteidl.core.SecurityProto.SecurityContext();
    }

    public static com.flyteidl.core.SecurityProto.SecurityContext getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<SecurityContext>
        PARSER = new com.google.protobuf.AbstractParser<SecurityContext>() {
      @java.lang.Override
      public SecurityContext parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(
                  builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<SecurityContext> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<SecurityContext> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.flyteidl.core.SecurityProto.SecurityContext getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flyteidl_core_Secret_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flyteidl_core_Secret_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flyteidl_core_OAuth2Client_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flyteidl_core_OAuth2Client_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flyteidl_core_Identity_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flyteidl_core_Identity_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flyteidl_core_OAuth2TokenRequest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flyteidl_core_OAuth2TokenRequest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flyteidl_core_SecurityContext_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flyteidl_core_SecurityContext_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\034flyteidl/core/security.proto\022\rflyteidl" +
      ".core\"\320\001\n\006Secret\022\024\n\005group\030\001 \001(\tR\005group\022#" +
      "\n\rgroup_version\030\002 \001(\tR\014groupVersion\022\020\n\003k" +
      "ey\030\003 \001(\tR\003key\022L\n\021mount_requirement\030\004 \001(\016" +
      "2\037.flyteidl.core.Secret.MountTypeR\020mount" +
      "Requirement\"+\n\tMountType\022\007\n\003ANY\020\000\022\013\n\007ENV" +
      "_VAR\020\001\022\010\n\004FILE\020\002\"g\n\014OAuth2Client\022\033\n\tclie" +
      "nt_id\030\001 \001(\tR\010clientId\022:\n\rclient_secret\030\002" +
      " \001(\0132\025.flyteidl.core.SecretR\014clientSecre" +
      "t\"\227\001\n\010Identity\022\031\n\010iam_role\030\001 \001(\tR\007iamRol" +
      "e\022.\n\023k8s_service_account\030\002 \001(\tR\021k8sServi" +
      "ceAccount\022@\n\roauth2_client\030\003 \001(\0132\033.flyte" +
      "idl.core.OAuth2ClientR\014oauth2Client\"\226\002\n\022" +
      "OAuth2TokenRequest\022\022\n\004name\030\001 \001(\tR\004name\022:" +
      "\n\004type\030\002 \001(\0162&.flyteidl.core.OAuth2Token" +
      "Request.TypeR\004type\0223\n\006client\030\003 \001(\0132\033.fly" +
      "teidl.core.OAuth2ClientR\006client\0224\n\026idp_d" +
      "iscovery_endpoint\030\004 \001(\tR\024idpDiscoveryEnd" +
      "point\022%\n\016token_endpoint\030\005 \001(\tR\rtokenEndp" +
      "oint\"\036\n\004Type\022\026\n\022CLIENT_CREDENTIALS\020\000\"\255\001\n" +
      "\017SecurityContext\022.\n\006run_as\030\001 \001(\0132\027.flyte" +
      "idl.core.IdentityR\005runAs\022/\n\007secrets\030\002 \003(" +
      "\0132\025.flyteidl.core.SecretR\007secrets\0229\n\006tok" +
      "ens\030\003 \003(\0132!.flyteidl.core.OAuth2TokenReq" +
      "uestR\006tokensB\260\001\n\021com.flyteidl.coreB\rSecu" +
      "rityProtoH\002Z4github.com/flyteorg/flyteid" +
      "l/gen/pb-go/flyteidl/core\370\001\000\242\002\003FCX\252\002\rFly" +
      "teidl.Core\312\002\rFlyteidl\\Core\342\002\031Flyteidl\\Co" +
      "re\\GPBMetadata\352\002\016Flyteidl::Coreb\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_flyteidl_core_Secret_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_flyteidl_core_Secret_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flyteidl_core_Secret_descriptor,
        new java.lang.String[] { "Group", "GroupVersion", "Key", "MountRequirement", });
    internal_static_flyteidl_core_OAuth2Client_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_flyteidl_core_OAuth2Client_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flyteidl_core_OAuth2Client_descriptor,
        new java.lang.String[] { "ClientId", "ClientSecret", });
    internal_static_flyteidl_core_Identity_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_flyteidl_core_Identity_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flyteidl_core_Identity_descriptor,
        new java.lang.String[] { "IamRole", "K8SServiceAccount", "Oauth2Client", });
    internal_static_flyteidl_core_OAuth2TokenRequest_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_flyteidl_core_OAuth2TokenRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flyteidl_core_OAuth2TokenRequest_descriptor,
        new java.lang.String[] { "Name", "Type", "Client", "IdpDiscoveryEndpoint", "TokenEndpoint", });
    internal_static_flyteidl_core_SecurityContext_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_flyteidl_core_SecurityContext_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flyteidl_core_SecurityContext_descriptor,
        new java.lang.String[] { "RunAs", "Secrets", "Tokens", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
