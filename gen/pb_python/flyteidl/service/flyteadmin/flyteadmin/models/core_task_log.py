# coding: utf-8

"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from flyteadmin.models.task_log_message_format import TaskLogMessageFormat  # noqa: F401,E501


class CoreTaskLog(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uri': 'str',
        'name': 'str',
        'message_format': 'TaskLogMessageFormat',
        'ttl': 'str'
    }

    attribute_map = {
        'uri': 'uri',
        'name': 'name',
        'message_format': 'message_format',
        'ttl': 'ttl'
    }

    def __init__(self, uri=None, name=None, message_format=None, ttl=None):  # noqa: E501
        """CoreTaskLog - a model defined in Swagger"""  # noqa: E501

        self._uri = None
        self._name = None
        self._message_format = None
        self._ttl = None
        self.discriminator = None

        if uri is not None:
            self.uri = uri
        if name is not None:
            self.name = name
        if message_format is not None:
            self.message_format = message_format
        if ttl is not None:
            self.ttl = ttl

    @property
    def uri(self):
        """Gets the uri of this CoreTaskLog.  # noqa: E501


        :return: The uri of this CoreTaskLog.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this CoreTaskLog.


        :param uri: The uri of this CoreTaskLog.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def name(self):
        """Gets the name of this CoreTaskLog.  # noqa: E501


        :return: The name of this CoreTaskLog.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CoreTaskLog.


        :param name: The name of this CoreTaskLog.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def message_format(self):
        """Gets the message_format of this CoreTaskLog.  # noqa: E501


        :return: The message_format of this CoreTaskLog.  # noqa: E501
        :rtype: TaskLogMessageFormat
        """
        return self._message_format

    @message_format.setter
    def message_format(self, message_format):
        """Sets the message_format of this CoreTaskLog.


        :param message_format: The message_format of this CoreTaskLog.  # noqa: E501
        :type: TaskLogMessageFormat
        """

        self._message_format = message_format

    @property
    def ttl(self):
        """Gets the ttl of this CoreTaskLog.  # noqa: E501


        :return: The ttl of this CoreTaskLog.  # noqa: E501
        :rtype: str
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this CoreTaskLog.


        :param ttl: The ttl of this CoreTaskLog.  # noqa: E501
        :type: str
        """

        self._ttl = ttl

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CoreTaskLog, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CoreTaskLog):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
