// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/workflow.proto

#include "flyteidl/admin/workflow.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace flyteidl {
namespace admin {
constexpr WorkflowCreateRequest::WorkflowCreateRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(nullptr)
  , spec_(nullptr){}
struct WorkflowCreateRequestDefaultTypeInternal {
  constexpr WorkflowCreateRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WorkflowCreateRequestDefaultTypeInternal() {}
  union {
    WorkflowCreateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WorkflowCreateRequestDefaultTypeInternal _WorkflowCreateRequest_default_instance_;
constexpr WorkflowCreateResponse::WorkflowCreateResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct WorkflowCreateResponseDefaultTypeInternal {
  constexpr WorkflowCreateResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WorkflowCreateResponseDefaultTypeInternal() {}
  union {
    WorkflowCreateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WorkflowCreateResponseDefaultTypeInternal _WorkflowCreateResponse_default_instance_;
constexpr Workflow::Workflow(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(nullptr)
  , closure_(nullptr){}
struct WorkflowDefaultTypeInternal {
  constexpr WorkflowDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WorkflowDefaultTypeInternal() {}
  union {
    Workflow _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WorkflowDefaultTypeInternal _Workflow_default_instance_;
constexpr WorkflowList::WorkflowList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : workflows_()
  , token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct WorkflowListDefaultTypeInternal {
  constexpr WorkflowListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WorkflowListDefaultTypeInternal() {}
  union {
    WorkflowList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WorkflowListDefaultTypeInternal _WorkflowList_default_instance_;
constexpr WorkflowSpec::WorkflowSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sub_workflows_()
  , template__(nullptr){}
struct WorkflowSpecDefaultTypeInternal {
  constexpr WorkflowSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WorkflowSpecDefaultTypeInternal() {}
  union {
    WorkflowSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WorkflowSpecDefaultTypeInternal _WorkflowSpec_default_instance_;
constexpr WorkflowClosure::WorkflowClosure(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : compiled_workflow_(nullptr)
  , created_at_(nullptr){}
struct WorkflowClosureDefaultTypeInternal {
  constexpr WorkflowClosureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WorkflowClosureDefaultTypeInternal() {}
  union {
    WorkflowClosure _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WorkflowClosureDefaultTypeInternal _WorkflowClosure_default_instance_;
}  // namespace admin
}  // namespace flyteidl
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_flyteidl_2fadmin_2fworkflow_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_flyteidl_2fadmin_2fworkflow_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fadmin_2fworkflow_2eproto = nullptr;

const uint32_t TableStruct_flyteidl_2fadmin_2fworkflow_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowCreateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowCreateRequest, id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowCreateRequest, spec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowCreateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Workflow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Workflow, id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Workflow, closure_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowList, workflows_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowList, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowSpec, template__),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowSpec, sub_workflows_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowClosure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowClosure, compiled_workflow_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowClosure, created_at_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::flyteidl::admin::WorkflowCreateRequest)},
  { 8, -1, -1, sizeof(::flyteidl::admin::WorkflowCreateResponse)},
  { 14, -1, -1, sizeof(::flyteidl::admin::Workflow)},
  { 22, -1, -1, sizeof(::flyteidl::admin::WorkflowList)},
  { 30, -1, -1, sizeof(::flyteidl::admin::WorkflowSpec)},
  { 38, -1, -1, sizeof(::flyteidl::admin::WorkflowClosure)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_WorkflowCreateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_WorkflowCreateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_Workflow_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_WorkflowList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_WorkflowSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_WorkflowClosure_default_instance_),
};

const char descriptor_table_protodef_flyteidl_2fadmin_2fworkflow_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035flyteidl/admin/workflow.proto\022\016flyteid"
  "l.admin\032\034flyteidl/core/compiler.proto\032\036f"
  "lyteidl/core/identifier.proto\032\034flyteidl/"
  "core/workflow.proto\032\037google/protobuf/tim"
  "estamp.proto\"t\n\025WorkflowCreateRequest\022)\n"
  "\002id\030\001 \001(\0132\031.flyteidl.core.IdentifierR\002id"
  "\0220\n\004spec\030\002 \001(\0132\034.flyteidl.admin.Workflow"
  "SpecR\004spec\"\030\n\026WorkflowCreateResponse\"p\n\010"
  "Workflow\022)\n\002id\030\001 \001(\0132\031.flyteidl.core.Ide"
  "ntifierR\002id\0229\n\007closure\030\002 \001(\0132\037.flyteidl."
  "admin.WorkflowClosureR\007closure\"\\\n\014Workfl"
  "owList\0226\n\tworkflows\030\001 \003(\0132\030.flyteidl.adm"
  "in.WorkflowR\tworkflows\022\024\n\005token\030\002 \001(\tR\005t"
  "oken\"\221\001\n\014WorkflowSpec\022;\n\010template\030\001 \001(\0132"
  "\037.flyteidl.core.WorkflowTemplateR\010templa"
  "te\022D\n\rsub_workflows\030\002 \003(\0132\037.flyteidl.cor"
  "e.WorkflowTemplateR\014subWorkflows\"\241\001\n\017Wor"
  "kflowClosure\022S\n\021compiled_workflow\030\001 \001(\0132"
  "&.flyteidl.core.CompiledWorkflowClosureR"
  "\020compiledWorkflow\0229\n\ncreated_at\030\002 \001(\0132\032."
  "google.protobuf.TimestampR\tcreatedAtB\266\001\n"
  "\022com.flyteidl.adminB\rWorkflowProtoH\002Z5gi"
  "thub.com/flyteorg/flyteidl/gen/pb-go/fly"
  "teidl/admin\370\001\000\242\002\003FAX\252\002\016Flyteidl.Admin\312\002\016"
  "Flyteidl\\Admin\342\002\032Flyteidl\\Admin\\GPBMetad"
  "ata\352\002\017Flyteidl::Adminb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_flyteidl_2fadmin_2fworkflow_2eproto_deps[4] = {
  &::descriptor_table_flyteidl_2fcore_2fcompiler_2eproto,
  &::descriptor_table_flyteidl_2fcore_2fidentifier_2eproto,
  &::descriptor_table_flyteidl_2fcore_2fworkflow_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_flyteidl_2fadmin_2fworkflow_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fadmin_2fworkflow_2eproto = {
  false, false, 1029, descriptor_table_protodef_flyteidl_2fadmin_2fworkflow_2eproto, "flyteidl/admin/workflow.proto", 
  &descriptor_table_flyteidl_2fadmin_2fworkflow_2eproto_once, descriptor_table_flyteidl_2fadmin_2fworkflow_2eproto_deps, 4, 6,
  schemas, file_default_instances, TableStruct_flyteidl_2fadmin_2fworkflow_2eproto::offsets,
  file_level_metadata_flyteidl_2fadmin_2fworkflow_2eproto, file_level_enum_descriptors_flyteidl_2fadmin_2fworkflow_2eproto, file_level_service_descriptors_flyteidl_2fadmin_2fworkflow_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_flyteidl_2fadmin_2fworkflow_2eproto_getter() {
  return &descriptor_table_flyteidl_2fadmin_2fworkflow_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_flyteidl_2fadmin_2fworkflow_2eproto(&descriptor_table_flyteidl_2fadmin_2fworkflow_2eproto);
namespace flyteidl {
namespace admin {

// ===================================================================

class WorkflowCreateRequest::_Internal {
 public:
  static const ::flyteidl::core::Identifier& id(const WorkflowCreateRequest* msg);
  static const ::flyteidl::admin::WorkflowSpec& spec(const WorkflowCreateRequest* msg);
};

const ::flyteidl::core::Identifier&
WorkflowCreateRequest::_Internal::id(const WorkflowCreateRequest* msg) {
  return *msg->id_;
}
const ::flyteidl::admin::WorkflowSpec&
WorkflowCreateRequest::_Internal::spec(const WorkflowCreateRequest* msg) {
  return *msg->spec_;
}
void WorkflowCreateRequest::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
WorkflowCreateRequest::WorkflowCreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.WorkflowCreateRequest)
}
WorkflowCreateRequest::WorkflowCreateRequest(const WorkflowCreateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::flyteidl::core::Identifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_spec()) {
    spec_ = new ::flyteidl::admin::WorkflowSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.WorkflowCreateRequest)
}

inline void WorkflowCreateRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&spec_) -
    reinterpret_cast<char*>(&id_)) + sizeof(spec_));
}

WorkflowCreateRequest::~WorkflowCreateRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.WorkflowCreateRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WorkflowCreateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete spec_;
}

void WorkflowCreateRequest::ArenaDtor(void* object) {
  WorkflowCreateRequest* _this = reinterpret_cast< WorkflowCreateRequest* >(object);
  (void)_this;
}
void WorkflowCreateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkflowCreateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WorkflowCreateRequest::InternalSwap(WorkflowCreateRequest* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata WorkflowCreateRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fworkflow_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fworkflow_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fworkflow_2eproto[0]);
}

// ===================================================================

class WorkflowCreateResponse::_Internal {
 public:
};

WorkflowCreateResponse::WorkflowCreateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.WorkflowCreateResponse)
}
WorkflowCreateResponse::WorkflowCreateResponse(const WorkflowCreateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.WorkflowCreateResponse)
}



::PROTOBUF_NAMESPACE_ID::Metadata WorkflowCreateResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fworkflow_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fworkflow_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fworkflow_2eproto[1]);
}

// ===================================================================

class Workflow::_Internal {
 public:
  static const ::flyteidl::core::Identifier& id(const Workflow* msg);
  static const ::flyteidl::admin::WorkflowClosure& closure(const Workflow* msg);
};

const ::flyteidl::core::Identifier&
Workflow::_Internal::id(const Workflow* msg) {
  return *msg->id_;
}
const ::flyteidl::admin::WorkflowClosure&
Workflow::_Internal::closure(const Workflow* msg) {
  return *msg->closure_;
}
void Workflow::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
Workflow::Workflow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.Workflow)
}
Workflow::Workflow(const Workflow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::flyteidl::core::Identifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_closure()) {
    closure_ = new ::flyteidl::admin::WorkflowClosure(*from.closure_);
  } else {
    closure_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.Workflow)
}

inline void Workflow::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&closure_) -
    reinterpret_cast<char*>(&id_)) + sizeof(closure_));
}

Workflow::~Workflow() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.Workflow)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Workflow::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete closure_;
}

void Workflow::ArenaDtor(void* object) {
  Workflow* _this = reinterpret_cast< Workflow* >(object);
  (void)_this;
}
void Workflow::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Workflow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Workflow::InternalSwap(Workflow* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata Workflow::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fworkflow_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fworkflow_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fworkflow_2eproto[2]);
}

// ===================================================================

class WorkflowList::_Internal {
 public:
};

WorkflowList::WorkflowList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  workflows_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.WorkflowList)
}
WorkflowList::WorkflowList(const WorkflowList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      workflows_(from.workflows_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.WorkflowList)
}

inline void WorkflowList::SharedCtor() {
token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WorkflowList::~WorkflowList() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.WorkflowList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WorkflowList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WorkflowList::ArenaDtor(void* object) {
  WorkflowList* _this = reinterpret_cast< WorkflowList* >(object);
  (void)_this;
}
void WorkflowList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkflowList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WorkflowList::InternalSwap(WorkflowList* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata WorkflowList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fworkflow_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fworkflow_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fworkflow_2eproto[3]);
}

// ===================================================================

class WorkflowSpec::_Internal {
 public:
  static const ::flyteidl::core::WorkflowTemplate& template_(const WorkflowSpec* msg);
};

const ::flyteidl::core::WorkflowTemplate&
WorkflowSpec::_Internal::template_(const WorkflowSpec* msg) {
  return *msg->template__;
}
void WorkflowSpec::clear_template_() {
  if (GetArenaForAllocation() == nullptr && template__ != nullptr) {
    delete template__;
  }
  template__ = nullptr;
}
void WorkflowSpec::clear_sub_workflows() {
  sub_workflows_.Clear();
}
WorkflowSpec::WorkflowSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  sub_workflows_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.WorkflowSpec)
}
WorkflowSpec::WorkflowSpec(const WorkflowSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sub_workflows_(from.sub_workflows_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_template_()) {
    template__ = new ::flyteidl::core::WorkflowTemplate(*from.template__);
  } else {
    template__ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.WorkflowSpec)
}

inline void WorkflowSpec::SharedCtor() {
template__ = nullptr;
}

WorkflowSpec::~WorkflowSpec() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.WorkflowSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WorkflowSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete template__;
}

void WorkflowSpec::ArenaDtor(void* object) {
  WorkflowSpec* _this = reinterpret_cast< WorkflowSpec* >(object);
  (void)_this;
}
void WorkflowSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkflowSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WorkflowSpec::InternalSwap(WorkflowSpec* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata WorkflowSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fworkflow_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fworkflow_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fworkflow_2eproto[4]);
}

// ===================================================================

class WorkflowClosure::_Internal {
 public:
  static const ::flyteidl::core::CompiledWorkflowClosure& compiled_workflow(const WorkflowClosure* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const WorkflowClosure* msg);
};

const ::flyteidl::core::CompiledWorkflowClosure&
WorkflowClosure::_Internal::compiled_workflow(const WorkflowClosure* msg) {
  return *msg->compiled_workflow_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
WorkflowClosure::_Internal::created_at(const WorkflowClosure* msg) {
  return *msg->created_at_;
}
void WorkflowClosure::clear_compiled_workflow() {
  if (GetArenaForAllocation() == nullptr && compiled_workflow_ != nullptr) {
    delete compiled_workflow_;
  }
  compiled_workflow_ = nullptr;
}
void WorkflowClosure::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
WorkflowClosure::WorkflowClosure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.WorkflowClosure)
}
WorkflowClosure::WorkflowClosure(const WorkflowClosure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_compiled_workflow()) {
    compiled_workflow_ = new ::flyteidl::core::CompiledWorkflowClosure(*from.compiled_workflow_);
  } else {
    compiled_workflow_ = nullptr;
  }
  if (from._internal_has_created_at()) {
    created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.WorkflowClosure)
}

inline void WorkflowClosure::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&compiled_workflow_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&created_at_) -
    reinterpret_cast<char*>(&compiled_workflow_)) + sizeof(created_at_));
}

WorkflowClosure::~WorkflowClosure() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.WorkflowClosure)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WorkflowClosure::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete compiled_workflow_;
  if (this != internal_default_instance()) delete created_at_;
}

void WorkflowClosure::ArenaDtor(void* object) {
  WorkflowClosure* _this = reinterpret_cast< WorkflowClosure* >(object);
  (void)_this;
}
void WorkflowClosure::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkflowClosure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WorkflowClosure::InternalSwap(WorkflowClosure* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata WorkflowClosure::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fworkflow_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fworkflow_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fworkflow_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace admin
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::flyteidl::admin::WorkflowCreateRequest* Arena::CreateMaybeMessage< ::flyteidl::admin::WorkflowCreateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::WorkflowCreateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::WorkflowCreateResponse* Arena::CreateMaybeMessage< ::flyteidl::admin::WorkflowCreateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::WorkflowCreateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::Workflow* Arena::CreateMaybeMessage< ::flyteidl::admin::Workflow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::Workflow >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::WorkflowList* Arena::CreateMaybeMessage< ::flyteidl::admin::WorkflowList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::WorkflowList >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::WorkflowSpec* Arena::CreateMaybeMessage< ::flyteidl::admin::WorkflowSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::WorkflowSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::WorkflowClosure* Arena::CreateMaybeMessage< ::flyteidl::admin::WorkflowClosure >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::WorkflowClosure >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
