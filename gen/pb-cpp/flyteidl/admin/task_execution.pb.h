// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/task_execution.proto

#ifndef PROTOBUF_INCLUDED_flyteidl_2fadmin_2ftask_5fexecution_2eproto
#define PROTOBUF_INCLUDED_flyteidl_2fadmin_2ftask_5fexecution_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "flyteidl/admin/common.pb.h"
#include "flyteidl/core/execution.pb.h"
#include "flyteidl/core/identifier.pb.h"
#include "flyteidl/core/literals.pb.h"
#include "flyteidl/event/event.pb.h"
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/struct.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2ftask_5fexecution_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fadmin_2ftask_5fexecution_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_flyteidl_2fadmin_2ftask_5fexecution_2eproto();
namespace flyteidl {
namespace admin {
class Reason;
class ReasonDefaultTypeInternal;
extern ReasonDefaultTypeInternal _Reason_default_instance_;
class TaskExecution;
class TaskExecutionDefaultTypeInternal;
extern TaskExecutionDefaultTypeInternal _TaskExecution_default_instance_;
class TaskExecutionClosure;
class TaskExecutionClosureDefaultTypeInternal;
extern TaskExecutionClosureDefaultTypeInternal _TaskExecutionClosure_default_instance_;
class TaskExecutionGetDataRequest;
class TaskExecutionGetDataRequestDefaultTypeInternal;
extern TaskExecutionGetDataRequestDefaultTypeInternal _TaskExecutionGetDataRequest_default_instance_;
class TaskExecutionGetDataResponse;
class TaskExecutionGetDataResponseDefaultTypeInternal;
extern TaskExecutionGetDataResponseDefaultTypeInternal _TaskExecutionGetDataResponse_default_instance_;
class TaskExecutionGetRequest;
class TaskExecutionGetRequestDefaultTypeInternal;
extern TaskExecutionGetRequestDefaultTypeInternal _TaskExecutionGetRequest_default_instance_;
class TaskExecutionList;
class TaskExecutionListDefaultTypeInternal;
extern TaskExecutionListDefaultTypeInternal _TaskExecutionList_default_instance_;
class TaskExecutionListRequest;
class TaskExecutionListRequestDefaultTypeInternal;
extern TaskExecutionListRequestDefaultTypeInternal _TaskExecutionListRequest_default_instance_;
}  // namespace admin
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> ::flyteidl::admin::Reason* Arena::CreateMaybeMessage<::flyteidl::admin::Reason>(Arena*);
template<> ::flyteidl::admin::TaskExecution* Arena::CreateMaybeMessage<::flyteidl::admin::TaskExecution>(Arena*);
template<> ::flyteidl::admin::TaskExecutionClosure* Arena::CreateMaybeMessage<::flyteidl::admin::TaskExecutionClosure>(Arena*);
template<> ::flyteidl::admin::TaskExecutionGetDataRequest* Arena::CreateMaybeMessage<::flyteidl::admin::TaskExecutionGetDataRequest>(Arena*);
template<> ::flyteidl::admin::TaskExecutionGetDataResponse* Arena::CreateMaybeMessage<::flyteidl::admin::TaskExecutionGetDataResponse>(Arena*);
template<> ::flyteidl::admin::TaskExecutionGetRequest* Arena::CreateMaybeMessage<::flyteidl::admin::TaskExecutionGetRequest>(Arena*);
template<> ::flyteidl::admin::TaskExecutionList* Arena::CreateMaybeMessage<::flyteidl::admin::TaskExecutionList>(Arena*);
template<> ::flyteidl::admin::TaskExecutionListRequest* Arena::CreateMaybeMessage<::flyteidl::admin::TaskExecutionListRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace flyteidl {
namespace admin {

// ===================================================================

class TaskExecutionGetRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.TaskExecutionGetRequest) */ {
 public:
  TaskExecutionGetRequest();
  virtual ~TaskExecutionGetRequest();

  TaskExecutionGetRequest(const TaskExecutionGetRequest& from);

  inline TaskExecutionGetRequest& operator=(const TaskExecutionGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskExecutionGetRequest(TaskExecutionGetRequest&& from) noexcept
    : TaskExecutionGetRequest() {
    *this = ::std::move(from);
  }

  inline TaskExecutionGetRequest& operator=(TaskExecutionGetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TaskExecutionGetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskExecutionGetRequest* internal_default_instance() {
    return reinterpret_cast<const TaskExecutionGetRequest*>(
               &_TaskExecutionGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TaskExecutionGetRequest* other);
  friend void swap(TaskExecutionGetRequest& a, TaskExecutionGetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskExecutionGetRequest* New() const final {
    return CreateMaybeMessage<TaskExecutionGetRequest>(nullptr);
  }

  TaskExecutionGetRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TaskExecutionGetRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TaskExecutionGetRequest& from);
  void MergeFrom(const TaskExecutionGetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskExecutionGetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.core.TaskExecutionIdentifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::flyteidl::core::TaskExecutionIdentifier& id() const;
  ::flyteidl::core::TaskExecutionIdentifier* release_id();
  ::flyteidl::core::TaskExecutionIdentifier* mutable_id();
  void set_allocated_id(::flyteidl::core::TaskExecutionIdentifier* id);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.TaskExecutionGetRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::core::TaskExecutionIdentifier* id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2ftask_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class TaskExecutionListRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.TaskExecutionListRequest) */ {
 public:
  TaskExecutionListRequest();
  virtual ~TaskExecutionListRequest();

  TaskExecutionListRequest(const TaskExecutionListRequest& from);

  inline TaskExecutionListRequest& operator=(const TaskExecutionListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskExecutionListRequest(TaskExecutionListRequest&& from) noexcept
    : TaskExecutionListRequest() {
    *this = ::std::move(from);
  }

  inline TaskExecutionListRequest& operator=(TaskExecutionListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TaskExecutionListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskExecutionListRequest* internal_default_instance() {
    return reinterpret_cast<const TaskExecutionListRequest*>(
               &_TaskExecutionListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TaskExecutionListRequest* other);
  friend void swap(TaskExecutionListRequest& a, TaskExecutionListRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskExecutionListRequest* New() const final {
    return CreateMaybeMessage<TaskExecutionListRequest>(nullptr);
  }

  TaskExecutionListRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TaskExecutionListRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TaskExecutionListRequest& from);
  void MergeFrom(const TaskExecutionListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskExecutionListRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string token = 3;
  void clear_token();
  static const int kTokenFieldNumber = 3;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // string filters = 4;
  void clear_filters();
  static const int kFiltersFieldNumber = 4;
  const ::std::string& filters() const;
  void set_filters(const ::std::string& value);
  #if LANG_CXX11
  void set_filters(::std::string&& value);
  #endif
  void set_filters(const char* value);
  void set_filters(const char* value, size_t size);
  ::std::string* mutable_filters();
  ::std::string* release_filters();
  void set_allocated_filters(::std::string* filters);

  // .flyteidl.core.NodeExecutionIdentifier node_execution_id = 1;
  bool has_node_execution_id() const;
  void clear_node_execution_id();
  static const int kNodeExecutionIdFieldNumber = 1;
  const ::flyteidl::core::NodeExecutionIdentifier& node_execution_id() const;
  ::flyteidl::core::NodeExecutionIdentifier* release_node_execution_id();
  ::flyteidl::core::NodeExecutionIdentifier* mutable_node_execution_id();
  void set_allocated_node_execution_id(::flyteidl::core::NodeExecutionIdentifier* node_execution_id);

  // .flyteidl.admin.Sort sort_by = 5;
  bool has_sort_by() const;
  void clear_sort_by();
  static const int kSortByFieldNumber = 5;
  const ::flyteidl::admin::Sort& sort_by() const;
  ::flyteidl::admin::Sort* release_sort_by();
  ::flyteidl::admin::Sort* mutable_sort_by();
  void set_allocated_sort_by(::flyteidl::admin::Sort* sort_by);

  // uint32 limit = 2;
  void clear_limit();
  static const int kLimitFieldNumber = 2;
  ::google::protobuf::uint32 limit() const;
  void set_limit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.TaskExecutionListRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::internal::ArenaStringPtr filters_;
  ::flyteidl::core::NodeExecutionIdentifier* node_execution_id_;
  ::flyteidl::admin::Sort* sort_by_;
  ::google::protobuf::uint32 limit_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2ftask_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class TaskExecution final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.TaskExecution) */ {
 public:
  TaskExecution();
  virtual ~TaskExecution();

  TaskExecution(const TaskExecution& from);

  inline TaskExecution& operator=(const TaskExecution& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskExecution(TaskExecution&& from) noexcept
    : TaskExecution() {
    *this = ::std::move(from);
  }

  inline TaskExecution& operator=(TaskExecution&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TaskExecution& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskExecution* internal_default_instance() {
    return reinterpret_cast<const TaskExecution*>(
               &_TaskExecution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(TaskExecution* other);
  friend void swap(TaskExecution& a, TaskExecution& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskExecution* New() const final {
    return CreateMaybeMessage<TaskExecution>(nullptr);
  }

  TaskExecution* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TaskExecution>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TaskExecution& from);
  void MergeFrom(const TaskExecution& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskExecution* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string input_uri = 2;
  void clear_input_uri();
  static const int kInputUriFieldNumber = 2;
  const ::std::string& input_uri() const;
  void set_input_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_input_uri(::std::string&& value);
  #endif
  void set_input_uri(const char* value);
  void set_input_uri(const char* value, size_t size);
  ::std::string* mutable_input_uri();
  ::std::string* release_input_uri();
  void set_allocated_input_uri(::std::string* input_uri);

  // .flyteidl.core.TaskExecutionIdentifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::flyteidl::core::TaskExecutionIdentifier& id() const;
  ::flyteidl::core::TaskExecutionIdentifier* release_id();
  ::flyteidl::core::TaskExecutionIdentifier* mutable_id();
  void set_allocated_id(::flyteidl::core::TaskExecutionIdentifier* id);

  // .flyteidl.admin.TaskExecutionClosure closure = 3;
  bool has_closure() const;
  void clear_closure();
  static const int kClosureFieldNumber = 3;
  const ::flyteidl::admin::TaskExecutionClosure& closure() const;
  ::flyteidl::admin::TaskExecutionClosure* release_closure();
  ::flyteidl::admin::TaskExecutionClosure* mutable_closure();
  void set_allocated_closure(::flyteidl::admin::TaskExecutionClosure* closure);

  // bool is_parent = 4;
  void clear_is_parent();
  static const int kIsParentFieldNumber = 4;
  bool is_parent() const;
  void set_is_parent(bool value);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.TaskExecution)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr input_uri_;
  ::flyteidl::core::TaskExecutionIdentifier* id_;
  ::flyteidl::admin::TaskExecutionClosure* closure_;
  bool is_parent_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2ftask_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class TaskExecutionList final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.TaskExecutionList) */ {
 public:
  TaskExecutionList();
  virtual ~TaskExecutionList();

  TaskExecutionList(const TaskExecutionList& from);

  inline TaskExecutionList& operator=(const TaskExecutionList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskExecutionList(TaskExecutionList&& from) noexcept
    : TaskExecutionList() {
    *this = ::std::move(from);
  }

  inline TaskExecutionList& operator=(TaskExecutionList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TaskExecutionList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskExecutionList* internal_default_instance() {
    return reinterpret_cast<const TaskExecutionList*>(
               &_TaskExecutionList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(TaskExecutionList* other);
  friend void swap(TaskExecutionList& a, TaskExecutionList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskExecutionList* New() const final {
    return CreateMaybeMessage<TaskExecutionList>(nullptr);
  }

  TaskExecutionList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TaskExecutionList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TaskExecutionList& from);
  void MergeFrom(const TaskExecutionList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskExecutionList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .flyteidl.admin.TaskExecution task_executions = 1;
  int task_executions_size() const;
  void clear_task_executions();
  static const int kTaskExecutionsFieldNumber = 1;
  ::flyteidl::admin::TaskExecution* mutable_task_executions(int index);
  ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::TaskExecution >*
      mutable_task_executions();
  const ::flyteidl::admin::TaskExecution& task_executions(int index) const;
  ::flyteidl::admin::TaskExecution* add_task_executions();
  const ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::TaskExecution >&
      task_executions() const;

  // string token = 2;
  void clear_token();
  static const int kTokenFieldNumber = 2;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.TaskExecutionList)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::TaskExecution > task_executions_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2ftask_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class TaskExecutionClosure final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.TaskExecutionClosure) */ {
 public:
  TaskExecutionClosure();
  virtual ~TaskExecutionClosure();

  TaskExecutionClosure(const TaskExecutionClosure& from);

  inline TaskExecutionClosure& operator=(const TaskExecutionClosure& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskExecutionClosure(TaskExecutionClosure&& from) noexcept
    : TaskExecutionClosure() {
    *this = ::std::move(from);
  }

  inline TaskExecutionClosure& operator=(TaskExecutionClosure&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TaskExecutionClosure& default_instance();

  enum OutputResultCase {
    kOutputUri = 1,
    kError = 2,
    kOutputData = 12,
    OUTPUT_RESULT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskExecutionClosure* internal_default_instance() {
    return reinterpret_cast<const TaskExecutionClosure*>(
               &_TaskExecutionClosure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(TaskExecutionClosure* other);
  friend void swap(TaskExecutionClosure& a, TaskExecutionClosure& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskExecutionClosure* New() const final {
    return CreateMaybeMessage<TaskExecutionClosure>(nullptr);
  }

  TaskExecutionClosure* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TaskExecutionClosure>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TaskExecutionClosure& from);
  void MergeFrom(const TaskExecutionClosure& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskExecutionClosure* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .flyteidl.core.TaskLog logs = 4;
  int logs_size() const;
  void clear_logs();
  static const int kLogsFieldNumber = 4;
  ::flyteidl::core::TaskLog* mutable_logs(int index);
  ::google::protobuf::RepeatedPtrField< ::flyteidl::core::TaskLog >*
      mutable_logs();
  const ::flyteidl::core::TaskLog& logs(int index) const;
  ::flyteidl::core::TaskLog* add_logs();
  const ::google::protobuf::RepeatedPtrField< ::flyteidl::core::TaskLog >&
      logs() const;

  // repeated .flyteidl.admin.Reason reasons = 18;
  int reasons_size() const;
  void clear_reasons();
  static const int kReasonsFieldNumber = 18;
  ::flyteidl::admin::Reason* mutable_reasons(int index);
  ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::Reason >*
      mutable_reasons();
  const ::flyteidl::admin::Reason& reasons(int index) const;
  ::flyteidl::admin::Reason* add_reasons();
  const ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::Reason >&
      reasons() const;

  // string reason = 10;
  void clear_reason();
  static const int kReasonFieldNumber = 10;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_reason(::std::string&& value);
  #endif
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // string task_type = 11;
  void clear_task_type();
  static const int kTaskTypeFieldNumber = 11;
  const ::std::string& task_type() const;
  void set_task_type(const ::std::string& value);
  #if LANG_CXX11
  void set_task_type(::std::string&& value);
  #endif
  void set_task_type(const char* value);
  void set_task_type(const char* value, size_t size);
  ::std::string* mutable_task_type();
  ::std::string* release_task_type();
  void set_allocated_task_type(::std::string* task_type);

  // .google.protobuf.Timestamp started_at = 5;
  bool has_started_at() const;
  void clear_started_at();
  static const int kStartedAtFieldNumber = 5;
  const ::google::protobuf::Timestamp& started_at() const;
  ::google::protobuf::Timestamp* release_started_at();
  ::google::protobuf::Timestamp* mutable_started_at();
  void set_allocated_started_at(::google::protobuf::Timestamp* started_at);

  // .google.protobuf.Duration duration = 6;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 6;
  const ::google::protobuf::Duration& duration() const;
  ::google::protobuf::Duration* release_duration();
  ::google::protobuf::Duration* mutable_duration();
  void set_allocated_duration(::google::protobuf::Duration* duration);

  // .google.protobuf.Timestamp created_at = 7;
  bool has_created_at() const;
  void clear_created_at();
  static const int kCreatedAtFieldNumber = 7;
  const ::google::protobuf::Timestamp& created_at() const;
  ::google::protobuf::Timestamp* release_created_at();
  ::google::protobuf::Timestamp* mutable_created_at();
  void set_allocated_created_at(::google::protobuf::Timestamp* created_at);

  // .google.protobuf.Timestamp updated_at = 8;
  bool has_updated_at() const;
  void clear_updated_at();
  static const int kUpdatedAtFieldNumber = 8;
  const ::google::protobuf::Timestamp& updated_at() const;
  ::google::protobuf::Timestamp* release_updated_at();
  ::google::protobuf::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(::google::protobuf::Timestamp* updated_at);

  // .google.protobuf.Struct custom_info = 9;
  bool has_custom_info() const;
  void clear_custom_info();
  static const int kCustomInfoFieldNumber = 9;
  const ::google::protobuf::Struct& custom_info() const;
  ::google::protobuf::Struct* release_custom_info();
  ::google::protobuf::Struct* mutable_custom_info();
  void set_allocated_custom_info(::google::protobuf::Struct* custom_info);

  // .flyteidl.event.TaskExecutionMetadata metadata = 16;
  bool has_metadata() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 16;
  const ::flyteidl::event::TaskExecutionMetadata& metadata() const;
  ::flyteidl::event::TaskExecutionMetadata* release_metadata();
  ::flyteidl::event::TaskExecutionMetadata* mutable_metadata();
  void set_allocated_metadata(::flyteidl::event::TaskExecutionMetadata* metadata);

  // .flyteidl.core.TaskExecution.Phase phase = 3;
  void clear_phase();
  static const int kPhaseFieldNumber = 3;
  ::flyteidl::core::TaskExecution_Phase phase() const;
  void set_phase(::flyteidl::core::TaskExecution_Phase value);

  // int32 event_version = 17;
  void clear_event_version();
  static const int kEventVersionFieldNumber = 17;
  ::google::protobuf::int32 event_version() const;
  void set_event_version(::google::protobuf::int32 value);

  // string output_uri = 1 [deprecated = true];
  private:
  bool has_output_uri() const;
  public:
  PROTOBUF_DEPRECATED void clear_output_uri();
  PROTOBUF_DEPRECATED static const int kOutputUriFieldNumber = 1;
  PROTOBUF_DEPRECATED const ::std::string& output_uri() const;
  PROTOBUF_DEPRECATED void set_output_uri(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_output_uri(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_output_uri(const char* value);
  PROTOBUF_DEPRECATED void set_output_uri(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_output_uri();
  PROTOBUF_DEPRECATED ::std::string* release_output_uri();
  PROTOBUF_DEPRECATED void set_allocated_output_uri(::std::string* output_uri);

  // .flyteidl.core.ExecutionError error = 2;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  const ::flyteidl::core::ExecutionError& error() const;
  ::flyteidl::core::ExecutionError* release_error();
  ::flyteidl::core::ExecutionError* mutable_error();
  void set_allocated_error(::flyteidl::core::ExecutionError* error);

  // .flyteidl.core.LiteralMap output_data = 12 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_output_data() const;
  PROTOBUF_DEPRECATED void clear_output_data();
  PROTOBUF_DEPRECATED static const int kOutputDataFieldNumber = 12;
  PROTOBUF_DEPRECATED const ::flyteidl::core::LiteralMap& output_data() const;
  PROTOBUF_DEPRECATED ::flyteidl::core::LiteralMap* release_output_data();
  PROTOBUF_DEPRECATED ::flyteidl::core::LiteralMap* mutable_output_data();
  PROTOBUF_DEPRECATED void set_allocated_output_data(::flyteidl::core::LiteralMap* output_data);

  void clear_output_result();
  OutputResultCase output_result_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.admin.TaskExecutionClosure)
 private:
  class HasBitSetters;
  void set_has_output_uri();
  void set_has_error();
  void set_has_output_data();

  inline bool has_output_result() const;
  inline void clear_has_output_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::flyteidl::core::TaskLog > logs_;
  ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::Reason > reasons_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  ::google::protobuf::internal::ArenaStringPtr task_type_;
  ::google::protobuf::Timestamp* started_at_;
  ::google::protobuf::Duration* duration_;
  ::google::protobuf::Timestamp* created_at_;
  ::google::protobuf::Timestamp* updated_at_;
  ::google::protobuf::Struct* custom_info_;
  ::flyteidl::event::TaskExecutionMetadata* metadata_;
  int phase_;
  ::google::protobuf::int32 event_version_;
  union OutputResultUnion {
    OutputResultUnion() {}
    ::google::protobuf::internal::ArenaStringPtr output_uri_;
    ::flyteidl::core::ExecutionError* error_;
    ::flyteidl::core::LiteralMap* output_data_;
  } output_result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_flyteidl_2fadmin_2ftask_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class Reason final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.Reason) */ {
 public:
  Reason();
  virtual ~Reason();

  Reason(const Reason& from);

  inline Reason& operator=(const Reason& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Reason(Reason&& from) noexcept
    : Reason() {
    *this = ::std::move(from);
  }

  inline Reason& operator=(Reason&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Reason& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Reason* internal_default_instance() {
    return reinterpret_cast<const Reason*>(
               &_Reason_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Reason* other);
  friend void swap(Reason& a, Reason& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Reason* New() const final {
    return CreateMaybeMessage<Reason>(nullptr);
  }

  Reason* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Reason>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Reason& from);
  void MergeFrom(const Reason& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Reason* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // .google.protobuf.Timestamp occurred_at = 1;
  bool has_occurred_at() const;
  void clear_occurred_at();
  static const int kOccurredAtFieldNumber = 1;
  const ::google::protobuf::Timestamp& occurred_at() const;
  ::google::protobuf::Timestamp* release_occurred_at();
  ::google::protobuf::Timestamp* mutable_occurred_at();
  void set_allocated_occurred_at(::google::protobuf::Timestamp* occurred_at);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.Reason)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::Timestamp* occurred_at_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2ftask_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class TaskExecutionGetDataRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.TaskExecutionGetDataRequest) */ {
 public:
  TaskExecutionGetDataRequest();
  virtual ~TaskExecutionGetDataRequest();

  TaskExecutionGetDataRequest(const TaskExecutionGetDataRequest& from);

  inline TaskExecutionGetDataRequest& operator=(const TaskExecutionGetDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskExecutionGetDataRequest(TaskExecutionGetDataRequest&& from) noexcept
    : TaskExecutionGetDataRequest() {
    *this = ::std::move(from);
  }

  inline TaskExecutionGetDataRequest& operator=(TaskExecutionGetDataRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TaskExecutionGetDataRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskExecutionGetDataRequest* internal_default_instance() {
    return reinterpret_cast<const TaskExecutionGetDataRequest*>(
               &_TaskExecutionGetDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(TaskExecutionGetDataRequest* other);
  friend void swap(TaskExecutionGetDataRequest& a, TaskExecutionGetDataRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskExecutionGetDataRequest* New() const final {
    return CreateMaybeMessage<TaskExecutionGetDataRequest>(nullptr);
  }

  TaskExecutionGetDataRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TaskExecutionGetDataRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TaskExecutionGetDataRequest& from);
  void MergeFrom(const TaskExecutionGetDataRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskExecutionGetDataRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.core.TaskExecutionIdentifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::flyteidl::core::TaskExecutionIdentifier& id() const;
  ::flyteidl::core::TaskExecutionIdentifier* release_id();
  ::flyteidl::core::TaskExecutionIdentifier* mutable_id();
  void set_allocated_id(::flyteidl::core::TaskExecutionIdentifier* id);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.TaskExecutionGetDataRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::core::TaskExecutionIdentifier* id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2ftask_5fexecution_2eproto;
};
// -------------------------------------------------------------------

class TaskExecutionGetDataResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.TaskExecutionGetDataResponse) */ {
 public:
  TaskExecutionGetDataResponse();
  virtual ~TaskExecutionGetDataResponse();

  TaskExecutionGetDataResponse(const TaskExecutionGetDataResponse& from);

  inline TaskExecutionGetDataResponse& operator=(const TaskExecutionGetDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskExecutionGetDataResponse(TaskExecutionGetDataResponse&& from) noexcept
    : TaskExecutionGetDataResponse() {
    *this = ::std::move(from);
  }

  inline TaskExecutionGetDataResponse& operator=(TaskExecutionGetDataResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TaskExecutionGetDataResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskExecutionGetDataResponse* internal_default_instance() {
    return reinterpret_cast<const TaskExecutionGetDataResponse*>(
               &_TaskExecutionGetDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(TaskExecutionGetDataResponse* other);
  friend void swap(TaskExecutionGetDataResponse& a, TaskExecutionGetDataResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskExecutionGetDataResponse* New() const final {
    return CreateMaybeMessage<TaskExecutionGetDataResponse>(nullptr);
  }

  TaskExecutionGetDataResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TaskExecutionGetDataResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TaskExecutionGetDataResponse& from);
  void MergeFrom(const TaskExecutionGetDataResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskExecutionGetDataResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.admin.UrlBlob inputs = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_inputs() const;
  PROTOBUF_DEPRECATED void clear_inputs();
  PROTOBUF_DEPRECATED static const int kInputsFieldNumber = 1;
  PROTOBUF_DEPRECATED const ::flyteidl::admin::UrlBlob& inputs() const;
  PROTOBUF_DEPRECATED ::flyteidl::admin::UrlBlob* release_inputs();
  PROTOBUF_DEPRECATED ::flyteidl::admin::UrlBlob* mutable_inputs();
  PROTOBUF_DEPRECATED void set_allocated_inputs(::flyteidl::admin::UrlBlob* inputs);

  // .flyteidl.admin.UrlBlob outputs = 2 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_outputs() const;
  PROTOBUF_DEPRECATED void clear_outputs();
  PROTOBUF_DEPRECATED static const int kOutputsFieldNumber = 2;
  PROTOBUF_DEPRECATED const ::flyteidl::admin::UrlBlob& outputs() const;
  PROTOBUF_DEPRECATED ::flyteidl::admin::UrlBlob* release_outputs();
  PROTOBUF_DEPRECATED ::flyteidl::admin::UrlBlob* mutable_outputs();
  PROTOBUF_DEPRECATED void set_allocated_outputs(::flyteidl::admin::UrlBlob* outputs);

  // .flyteidl.core.LiteralMap full_inputs = 3;
  bool has_full_inputs() const;
  void clear_full_inputs();
  static const int kFullInputsFieldNumber = 3;
  const ::flyteidl::core::LiteralMap& full_inputs() const;
  ::flyteidl::core::LiteralMap* release_full_inputs();
  ::flyteidl::core::LiteralMap* mutable_full_inputs();
  void set_allocated_full_inputs(::flyteidl::core::LiteralMap* full_inputs);

  // .flyteidl.core.LiteralMap full_outputs = 4;
  bool has_full_outputs() const;
  void clear_full_outputs();
  static const int kFullOutputsFieldNumber = 4;
  const ::flyteidl::core::LiteralMap& full_outputs() const;
  ::flyteidl::core::LiteralMap* release_full_outputs();
  ::flyteidl::core::LiteralMap* mutable_full_outputs();
  void set_allocated_full_outputs(::flyteidl::core::LiteralMap* full_outputs);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.TaskExecutionGetDataResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::admin::UrlBlob* inputs_;
  ::flyteidl::admin::UrlBlob* outputs_;
  ::flyteidl::core::LiteralMap* full_inputs_;
  ::flyteidl::core::LiteralMap* full_outputs_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2ftask_5fexecution_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TaskExecutionGetRequest

// .flyteidl.core.TaskExecutionIdentifier id = 1;
inline bool TaskExecutionGetRequest::has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline const ::flyteidl::core::TaskExecutionIdentifier& TaskExecutionGetRequest::id() const {
  const ::flyteidl::core::TaskExecutionIdentifier* p = id_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecutionGetRequest.id)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::TaskExecutionIdentifier*>(
      &::flyteidl::core::_TaskExecutionIdentifier_default_instance_);
}
inline ::flyteidl::core::TaskExecutionIdentifier* TaskExecutionGetRequest::release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskExecutionGetRequest.id)
  
  ::flyteidl::core::TaskExecutionIdentifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::TaskExecutionIdentifier* TaskExecutionGetRequest::mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::TaskExecutionIdentifier>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskExecutionGetRequest.id)
  return id_;
}
inline void TaskExecutionGetRequest::set_allocated_id(::flyteidl::core::TaskExecutionIdentifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskExecutionGetRequest.id)
}

// -------------------------------------------------------------------

// TaskExecutionListRequest

// .flyteidl.core.NodeExecutionIdentifier node_execution_id = 1;
inline bool TaskExecutionListRequest::has_node_execution_id() const {
  return this != internal_default_instance() && node_execution_id_ != nullptr;
}
inline const ::flyteidl::core::NodeExecutionIdentifier& TaskExecutionListRequest::node_execution_id() const {
  const ::flyteidl::core::NodeExecutionIdentifier* p = node_execution_id_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecutionListRequest.node_execution_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::NodeExecutionIdentifier*>(
      &::flyteidl::core::_NodeExecutionIdentifier_default_instance_);
}
inline ::flyteidl::core::NodeExecutionIdentifier* TaskExecutionListRequest::release_node_execution_id() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskExecutionListRequest.node_execution_id)
  
  ::flyteidl::core::NodeExecutionIdentifier* temp = node_execution_id_;
  node_execution_id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::NodeExecutionIdentifier* TaskExecutionListRequest::mutable_node_execution_id() {
  
  if (node_execution_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::NodeExecutionIdentifier>(GetArenaNoVirtual());
    node_execution_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskExecutionListRequest.node_execution_id)
  return node_execution_id_;
}
inline void TaskExecutionListRequest::set_allocated_node_execution_id(::flyteidl::core::NodeExecutionIdentifier* node_execution_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(node_execution_id_);
  }
  if (node_execution_id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      node_execution_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, node_execution_id, submessage_arena);
    }
    
  } else {
    
  }
  node_execution_id_ = node_execution_id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskExecutionListRequest.node_execution_id)
}

// uint32 limit = 2;
inline void TaskExecutionListRequest::clear_limit() {
  limit_ = 0u;
}
inline ::google::protobuf::uint32 TaskExecutionListRequest::limit() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecutionListRequest.limit)
  return limit_;
}
inline void TaskExecutionListRequest::set_limit(::google::protobuf::uint32 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.admin.TaskExecutionListRequest.limit)
}

// string token = 3;
inline void TaskExecutionListRequest::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskExecutionListRequest::token() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecutionListRequest.token)
  return token_.GetNoArena();
}
inline void TaskExecutionListRequest::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.TaskExecutionListRequest.token)
}
#if LANG_CXX11
inline void TaskExecutionListRequest::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.TaskExecutionListRequest.token)
}
#endif
inline void TaskExecutionListRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.TaskExecutionListRequest.token)
}
inline void TaskExecutionListRequest::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.TaskExecutionListRequest.token)
}
inline ::std::string* TaskExecutionListRequest::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskExecutionListRequest.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskExecutionListRequest::release_token() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskExecutionListRequest.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskExecutionListRequest::set_allocated_token(::std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskExecutionListRequest.token)
}

// string filters = 4;
inline void TaskExecutionListRequest::clear_filters() {
  filters_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskExecutionListRequest::filters() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecutionListRequest.filters)
  return filters_.GetNoArena();
}
inline void TaskExecutionListRequest::set_filters(const ::std::string& value) {
  
  filters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.TaskExecutionListRequest.filters)
}
#if LANG_CXX11
inline void TaskExecutionListRequest::set_filters(::std::string&& value) {
  
  filters_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.TaskExecutionListRequest.filters)
}
#endif
inline void TaskExecutionListRequest::set_filters(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.TaskExecutionListRequest.filters)
}
inline void TaskExecutionListRequest::set_filters(const char* value, size_t size) {
  
  filters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.TaskExecutionListRequest.filters)
}
inline ::std::string* TaskExecutionListRequest::mutable_filters() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskExecutionListRequest.filters)
  return filters_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskExecutionListRequest::release_filters() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskExecutionListRequest.filters)
  
  return filters_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskExecutionListRequest::set_allocated_filters(::std::string* filters) {
  if (filters != nullptr) {
    
  } else {
    
  }
  filters_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filters);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskExecutionListRequest.filters)
}

// .flyteidl.admin.Sort sort_by = 5;
inline bool TaskExecutionListRequest::has_sort_by() const {
  return this != internal_default_instance() && sort_by_ != nullptr;
}
inline const ::flyteidl::admin::Sort& TaskExecutionListRequest::sort_by() const {
  const ::flyteidl::admin::Sort* p = sort_by_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecutionListRequest.sort_by)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::Sort*>(
      &::flyteidl::admin::_Sort_default_instance_);
}
inline ::flyteidl::admin::Sort* TaskExecutionListRequest::release_sort_by() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskExecutionListRequest.sort_by)
  
  ::flyteidl::admin::Sort* temp = sort_by_;
  sort_by_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::Sort* TaskExecutionListRequest::mutable_sort_by() {
  
  if (sort_by_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::Sort>(GetArenaNoVirtual());
    sort_by_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskExecutionListRequest.sort_by)
  return sort_by_;
}
inline void TaskExecutionListRequest::set_allocated_sort_by(::flyteidl::admin::Sort* sort_by) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(sort_by_);
  }
  if (sort_by) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sort_by = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sort_by, submessage_arena);
    }
    
  } else {
    
  }
  sort_by_ = sort_by;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskExecutionListRequest.sort_by)
}

// -------------------------------------------------------------------

// TaskExecution

// .flyteidl.core.TaskExecutionIdentifier id = 1;
inline bool TaskExecution::has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline const ::flyteidl::core::TaskExecutionIdentifier& TaskExecution::id() const {
  const ::flyteidl::core::TaskExecutionIdentifier* p = id_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecution.id)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::TaskExecutionIdentifier*>(
      &::flyteidl::core::_TaskExecutionIdentifier_default_instance_);
}
inline ::flyteidl::core::TaskExecutionIdentifier* TaskExecution::release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskExecution.id)
  
  ::flyteidl::core::TaskExecutionIdentifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::TaskExecutionIdentifier* TaskExecution::mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::TaskExecutionIdentifier>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskExecution.id)
  return id_;
}
inline void TaskExecution::set_allocated_id(::flyteidl::core::TaskExecutionIdentifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskExecution.id)
}

// string input_uri = 2;
inline void TaskExecution::clear_input_uri() {
  input_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskExecution::input_uri() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecution.input_uri)
  return input_uri_.GetNoArena();
}
inline void TaskExecution::set_input_uri(const ::std::string& value) {
  
  input_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.TaskExecution.input_uri)
}
#if LANG_CXX11
inline void TaskExecution::set_input_uri(::std::string&& value) {
  
  input_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.TaskExecution.input_uri)
}
#endif
inline void TaskExecution::set_input_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  input_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.TaskExecution.input_uri)
}
inline void TaskExecution::set_input_uri(const char* value, size_t size) {
  
  input_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.TaskExecution.input_uri)
}
inline ::std::string* TaskExecution::mutable_input_uri() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskExecution.input_uri)
  return input_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskExecution::release_input_uri() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskExecution.input_uri)
  
  return input_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskExecution::set_allocated_input_uri(::std::string* input_uri) {
  if (input_uri != nullptr) {
    
  } else {
    
  }
  input_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), input_uri);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskExecution.input_uri)
}

// .flyteidl.admin.TaskExecutionClosure closure = 3;
inline bool TaskExecution::has_closure() const {
  return this != internal_default_instance() && closure_ != nullptr;
}
inline void TaskExecution::clear_closure() {
  if (GetArenaNoVirtual() == nullptr && closure_ != nullptr) {
    delete closure_;
  }
  closure_ = nullptr;
}
inline const ::flyteidl::admin::TaskExecutionClosure& TaskExecution::closure() const {
  const ::flyteidl::admin::TaskExecutionClosure* p = closure_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecution.closure)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::TaskExecutionClosure*>(
      &::flyteidl::admin::_TaskExecutionClosure_default_instance_);
}
inline ::flyteidl::admin::TaskExecutionClosure* TaskExecution::release_closure() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskExecution.closure)
  
  ::flyteidl::admin::TaskExecutionClosure* temp = closure_;
  closure_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::TaskExecutionClosure* TaskExecution::mutable_closure() {
  
  if (closure_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::TaskExecutionClosure>(GetArenaNoVirtual());
    closure_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskExecution.closure)
  return closure_;
}
inline void TaskExecution::set_allocated_closure(::flyteidl::admin::TaskExecutionClosure* closure) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete closure_;
  }
  if (closure) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      closure = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, closure, submessage_arena);
    }
    
  } else {
    
  }
  closure_ = closure;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskExecution.closure)
}

// bool is_parent = 4;
inline void TaskExecution::clear_is_parent() {
  is_parent_ = false;
}
inline bool TaskExecution::is_parent() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecution.is_parent)
  return is_parent_;
}
inline void TaskExecution::set_is_parent(bool value) {
  
  is_parent_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.admin.TaskExecution.is_parent)
}

// -------------------------------------------------------------------

// TaskExecutionList

// repeated .flyteidl.admin.TaskExecution task_executions = 1;
inline int TaskExecutionList::task_executions_size() const {
  return task_executions_.size();
}
inline void TaskExecutionList::clear_task_executions() {
  task_executions_.Clear();
}
inline ::flyteidl::admin::TaskExecution* TaskExecutionList::mutable_task_executions(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskExecutionList.task_executions)
  return task_executions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::TaskExecution >*
TaskExecutionList::mutable_task_executions() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.admin.TaskExecutionList.task_executions)
  return &task_executions_;
}
inline const ::flyteidl::admin::TaskExecution& TaskExecutionList::task_executions(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecutionList.task_executions)
  return task_executions_.Get(index);
}
inline ::flyteidl::admin::TaskExecution* TaskExecutionList::add_task_executions() {
  // @@protoc_insertion_point(field_add:flyteidl.admin.TaskExecutionList.task_executions)
  return task_executions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::TaskExecution >&
TaskExecutionList::task_executions() const {
  // @@protoc_insertion_point(field_list:flyteidl.admin.TaskExecutionList.task_executions)
  return task_executions_;
}

// string token = 2;
inline void TaskExecutionList::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskExecutionList::token() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecutionList.token)
  return token_.GetNoArena();
}
inline void TaskExecutionList::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.TaskExecutionList.token)
}
#if LANG_CXX11
inline void TaskExecutionList::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.TaskExecutionList.token)
}
#endif
inline void TaskExecutionList::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.TaskExecutionList.token)
}
inline void TaskExecutionList::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.TaskExecutionList.token)
}
inline ::std::string* TaskExecutionList::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskExecutionList.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskExecutionList::release_token() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskExecutionList.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskExecutionList::set_allocated_token(::std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskExecutionList.token)
}

// -------------------------------------------------------------------

// TaskExecutionClosure

// string output_uri = 1 [deprecated = true];
inline bool TaskExecutionClosure::has_output_uri() const {
  return output_result_case() == kOutputUri;
}
inline void TaskExecutionClosure::set_has_output_uri() {
  _oneof_case_[0] = kOutputUri;
}
inline void TaskExecutionClosure::clear_output_uri() {
  if (has_output_uri()) {
    output_result_.output_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_output_result();
  }
}
inline const ::std::string& TaskExecutionClosure::output_uri() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecutionClosure.output_uri)
  if (has_output_uri()) {
    return output_result_.output_uri_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TaskExecutionClosure::set_output_uri(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flyteidl.admin.TaskExecutionClosure.output_uri)
  if (!has_output_uri()) {
    clear_output_result();
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  output_result_.output_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.TaskExecutionClosure.output_uri)
}
#if LANG_CXX11
inline void TaskExecutionClosure::set_output_uri(::std::string&& value) {
  // @@protoc_insertion_point(field_set:flyteidl.admin.TaskExecutionClosure.output_uri)
  if (!has_output_uri()) {
    clear_output_result();
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  output_result_.output_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.TaskExecutionClosure.output_uri)
}
#endif
inline void TaskExecutionClosure::set_output_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_output_uri()) {
    clear_output_result();
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  output_result_.output_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.TaskExecutionClosure.output_uri)
}
inline void TaskExecutionClosure::set_output_uri(const char* value, size_t size) {
  if (!has_output_uri()) {
    clear_output_result();
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  output_result_.output_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.TaskExecutionClosure.output_uri)
}
inline ::std::string* TaskExecutionClosure::mutable_output_uri() {
  if (!has_output_uri()) {
    clear_output_result();
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskExecutionClosure.output_uri)
  return output_result_.output_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskExecutionClosure::release_output_uri() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskExecutionClosure.output_uri)
  if (has_output_uri()) {
    clear_has_output_result();
    return output_result_.output_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void TaskExecutionClosure::set_allocated_output_uri(::std::string* output_uri) {
  if (has_output_result()) {
    clear_output_result();
  }
  if (output_uri != nullptr) {
    set_has_output_uri();
    output_result_.output_uri_.UnsafeSetDefault(output_uri);
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskExecutionClosure.output_uri)
}

// .flyteidl.core.ExecutionError error = 2;
inline bool TaskExecutionClosure::has_error() const {
  return output_result_case() == kError;
}
inline void TaskExecutionClosure::set_has_error() {
  _oneof_case_[0] = kError;
}
inline ::flyteidl::core::ExecutionError* TaskExecutionClosure::release_error() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskExecutionClosure.error)
  if (has_error()) {
    clear_has_output_result();
      ::flyteidl::core::ExecutionError* temp = output_result_.error_;
    output_result_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::ExecutionError& TaskExecutionClosure::error() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecutionClosure.error)
  return has_error()
      ? *output_result_.error_
      : *reinterpret_cast< ::flyteidl::core::ExecutionError*>(&::flyteidl::core::_ExecutionError_default_instance_);
}
inline ::flyteidl::core::ExecutionError* TaskExecutionClosure::mutable_error() {
  if (!has_error()) {
    clear_output_result();
    set_has_error();
    output_result_.error_ = CreateMaybeMessage< ::flyteidl::core::ExecutionError >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskExecutionClosure.error)
  return output_result_.error_;
}

// .flyteidl.core.LiteralMap output_data = 12 [deprecated = true];
inline bool TaskExecutionClosure::has_output_data() const {
  return output_result_case() == kOutputData;
}
inline void TaskExecutionClosure::set_has_output_data() {
  _oneof_case_[0] = kOutputData;
}
inline ::flyteidl::core::LiteralMap* TaskExecutionClosure::release_output_data() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskExecutionClosure.output_data)
  if (has_output_data()) {
    clear_has_output_result();
      ::flyteidl::core::LiteralMap* temp = output_result_.output_data_;
    output_result_.output_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::LiteralMap& TaskExecutionClosure::output_data() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecutionClosure.output_data)
  return has_output_data()
      ? *output_result_.output_data_
      : *reinterpret_cast< ::flyteidl::core::LiteralMap*>(&::flyteidl::core::_LiteralMap_default_instance_);
}
inline ::flyteidl::core::LiteralMap* TaskExecutionClosure::mutable_output_data() {
  if (!has_output_data()) {
    clear_output_result();
    set_has_output_data();
    output_result_.output_data_ = CreateMaybeMessage< ::flyteidl::core::LiteralMap >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskExecutionClosure.output_data)
  return output_result_.output_data_;
}

// .flyteidl.core.TaskExecution.Phase phase = 3;
inline void TaskExecutionClosure::clear_phase() {
  phase_ = 0;
}
inline ::flyteidl::core::TaskExecution_Phase TaskExecutionClosure::phase() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecutionClosure.phase)
  return static_cast< ::flyteidl::core::TaskExecution_Phase >(phase_);
}
inline void TaskExecutionClosure::set_phase(::flyteidl::core::TaskExecution_Phase value) {
  
  phase_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.admin.TaskExecutionClosure.phase)
}

// repeated .flyteidl.core.TaskLog logs = 4;
inline int TaskExecutionClosure::logs_size() const {
  return logs_.size();
}
inline ::flyteidl::core::TaskLog* TaskExecutionClosure::mutable_logs(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskExecutionClosure.logs)
  return logs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::flyteidl::core::TaskLog >*
TaskExecutionClosure::mutable_logs() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.admin.TaskExecutionClosure.logs)
  return &logs_;
}
inline const ::flyteidl::core::TaskLog& TaskExecutionClosure::logs(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecutionClosure.logs)
  return logs_.Get(index);
}
inline ::flyteidl::core::TaskLog* TaskExecutionClosure::add_logs() {
  // @@protoc_insertion_point(field_add:flyteidl.admin.TaskExecutionClosure.logs)
  return logs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::flyteidl::core::TaskLog >&
TaskExecutionClosure::logs() const {
  // @@protoc_insertion_point(field_list:flyteidl.admin.TaskExecutionClosure.logs)
  return logs_;
}

// .google.protobuf.Timestamp started_at = 5;
inline bool TaskExecutionClosure::has_started_at() const {
  return this != internal_default_instance() && started_at_ != nullptr;
}
inline const ::google::protobuf::Timestamp& TaskExecutionClosure::started_at() const {
  const ::google::protobuf::Timestamp* p = started_at_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecutionClosure.started_at)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* TaskExecutionClosure::release_started_at() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskExecutionClosure.started_at)
  
  ::google::protobuf::Timestamp* temp = started_at_;
  started_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* TaskExecutionClosure::mutable_started_at() {
  
  if (started_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    started_at_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskExecutionClosure.started_at)
  return started_at_;
}
inline void TaskExecutionClosure::set_allocated_started_at(::google::protobuf::Timestamp* started_at) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(started_at_);
  }
  if (started_at) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(started_at)->GetArena();
    if (message_arena != submessage_arena) {
      started_at = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, started_at, submessage_arena);
    }
    
  } else {
    
  }
  started_at_ = started_at;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskExecutionClosure.started_at)
}

// .google.protobuf.Duration duration = 6;
inline bool TaskExecutionClosure::has_duration() const {
  return this != internal_default_instance() && duration_ != nullptr;
}
inline const ::google::protobuf::Duration& TaskExecutionClosure::duration() const {
  const ::google::protobuf::Duration* p = duration_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecutionClosure.duration)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* TaskExecutionClosure::release_duration() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskExecutionClosure.duration)
  
  ::google::protobuf::Duration* temp = duration_;
  duration_ = nullptr;
  return temp;
}
inline ::google::protobuf::Duration* TaskExecutionClosure::mutable_duration() {
  
  if (duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArenaNoVirtual());
    duration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskExecutionClosure.duration)
  return duration_;
}
inline void TaskExecutionClosure::set_allocated_duration(::google::protobuf::Duration* duration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(duration_);
  }
  if (duration) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(duration)->GetArena();
    if (message_arena != submessage_arena) {
      duration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, duration, submessage_arena);
    }
    
  } else {
    
  }
  duration_ = duration;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskExecutionClosure.duration)
}

// .google.protobuf.Timestamp created_at = 7;
inline bool TaskExecutionClosure::has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline const ::google::protobuf::Timestamp& TaskExecutionClosure::created_at() const {
  const ::google::protobuf::Timestamp* p = created_at_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecutionClosure.created_at)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* TaskExecutionClosure::release_created_at() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskExecutionClosure.created_at)
  
  ::google::protobuf::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* TaskExecutionClosure::mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    created_at_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskExecutionClosure.created_at)
  return created_at_;
}
inline void TaskExecutionClosure::set_allocated_created_at(::google::protobuf::Timestamp* created_at) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskExecutionClosure.created_at)
}

// .google.protobuf.Timestamp updated_at = 8;
inline bool TaskExecutionClosure::has_updated_at() const {
  return this != internal_default_instance() && updated_at_ != nullptr;
}
inline const ::google::protobuf::Timestamp& TaskExecutionClosure::updated_at() const {
  const ::google::protobuf::Timestamp* p = updated_at_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecutionClosure.updated_at)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* TaskExecutionClosure::release_updated_at() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskExecutionClosure.updated_at)
  
  ::google::protobuf::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* TaskExecutionClosure::mutable_updated_at() {
  
  if (updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    updated_at_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskExecutionClosure.updated_at)
  return updated_at_;
}
inline void TaskExecutionClosure::set_allocated_updated_at(::google::protobuf::Timestamp* updated_at) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(updated_at_);
  }
  if (updated_at) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(updated_at)->GetArena();
    if (message_arena != submessage_arena) {
      updated_at = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, updated_at, submessage_arena);
    }
    
  } else {
    
  }
  updated_at_ = updated_at;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskExecutionClosure.updated_at)
}

// .google.protobuf.Struct custom_info = 9;
inline bool TaskExecutionClosure::has_custom_info() const {
  return this != internal_default_instance() && custom_info_ != nullptr;
}
inline const ::google::protobuf::Struct& TaskExecutionClosure::custom_info() const {
  const ::google::protobuf::Struct* p = custom_info_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecutionClosure.custom_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Struct*>(
      &::google::protobuf::_Struct_default_instance_);
}
inline ::google::protobuf::Struct* TaskExecutionClosure::release_custom_info() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskExecutionClosure.custom_info)
  
  ::google::protobuf::Struct* temp = custom_info_;
  custom_info_ = nullptr;
  return temp;
}
inline ::google::protobuf::Struct* TaskExecutionClosure::mutable_custom_info() {
  
  if (custom_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Struct>(GetArenaNoVirtual());
    custom_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskExecutionClosure.custom_info)
  return custom_info_;
}
inline void TaskExecutionClosure::set_allocated_custom_info(::google::protobuf::Struct* custom_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(custom_info_);
  }
  if (custom_info) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(custom_info)->GetArena();
    if (message_arena != submessage_arena) {
      custom_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, custom_info, submessage_arena);
    }
    
  } else {
    
  }
  custom_info_ = custom_info;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskExecutionClosure.custom_info)
}

// string reason = 10;
inline void TaskExecutionClosure::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskExecutionClosure::reason() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecutionClosure.reason)
  return reason_.GetNoArena();
}
inline void TaskExecutionClosure::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.TaskExecutionClosure.reason)
}
#if LANG_CXX11
inline void TaskExecutionClosure::set_reason(::std::string&& value) {
  
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.TaskExecutionClosure.reason)
}
#endif
inline void TaskExecutionClosure::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.TaskExecutionClosure.reason)
}
inline void TaskExecutionClosure::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.TaskExecutionClosure.reason)
}
inline ::std::string* TaskExecutionClosure::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskExecutionClosure.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskExecutionClosure::release_reason() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskExecutionClosure.reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskExecutionClosure::set_allocated_reason(::std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskExecutionClosure.reason)
}

// string task_type = 11;
inline void TaskExecutionClosure::clear_task_type() {
  task_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskExecutionClosure::task_type() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecutionClosure.task_type)
  return task_type_.GetNoArena();
}
inline void TaskExecutionClosure::set_task_type(const ::std::string& value) {
  
  task_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.TaskExecutionClosure.task_type)
}
#if LANG_CXX11
inline void TaskExecutionClosure::set_task_type(::std::string&& value) {
  
  task_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.TaskExecutionClosure.task_type)
}
#endif
inline void TaskExecutionClosure::set_task_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  task_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.TaskExecutionClosure.task_type)
}
inline void TaskExecutionClosure::set_task_type(const char* value, size_t size) {
  
  task_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.TaskExecutionClosure.task_type)
}
inline ::std::string* TaskExecutionClosure::mutable_task_type() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskExecutionClosure.task_type)
  return task_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskExecutionClosure::release_task_type() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskExecutionClosure.task_type)
  
  return task_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskExecutionClosure::set_allocated_task_type(::std::string* task_type) {
  if (task_type != nullptr) {
    
  } else {
    
  }
  task_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), task_type);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskExecutionClosure.task_type)
}

// .flyteidl.event.TaskExecutionMetadata metadata = 16;
inline bool TaskExecutionClosure::has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline const ::flyteidl::event::TaskExecutionMetadata& TaskExecutionClosure::metadata() const {
  const ::flyteidl::event::TaskExecutionMetadata* p = metadata_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecutionClosure.metadata)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::event::TaskExecutionMetadata*>(
      &::flyteidl::event::_TaskExecutionMetadata_default_instance_);
}
inline ::flyteidl::event::TaskExecutionMetadata* TaskExecutionClosure::release_metadata() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskExecutionClosure.metadata)
  
  ::flyteidl::event::TaskExecutionMetadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::flyteidl::event::TaskExecutionMetadata* TaskExecutionClosure::mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::event::TaskExecutionMetadata>(GetArenaNoVirtual());
    metadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskExecutionClosure.metadata)
  return metadata_;
}
inline void TaskExecutionClosure::set_allocated_metadata(::flyteidl::event::TaskExecutionMetadata* metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(metadata_);
  }
  if (metadata) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      metadata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskExecutionClosure.metadata)
}

// int32 event_version = 17;
inline void TaskExecutionClosure::clear_event_version() {
  event_version_ = 0;
}
inline ::google::protobuf::int32 TaskExecutionClosure::event_version() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecutionClosure.event_version)
  return event_version_;
}
inline void TaskExecutionClosure::set_event_version(::google::protobuf::int32 value) {
  
  event_version_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.admin.TaskExecutionClosure.event_version)
}

// repeated .flyteidl.admin.Reason reasons = 18;
inline int TaskExecutionClosure::reasons_size() const {
  return reasons_.size();
}
inline void TaskExecutionClosure::clear_reasons() {
  reasons_.Clear();
}
inline ::flyteidl::admin::Reason* TaskExecutionClosure::mutable_reasons(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskExecutionClosure.reasons)
  return reasons_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::Reason >*
TaskExecutionClosure::mutable_reasons() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.admin.TaskExecutionClosure.reasons)
  return &reasons_;
}
inline const ::flyteidl::admin::Reason& TaskExecutionClosure::reasons(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecutionClosure.reasons)
  return reasons_.Get(index);
}
inline ::flyteidl::admin::Reason* TaskExecutionClosure::add_reasons() {
  // @@protoc_insertion_point(field_add:flyteidl.admin.TaskExecutionClosure.reasons)
  return reasons_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::Reason >&
TaskExecutionClosure::reasons() const {
  // @@protoc_insertion_point(field_list:flyteidl.admin.TaskExecutionClosure.reasons)
  return reasons_;
}

inline bool TaskExecutionClosure::has_output_result() const {
  return output_result_case() != OUTPUT_RESULT_NOT_SET;
}
inline void TaskExecutionClosure::clear_has_output_result() {
  _oneof_case_[0] = OUTPUT_RESULT_NOT_SET;
}
inline TaskExecutionClosure::OutputResultCase TaskExecutionClosure::output_result_case() const {
  return TaskExecutionClosure::OutputResultCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Reason

// .google.protobuf.Timestamp occurred_at = 1;
inline bool Reason::has_occurred_at() const {
  return this != internal_default_instance() && occurred_at_ != nullptr;
}
inline const ::google::protobuf::Timestamp& Reason::occurred_at() const {
  const ::google::protobuf::Timestamp* p = occurred_at_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.Reason.occurred_at)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Reason::release_occurred_at() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Reason.occurred_at)
  
  ::google::protobuf::Timestamp* temp = occurred_at_;
  occurred_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Reason::mutable_occurred_at() {
  
  if (occurred_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    occurred_at_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Reason.occurred_at)
  return occurred_at_;
}
inline void Reason::set_allocated_occurred_at(::google::protobuf::Timestamp* occurred_at) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(occurred_at_);
  }
  if (occurred_at) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(occurred_at)->GetArena();
    if (message_arena != submessage_arena) {
      occurred_at = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, occurred_at, submessage_arena);
    }
    
  } else {
    
  }
  occurred_at_ = occurred_at;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Reason.occurred_at)
}

// string message = 2;
inline void Reason::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Reason::message() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Reason.message)
  return message_.GetNoArena();
}
inline void Reason::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.Reason.message)
}
#if LANG_CXX11
inline void Reason::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.Reason.message)
}
#endif
inline void Reason::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.Reason.message)
}
inline void Reason::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.Reason.message)
}
inline ::std::string* Reason::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Reason.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Reason::release_message() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Reason.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Reason::set_allocated_message(::std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Reason.message)
}

// -------------------------------------------------------------------

// TaskExecutionGetDataRequest

// .flyteidl.core.TaskExecutionIdentifier id = 1;
inline bool TaskExecutionGetDataRequest::has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline const ::flyteidl::core::TaskExecutionIdentifier& TaskExecutionGetDataRequest::id() const {
  const ::flyteidl::core::TaskExecutionIdentifier* p = id_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecutionGetDataRequest.id)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::TaskExecutionIdentifier*>(
      &::flyteidl::core::_TaskExecutionIdentifier_default_instance_);
}
inline ::flyteidl::core::TaskExecutionIdentifier* TaskExecutionGetDataRequest::release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskExecutionGetDataRequest.id)
  
  ::flyteidl::core::TaskExecutionIdentifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::TaskExecutionIdentifier* TaskExecutionGetDataRequest::mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::TaskExecutionIdentifier>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskExecutionGetDataRequest.id)
  return id_;
}
inline void TaskExecutionGetDataRequest::set_allocated_id(::flyteidl::core::TaskExecutionIdentifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskExecutionGetDataRequest.id)
}

// -------------------------------------------------------------------

// TaskExecutionGetDataResponse

// .flyteidl.admin.UrlBlob inputs = 1 [deprecated = true];
inline bool TaskExecutionGetDataResponse::has_inputs() const {
  return this != internal_default_instance() && inputs_ != nullptr;
}
inline const ::flyteidl::admin::UrlBlob& TaskExecutionGetDataResponse::inputs() const {
  const ::flyteidl::admin::UrlBlob* p = inputs_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecutionGetDataResponse.inputs)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::UrlBlob*>(
      &::flyteidl::admin::_UrlBlob_default_instance_);
}
inline ::flyteidl::admin::UrlBlob* TaskExecutionGetDataResponse::release_inputs() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskExecutionGetDataResponse.inputs)
  
  ::flyteidl::admin::UrlBlob* temp = inputs_;
  inputs_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::UrlBlob* TaskExecutionGetDataResponse::mutable_inputs() {
  
  if (inputs_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::UrlBlob>(GetArenaNoVirtual());
    inputs_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskExecutionGetDataResponse.inputs)
  return inputs_;
}
inline void TaskExecutionGetDataResponse::set_allocated_inputs(::flyteidl::admin::UrlBlob* inputs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(inputs_);
  }
  if (inputs) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      inputs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, inputs, submessage_arena);
    }
    
  } else {
    
  }
  inputs_ = inputs;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskExecutionGetDataResponse.inputs)
}

// .flyteidl.admin.UrlBlob outputs = 2 [deprecated = true];
inline bool TaskExecutionGetDataResponse::has_outputs() const {
  return this != internal_default_instance() && outputs_ != nullptr;
}
inline const ::flyteidl::admin::UrlBlob& TaskExecutionGetDataResponse::outputs() const {
  const ::flyteidl::admin::UrlBlob* p = outputs_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecutionGetDataResponse.outputs)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::UrlBlob*>(
      &::flyteidl::admin::_UrlBlob_default_instance_);
}
inline ::flyteidl::admin::UrlBlob* TaskExecutionGetDataResponse::release_outputs() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskExecutionGetDataResponse.outputs)
  
  ::flyteidl::admin::UrlBlob* temp = outputs_;
  outputs_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::UrlBlob* TaskExecutionGetDataResponse::mutable_outputs() {
  
  if (outputs_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::UrlBlob>(GetArenaNoVirtual());
    outputs_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskExecutionGetDataResponse.outputs)
  return outputs_;
}
inline void TaskExecutionGetDataResponse::set_allocated_outputs(::flyteidl::admin::UrlBlob* outputs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(outputs_);
  }
  if (outputs) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      outputs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, outputs, submessage_arena);
    }
    
  } else {
    
  }
  outputs_ = outputs;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskExecutionGetDataResponse.outputs)
}

// .flyteidl.core.LiteralMap full_inputs = 3;
inline bool TaskExecutionGetDataResponse::has_full_inputs() const {
  return this != internal_default_instance() && full_inputs_ != nullptr;
}
inline const ::flyteidl::core::LiteralMap& TaskExecutionGetDataResponse::full_inputs() const {
  const ::flyteidl::core::LiteralMap* p = full_inputs_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecutionGetDataResponse.full_inputs)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::LiteralMap*>(
      &::flyteidl::core::_LiteralMap_default_instance_);
}
inline ::flyteidl::core::LiteralMap* TaskExecutionGetDataResponse::release_full_inputs() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskExecutionGetDataResponse.full_inputs)
  
  ::flyteidl::core::LiteralMap* temp = full_inputs_;
  full_inputs_ = nullptr;
  return temp;
}
inline ::flyteidl::core::LiteralMap* TaskExecutionGetDataResponse::mutable_full_inputs() {
  
  if (full_inputs_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::LiteralMap>(GetArenaNoVirtual());
    full_inputs_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskExecutionGetDataResponse.full_inputs)
  return full_inputs_;
}
inline void TaskExecutionGetDataResponse::set_allocated_full_inputs(::flyteidl::core::LiteralMap* full_inputs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(full_inputs_);
  }
  if (full_inputs) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      full_inputs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, full_inputs, submessage_arena);
    }
    
  } else {
    
  }
  full_inputs_ = full_inputs;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskExecutionGetDataResponse.full_inputs)
}

// .flyteidl.core.LiteralMap full_outputs = 4;
inline bool TaskExecutionGetDataResponse::has_full_outputs() const {
  return this != internal_default_instance() && full_outputs_ != nullptr;
}
inline const ::flyteidl::core::LiteralMap& TaskExecutionGetDataResponse::full_outputs() const {
  const ::flyteidl::core::LiteralMap* p = full_outputs_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.TaskExecutionGetDataResponse.full_outputs)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::LiteralMap*>(
      &::flyteidl::core::_LiteralMap_default_instance_);
}
inline ::flyteidl::core::LiteralMap* TaskExecutionGetDataResponse::release_full_outputs() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.TaskExecutionGetDataResponse.full_outputs)
  
  ::flyteidl::core::LiteralMap* temp = full_outputs_;
  full_outputs_ = nullptr;
  return temp;
}
inline ::flyteidl::core::LiteralMap* TaskExecutionGetDataResponse::mutable_full_outputs() {
  
  if (full_outputs_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::LiteralMap>(GetArenaNoVirtual());
    full_outputs_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.TaskExecutionGetDataResponse.full_outputs)
  return full_outputs_;
}
inline void TaskExecutionGetDataResponse::set_allocated_full_outputs(::flyteidl::core::LiteralMap* full_outputs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(full_outputs_);
  }
  if (full_outputs) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      full_outputs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, full_outputs, submessage_arena);
    }
    
  } else {
    
  }
  full_outputs_ = full_outputs;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.TaskExecutionGetDataResponse.full_outputs)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace admin
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_flyteidl_2fadmin_2ftask_5fexecution_2eproto
