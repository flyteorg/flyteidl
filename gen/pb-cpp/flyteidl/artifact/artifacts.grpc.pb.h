// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: flyteidl/artifact/artifacts.proto
#ifndef GRPC_flyteidl_2fartifact_2fartifacts_2eproto__INCLUDED
#define GRPC_flyteidl_2fartifact_2fartifacts_2eproto__INCLUDED

#include "flyteidl/artifact/artifacts.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class Channel;
class CompletionQueue;
class ServerCompletionQueue;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc_impl

namespace grpc {
class ServerContext;
}  // namespace grpc

namespace flyteidl {
namespace artifact {

class ArtifactRegistry final {
 public:
  static constexpr char const* service_full_name() {
    return "flyteidl.artifact.ArtifactRegistry";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CreateArtifact(::grpc::ClientContext* context, const ::flyteidl::artifact::CreateArtifactRequest& request, ::flyteidl::artifact::CreateArtifactResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::artifact::CreateArtifactResponse>> AsyncCreateArtifact(::grpc::ClientContext* context, const ::flyteidl::artifact::CreateArtifactRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::artifact::CreateArtifactResponse>>(AsyncCreateArtifactRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::artifact::CreateArtifactResponse>> PrepareAsyncCreateArtifact(::grpc::ClientContext* context, const ::flyteidl::artifact::CreateArtifactRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::artifact::CreateArtifactResponse>>(PrepareAsyncCreateArtifactRaw(context, request, cq));
    }
    virtual ::grpc::Status GetArtifact(::grpc::ClientContext* context, const ::flyteidl::artifact::GetArtifactRequest& request, ::flyteidl::artifact::GetArtifactResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::artifact::GetArtifactResponse>> AsyncGetArtifact(::grpc::ClientContext* context, const ::flyteidl::artifact::GetArtifactRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::artifact::GetArtifactResponse>>(AsyncGetArtifactRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::artifact::GetArtifactResponse>> PrepareAsyncGetArtifact(::grpc::ClientContext* context, const ::flyteidl::artifact::GetArtifactRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::artifact::GetArtifactResponse>>(PrepareAsyncGetArtifactRaw(context, request, cq));
    }
    virtual ::grpc::Status ListArtifactNames(::grpc::ClientContext* context, const ::flyteidl::artifact::ListArtifactNamesRequest& request, ::flyteidl::artifact::ListArtifactNamesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::artifact::ListArtifactNamesResponse>> AsyncListArtifactNames(::grpc::ClientContext* context, const ::flyteidl::artifact::ListArtifactNamesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::artifact::ListArtifactNamesResponse>>(AsyncListArtifactNamesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::artifact::ListArtifactNamesResponse>> PrepareAsyncListArtifactNames(::grpc::ClientContext* context, const ::flyteidl::artifact::ListArtifactNamesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::artifact::ListArtifactNamesResponse>>(PrepareAsyncListArtifactNamesRaw(context, request, cq));
    }
    virtual ::grpc::Status ListArtifacts(::grpc::ClientContext* context, const ::flyteidl::artifact::ListArtifactsRequest& request, ::flyteidl::artifact::ListArtifactsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::artifact::ListArtifactsResponse>> AsyncListArtifacts(::grpc::ClientContext* context, const ::flyteidl::artifact::ListArtifactsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::artifact::ListArtifactsResponse>>(AsyncListArtifactsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::artifact::ListArtifactsResponse>> PrepareAsyncListArtifacts(::grpc::ClientContext* context, const ::flyteidl::artifact::ListArtifactsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::artifact::ListArtifactsResponse>>(PrepareAsyncListArtifactsRaw(context, request, cq));
    }
    virtual ::grpc::Status TagArtifact(::grpc::ClientContext* context, const ::flyteidl::artifact::AddTagsRequest& request, ::flyteidl::artifact::AddTagsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::artifact::AddTagsResponse>> AsyncTagArtifact(::grpc::ClientContext* context, const ::flyteidl::artifact::AddTagsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::artifact::AddTagsResponse>>(AsyncTagArtifactRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::artifact::AddTagsResponse>> PrepareAsyncTagArtifact(::grpc::ClientContext* context, const ::flyteidl::artifact::AddTagsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::artifact::AddTagsResponse>>(PrepareAsyncTagArtifactRaw(context, request, cq));
    }
    virtual ::grpc::Status RemoveTags(::grpc::ClientContext* context, const ::flyteidl::artifact::RemoveTagsRequest& request, ::flyteidl::artifact::RemoveTagsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::artifact::RemoveTagsResponse>> AsyncRemoveTags(::grpc::ClientContext* context, const ::flyteidl::artifact::RemoveTagsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::artifact::RemoveTagsResponse>>(AsyncRemoveTagsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::artifact::RemoveTagsResponse>> PrepareAsyncRemoveTags(::grpc::ClientContext* context, const ::flyteidl::artifact::RemoveTagsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::artifact::RemoveTagsResponse>>(PrepareAsyncRemoveTagsRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateAlias(::grpc::ClientContext* context, const ::flyteidl::artifact::CreateAliasRequest& request, ::flyteidl::artifact::CreateAliasResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::artifact::CreateAliasResponse>> AsyncCreateAlias(::grpc::ClientContext* context, const ::flyteidl::artifact::CreateAliasRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::artifact::CreateAliasResponse>>(AsyncCreateAliasRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::artifact::CreateAliasResponse>> PrepareAsyncCreateAlias(::grpc::ClientContext* context, const ::flyteidl::artifact::CreateAliasRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::artifact::CreateAliasResponse>>(PrepareAsyncCreateAliasRaw(context, request, cq));
    }
    virtual ::grpc::Status RemoveAlias(::grpc::ClientContext* context, const ::flyteidl::artifact::RemoveAliasRequest& request, ::flyteidl::artifact::RemoveAliasResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::artifact::RemoveAliasResponse>> AsyncRemoveAlias(::grpc::ClientContext* context, const ::flyteidl::artifact::RemoveAliasRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::artifact::RemoveAliasResponse>>(AsyncRemoveAliasRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::artifact::RemoveAliasResponse>> PrepareAsyncRemoveAlias(::grpc::ClientContext* context, const ::flyteidl::artifact::RemoveAliasRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::artifact::RemoveAliasResponse>>(PrepareAsyncRemoveAliasRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void CreateArtifact(::grpc::ClientContext* context, const ::flyteidl::artifact::CreateArtifactRequest* request, ::flyteidl::artifact::CreateArtifactResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateArtifact(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::artifact::CreateArtifactResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateArtifact(::grpc::ClientContext* context, const ::flyteidl::artifact::CreateArtifactRequest* request, ::flyteidl::artifact::CreateArtifactResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CreateArtifact(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::artifact::CreateArtifactResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetArtifact(::grpc::ClientContext* context, const ::flyteidl::artifact::GetArtifactRequest* request, ::flyteidl::artifact::GetArtifactResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetArtifact(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::artifact::GetArtifactResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetArtifact(::grpc::ClientContext* context, const ::flyteidl::artifact::GetArtifactRequest* request, ::flyteidl::artifact::GetArtifactResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetArtifact(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::artifact::GetArtifactResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ListArtifactNames(::grpc::ClientContext* context, const ::flyteidl::artifact::ListArtifactNamesRequest* request, ::flyteidl::artifact::ListArtifactNamesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListArtifactNames(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::artifact::ListArtifactNamesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListArtifactNames(::grpc::ClientContext* context, const ::flyteidl::artifact::ListArtifactNamesRequest* request, ::flyteidl::artifact::ListArtifactNamesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ListArtifactNames(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::artifact::ListArtifactNamesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ListArtifacts(::grpc::ClientContext* context, const ::flyteidl::artifact::ListArtifactsRequest* request, ::flyteidl::artifact::ListArtifactsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListArtifacts(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::artifact::ListArtifactsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListArtifacts(::grpc::ClientContext* context, const ::flyteidl::artifact::ListArtifactsRequest* request, ::flyteidl::artifact::ListArtifactsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ListArtifacts(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::artifact::ListArtifactsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void TagArtifact(::grpc::ClientContext* context, const ::flyteidl::artifact::AddTagsRequest* request, ::flyteidl::artifact::AddTagsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TagArtifact(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::artifact::AddTagsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TagArtifact(::grpc::ClientContext* context, const ::flyteidl::artifact::AddTagsRequest* request, ::flyteidl::artifact::AddTagsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void TagArtifact(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::artifact::AddTagsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void RemoveTags(::grpc::ClientContext* context, const ::flyteidl::artifact::RemoveTagsRequest* request, ::flyteidl::artifact::RemoveTagsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemoveTags(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::artifact::RemoveTagsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemoveTags(::grpc::ClientContext* context, const ::flyteidl::artifact::RemoveTagsRequest* request, ::flyteidl::artifact::RemoveTagsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void RemoveTags(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::artifact::RemoveTagsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CreateAlias(::grpc::ClientContext* context, const ::flyteidl::artifact::CreateAliasRequest* request, ::flyteidl::artifact::CreateAliasResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateAlias(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::artifact::CreateAliasResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateAlias(::grpc::ClientContext* context, const ::flyteidl::artifact::CreateAliasRequest* request, ::flyteidl::artifact::CreateAliasResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CreateAlias(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::artifact::CreateAliasResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void RemoveAlias(::grpc::ClientContext* context, const ::flyteidl::artifact::RemoveAliasRequest* request, ::flyteidl::artifact::RemoveAliasResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemoveAlias(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::artifact::RemoveAliasResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemoveAlias(::grpc::ClientContext* context, const ::flyteidl::artifact::RemoveAliasRequest* request, ::flyteidl::artifact::RemoveAliasResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void RemoveAlias(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::artifact::RemoveAliasResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::artifact::CreateArtifactResponse>* AsyncCreateArtifactRaw(::grpc::ClientContext* context, const ::flyteidl::artifact::CreateArtifactRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::artifact::CreateArtifactResponse>* PrepareAsyncCreateArtifactRaw(::grpc::ClientContext* context, const ::flyteidl::artifact::CreateArtifactRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::artifact::GetArtifactResponse>* AsyncGetArtifactRaw(::grpc::ClientContext* context, const ::flyteidl::artifact::GetArtifactRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::artifact::GetArtifactResponse>* PrepareAsyncGetArtifactRaw(::grpc::ClientContext* context, const ::flyteidl::artifact::GetArtifactRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::artifact::ListArtifactNamesResponse>* AsyncListArtifactNamesRaw(::grpc::ClientContext* context, const ::flyteidl::artifact::ListArtifactNamesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::artifact::ListArtifactNamesResponse>* PrepareAsyncListArtifactNamesRaw(::grpc::ClientContext* context, const ::flyteidl::artifact::ListArtifactNamesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::artifact::ListArtifactsResponse>* AsyncListArtifactsRaw(::grpc::ClientContext* context, const ::flyteidl::artifact::ListArtifactsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::artifact::ListArtifactsResponse>* PrepareAsyncListArtifactsRaw(::grpc::ClientContext* context, const ::flyteidl::artifact::ListArtifactsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::artifact::AddTagsResponse>* AsyncTagArtifactRaw(::grpc::ClientContext* context, const ::flyteidl::artifact::AddTagsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::artifact::AddTagsResponse>* PrepareAsyncTagArtifactRaw(::grpc::ClientContext* context, const ::flyteidl::artifact::AddTagsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::artifact::RemoveTagsResponse>* AsyncRemoveTagsRaw(::grpc::ClientContext* context, const ::flyteidl::artifact::RemoveTagsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::artifact::RemoveTagsResponse>* PrepareAsyncRemoveTagsRaw(::grpc::ClientContext* context, const ::flyteidl::artifact::RemoveTagsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::artifact::CreateAliasResponse>* AsyncCreateAliasRaw(::grpc::ClientContext* context, const ::flyteidl::artifact::CreateAliasRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::artifact::CreateAliasResponse>* PrepareAsyncCreateAliasRaw(::grpc::ClientContext* context, const ::flyteidl::artifact::CreateAliasRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::artifact::RemoveAliasResponse>* AsyncRemoveAliasRaw(::grpc::ClientContext* context, const ::flyteidl::artifact::RemoveAliasRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::flyteidl::artifact::RemoveAliasResponse>* PrepareAsyncRemoveAliasRaw(::grpc::ClientContext* context, const ::flyteidl::artifact::RemoveAliasRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateArtifact(::grpc::ClientContext* context, const ::flyteidl::artifact::CreateArtifactRequest& request, ::flyteidl::artifact::CreateArtifactResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::CreateArtifactResponse>> AsyncCreateArtifact(::grpc::ClientContext* context, const ::flyteidl::artifact::CreateArtifactRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::CreateArtifactResponse>>(AsyncCreateArtifactRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::CreateArtifactResponse>> PrepareAsyncCreateArtifact(::grpc::ClientContext* context, const ::flyteidl::artifact::CreateArtifactRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::CreateArtifactResponse>>(PrepareAsyncCreateArtifactRaw(context, request, cq));
    }
    ::grpc::Status GetArtifact(::grpc::ClientContext* context, const ::flyteidl::artifact::GetArtifactRequest& request, ::flyteidl::artifact::GetArtifactResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::GetArtifactResponse>> AsyncGetArtifact(::grpc::ClientContext* context, const ::flyteidl::artifact::GetArtifactRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::GetArtifactResponse>>(AsyncGetArtifactRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::GetArtifactResponse>> PrepareAsyncGetArtifact(::grpc::ClientContext* context, const ::flyteidl::artifact::GetArtifactRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::GetArtifactResponse>>(PrepareAsyncGetArtifactRaw(context, request, cq));
    }
    ::grpc::Status ListArtifactNames(::grpc::ClientContext* context, const ::flyteidl::artifact::ListArtifactNamesRequest& request, ::flyteidl::artifact::ListArtifactNamesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::ListArtifactNamesResponse>> AsyncListArtifactNames(::grpc::ClientContext* context, const ::flyteidl::artifact::ListArtifactNamesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::ListArtifactNamesResponse>>(AsyncListArtifactNamesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::ListArtifactNamesResponse>> PrepareAsyncListArtifactNames(::grpc::ClientContext* context, const ::flyteidl::artifact::ListArtifactNamesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::ListArtifactNamesResponse>>(PrepareAsyncListArtifactNamesRaw(context, request, cq));
    }
    ::grpc::Status ListArtifacts(::grpc::ClientContext* context, const ::flyteidl::artifact::ListArtifactsRequest& request, ::flyteidl::artifact::ListArtifactsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::ListArtifactsResponse>> AsyncListArtifacts(::grpc::ClientContext* context, const ::flyteidl::artifact::ListArtifactsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::ListArtifactsResponse>>(AsyncListArtifactsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::ListArtifactsResponse>> PrepareAsyncListArtifacts(::grpc::ClientContext* context, const ::flyteidl::artifact::ListArtifactsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::ListArtifactsResponse>>(PrepareAsyncListArtifactsRaw(context, request, cq));
    }
    ::grpc::Status TagArtifact(::grpc::ClientContext* context, const ::flyteidl::artifact::AddTagsRequest& request, ::flyteidl::artifact::AddTagsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::AddTagsResponse>> AsyncTagArtifact(::grpc::ClientContext* context, const ::flyteidl::artifact::AddTagsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::AddTagsResponse>>(AsyncTagArtifactRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::AddTagsResponse>> PrepareAsyncTagArtifact(::grpc::ClientContext* context, const ::flyteidl::artifact::AddTagsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::AddTagsResponse>>(PrepareAsyncTagArtifactRaw(context, request, cq));
    }
    ::grpc::Status RemoveTags(::grpc::ClientContext* context, const ::flyteidl::artifact::RemoveTagsRequest& request, ::flyteidl::artifact::RemoveTagsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::RemoveTagsResponse>> AsyncRemoveTags(::grpc::ClientContext* context, const ::flyteidl::artifact::RemoveTagsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::RemoveTagsResponse>>(AsyncRemoveTagsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::RemoveTagsResponse>> PrepareAsyncRemoveTags(::grpc::ClientContext* context, const ::flyteidl::artifact::RemoveTagsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::RemoveTagsResponse>>(PrepareAsyncRemoveTagsRaw(context, request, cq));
    }
    ::grpc::Status CreateAlias(::grpc::ClientContext* context, const ::flyteidl::artifact::CreateAliasRequest& request, ::flyteidl::artifact::CreateAliasResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::CreateAliasResponse>> AsyncCreateAlias(::grpc::ClientContext* context, const ::flyteidl::artifact::CreateAliasRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::CreateAliasResponse>>(AsyncCreateAliasRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::CreateAliasResponse>> PrepareAsyncCreateAlias(::grpc::ClientContext* context, const ::flyteidl::artifact::CreateAliasRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::CreateAliasResponse>>(PrepareAsyncCreateAliasRaw(context, request, cq));
    }
    ::grpc::Status RemoveAlias(::grpc::ClientContext* context, const ::flyteidl::artifact::RemoveAliasRequest& request, ::flyteidl::artifact::RemoveAliasResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::RemoveAliasResponse>> AsyncRemoveAlias(::grpc::ClientContext* context, const ::flyteidl::artifact::RemoveAliasRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::RemoveAliasResponse>>(AsyncRemoveAliasRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::RemoveAliasResponse>> PrepareAsyncRemoveAlias(::grpc::ClientContext* context, const ::flyteidl::artifact::RemoveAliasRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::RemoveAliasResponse>>(PrepareAsyncRemoveAliasRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void CreateArtifact(::grpc::ClientContext* context, const ::flyteidl::artifact::CreateArtifactRequest* request, ::flyteidl::artifact::CreateArtifactResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateArtifact(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::artifact::CreateArtifactResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateArtifact(::grpc::ClientContext* context, const ::flyteidl::artifact::CreateArtifactRequest* request, ::flyteidl::artifact::CreateArtifactResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CreateArtifact(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::artifact::CreateArtifactResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetArtifact(::grpc::ClientContext* context, const ::flyteidl::artifact::GetArtifactRequest* request, ::flyteidl::artifact::GetArtifactResponse* response, std::function<void(::grpc::Status)>) override;
      void GetArtifact(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::artifact::GetArtifactResponse* response, std::function<void(::grpc::Status)>) override;
      void GetArtifact(::grpc::ClientContext* context, const ::flyteidl::artifact::GetArtifactRequest* request, ::flyteidl::artifact::GetArtifactResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetArtifact(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::artifact::GetArtifactResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ListArtifactNames(::grpc::ClientContext* context, const ::flyteidl::artifact::ListArtifactNamesRequest* request, ::flyteidl::artifact::ListArtifactNamesResponse* response, std::function<void(::grpc::Status)>) override;
      void ListArtifactNames(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::artifact::ListArtifactNamesResponse* response, std::function<void(::grpc::Status)>) override;
      void ListArtifactNames(::grpc::ClientContext* context, const ::flyteidl::artifact::ListArtifactNamesRequest* request, ::flyteidl::artifact::ListArtifactNamesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ListArtifactNames(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::artifact::ListArtifactNamesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ListArtifacts(::grpc::ClientContext* context, const ::flyteidl::artifact::ListArtifactsRequest* request, ::flyteidl::artifact::ListArtifactsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListArtifacts(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::artifact::ListArtifactsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListArtifacts(::grpc::ClientContext* context, const ::flyteidl::artifact::ListArtifactsRequest* request, ::flyteidl::artifact::ListArtifactsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ListArtifacts(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::artifact::ListArtifactsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void TagArtifact(::grpc::ClientContext* context, const ::flyteidl::artifact::AddTagsRequest* request, ::flyteidl::artifact::AddTagsResponse* response, std::function<void(::grpc::Status)>) override;
      void TagArtifact(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::artifact::AddTagsResponse* response, std::function<void(::grpc::Status)>) override;
      void TagArtifact(::grpc::ClientContext* context, const ::flyteidl::artifact::AddTagsRequest* request, ::flyteidl::artifact::AddTagsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void TagArtifact(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::artifact::AddTagsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void RemoveTags(::grpc::ClientContext* context, const ::flyteidl::artifact::RemoveTagsRequest* request, ::flyteidl::artifact::RemoveTagsResponse* response, std::function<void(::grpc::Status)>) override;
      void RemoveTags(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::artifact::RemoveTagsResponse* response, std::function<void(::grpc::Status)>) override;
      void RemoveTags(::grpc::ClientContext* context, const ::flyteidl::artifact::RemoveTagsRequest* request, ::flyteidl::artifact::RemoveTagsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void RemoveTags(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::artifact::RemoveTagsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CreateAlias(::grpc::ClientContext* context, const ::flyteidl::artifact::CreateAliasRequest* request, ::flyteidl::artifact::CreateAliasResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateAlias(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::artifact::CreateAliasResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateAlias(::grpc::ClientContext* context, const ::flyteidl::artifact::CreateAliasRequest* request, ::flyteidl::artifact::CreateAliasResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CreateAlias(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::artifact::CreateAliasResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void RemoveAlias(::grpc::ClientContext* context, const ::flyteidl::artifact::RemoveAliasRequest* request, ::flyteidl::artifact::RemoveAliasResponse* response, std::function<void(::grpc::Status)>) override;
      void RemoveAlias(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::artifact::RemoveAliasResponse* response, std::function<void(::grpc::Status)>) override;
      void RemoveAlias(::grpc::ClientContext* context, const ::flyteidl::artifact::RemoveAliasRequest* request, ::flyteidl::artifact::RemoveAliasResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void RemoveAlias(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::artifact::RemoveAliasResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::CreateArtifactResponse>* AsyncCreateArtifactRaw(::grpc::ClientContext* context, const ::flyteidl::artifact::CreateArtifactRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::CreateArtifactResponse>* PrepareAsyncCreateArtifactRaw(::grpc::ClientContext* context, const ::flyteidl::artifact::CreateArtifactRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::GetArtifactResponse>* AsyncGetArtifactRaw(::grpc::ClientContext* context, const ::flyteidl::artifact::GetArtifactRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::GetArtifactResponse>* PrepareAsyncGetArtifactRaw(::grpc::ClientContext* context, const ::flyteidl::artifact::GetArtifactRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::ListArtifactNamesResponse>* AsyncListArtifactNamesRaw(::grpc::ClientContext* context, const ::flyteidl::artifact::ListArtifactNamesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::ListArtifactNamesResponse>* PrepareAsyncListArtifactNamesRaw(::grpc::ClientContext* context, const ::flyteidl::artifact::ListArtifactNamesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::ListArtifactsResponse>* AsyncListArtifactsRaw(::grpc::ClientContext* context, const ::flyteidl::artifact::ListArtifactsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::ListArtifactsResponse>* PrepareAsyncListArtifactsRaw(::grpc::ClientContext* context, const ::flyteidl::artifact::ListArtifactsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::AddTagsResponse>* AsyncTagArtifactRaw(::grpc::ClientContext* context, const ::flyteidl::artifact::AddTagsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::AddTagsResponse>* PrepareAsyncTagArtifactRaw(::grpc::ClientContext* context, const ::flyteidl::artifact::AddTagsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::RemoveTagsResponse>* AsyncRemoveTagsRaw(::grpc::ClientContext* context, const ::flyteidl::artifact::RemoveTagsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::RemoveTagsResponse>* PrepareAsyncRemoveTagsRaw(::grpc::ClientContext* context, const ::flyteidl::artifact::RemoveTagsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::CreateAliasResponse>* AsyncCreateAliasRaw(::grpc::ClientContext* context, const ::flyteidl::artifact::CreateAliasRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::CreateAliasResponse>* PrepareAsyncCreateAliasRaw(::grpc::ClientContext* context, const ::flyteidl::artifact::CreateAliasRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::RemoveAliasResponse>* AsyncRemoveAliasRaw(::grpc::ClientContext* context, const ::flyteidl::artifact::RemoveAliasRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::flyteidl::artifact::RemoveAliasResponse>* PrepareAsyncRemoveAliasRaw(::grpc::ClientContext* context, const ::flyteidl::artifact::RemoveAliasRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateArtifact_;
    const ::grpc::internal::RpcMethod rpcmethod_GetArtifact_;
    const ::grpc::internal::RpcMethod rpcmethod_ListArtifactNames_;
    const ::grpc::internal::RpcMethod rpcmethod_ListArtifacts_;
    const ::grpc::internal::RpcMethod rpcmethod_TagArtifact_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveTags_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateAlias_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveAlias_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CreateArtifact(::grpc::ServerContext* context, const ::flyteidl::artifact::CreateArtifactRequest* request, ::flyteidl::artifact::CreateArtifactResponse* response);
    virtual ::grpc::Status GetArtifact(::grpc::ServerContext* context, const ::flyteidl::artifact::GetArtifactRequest* request, ::flyteidl::artifact::GetArtifactResponse* response);
    virtual ::grpc::Status ListArtifactNames(::grpc::ServerContext* context, const ::flyteidl::artifact::ListArtifactNamesRequest* request, ::flyteidl::artifact::ListArtifactNamesResponse* response);
    virtual ::grpc::Status ListArtifacts(::grpc::ServerContext* context, const ::flyteidl::artifact::ListArtifactsRequest* request, ::flyteidl::artifact::ListArtifactsResponse* response);
    virtual ::grpc::Status TagArtifact(::grpc::ServerContext* context, const ::flyteidl::artifact::AddTagsRequest* request, ::flyteidl::artifact::AddTagsResponse* response);
    virtual ::grpc::Status RemoveTags(::grpc::ServerContext* context, const ::flyteidl::artifact::RemoveTagsRequest* request, ::flyteidl::artifact::RemoveTagsResponse* response);
    virtual ::grpc::Status CreateAlias(::grpc::ServerContext* context, const ::flyteidl::artifact::CreateAliasRequest* request, ::flyteidl::artifact::CreateAliasResponse* response);
    virtual ::grpc::Status RemoveAlias(::grpc::ServerContext* context, const ::flyteidl::artifact::RemoveAliasRequest* request, ::flyteidl::artifact::RemoveAliasResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateArtifact : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateArtifact() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateArtifact() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateArtifact(::grpc::ServerContext* context, const ::flyteidl::artifact::CreateArtifactRequest* request, ::flyteidl::artifact::CreateArtifactResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateArtifact(::grpc::ServerContext* context, ::flyteidl::artifact::CreateArtifactRequest* request, ::grpc::ServerAsyncResponseWriter< ::flyteidl::artifact::CreateArtifactResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetArtifact : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetArtifact() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetArtifact() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifact(::grpc::ServerContext* context, const ::flyteidl::artifact::GetArtifactRequest* request, ::flyteidl::artifact::GetArtifactResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetArtifact(::grpc::ServerContext* context, ::flyteidl::artifact::GetArtifactRequest* request, ::grpc::ServerAsyncResponseWriter< ::flyteidl::artifact::GetArtifactResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListArtifactNames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListArtifactNames() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ListArtifactNames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListArtifactNames(::grpc::ServerContext* context, const ::flyteidl::artifact::ListArtifactNamesRequest* request, ::flyteidl::artifact::ListArtifactNamesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListArtifactNames(::grpc::ServerContext* context, ::flyteidl::artifact::ListArtifactNamesRequest* request, ::grpc::ServerAsyncResponseWriter< ::flyteidl::artifact::ListArtifactNamesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListArtifacts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListArtifacts() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ListArtifacts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListArtifacts(::grpc::ServerContext* context, const ::flyteidl::artifact::ListArtifactsRequest* request, ::flyteidl::artifact::ListArtifactsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListArtifacts(::grpc::ServerContext* context, ::flyteidl::artifact::ListArtifactsRequest* request, ::grpc::ServerAsyncResponseWriter< ::flyteidl::artifact::ListArtifactsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TagArtifact : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_TagArtifact() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_TagArtifact() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TagArtifact(::grpc::ServerContext* context, const ::flyteidl::artifact::AddTagsRequest* request, ::flyteidl::artifact::AddTagsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTagArtifact(::grpc::ServerContext* context, ::flyteidl::artifact::AddTagsRequest* request, ::grpc::ServerAsyncResponseWriter< ::flyteidl::artifact::AddTagsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveTags : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RemoveTags() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_RemoveTags() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveTags(::grpc::ServerContext* context, const ::flyteidl::artifact::RemoveTagsRequest* request, ::flyteidl::artifact::RemoveTagsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveTags(::grpc::ServerContext* context, ::flyteidl::artifact::RemoveTagsRequest* request, ::grpc::ServerAsyncResponseWriter< ::flyteidl::artifact::RemoveTagsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateAlias : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateAlias() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_CreateAlias() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAlias(::grpc::ServerContext* context, const ::flyteidl::artifact::CreateAliasRequest* request, ::flyteidl::artifact::CreateAliasResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateAlias(::grpc::ServerContext* context, ::flyteidl::artifact::CreateAliasRequest* request, ::grpc::ServerAsyncResponseWriter< ::flyteidl::artifact::CreateAliasResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveAlias : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RemoveAlias() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_RemoveAlias() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveAlias(::grpc::ServerContext* context, const ::flyteidl::artifact::RemoveAliasRequest* request, ::flyteidl::artifact::RemoveAliasResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveAlias(::grpc::ServerContext* context, ::flyteidl::artifact::RemoveAliasRequest* request, ::grpc::ServerAsyncResponseWriter< ::flyteidl::artifact::RemoveAliasResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateArtifact<WithAsyncMethod_GetArtifact<WithAsyncMethod_ListArtifactNames<WithAsyncMethod_ListArtifacts<WithAsyncMethod_TagArtifact<WithAsyncMethod_RemoveTags<WithAsyncMethod_CreateAlias<WithAsyncMethod_RemoveAlias<Service > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateArtifact : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_CreateArtifact() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::flyteidl::artifact::CreateArtifactRequest, ::flyteidl::artifact::CreateArtifactResponse>(
          [this](::grpc::ServerContext* context,
                 const ::flyteidl::artifact::CreateArtifactRequest* request,
                 ::flyteidl::artifact::CreateArtifactResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CreateArtifact(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_CreateArtifact(
        ::grpc::experimental::MessageAllocator< ::flyteidl::artifact::CreateArtifactRequest, ::flyteidl::artifact::CreateArtifactResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::flyteidl::artifact::CreateArtifactRequest, ::flyteidl::artifact::CreateArtifactResponse>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateArtifact() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateArtifact(::grpc::ServerContext* context, const ::flyteidl::artifact::CreateArtifactRequest* request, ::flyteidl::artifact::CreateArtifactResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateArtifact(::grpc::ServerContext* context, const ::flyteidl::artifact::CreateArtifactRequest* request, ::flyteidl::artifact::CreateArtifactResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetArtifact : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetArtifact() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::flyteidl::artifact::GetArtifactRequest, ::flyteidl::artifact::GetArtifactResponse>(
          [this](::grpc::ServerContext* context,
                 const ::flyteidl::artifact::GetArtifactRequest* request,
                 ::flyteidl::artifact::GetArtifactResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetArtifact(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetArtifact(
        ::grpc::experimental::MessageAllocator< ::flyteidl::artifact::GetArtifactRequest, ::flyteidl::artifact::GetArtifactResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::flyteidl::artifact::GetArtifactRequest, ::flyteidl::artifact::GetArtifactResponse>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetArtifact() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifact(::grpc::ServerContext* context, const ::flyteidl::artifact::GetArtifactRequest* request, ::flyteidl::artifact::GetArtifactResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetArtifact(::grpc::ServerContext* context, const ::flyteidl::artifact::GetArtifactRequest* request, ::flyteidl::artifact::GetArtifactResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListArtifactNames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ListArtifactNames() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::flyteidl::artifact::ListArtifactNamesRequest, ::flyteidl::artifact::ListArtifactNamesResponse>(
          [this](::grpc::ServerContext* context,
                 const ::flyteidl::artifact::ListArtifactNamesRequest* request,
                 ::flyteidl::artifact::ListArtifactNamesResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ListArtifactNames(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_ListArtifactNames(
        ::grpc::experimental::MessageAllocator< ::flyteidl::artifact::ListArtifactNamesRequest, ::flyteidl::artifact::ListArtifactNamesResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::flyteidl::artifact::ListArtifactNamesRequest, ::flyteidl::artifact::ListArtifactNamesResponse>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListArtifactNames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListArtifactNames(::grpc::ServerContext* context, const ::flyteidl::artifact::ListArtifactNamesRequest* request, ::flyteidl::artifact::ListArtifactNamesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ListArtifactNames(::grpc::ServerContext* context, const ::flyteidl::artifact::ListArtifactNamesRequest* request, ::flyteidl::artifact::ListArtifactNamesResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListArtifacts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ListArtifacts() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::flyteidl::artifact::ListArtifactsRequest, ::flyteidl::artifact::ListArtifactsResponse>(
          [this](::grpc::ServerContext* context,
                 const ::flyteidl::artifact::ListArtifactsRequest* request,
                 ::flyteidl::artifact::ListArtifactsResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ListArtifacts(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_ListArtifacts(
        ::grpc::experimental::MessageAllocator< ::flyteidl::artifact::ListArtifactsRequest, ::flyteidl::artifact::ListArtifactsResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::flyteidl::artifact::ListArtifactsRequest, ::flyteidl::artifact::ListArtifactsResponse>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListArtifacts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListArtifacts(::grpc::ServerContext* context, const ::flyteidl::artifact::ListArtifactsRequest* request, ::flyteidl::artifact::ListArtifactsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ListArtifacts(::grpc::ServerContext* context, const ::flyteidl::artifact::ListArtifactsRequest* request, ::flyteidl::artifact::ListArtifactsResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_TagArtifact : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_TagArtifact() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::flyteidl::artifact::AddTagsRequest, ::flyteidl::artifact::AddTagsResponse>(
          [this](::grpc::ServerContext* context,
                 const ::flyteidl::artifact::AddTagsRequest* request,
                 ::flyteidl::artifact::AddTagsResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->TagArtifact(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_TagArtifact(
        ::grpc::experimental::MessageAllocator< ::flyteidl::artifact::AddTagsRequest, ::flyteidl::artifact::AddTagsResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::flyteidl::artifact::AddTagsRequest, ::flyteidl::artifact::AddTagsResponse>*>(
          ::grpc::Service::experimental().GetHandler(4))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_TagArtifact() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TagArtifact(::grpc::ServerContext* context, const ::flyteidl::artifact::AddTagsRequest* request, ::flyteidl::artifact::AddTagsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void TagArtifact(::grpc::ServerContext* context, const ::flyteidl::artifact::AddTagsRequest* request, ::flyteidl::artifact::AddTagsResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RemoveTags : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_RemoveTags() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::flyteidl::artifact::RemoveTagsRequest, ::flyteidl::artifact::RemoveTagsResponse>(
          [this](::grpc::ServerContext* context,
                 const ::flyteidl::artifact::RemoveTagsRequest* request,
                 ::flyteidl::artifact::RemoveTagsResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->RemoveTags(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_RemoveTags(
        ::grpc::experimental::MessageAllocator< ::flyteidl::artifact::RemoveTagsRequest, ::flyteidl::artifact::RemoveTagsResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::flyteidl::artifact::RemoveTagsRequest, ::flyteidl::artifact::RemoveTagsResponse>*>(
          ::grpc::Service::experimental().GetHandler(5))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RemoveTags() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveTags(::grpc::ServerContext* context, const ::flyteidl::artifact::RemoveTagsRequest* request, ::flyteidl::artifact::RemoveTagsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void RemoveTags(::grpc::ServerContext* context, const ::flyteidl::artifact::RemoveTagsRequest* request, ::flyteidl::artifact::RemoveTagsResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateAlias : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_CreateAlias() {
      ::grpc::Service::experimental().MarkMethodCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ::flyteidl::artifact::CreateAliasRequest, ::flyteidl::artifact::CreateAliasResponse>(
          [this](::grpc::ServerContext* context,
                 const ::flyteidl::artifact::CreateAliasRequest* request,
                 ::flyteidl::artifact::CreateAliasResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CreateAlias(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_CreateAlias(
        ::grpc::experimental::MessageAllocator< ::flyteidl::artifact::CreateAliasRequest, ::flyteidl::artifact::CreateAliasResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::flyteidl::artifact::CreateAliasRequest, ::flyteidl::artifact::CreateAliasResponse>*>(
          ::grpc::Service::experimental().GetHandler(6))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateAlias() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAlias(::grpc::ServerContext* context, const ::flyteidl::artifact::CreateAliasRequest* request, ::flyteidl::artifact::CreateAliasResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateAlias(::grpc::ServerContext* context, const ::flyteidl::artifact::CreateAliasRequest* request, ::flyteidl::artifact::CreateAliasResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RemoveAlias : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_RemoveAlias() {
      ::grpc::Service::experimental().MarkMethodCallback(7,
        new ::grpc::internal::CallbackUnaryHandler< ::flyteidl::artifact::RemoveAliasRequest, ::flyteidl::artifact::RemoveAliasResponse>(
          [this](::grpc::ServerContext* context,
                 const ::flyteidl::artifact::RemoveAliasRequest* request,
                 ::flyteidl::artifact::RemoveAliasResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->RemoveAlias(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_RemoveAlias(
        ::grpc::experimental::MessageAllocator< ::flyteidl::artifact::RemoveAliasRequest, ::flyteidl::artifact::RemoveAliasResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::flyteidl::artifact::RemoveAliasRequest, ::flyteidl::artifact::RemoveAliasResponse>*>(
          ::grpc::Service::experimental().GetHandler(7))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RemoveAlias() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveAlias(::grpc::ServerContext* context, const ::flyteidl::artifact::RemoveAliasRequest* request, ::flyteidl::artifact::RemoveAliasResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void RemoveAlias(::grpc::ServerContext* context, const ::flyteidl::artifact::RemoveAliasRequest* request, ::flyteidl::artifact::RemoveAliasResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_CreateArtifact<ExperimentalWithCallbackMethod_GetArtifact<ExperimentalWithCallbackMethod_ListArtifactNames<ExperimentalWithCallbackMethod_ListArtifacts<ExperimentalWithCallbackMethod_TagArtifact<ExperimentalWithCallbackMethod_RemoveTags<ExperimentalWithCallbackMethod_CreateAlias<ExperimentalWithCallbackMethod_RemoveAlias<Service > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateArtifact : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateArtifact() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateArtifact() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateArtifact(::grpc::ServerContext* context, const ::flyteidl::artifact::CreateArtifactRequest* request, ::flyteidl::artifact::CreateArtifactResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetArtifact : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetArtifact() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetArtifact() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifact(::grpc::ServerContext* context, const ::flyteidl::artifact::GetArtifactRequest* request, ::flyteidl::artifact::GetArtifactResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListArtifactNames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListArtifactNames() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ListArtifactNames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListArtifactNames(::grpc::ServerContext* context, const ::flyteidl::artifact::ListArtifactNamesRequest* request, ::flyteidl::artifact::ListArtifactNamesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListArtifacts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListArtifacts() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ListArtifacts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListArtifacts(::grpc::ServerContext* context, const ::flyteidl::artifact::ListArtifactsRequest* request, ::flyteidl::artifact::ListArtifactsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TagArtifact : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_TagArtifact() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_TagArtifact() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TagArtifact(::grpc::ServerContext* context, const ::flyteidl::artifact::AddTagsRequest* request, ::flyteidl::artifact::AddTagsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveTags : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RemoveTags() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_RemoveTags() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveTags(::grpc::ServerContext* context, const ::flyteidl::artifact::RemoveTagsRequest* request, ::flyteidl::artifact::RemoveTagsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateAlias : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateAlias() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_CreateAlias() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAlias(::grpc::ServerContext* context, const ::flyteidl::artifact::CreateAliasRequest* request, ::flyteidl::artifact::CreateAliasResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveAlias : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RemoveAlias() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_RemoveAlias() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveAlias(::grpc::ServerContext* context, const ::flyteidl::artifact::RemoveAliasRequest* request, ::flyteidl::artifact::RemoveAliasResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateArtifact : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CreateArtifact() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateArtifact() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateArtifact(::grpc::ServerContext* context, const ::flyteidl::artifact::CreateArtifactRequest* request, ::flyteidl::artifact::CreateArtifactResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateArtifact(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetArtifact : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetArtifact() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetArtifact() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifact(::grpc::ServerContext* context, const ::flyteidl::artifact::GetArtifactRequest* request, ::flyteidl::artifact::GetArtifactResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetArtifact(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListArtifactNames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ListArtifactNames() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ListArtifactNames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListArtifactNames(::grpc::ServerContext* context, const ::flyteidl::artifact::ListArtifactNamesRequest* request, ::flyteidl::artifact::ListArtifactNamesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListArtifactNames(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListArtifacts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ListArtifacts() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ListArtifacts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListArtifacts(::grpc::ServerContext* context, const ::flyteidl::artifact::ListArtifactsRequest* request, ::flyteidl::artifact::ListArtifactsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListArtifacts(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TagArtifact : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_TagArtifact() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_TagArtifact() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TagArtifact(::grpc::ServerContext* context, const ::flyteidl::artifact::AddTagsRequest* request, ::flyteidl::artifact::AddTagsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTagArtifact(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveTags : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_RemoveTags() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_RemoveTags() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveTags(::grpc::ServerContext* context, const ::flyteidl::artifact::RemoveTagsRequest* request, ::flyteidl::artifact::RemoveTagsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveTags(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateAlias : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CreateAlias() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_CreateAlias() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAlias(::grpc::ServerContext* context, const ::flyteidl::artifact::CreateAliasRequest* request, ::flyteidl::artifact::CreateAliasResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateAlias(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveAlias : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_RemoveAlias() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_RemoveAlias() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveAlias(::grpc::ServerContext* context, const ::flyteidl::artifact::RemoveAliasRequest* request, ::flyteidl::artifact::RemoveAliasResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveAlias(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateArtifact : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateArtifact() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CreateArtifact(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateArtifact() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateArtifact(::grpc::ServerContext* context, const ::flyteidl::artifact::CreateArtifactRequest* request, ::flyteidl::artifact::CreateArtifactResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateArtifact(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetArtifact : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetArtifact() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetArtifact(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetArtifact() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetArtifact(::grpc::ServerContext* context, const ::flyteidl::artifact::GetArtifactRequest* request, ::flyteidl::artifact::GetArtifactResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetArtifact(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListArtifactNames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ListArtifactNames() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ListArtifactNames(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ListArtifactNames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListArtifactNames(::grpc::ServerContext* context, const ::flyteidl::artifact::ListArtifactNamesRequest* request, ::flyteidl::artifact::ListArtifactNamesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ListArtifactNames(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListArtifacts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ListArtifacts() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ListArtifacts(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ListArtifacts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListArtifacts(::grpc::ServerContext* context, const ::flyteidl::artifact::ListArtifactsRequest* request, ::flyteidl::artifact::ListArtifactsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ListArtifacts(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_TagArtifact : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_TagArtifact() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->TagArtifact(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_TagArtifact() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TagArtifact(::grpc::ServerContext* context, const ::flyteidl::artifact::AddTagsRequest* request, ::flyteidl::artifact::AddTagsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void TagArtifact(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RemoveTags : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_RemoveTags() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->RemoveTags(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_RemoveTags() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveTags(::grpc::ServerContext* context, const ::flyteidl::artifact::RemoveTagsRequest* request, ::flyteidl::artifact::RemoveTagsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void RemoveTags(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateAlias : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateAlias() {
      ::grpc::Service::experimental().MarkMethodRawCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CreateAlias(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateAlias() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAlias(::grpc::ServerContext* context, const ::flyteidl::artifact::CreateAliasRequest* request, ::flyteidl::artifact::CreateAliasResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateAlias(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RemoveAlias : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_RemoveAlias() {
      ::grpc::Service::experimental().MarkMethodRawCallback(7,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->RemoveAlias(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_RemoveAlias() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveAlias(::grpc::ServerContext* context, const ::flyteidl::artifact::RemoveAliasRequest* request, ::flyteidl::artifact::RemoveAliasResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void RemoveAlias(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateArtifact : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateArtifact() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::flyteidl::artifact::CreateArtifactRequest, ::flyteidl::artifact::CreateArtifactResponse>(std::bind(&WithStreamedUnaryMethod_CreateArtifact<BaseClass>::StreamedCreateArtifact, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateArtifact() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateArtifact(::grpc::ServerContext* context, const ::flyteidl::artifact::CreateArtifactRequest* request, ::flyteidl::artifact::CreateArtifactResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateArtifact(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::flyteidl::artifact::CreateArtifactRequest,::flyteidl::artifact::CreateArtifactResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetArtifact : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetArtifact() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::flyteidl::artifact::GetArtifactRequest, ::flyteidl::artifact::GetArtifactResponse>(std::bind(&WithStreamedUnaryMethod_GetArtifact<BaseClass>::StreamedGetArtifact, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetArtifact() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetArtifact(::grpc::ServerContext* context, const ::flyteidl::artifact::GetArtifactRequest* request, ::flyteidl::artifact::GetArtifactResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetArtifact(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::flyteidl::artifact::GetArtifactRequest,::flyteidl::artifact::GetArtifactResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListArtifactNames : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListArtifactNames() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::flyteidl::artifact::ListArtifactNamesRequest, ::flyteidl::artifact::ListArtifactNamesResponse>(std::bind(&WithStreamedUnaryMethod_ListArtifactNames<BaseClass>::StreamedListArtifactNames, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListArtifactNames() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListArtifactNames(::grpc::ServerContext* context, const ::flyteidl::artifact::ListArtifactNamesRequest* request, ::flyteidl::artifact::ListArtifactNamesResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListArtifactNames(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::flyteidl::artifact::ListArtifactNamesRequest,::flyteidl::artifact::ListArtifactNamesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListArtifacts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListArtifacts() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::flyteidl::artifact::ListArtifactsRequest, ::flyteidl::artifact::ListArtifactsResponse>(std::bind(&WithStreamedUnaryMethod_ListArtifacts<BaseClass>::StreamedListArtifacts, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListArtifacts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListArtifacts(::grpc::ServerContext* context, const ::flyteidl::artifact::ListArtifactsRequest* request, ::flyteidl::artifact::ListArtifactsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListArtifacts(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::flyteidl::artifact::ListArtifactsRequest,::flyteidl::artifact::ListArtifactsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TagArtifact : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_TagArtifact() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::flyteidl::artifact::AddTagsRequest, ::flyteidl::artifact::AddTagsResponse>(std::bind(&WithStreamedUnaryMethod_TagArtifact<BaseClass>::StreamedTagArtifact, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_TagArtifact() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TagArtifact(::grpc::ServerContext* context, const ::flyteidl::artifact::AddTagsRequest* request, ::flyteidl::artifact::AddTagsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTagArtifact(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::flyteidl::artifact::AddTagsRequest,::flyteidl::artifact::AddTagsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveTags : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RemoveTags() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::flyteidl::artifact::RemoveTagsRequest, ::flyteidl::artifact::RemoveTagsResponse>(std::bind(&WithStreamedUnaryMethod_RemoveTags<BaseClass>::StreamedRemoveTags, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RemoveTags() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveTags(::grpc::ServerContext* context, const ::flyteidl::artifact::RemoveTagsRequest* request, ::flyteidl::artifact::RemoveTagsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveTags(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::flyteidl::artifact::RemoveTagsRequest,::flyteidl::artifact::RemoveTagsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateAlias : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateAlias() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::flyteidl::artifact::CreateAliasRequest, ::flyteidl::artifact::CreateAliasResponse>(std::bind(&WithStreamedUnaryMethod_CreateAlias<BaseClass>::StreamedCreateAlias, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateAlias() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateAlias(::grpc::ServerContext* context, const ::flyteidl::artifact::CreateAliasRequest* request, ::flyteidl::artifact::CreateAliasResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateAlias(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::flyteidl::artifact::CreateAliasRequest,::flyteidl::artifact::CreateAliasResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveAlias : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RemoveAlias() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::flyteidl::artifact::RemoveAliasRequest, ::flyteidl::artifact::RemoveAliasResponse>(std::bind(&WithStreamedUnaryMethod_RemoveAlias<BaseClass>::StreamedRemoveAlias, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RemoveAlias() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveAlias(::grpc::ServerContext* context, const ::flyteidl::artifact::RemoveAliasRequest* request, ::flyteidl::artifact::RemoveAliasResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveAlias(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::flyteidl::artifact::RemoveAliasRequest,::flyteidl::artifact::RemoveAliasResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateArtifact<WithStreamedUnaryMethod_GetArtifact<WithStreamedUnaryMethod_ListArtifactNames<WithStreamedUnaryMethod_ListArtifacts<WithStreamedUnaryMethod_TagArtifact<WithStreamedUnaryMethod_RemoveTags<WithStreamedUnaryMethod_CreateAlias<WithStreamedUnaryMethod_RemoveAlias<Service > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateArtifact<WithStreamedUnaryMethod_GetArtifact<WithStreamedUnaryMethod_ListArtifactNames<WithStreamedUnaryMethod_ListArtifacts<WithStreamedUnaryMethod_TagArtifact<WithStreamedUnaryMethod_RemoveTags<WithStreamedUnaryMethod_CreateAlias<WithStreamedUnaryMethod_RemoveAlias<Service > > > > > > > > StreamedService;
};

}  // namespace artifact
}  // namespace flyteidl


#endif  // GRPC_flyteidl_2fartifact_2fartifacts_2eproto__INCLUDED
