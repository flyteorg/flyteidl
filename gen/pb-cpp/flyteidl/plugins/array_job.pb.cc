// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/plugins/array_job.proto

#include "flyteidl/plugins/array_job.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace flyteidl {
namespace plugins {
constexpr ArrayJob::ArrayJob(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parallelism_(int64_t{0})
  , size_(int64_t{0})
  , _oneof_case_{}{}
struct ArrayJobDefaultTypeInternal {
  constexpr ArrayJobDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ArrayJobDefaultTypeInternal() {}
  union {
    ArrayJob _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ArrayJobDefaultTypeInternal _ArrayJob_default_instance_;
}  // namespace plugins
}  // namespace flyteidl
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_flyteidl_2fplugins_2farray_5fjob_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_flyteidl_2fplugins_2farray_5fjob_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fplugins_2farray_5fjob_2eproto = nullptr;

const uint32_t TableStruct_flyteidl_2fplugins_2farray_5fjob_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::ArrayJob, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::ArrayJob, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::ArrayJob, parallelism_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::ArrayJob, size_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::ArrayJob, success_criteria_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::flyteidl::plugins::ArrayJob)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::plugins::_ArrayJob_default_instance_),
};

const char descriptor_table_protodef_flyteidl_2fplugins_2farray_5fjob_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n flyteidl/plugins/array_job.proto\022\020flyt"
  "eidl.plugins\"\251\001\n\010ArrayJob\022 \n\013parallelism"
  "\030\001 \001(\003R\013parallelism\022\022\n\004size\030\002 \001(\003R\004size\022"
  "%\n\rmin_successes\030\003 \001(\003H\000R\014minSuccesses\022,"
  "\n\021min_success_ratio\030\004 \001(\002H\000R\017minSuccessR"
  "atioB\022\n\020success_criteriaB\302\001\n\024com.flyteid"
  "l.pluginsB\rArrayJobProtoH\002Z7github.com/f"
  "lyteorg/flyteidl/gen/pb-go/flyteidl/plug"
  "ins\370\001\000\242\002\003FPX\252\002\020Flyteidl.Plugins\312\002\020Flytei"
  "dl\\Plugins\342\002\034Flyteidl\\Plugins\\GPBMetadat"
  "a\352\002\021Flyteidl::Pluginsb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_flyteidl_2fplugins_2farray_5fjob_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fplugins_2farray_5fjob_2eproto = {
  false, false, 429, descriptor_table_protodef_flyteidl_2fplugins_2farray_5fjob_2eproto, "flyteidl/plugins/array_job.proto", 
  &descriptor_table_flyteidl_2fplugins_2farray_5fjob_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_flyteidl_2fplugins_2farray_5fjob_2eproto::offsets,
  file_level_metadata_flyteidl_2fplugins_2farray_5fjob_2eproto, file_level_enum_descriptors_flyteidl_2fplugins_2farray_5fjob_2eproto, file_level_service_descriptors_flyteidl_2fplugins_2farray_5fjob_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_flyteidl_2fplugins_2farray_5fjob_2eproto_getter() {
  return &descriptor_table_flyteidl_2fplugins_2farray_5fjob_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_flyteidl_2fplugins_2farray_5fjob_2eproto(&descriptor_table_flyteidl_2fplugins_2farray_5fjob_2eproto);
namespace flyteidl {
namespace plugins {

// ===================================================================

class ArrayJob::_Internal {
 public:
};

ArrayJob::ArrayJob(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.plugins.ArrayJob)
}
ArrayJob::ArrayJob(const ArrayJob& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&parallelism_, &from.parallelism_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&parallelism_)) + sizeof(size_));
  clear_has_success_criteria();
  switch (from.success_criteria_case()) {
    case kMinSuccesses: {
      _internal_set_min_successes(from._internal_min_successes());
      break;
    }
    case kMinSuccessRatio: {
      _internal_set_min_success_ratio(from._internal_min_success_ratio());
      break;
    }
    case SUCCESS_CRITERIA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.plugins.ArrayJob)
}

inline void ArrayJob::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parallelism_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&parallelism_)) + sizeof(size_));
clear_has_success_criteria();
}

ArrayJob::~ArrayJob() {
  // @@protoc_insertion_point(destructor:flyteidl.plugins.ArrayJob)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ArrayJob::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_success_criteria()) {
    clear_success_criteria();
  }
}

void ArrayJob::ArenaDtor(void* object) {
  ArrayJob* _this = reinterpret_cast< ArrayJob* >(object);
  (void)_this;
}
void ArrayJob::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ArrayJob::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ArrayJob::clear_success_criteria() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.plugins.ArrayJob)
  switch (success_criteria_case()) {
    case kMinSuccesses: {
      // No need to clear
      break;
    }
    case kMinSuccessRatio: {
      // No need to clear
      break;
    }
    case SUCCESS_CRITERIA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SUCCESS_CRITERIA_NOT_SET;
}


void ArrayJob::InternalSwap(ArrayJob* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata ArrayJob::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fplugins_2farray_5fjob_2eproto_getter, &descriptor_table_flyteidl_2fplugins_2farray_5fjob_2eproto_once,
      file_level_metadata_flyteidl_2fplugins_2farray_5fjob_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace plugins
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::flyteidl::plugins::ArrayJob* Arena::CreateMaybeMessage< ::flyteidl::plugins::ArrayJob >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::plugins::ArrayJob >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
