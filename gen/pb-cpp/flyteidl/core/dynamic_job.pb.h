// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/dynamic_job.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fcore_2fdynamic_5fjob_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fcore_2fdynamic_5fjob_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "flyteidl/core/tasks.pb.h"
#include "flyteidl/core/workflow.pb.h"
#include "flyteidl/core/literals.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fdynamic_5fjob_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fcore_2fdynamic_5fjob_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fcore_2fdynamic_5fjob_2eproto;
namespace flyteidl {
namespace core {
class DynamicJobSpec;
struct DynamicJobSpecDefaultTypeInternal;
extern DynamicJobSpecDefaultTypeInternal _DynamicJobSpec_default_instance_;
}  // namespace core
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> ::flyteidl::core::DynamicJobSpec* Arena::CreateMaybeMessage<::flyteidl::core::DynamicJobSpec>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace flyteidl {
namespace core {

// ===================================================================

class DynamicJobSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.DynamicJobSpec) */ {
 public:
  inline DynamicJobSpec() : DynamicJobSpec(nullptr) {}
  ~DynamicJobSpec() override;
  explicit constexpr DynamicJobSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DynamicJobSpec(const DynamicJobSpec& from);
  DynamicJobSpec(DynamicJobSpec&& from) noexcept
    : DynamicJobSpec() {
    *this = ::std::move(from);
  }

  inline DynamicJobSpec& operator=(const DynamicJobSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline DynamicJobSpec& operator=(DynamicJobSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DynamicJobSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const DynamicJobSpec* internal_default_instance() {
    return reinterpret_cast<const DynamicJobSpec*>(
               &_DynamicJobSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DynamicJobSpec& a, DynamicJobSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(DynamicJobSpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DynamicJobSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DynamicJobSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DynamicJobSpec>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DynamicJobSpec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.core.DynamicJobSpec";
  }
  protected:
  explicit DynamicJobSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 1,
    kOutputsFieldNumber = 3,
    kTasksFieldNumber = 4,
    kSubworkflowsFieldNumber = 5,
    kMinSuccessesFieldNumber = 2,
  };
  // repeated .flyteidl.core.Node nodes = 1 [json_name = "nodes"];
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;
  public:
  void clear_nodes();
  ::flyteidl::core::Node* mutable_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::Node >*
      mutable_nodes();
  private:
  const ::flyteidl::core::Node& _internal_nodes(int index) const;
  ::flyteidl::core::Node* _internal_add_nodes();
  public:
  const ::flyteidl::core::Node& nodes(int index) const;
  ::flyteidl::core::Node* add_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::Node >&
      nodes() const;

  // repeated .flyteidl.core.Binding outputs = 3 [json_name = "outputs"];
  int outputs_size() const;
  private:
  int _internal_outputs_size() const;
  public:
  void clear_outputs();
  ::flyteidl::core::Binding* mutable_outputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::Binding >*
      mutable_outputs();
  private:
  const ::flyteidl::core::Binding& _internal_outputs(int index) const;
  ::flyteidl::core::Binding* _internal_add_outputs();
  public:
  const ::flyteidl::core::Binding& outputs(int index) const;
  ::flyteidl::core::Binding* add_outputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::Binding >&
      outputs() const;

  // repeated .flyteidl.core.TaskTemplate tasks = 4 [json_name = "tasks"];
  int tasks_size() const;
  private:
  int _internal_tasks_size() const;
  public:
  void clear_tasks();
  ::flyteidl::core::TaskTemplate* mutable_tasks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::TaskTemplate >*
      mutable_tasks();
  private:
  const ::flyteidl::core::TaskTemplate& _internal_tasks(int index) const;
  ::flyteidl::core::TaskTemplate* _internal_add_tasks();
  public:
  const ::flyteidl::core::TaskTemplate& tasks(int index) const;
  ::flyteidl::core::TaskTemplate* add_tasks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::TaskTemplate >&
      tasks() const;

  // repeated .flyteidl.core.WorkflowTemplate subworkflows = 5 [json_name = "subworkflows"];
  int subworkflows_size() const;
  private:
  int _internal_subworkflows_size() const;
  public:
  void clear_subworkflows();
  ::flyteidl::core::WorkflowTemplate* mutable_subworkflows(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::WorkflowTemplate >*
      mutable_subworkflows();
  private:
  const ::flyteidl::core::WorkflowTemplate& _internal_subworkflows(int index) const;
  ::flyteidl::core::WorkflowTemplate* _internal_add_subworkflows();
  public:
  const ::flyteidl::core::WorkflowTemplate& subworkflows(int index) const;
  ::flyteidl::core::WorkflowTemplate* add_subworkflows();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::WorkflowTemplate >&
      subworkflows() const;

  // int64 min_successes = 2 [json_name = "minSuccesses"];
  void clear_min_successes();
  int64_t min_successes() const;
  void set_min_successes(int64_t value);
  private:
  int64_t _internal_min_successes() const;
  void _internal_set_min_successes(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.core.DynamicJobSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::Node > nodes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::Binding > outputs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::TaskTemplate > tasks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::WorkflowTemplate > subworkflows_;
  int64_t min_successes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2fdynamic_5fjob_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DynamicJobSpec

// repeated .flyteidl.core.Node nodes = 1 [json_name = "nodes"];
inline int DynamicJobSpec::_internal_nodes_size() const {
  return nodes_.size();
}
inline int DynamicJobSpec::nodes_size() const {
  return _internal_nodes_size();
}
inline ::flyteidl::core::Node* DynamicJobSpec::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.core.DynamicJobSpec.nodes)
  return nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::Node >*
DynamicJobSpec::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.core.DynamicJobSpec.nodes)
  return &nodes_;
}
inline const ::flyteidl::core::Node& DynamicJobSpec::_internal_nodes(int index) const {
  return nodes_.Get(index);
}
inline const ::flyteidl::core::Node& DynamicJobSpec::nodes(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.core.DynamicJobSpec.nodes)
  return _internal_nodes(index);
}
inline ::flyteidl::core::Node* DynamicJobSpec::_internal_add_nodes() {
  return nodes_.Add();
}
inline ::flyteidl::core::Node* DynamicJobSpec::add_nodes() {
  ::flyteidl::core::Node* _add = _internal_add_nodes();
  // @@protoc_insertion_point(field_add:flyteidl.core.DynamicJobSpec.nodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::Node >&
DynamicJobSpec::nodes() const {
  // @@protoc_insertion_point(field_list:flyteidl.core.DynamicJobSpec.nodes)
  return nodes_;
}

// int64 min_successes = 2 [json_name = "minSuccesses"];
inline void DynamicJobSpec::clear_min_successes() {
  min_successes_ = int64_t{0};
}
inline int64_t DynamicJobSpec::_internal_min_successes() const {
  return min_successes_;
}
inline int64_t DynamicJobSpec::min_successes() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.DynamicJobSpec.min_successes)
  return _internal_min_successes();
}
inline void DynamicJobSpec::_internal_set_min_successes(int64_t value) {
  
  min_successes_ = value;
}
inline void DynamicJobSpec::set_min_successes(int64_t value) {
  _internal_set_min_successes(value);
  // @@protoc_insertion_point(field_set:flyteidl.core.DynamicJobSpec.min_successes)
}

// repeated .flyteidl.core.Binding outputs = 3 [json_name = "outputs"];
inline int DynamicJobSpec::_internal_outputs_size() const {
  return outputs_.size();
}
inline int DynamicJobSpec::outputs_size() const {
  return _internal_outputs_size();
}
inline ::flyteidl::core::Binding* DynamicJobSpec::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.core.DynamicJobSpec.outputs)
  return outputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::Binding >*
DynamicJobSpec::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.core.DynamicJobSpec.outputs)
  return &outputs_;
}
inline const ::flyteidl::core::Binding& DynamicJobSpec::_internal_outputs(int index) const {
  return outputs_.Get(index);
}
inline const ::flyteidl::core::Binding& DynamicJobSpec::outputs(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.core.DynamicJobSpec.outputs)
  return _internal_outputs(index);
}
inline ::flyteidl::core::Binding* DynamicJobSpec::_internal_add_outputs() {
  return outputs_.Add();
}
inline ::flyteidl::core::Binding* DynamicJobSpec::add_outputs() {
  ::flyteidl::core::Binding* _add = _internal_add_outputs();
  // @@protoc_insertion_point(field_add:flyteidl.core.DynamicJobSpec.outputs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::Binding >&
DynamicJobSpec::outputs() const {
  // @@protoc_insertion_point(field_list:flyteidl.core.DynamicJobSpec.outputs)
  return outputs_;
}

// repeated .flyteidl.core.TaskTemplate tasks = 4 [json_name = "tasks"];
inline int DynamicJobSpec::_internal_tasks_size() const {
  return tasks_.size();
}
inline int DynamicJobSpec::tasks_size() const {
  return _internal_tasks_size();
}
inline ::flyteidl::core::TaskTemplate* DynamicJobSpec::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.core.DynamicJobSpec.tasks)
  return tasks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::TaskTemplate >*
DynamicJobSpec::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.core.DynamicJobSpec.tasks)
  return &tasks_;
}
inline const ::flyteidl::core::TaskTemplate& DynamicJobSpec::_internal_tasks(int index) const {
  return tasks_.Get(index);
}
inline const ::flyteidl::core::TaskTemplate& DynamicJobSpec::tasks(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.core.DynamicJobSpec.tasks)
  return _internal_tasks(index);
}
inline ::flyteidl::core::TaskTemplate* DynamicJobSpec::_internal_add_tasks() {
  return tasks_.Add();
}
inline ::flyteidl::core::TaskTemplate* DynamicJobSpec::add_tasks() {
  ::flyteidl::core::TaskTemplate* _add = _internal_add_tasks();
  // @@protoc_insertion_point(field_add:flyteidl.core.DynamicJobSpec.tasks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::TaskTemplate >&
DynamicJobSpec::tasks() const {
  // @@protoc_insertion_point(field_list:flyteidl.core.DynamicJobSpec.tasks)
  return tasks_;
}

// repeated .flyteidl.core.WorkflowTemplate subworkflows = 5 [json_name = "subworkflows"];
inline int DynamicJobSpec::_internal_subworkflows_size() const {
  return subworkflows_.size();
}
inline int DynamicJobSpec::subworkflows_size() const {
  return _internal_subworkflows_size();
}
inline ::flyteidl::core::WorkflowTemplate* DynamicJobSpec::mutable_subworkflows(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.core.DynamicJobSpec.subworkflows)
  return subworkflows_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::WorkflowTemplate >*
DynamicJobSpec::mutable_subworkflows() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.core.DynamicJobSpec.subworkflows)
  return &subworkflows_;
}
inline const ::flyteidl::core::WorkflowTemplate& DynamicJobSpec::_internal_subworkflows(int index) const {
  return subworkflows_.Get(index);
}
inline const ::flyteidl::core::WorkflowTemplate& DynamicJobSpec::subworkflows(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.core.DynamicJobSpec.subworkflows)
  return _internal_subworkflows(index);
}
inline ::flyteidl::core::WorkflowTemplate* DynamicJobSpec::_internal_add_subworkflows() {
  return subworkflows_.Add();
}
inline ::flyteidl::core::WorkflowTemplate* DynamicJobSpec::add_subworkflows() {
  ::flyteidl::core::WorkflowTemplate* _add = _internal_add_subworkflows();
  // @@protoc_insertion_point(field_add:flyteidl.core.DynamicJobSpec.subworkflows)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::flyteidl::core::WorkflowTemplate >&
DynamicJobSpec::subworkflows() const {
  // @@protoc_insertion_point(field_list:flyteidl.core.DynamicJobSpec.subworkflows)
  return subworkflows_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace core
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fcore_2fdynamic_5fjob_2eproto
