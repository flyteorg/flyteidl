// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	service "github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/service"
	mock "github.com/stretchr/testify/mock"
)

// ExternalPluginServiceServer is an autogenerated mock type for the ExternalPluginServiceServer type
type ExternalPluginServiceServer struct {
	mock.Mock
}

type ExternalPluginServiceServer_CreateTask struct {
	*mock.Call
}

func (_m ExternalPluginServiceServer_CreateTask) Return(_a0 *service.TaskCreateResponse, _a1 error) *ExternalPluginServiceServer_CreateTask {
	return &ExternalPluginServiceServer_CreateTask{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *ExternalPluginServiceServer) OnCreateTask(_a0 context.Context, _a1 *service.TaskCreateRequest) *ExternalPluginServiceServer_CreateTask {
	c_call := _m.On("CreateTask", _a0, _a1)
	return &ExternalPluginServiceServer_CreateTask{Call: c_call}
}

func (_m *ExternalPluginServiceServer) OnCreateTaskMatch(matchers ...interface{}) *ExternalPluginServiceServer_CreateTask {
	c_call := _m.On("CreateTask", matchers...)
	return &ExternalPluginServiceServer_CreateTask{Call: c_call}
}

// CreateTask provides a mock function with given fields: _a0, _a1
func (_m *ExternalPluginServiceServer) CreateTask(_a0 context.Context, _a1 *service.TaskCreateRequest) (*service.TaskCreateResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *service.TaskCreateResponse
	if rf, ok := ret.Get(0).(func(context.Context, *service.TaskCreateRequest) *service.TaskCreateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.TaskCreateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *service.TaskCreateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type ExternalPluginServiceServer_DeleteTask struct {
	*mock.Call
}

func (_m ExternalPluginServiceServer_DeleteTask) Return(_a0 *service.TaskDeleteResponse, _a1 error) *ExternalPluginServiceServer_DeleteTask {
	return &ExternalPluginServiceServer_DeleteTask{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *ExternalPluginServiceServer) OnDeleteTask(_a0 context.Context, _a1 *service.TaskDeleteRequest) *ExternalPluginServiceServer_DeleteTask {
	c_call := _m.On("DeleteTask", _a0, _a1)
	return &ExternalPluginServiceServer_DeleteTask{Call: c_call}
}

func (_m *ExternalPluginServiceServer) OnDeleteTaskMatch(matchers ...interface{}) *ExternalPluginServiceServer_DeleteTask {
	c_call := _m.On("DeleteTask", matchers...)
	return &ExternalPluginServiceServer_DeleteTask{Call: c_call}
}

// DeleteTask provides a mock function with given fields: _a0, _a1
func (_m *ExternalPluginServiceServer) DeleteTask(_a0 context.Context, _a1 *service.TaskDeleteRequest) (*service.TaskDeleteResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *service.TaskDeleteResponse
	if rf, ok := ret.Get(0).(func(context.Context, *service.TaskDeleteRequest) *service.TaskDeleteResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.TaskDeleteResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *service.TaskDeleteRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type ExternalPluginServiceServer_GetTask struct {
	*mock.Call
}

func (_m ExternalPluginServiceServer_GetTask) Return(_a0 *service.TaskGetResponse, _a1 error) *ExternalPluginServiceServer_GetTask {
	return &ExternalPluginServiceServer_GetTask{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *ExternalPluginServiceServer) OnGetTask(_a0 context.Context, _a1 *service.TaskGetRequest) *ExternalPluginServiceServer_GetTask {
	c_call := _m.On("GetTask", _a0, _a1)
	return &ExternalPluginServiceServer_GetTask{Call: c_call}
}

func (_m *ExternalPluginServiceServer) OnGetTaskMatch(matchers ...interface{}) *ExternalPluginServiceServer_GetTask {
	c_call := _m.On("GetTask", matchers...)
	return &ExternalPluginServiceServer_GetTask{Call: c_call}
}

// GetTask provides a mock function with given fields: _a0, _a1
func (_m *ExternalPluginServiceServer) GetTask(_a0 context.Context, _a1 *service.TaskGetRequest) (*service.TaskGetResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *service.TaskGetResponse
	if rf, ok := ret.Get(0).(func(context.Context, *service.TaskGetRequest) *service.TaskGetResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.TaskGetResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *service.TaskGetRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
