// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/catalog.proto

package com.flyteidl.core;

/**
 * <pre>
 * Indicates the status of CatalogCaching. The reason why this is not embedded in TaskNodeMetadata is, that we may use for other types of nodes as well in the future
 * </pre>
 *
 * Protobuf enum {@code flyteidl.core.CatalogCacheStatus}
 */
public enum CatalogCacheStatus
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * Used to indicate that caching was disabled
   * </pre>
   *
   * <code>CACHE_DISABLED = 0;</code>
   */
  CACHE_DISABLED(0),
  /**
   * <pre>
   * Used to indicate that the cache lookup resulted in no matches
   * </pre>
   *
   * <code>CACHE_MISS = 1;</code>
   */
  CACHE_MISS(1),
  /**
   * <pre>
   * used to indicate that the associated artifact was a result of a previous execution
   * </pre>
   *
   * <code>CACHE_HIT = 2;</code>
   */
  CACHE_HIT(2),
  /**
   * <pre>
   * used to indicate that the resultant artifact was added to the cache
   * </pre>
   *
   * <code>CACHE_POPULATED = 3;</code>
   */
  CACHE_POPULATED(3),
  /**
   * <pre>
   * Used to indicate that cache lookup failed because of an error
   * </pre>
   *
   * <code>CACHE_LOOKUP_FAILURE = 4;</code>
   */
  CACHE_LOOKUP_FAILURE(4),
  /**
   * <pre>
   * Used to indicate that cache lookup failed because of an error
   * </pre>
   *
   * <code>CACHE_PUT_FAILURE = 5;</code>
   */
  CACHE_PUT_FAILURE(5),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * Used to indicate that caching was disabled
   * </pre>
   *
   * <code>CACHE_DISABLED = 0;</code>
   */
  public static final int CACHE_DISABLED_VALUE = 0;
  /**
   * <pre>
   * Used to indicate that the cache lookup resulted in no matches
   * </pre>
   *
   * <code>CACHE_MISS = 1;</code>
   */
  public static final int CACHE_MISS_VALUE = 1;
  /**
   * <pre>
   * used to indicate that the associated artifact was a result of a previous execution
   * </pre>
   *
   * <code>CACHE_HIT = 2;</code>
   */
  public static final int CACHE_HIT_VALUE = 2;
  /**
   * <pre>
   * used to indicate that the resultant artifact was added to the cache
   * </pre>
   *
   * <code>CACHE_POPULATED = 3;</code>
   */
  public static final int CACHE_POPULATED_VALUE = 3;
  /**
   * <pre>
   * Used to indicate that cache lookup failed because of an error
   * </pre>
   *
   * <code>CACHE_LOOKUP_FAILURE = 4;</code>
   */
  public static final int CACHE_LOOKUP_FAILURE_VALUE = 4;
  /**
   * <pre>
   * Used to indicate that cache lookup failed because of an error
   * </pre>
   *
   * <code>CACHE_PUT_FAILURE = 5;</code>
   */
  public static final int CACHE_PUT_FAILURE_VALUE = 5;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static CatalogCacheStatus valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static CatalogCacheStatus forNumber(int value) {
    switch (value) {
      case 0: return CACHE_DISABLED;
      case 1: return CACHE_MISS;
      case 2: return CACHE_HIT;
      case 3: return CACHE_POPULATED;
      case 4: return CACHE_LOOKUP_FAILURE;
      case 5: return CACHE_PUT_FAILURE;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<CatalogCacheStatus>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      CatalogCacheStatus> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<CatalogCacheStatus>() {
          public CatalogCacheStatus findValueByNumber(int number) {
            return CatalogCacheStatus.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.flyteidl.core.CatalogProto.getDescriptor().getEnumTypes().get(0);
  }

  private static final CatalogCacheStatus[] VALUES = values();

  public static CatalogCacheStatus valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private CatalogCacheStatus(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:flyteidl.core.CatalogCacheStatus)
}

