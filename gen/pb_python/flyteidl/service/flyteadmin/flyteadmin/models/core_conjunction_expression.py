# coding: utf-8

"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from flyteadmin.models.conjunction_expression_logical_operator import ConjunctionExpressionLogicalOperator  # noqa: F401,E501
from flyteadmin.models.core_boolean_expression import CoreBooleanExpression  # noqa: F401,E501


class CoreConjunctionExpression(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'operator': 'ConjunctionExpressionLogicalOperator',
        'left_expression': 'CoreBooleanExpression',
        'right_expression': 'CoreBooleanExpression'
    }

    attribute_map = {
        'operator': 'operator',
        'left_expression': 'left_expression',
        'right_expression': 'right_expression'
    }

    def __init__(self, operator=None, left_expression=None, right_expression=None):  # noqa: E501
        """CoreConjunctionExpression - a model defined in Swagger"""  # noqa: E501

        self._operator = None
        self._left_expression = None
        self._right_expression = None
        self.discriminator = None

        if operator is not None:
            self.operator = operator
        if left_expression is not None:
            self.left_expression = left_expression
        if right_expression is not None:
            self.right_expression = right_expression

    @property
    def operator(self):
        """Gets the operator of this CoreConjunctionExpression.  # noqa: E501


        :return: The operator of this CoreConjunctionExpression.  # noqa: E501
        :rtype: ConjunctionExpressionLogicalOperator
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this CoreConjunctionExpression.


        :param operator: The operator of this CoreConjunctionExpression.  # noqa: E501
        :type: ConjunctionExpressionLogicalOperator
        """

        self._operator = operator

    @property
    def left_expression(self):
        """Gets the left_expression of this CoreConjunctionExpression.  # noqa: E501


        :return: The left_expression of this CoreConjunctionExpression.  # noqa: E501
        :rtype: CoreBooleanExpression
        """
        return self._left_expression

    @left_expression.setter
    def left_expression(self, left_expression):
        """Sets the left_expression of this CoreConjunctionExpression.


        :param left_expression: The left_expression of this CoreConjunctionExpression.  # noqa: E501
        :type: CoreBooleanExpression
        """

        self._left_expression = left_expression

    @property
    def right_expression(self):
        """Gets the right_expression of this CoreConjunctionExpression.  # noqa: E501


        :return: The right_expression of this CoreConjunctionExpression.  # noqa: E501
        :rtype: CoreBooleanExpression
        """
        return self._right_expression

    @right_expression.setter
    def right_expression(self, right_expression):
        """Sets the right_expression of this CoreConjunctionExpression.


        :param right_expression: The right_expression of this CoreConjunctionExpression.  # noqa: E501
        :type: CoreBooleanExpression
        """

        self._right_expression = right_expression

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CoreConjunctionExpression, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CoreConjunctionExpression):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
