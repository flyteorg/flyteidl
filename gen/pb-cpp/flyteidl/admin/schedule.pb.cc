// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/schedule.proto

#include "flyteidl/admin/schedule.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace flyteidl {
namespace admin {
constexpr FixedRate::FixedRate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(0u)
  , unit_(0)
{}
struct FixedRateDefaultTypeInternal {
  constexpr FixedRateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FixedRateDefaultTypeInternal() {}
  union {
    FixedRate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FixedRateDefaultTypeInternal _FixedRate_default_instance_;
constexpr CronSchedule::CronSchedule(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : schedule_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , offset_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CronScheduleDefaultTypeInternal {
  constexpr CronScheduleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CronScheduleDefaultTypeInternal() {}
  union {
    CronSchedule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CronScheduleDefaultTypeInternal _CronSchedule_default_instance_;
constexpr Schedule::Schedule(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : kickoff_time_input_arg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , _oneof_case_{}{}
struct ScheduleDefaultTypeInternal {
  constexpr ScheduleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ScheduleDefaultTypeInternal() {}
  union {
    Schedule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ScheduleDefaultTypeInternal _Schedule_default_instance_;
}  // namespace admin
}  // namespace flyteidl
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_flyteidl_2fadmin_2fschedule_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_flyteidl_2fadmin_2fschedule_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fadmin_2fschedule_2eproto = nullptr;

const uint32_t TableStruct_flyteidl_2fadmin_2fschedule_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::FixedRate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::FixedRate, value_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::FixedRate, unit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::CronSchedule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::CronSchedule, schedule_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::CronSchedule, offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Schedule, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Schedule, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Schedule, kickoff_time_input_arg_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Schedule, ScheduleExpression_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::flyteidl::admin::FixedRate)},
  { 8, -1, -1, sizeof(::flyteidl::admin::CronSchedule)},
  { 16, -1, -1, sizeof(::flyteidl::admin::Schedule)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_FixedRate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_CronSchedule_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_Schedule_default_instance_),
};

const char descriptor_table_protodef_flyteidl_2fadmin_2fschedule_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035flyteidl/admin/schedule.proto\022\016flyteid"
  "l.admin\"T\n\tFixedRate\022\024\n\005value\030\001 \001(\rR\005val"
  "ue\0221\n\004unit\030\002 \001(\0162\035.flyteidl.admin.FixedR"
  "ateUnitR\004unit\"B\n\014CronSchedule\022\032\n\010schedul"
  "e\030\001 \001(\tR\010schedule\022\026\n\006offset\030\002 \001(\tR\006offse"
  "t\"\372\001\n\010Schedule\022-\n\017cron_expression\030\001 \001(\tB"
  "\002\030\001H\000R\016cronExpression\022/\n\004rate\030\002 \001(\0132\031.fl"
  "yteidl.admin.FixedRateH\000R\004rate\022C\n\rcron_s"
  "chedule\030\004 \001(\0132\034.flyteidl.admin.CronSched"
  "uleH\000R\014cronSchedule\0223\n\026kickoff_time_inpu"
  "t_arg\030\003 \001(\tR\023kickoffTimeInputArgB\024\n\022Sche"
  "duleExpression*.\n\rFixedRateUnit\022\n\n\006MINUT"
  "E\020\000\022\010\n\004HOUR\020\001\022\007\n\003DAY\020\002B\266\001\n\022com.flyteidl."
  "adminB\rScheduleProtoH\002Z5github.com/flyte"
  "org/flyteidl/gen/pb-go/flyteidl/admin\370\001\000"
  "\242\002\003FAX\252\002\016Flyteidl.Admin\312\002\016Flyteidl\\Admin"
  "\342\002\032Flyteidl\\Admin\\GPBMetadata\352\002\017Flyteidl"
  "::Adminb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_flyteidl_2fadmin_2fschedule_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fadmin_2fschedule_2eproto = {
  false, false, 695, descriptor_table_protodef_flyteidl_2fadmin_2fschedule_2eproto, "flyteidl/admin/schedule.proto", 
  &descriptor_table_flyteidl_2fadmin_2fschedule_2eproto_once, nullptr, 0, 3,
  schemas, file_default_instances, TableStruct_flyteidl_2fadmin_2fschedule_2eproto::offsets,
  file_level_metadata_flyteidl_2fadmin_2fschedule_2eproto, file_level_enum_descriptors_flyteidl_2fadmin_2fschedule_2eproto, file_level_service_descriptors_flyteidl_2fadmin_2fschedule_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_flyteidl_2fadmin_2fschedule_2eproto_getter() {
  return &descriptor_table_flyteidl_2fadmin_2fschedule_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_flyteidl_2fadmin_2fschedule_2eproto(&descriptor_table_flyteidl_2fadmin_2fschedule_2eproto);
namespace flyteidl {
namespace admin {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FixedRateUnit_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_flyteidl_2fadmin_2fschedule_2eproto);
  return file_level_enum_descriptors_flyteidl_2fadmin_2fschedule_2eproto[0];
}
bool FixedRateUnit_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class FixedRate::_Internal {
 public:
};

FixedRate::FixedRate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.FixedRate)
}
FixedRate::FixedRate(const FixedRate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&unit_) -
    reinterpret_cast<char*>(&value_)) + sizeof(unit_));
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.FixedRate)
}

inline void FixedRate::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&value_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&unit_) -
    reinterpret_cast<char*>(&value_)) + sizeof(unit_));
}

FixedRate::~FixedRate() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.FixedRate)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FixedRate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FixedRate::ArenaDtor(void* object) {
  FixedRate* _this = reinterpret_cast< FixedRate* >(object);
  (void)_this;
}
void FixedRate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FixedRate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FixedRate::InternalSwap(FixedRate* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata FixedRate::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fschedule_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fschedule_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fschedule_2eproto[0]);
}

// ===================================================================

class CronSchedule::_Internal {
 public:
};

CronSchedule::CronSchedule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.CronSchedule)
}
CronSchedule::CronSchedule(const CronSchedule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  schedule_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    schedule_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_schedule().empty()) {
    schedule_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_schedule(), 
      GetArenaForAllocation());
  }
  offset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    offset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_offset().empty()) {
    offset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_offset(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.CronSchedule)
}

inline void CronSchedule::SharedCtor() {
schedule_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  schedule_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
offset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  offset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CronSchedule::~CronSchedule() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.CronSchedule)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CronSchedule::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  schedule_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  offset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CronSchedule::ArenaDtor(void* object) {
  CronSchedule* _this = reinterpret_cast< CronSchedule* >(object);
  (void)_this;
}
void CronSchedule::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CronSchedule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CronSchedule::InternalSwap(CronSchedule* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata CronSchedule::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fschedule_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fschedule_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fschedule_2eproto[1]);
}

// ===================================================================

class Schedule::_Internal {
 public:
  static const ::flyteidl::admin::FixedRate& rate(const Schedule* msg);
  static const ::flyteidl::admin::CronSchedule& cron_schedule(const Schedule* msg);
};

const ::flyteidl::admin::FixedRate&
Schedule::_Internal::rate(const Schedule* msg) {
  return *msg->ScheduleExpression_.rate_;
}
const ::flyteidl::admin::CronSchedule&
Schedule::_Internal::cron_schedule(const Schedule* msg) {
  return *msg->ScheduleExpression_.cron_schedule_;
}
void Schedule::set_allocated_rate(::flyteidl::admin::FixedRate* rate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_ScheduleExpression();
  if (rate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::admin::FixedRate>::GetOwningArena(rate);
    if (message_arena != submessage_arena) {
      rate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rate, submessage_arena);
    }
    set_has_rate();
    ScheduleExpression_.rate_ = rate;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Schedule.rate)
}
void Schedule::set_allocated_cron_schedule(::flyteidl::admin::CronSchedule* cron_schedule) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_ScheduleExpression();
  if (cron_schedule) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::admin::CronSchedule>::GetOwningArena(cron_schedule);
    if (message_arena != submessage_arena) {
      cron_schedule = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cron_schedule, submessage_arena);
    }
    set_has_cron_schedule();
    ScheduleExpression_.cron_schedule_ = cron_schedule;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Schedule.cron_schedule)
}
Schedule::Schedule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.Schedule)
}
Schedule::Schedule(const Schedule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  kickoff_time_input_arg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    kickoff_time_input_arg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_kickoff_time_input_arg().empty()) {
    kickoff_time_input_arg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_kickoff_time_input_arg(), 
      GetArenaForAllocation());
  }
  clear_has_ScheduleExpression();
  switch (from.ScheduleExpression_case()) {
    case kCronExpression: {
      _internal_set_cron_expression(from._internal_cron_expression());
      break;
    }
    case kRate: {
      _internal_mutable_rate()->::flyteidl::admin::FixedRate::MergeFrom(from._internal_rate());
      break;
    }
    case kCronSchedule: {
      _internal_mutable_cron_schedule()->::flyteidl::admin::CronSchedule::MergeFrom(from._internal_cron_schedule());
      break;
    }
    case SCHEDULEEXPRESSION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.Schedule)
}

inline void Schedule::SharedCtor() {
kickoff_time_input_arg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  kickoff_time_input_arg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
clear_has_ScheduleExpression();
}

Schedule::~Schedule() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.Schedule)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Schedule::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  kickoff_time_input_arg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_ScheduleExpression()) {
    clear_ScheduleExpression();
  }
}

void Schedule::ArenaDtor(void* object) {
  Schedule* _this = reinterpret_cast< Schedule* >(object);
  (void)_this;
}
void Schedule::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Schedule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Schedule::clear_ScheduleExpression() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.admin.Schedule)
  switch (ScheduleExpression_case()) {
    case kCronExpression: {
      ScheduleExpression_.cron_expression_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kRate: {
      if (GetArenaForAllocation() == nullptr) {
        delete ScheduleExpression_.rate_;
      }
      break;
    }
    case kCronSchedule: {
      if (GetArenaForAllocation() == nullptr) {
        delete ScheduleExpression_.cron_schedule_;
      }
      break;
    }
    case SCHEDULEEXPRESSION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SCHEDULEEXPRESSION_NOT_SET;
}


void Schedule::InternalSwap(Schedule* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata Schedule::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fschedule_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fschedule_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fschedule_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace admin
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::flyteidl::admin::FixedRate* Arena::CreateMaybeMessage< ::flyteidl::admin::FixedRate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::FixedRate >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::CronSchedule* Arena::CreateMaybeMessage< ::flyteidl::admin::CronSchedule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::CronSchedule >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::Schedule* Arena::CreateMaybeMessage< ::flyteidl::admin::Schedule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::Schedule >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
