# coding: utf-8

"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from flyteadmin.models.structured_dataset_type_dataset_column import StructuredDatasetTypeDatasetColumn  # noqa: F401,E501


class CoreStructuredDatasetType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'columns': 'list[StructuredDatasetTypeDatasetColumn]',
        'format': 'str',
        'external_schema_type': 'str',
        'external_schema_bytes': 'str'
    }

    attribute_map = {
        'columns': 'columns',
        'format': 'format',
        'external_schema_type': 'external_schema_type',
        'external_schema_bytes': 'external_schema_bytes'
    }

    def __init__(self, columns=None, format=None, external_schema_type=None, external_schema_bytes=None):  # noqa: E501
        """CoreStructuredDatasetType - a model defined in Swagger"""  # noqa: E501

        self._columns = None
        self._format = None
        self._external_schema_type = None
        self._external_schema_bytes = None
        self.discriminator = None

        if columns is not None:
            self.columns = columns
        if format is not None:
            self.format = format
        if external_schema_type is not None:
            self.external_schema_type = external_schema_type
        if external_schema_bytes is not None:
            self.external_schema_bytes = external_schema_bytes

    @property
    def columns(self):
        """Gets the columns of this CoreStructuredDatasetType.  # noqa: E501

        A list of ordered columns this schema comprises of.  # noqa: E501

        :return: The columns of this CoreStructuredDatasetType.  # noqa: E501
        :rtype: list[StructuredDatasetTypeDatasetColumn]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this CoreStructuredDatasetType.

        A list of ordered columns this schema comprises of.  # noqa: E501

        :param columns: The columns of this CoreStructuredDatasetType.  # noqa: E501
        :type: list[StructuredDatasetTypeDatasetColumn]
        """

        self._columns = columns

    @property
    def format(self):
        """Gets the format of this CoreStructuredDatasetType.  # noqa: E501

        This is the storage format, the format of the bits at rest parquet, feather, csv, etc. For two types to be compatible, the format will need to be an exact match.  # noqa: E501

        :return: The format of this CoreStructuredDatasetType.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this CoreStructuredDatasetType.

        This is the storage format, the format of the bits at rest parquet, feather, csv, etc. For two types to be compatible, the format will need to be an exact match.  # noqa: E501

        :param format: The format of this CoreStructuredDatasetType.  # noqa: E501
        :type: str
        """

        self._format = format

    @property
    def external_schema_type(self):
        """Gets the external_schema_type of this CoreStructuredDatasetType.  # noqa: E501

        This is a string representing the type that the bytes in external_schema_bytes are formatted in. This is an optional field that will not be used for type checking.  # noqa: E501

        :return: The external_schema_type of this CoreStructuredDatasetType.  # noqa: E501
        :rtype: str
        """
        return self._external_schema_type

    @external_schema_type.setter
    def external_schema_type(self, external_schema_type):
        """Sets the external_schema_type of this CoreStructuredDatasetType.

        This is a string representing the type that the bytes in external_schema_bytes are formatted in. This is an optional field that will not be used for type checking.  # noqa: E501

        :param external_schema_type: The external_schema_type of this CoreStructuredDatasetType.  # noqa: E501
        :type: str
        """

        self._external_schema_type = external_schema_type

    @property
    def external_schema_bytes(self):
        """Gets the external_schema_bytes of this CoreStructuredDatasetType.  # noqa: E501

        The serialized bytes of a third-party schema library like Arrow. This is an optional field that will not be used for type checking.  # noqa: E501

        :return: The external_schema_bytes of this CoreStructuredDatasetType.  # noqa: E501
        :rtype: str
        """
        return self._external_schema_bytes

    @external_schema_bytes.setter
    def external_schema_bytes(self, external_schema_bytes):
        """Sets the external_schema_bytes of this CoreStructuredDatasetType.

        The serialized bytes of a third-party schema library like Arrow. This is an optional field that will not be used for type checking.  # noqa: E501

        :param external_schema_bytes: The external_schema_bytes of this CoreStructuredDatasetType.  # noqa: E501
        :type: str
        """
        if external_schema_bytes is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', external_schema_bytes):  # noqa: E501
            raise ValueError(r"Invalid value for `external_schema_bytes`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._external_schema_bytes = external_schema_bytes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CoreStructuredDatasetType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CoreStructuredDatasetType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
