# coding: utf-8

"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from flyteadmin.models.core_connection_set import CoreConnectionSet  # noqa: F401,E501
from flyteadmin.models.core_workflow_template import CoreWorkflowTemplate  # noqa: F401,E501


class CoreCompiledWorkflow(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'template': 'CoreWorkflowTemplate',
        'connections': 'CoreConnectionSet'
    }

    attribute_map = {
        'template': 'template',
        'connections': 'connections'
    }

    def __init__(self, template=None, connections=None):  # noqa: E501
        """CoreCompiledWorkflow - a model defined in Swagger"""  # noqa: E501

        self._template = None
        self._connections = None
        self.discriminator = None

        if template is not None:
            self.template = template
        if connections is not None:
            self.connections = connections

    @property
    def template(self):
        """Gets the template of this CoreCompiledWorkflow.  # noqa: E501


        :return: The template of this CoreCompiledWorkflow.  # noqa: E501
        :rtype: CoreWorkflowTemplate
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this CoreCompiledWorkflow.


        :param template: The template of this CoreCompiledWorkflow.  # noqa: E501
        :type: CoreWorkflowTemplate
        """

        self._template = template

    @property
    def connections(self):
        """Gets the connections of this CoreCompiledWorkflow.  # noqa: E501

        For internal use only! This field is used by the system and must not be filled in. Any values set will be ignored.  # noqa: E501

        :return: The connections of this CoreCompiledWorkflow.  # noqa: E501
        :rtype: CoreConnectionSet
        """
        return self._connections

    @connections.setter
    def connections(self, connections):
        """Sets the connections of this CoreCompiledWorkflow.

        For internal use only! This field is used by the system and must not be filled in. Any values set will be ignored.  # noqa: E501

        :param connections: The connections of this CoreCompiledWorkflow.  # noqa: E501
        :type: CoreConnectionSet
        """

        self._connections = connections

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CoreCompiledWorkflow, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CoreCompiledWorkflow):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
