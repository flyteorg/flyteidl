# coding: utf-8

"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from flyteadmin.models.admin_execution_spec import AdminExecutionSpec  # noqa: F401,E501
from flyteadmin.models.core_literal_map import CoreLiteralMap  # noqa: F401,E501


class AdminExecutionCreateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'project': 'str',
        'domain': 'str',
        'name': 'str',
        'spec': 'AdminExecutionSpec',
        'inputs': 'CoreLiteralMap'
    }

    attribute_map = {
        'project': 'project',
        'domain': 'domain',
        'name': 'name',
        'spec': 'spec',
        'inputs': 'inputs'
    }

    def __init__(self, project=None, domain=None, name=None, spec=None, inputs=None):  # noqa: E501
        """AdminExecutionCreateRequest - a model defined in Swagger"""  # noqa: E501

        self._project = None
        self._domain = None
        self._name = None
        self._spec = None
        self._inputs = None
        self.discriminator = None

        if project is not None:
            self.project = project
        if domain is not None:
            self.domain = domain
        if name is not None:
            self.name = name
        if spec is not None:
            self.spec = spec
        if inputs is not None:
            self.inputs = inputs

    @property
    def project(self):
        """Gets the project of this AdminExecutionCreateRequest.  # noqa: E501

        Name of the project the execution belongs to.  # noqa: E501

        :return: The project of this AdminExecutionCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this AdminExecutionCreateRequest.

        Name of the project the execution belongs to.  # noqa: E501

        :param project: The project of this AdminExecutionCreateRequest.  # noqa: E501
        :type: str
        """

        self._project = project

    @property
    def domain(self):
        """Gets the domain of this AdminExecutionCreateRequest.  # noqa: E501

        Name of the domain the execution belongs to.  A domain can be considered as a subset within a specific project.  # noqa: E501

        :return: The domain of this AdminExecutionCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this AdminExecutionCreateRequest.

        Name of the domain the execution belongs to.  A domain can be considered as a subset within a specific project.  # noqa: E501

        :param domain: The domain of this AdminExecutionCreateRequest.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def name(self):
        """Gets the name of this AdminExecutionCreateRequest.  # noqa: E501


        :return: The name of this AdminExecutionCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AdminExecutionCreateRequest.


        :param name: The name of this AdminExecutionCreateRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def spec(self):
        """Gets the spec of this AdminExecutionCreateRequest.  # noqa: E501

        Additional fields necessary to launch the execution.  # noqa: E501

        :return: The spec of this AdminExecutionCreateRequest.  # noqa: E501
        :rtype: AdminExecutionSpec
        """
        return self._spec

    @spec.setter
    def spec(self, spec):
        """Sets the spec of this AdminExecutionCreateRequest.

        Additional fields necessary to launch the execution.  # noqa: E501

        :param spec: The spec of this AdminExecutionCreateRequest.  # noqa: E501
        :type: AdminExecutionSpec
        """

        self._spec = spec

    @property
    def inputs(self):
        """Gets the inputs of this AdminExecutionCreateRequest.  # noqa: E501

        The inputs required to start the execution. All required inputs must be included in this map. If not required and not provided, defaults apply.  # noqa: E501

        :return: The inputs of this AdminExecutionCreateRequest.  # noqa: E501
        :rtype: CoreLiteralMap
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs):
        """Sets the inputs of this AdminExecutionCreateRequest.

        The inputs required to start the execution. All required inputs must be included in this map. If not required and not provided, defaults apply.  # noqa: E501

        :param inputs: The inputs of this AdminExecutionCreateRequest.  # noqa: E501
        :type: CoreLiteralMap
        """

        self._inputs = inputs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdminExecutionCreateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdminExecutionCreateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
