// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/service/dataproxy.proto

#include "flyteidl/service/dataproxy.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace flyteidl {
namespace service {
constexpr CreateUploadLocationResponse::CreateUploadLocationResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : signed_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , native_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , expires_at_(nullptr){}
struct CreateUploadLocationResponseDefaultTypeInternal {
  constexpr CreateUploadLocationResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateUploadLocationResponseDefaultTypeInternal() {}
  union {
    CreateUploadLocationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateUploadLocationResponseDefaultTypeInternal _CreateUploadLocationResponse_default_instance_;
constexpr CreateUploadLocationRequest::CreateUploadLocationRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : project_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , domain_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , content_md5_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , expires_in_(nullptr){}
struct CreateUploadLocationRequestDefaultTypeInternal {
  constexpr CreateUploadLocationRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateUploadLocationRequestDefaultTypeInternal() {}
  union {
    CreateUploadLocationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateUploadLocationRequestDefaultTypeInternal _CreateUploadLocationRequest_default_instance_;
}  // namespace service
}  // namespace flyteidl
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_flyteidl_2fservice_2fdataproxy_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_flyteidl_2fservice_2fdataproxy_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fservice_2fdataproxy_2eproto = nullptr;

const uint32_t TableStruct_flyteidl_2fservice_2fdataproxy_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::service::CreateUploadLocationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::service::CreateUploadLocationResponse, signed_url_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::service::CreateUploadLocationResponse, native_url_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::service::CreateUploadLocationResponse, expires_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::service::CreateUploadLocationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::service::CreateUploadLocationRequest, project_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::service::CreateUploadLocationRequest, domain_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::service::CreateUploadLocationRequest, filename_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::service::CreateUploadLocationRequest, expires_in_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::service::CreateUploadLocationRequest, content_md5_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::flyteidl::service::CreateUploadLocationResponse)},
  { 9, -1, -1, sizeof(::flyteidl::service::CreateUploadLocationRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::service::_CreateUploadLocationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::service::_CreateUploadLocationRequest_default_instance_),
};

const char descriptor_table_protodef_flyteidl_2fservice_2fdataproxy_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n flyteidl/service/dataproxy.proto\022\020flyt"
  "eidl.service\032\034google/api/annotations.pro"
  "to\032,protoc-gen-swagger/options/annotatio"
  "ns.proto\032\036google/protobuf/duration.proto"
  "\032\037google/protobuf/timestamp.proto\"\227\001\n\034Cr"
  "eateUploadLocationResponse\022\035\n\nsigned_url"
  "\030\001 \001(\tR\tsignedUrl\022\035\n\nnative_url\030\002 \001(\tR\tn"
  "ativeUrl\0229\n\nexpires_at\030\003 \001(\0132\032.google.pr"
  "otobuf.TimestampR\texpiresAt\"\306\001\n\033CreateUp"
  "loadLocationRequest\022\030\n\007project\030\001 \001(\tR\007pr"
  "oject\022\026\n\006domain\030\002 \001(\tR\006domain\022\032\n\010filenam"
  "e\030\003 \001(\tR\010filename\0228\n\nexpires_in\030\004 \001(\0132\031."
  "google.protobuf.DurationR\texpiresIn\022\037\n\013c"
  "ontent_md5\030\005 \001(\014R\ncontentMd52\205\002\n\020DataPro"
  "xyService\022\360\001\n\024CreateUploadLocation\022-.fly"
  "teidl.service.CreateUploadLocationReques"
  "t\032..flyteidl.service.CreateUploadLocatio"
  "nResponse\"y\222AM\032KCreates a write-only htt"
  "p location that is accessible for tasks "
  "at runtime.\202\323\344\223\002#\"\036/api/v1/dataproxy/art"
  "ifact_urn:\001*B\303\001\n\024com.flyteidl.serviceB\016D"
  "ataproxyProtoH\002Z7github.com/flyteorg/fly"
  "teidl/gen/pb-go/flyteidl/service\370\001\000\242\002\003FS"
  "X\252\002\020Flyteidl.Service\312\002\020Flyteidl\\Service\342"
  "\002\034Flyteidl\\Service\\GPBMetadata\352\002\021Flyteid"
  "l::Serviceb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_flyteidl_2fservice_2fdataproxy_2eproto_deps[4] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_protoc_2dgen_2dswagger_2foptions_2fannotations_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_flyteidl_2fservice_2fdataproxy_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fservice_2fdataproxy_2eproto = {
  false, false, 1018, descriptor_table_protodef_flyteidl_2fservice_2fdataproxy_2eproto, "flyteidl/service/dataproxy.proto", 
  &descriptor_table_flyteidl_2fservice_2fdataproxy_2eproto_once, descriptor_table_flyteidl_2fservice_2fdataproxy_2eproto_deps, 4, 2,
  schemas, file_default_instances, TableStruct_flyteidl_2fservice_2fdataproxy_2eproto::offsets,
  file_level_metadata_flyteidl_2fservice_2fdataproxy_2eproto, file_level_enum_descriptors_flyteidl_2fservice_2fdataproxy_2eproto, file_level_service_descriptors_flyteidl_2fservice_2fdataproxy_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_flyteidl_2fservice_2fdataproxy_2eproto_getter() {
  return &descriptor_table_flyteidl_2fservice_2fdataproxy_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_flyteidl_2fservice_2fdataproxy_2eproto(&descriptor_table_flyteidl_2fservice_2fdataproxy_2eproto);
namespace flyteidl {
namespace service {

// ===================================================================

class CreateUploadLocationResponse::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& expires_at(const CreateUploadLocationResponse* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
CreateUploadLocationResponse::_Internal::expires_at(const CreateUploadLocationResponse* msg) {
  return *msg->expires_at_;
}
void CreateUploadLocationResponse::clear_expires_at() {
  if (GetArenaForAllocation() == nullptr && expires_at_ != nullptr) {
    delete expires_at_;
  }
  expires_at_ = nullptr;
}
CreateUploadLocationResponse::CreateUploadLocationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.service.CreateUploadLocationResponse)
}
CreateUploadLocationResponse::CreateUploadLocationResponse(const CreateUploadLocationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  signed_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    signed_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signed_url().empty()) {
    signed_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signed_url(), 
      GetArenaForAllocation());
  }
  native_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    native_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_native_url().empty()) {
    native_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_native_url(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_expires_at()) {
    expires_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.expires_at_);
  } else {
    expires_at_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.service.CreateUploadLocationResponse)
}

inline void CreateUploadLocationResponse::SharedCtor() {
signed_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  signed_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
native_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  native_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
expires_at_ = nullptr;
}

CreateUploadLocationResponse::~CreateUploadLocationResponse() {
  // @@protoc_insertion_point(destructor:flyteidl.service.CreateUploadLocationResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateUploadLocationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  signed_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  native_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete expires_at_;
}

void CreateUploadLocationResponse::ArenaDtor(void* object) {
  CreateUploadLocationResponse* _this = reinterpret_cast< CreateUploadLocationResponse* >(object);
  (void)_this;
}
void CreateUploadLocationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateUploadLocationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateUploadLocationResponse::InternalSwap(CreateUploadLocationResponse* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata CreateUploadLocationResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fservice_2fdataproxy_2eproto_getter, &descriptor_table_flyteidl_2fservice_2fdataproxy_2eproto_once,
      file_level_metadata_flyteidl_2fservice_2fdataproxy_2eproto[0]);
}

// ===================================================================

class CreateUploadLocationRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Duration& expires_in(const CreateUploadLocationRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
CreateUploadLocationRequest::_Internal::expires_in(const CreateUploadLocationRequest* msg) {
  return *msg->expires_in_;
}
void CreateUploadLocationRequest::clear_expires_in() {
  if (GetArenaForAllocation() == nullptr && expires_in_ != nullptr) {
    delete expires_in_;
  }
  expires_in_ = nullptr;
}
CreateUploadLocationRequest::CreateUploadLocationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.service.CreateUploadLocationRequest)
}
CreateUploadLocationRequest::CreateUploadLocationRequest(const CreateUploadLocationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  project_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    project_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_project().empty()) {
    project_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_project(), 
      GetArenaForAllocation());
  }
  domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_domain().empty()) {
    domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_domain(), 
      GetArenaForAllocation());
  }
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filename().empty()) {
    filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filename(), 
      GetArenaForAllocation());
  }
  content_md5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    content_md5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content_md5().empty()) {
    content_md5_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_content_md5(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_expires_in()) {
    expires_in_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.expires_in_);
  } else {
    expires_in_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.service.CreateUploadLocationRequest)
}

inline void CreateUploadLocationRequest::SharedCtor() {
project_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  project_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
content_md5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  content_md5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
expires_in_ = nullptr;
}

CreateUploadLocationRequest::~CreateUploadLocationRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.service.CreateUploadLocationRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateUploadLocationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  project_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  domain_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_md5_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete expires_in_;
}

void CreateUploadLocationRequest::ArenaDtor(void* object) {
  CreateUploadLocationRequest* _this = reinterpret_cast< CreateUploadLocationRequest* >(object);
  (void)_this;
}
void CreateUploadLocationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateUploadLocationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateUploadLocationRequest::InternalSwap(CreateUploadLocationRequest* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata CreateUploadLocationRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fservice_2fdataproxy_2eproto_getter, &descriptor_table_flyteidl_2fservice_2fdataproxy_2eproto_once,
      file_level_metadata_flyteidl_2fservice_2fdataproxy_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace service
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::flyteidl::service::CreateUploadLocationResponse* Arena::CreateMaybeMessage< ::flyteidl::service::CreateUploadLocationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::service::CreateUploadLocationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::service::CreateUploadLocationRequest* Arena::CreateMaybeMessage< ::flyteidl::service::CreateUploadLocationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::service::CreateUploadLocationRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
