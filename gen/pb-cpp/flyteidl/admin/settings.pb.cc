// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/settings.proto

#include "flyteidl/admin/settings.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fcluster_5fassignment_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ClusterAssignment_flyteidl_2fadmin_2fcluster_5fassignment_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fmatchable_5fresource_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ExecutionClusterLabel_flyteidl_2fadmin_2fmatchable_5fresource_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fmatchable_5fresource_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ExecutionQueueAttributes_flyteidl_2fadmin_2fmatchable_5fresource_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fmatchable_5fresource_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PluginOverride_flyteidl_2fadmin_2fmatchable_5fresource_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fmatchable_5fresource_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ClusterResourceAttributes_flyteidl_2fadmin_2fmatchable_5fresource_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fmatchable_5fresource_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TaskResourceAttributes_flyteidl_2fadmin_2fmatchable_5fresource_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fmatchable_5fresource_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_WorkflowExecutionConfig_flyteidl_2fadmin_2fmatchable_5fresource_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fsettings_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DomainLevel_flyteidl_2fadmin_2fsettings_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fsettings_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GlobalLevel_flyteidl_2fadmin_2fsettings_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fsettings_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LaunchplanLevel_flyteidl_2fadmin_2fsettings_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fsettings_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ProjectLevel_flyteidl_2fadmin_2fsettings_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fsettings_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_WorkflowLevel_flyteidl_2fadmin_2fsettings_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fsettings_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DomainSettings_WorkflowSettingsEntry_DoNotUse_flyteidl_2fadmin_2fsettings_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fsettings_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LaunchplanSettings_flyteidl_2fadmin_2fsettings_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fsettings_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ProjectSettings_DomainSettingsEntry_DoNotUse_flyteidl_2fadmin_2fsettings_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fsettings_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Settings_ProjectSettingsEntry_DoNotUse_flyteidl_2fadmin_2fsettings_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fsettings_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_WorkflowSettings_LaunchplanSettingsEntry_DoNotUse_flyteidl_2fadmin_2fsettings_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fsettings_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_DomainSettings_flyteidl_2fadmin_2fsettings_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fsettings_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ProjectSettings_flyteidl_2fadmin_2fsettings_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fsettings_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Settings_flyteidl_2fadmin_2fsettings_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fsettings_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_WorkflowSettings_flyteidl_2fadmin_2fsettings_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fsettings_2eproto ::google::protobuf::internal::SCCInfo<8> scc_info_SettingsCollection_flyteidl_2fadmin_2fsettings_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fexecution_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_QualityOfService_flyteidl_2fcore_2fexecution_2eproto;
namespace flyteidl {
namespace admin {
class SettingsCollectionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SettingsCollection> _instance;
} _SettingsCollection_default_instance_;
class Settings_ProjectSettingsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Settings_ProjectSettingsEntry_DoNotUse> _instance;
} _Settings_ProjectSettingsEntry_DoNotUse_default_instance_;
class SettingsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Settings> _instance;
} _Settings_default_instance_;
class ProjectSettings_DomainSettingsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProjectSettings_DomainSettingsEntry_DoNotUse> _instance;
} _ProjectSettings_DomainSettingsEntry_DoNotUse_default_instance_;
class ProjectSettingsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProjectSettings> _instance;
} _ProjectSettings_default_instance_;
class DomainSettings_WorkflowSettingsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DomainSettings_WorkflowSettingsEntry_DoNotUse> _instance;
} _DomainSettings_WorkflowSettingsEntry_DoNotUse_default_instance_;
class DomainSettingsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DomainSettings> _instance;
} _DomainSettings_default_instance_;
class WorkflowSettings_LaunchplanSettingsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WorkflowSettings_LaunchplanSettingsEntry_DoNotUse> _instance;
} _WorkflowSettings_LaunchplanSettingsEntry_DoNotUse_default_instance_;
class WorkflowSettingsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WorkflowSettings> _instance;
} _WorkflowSettings_default_instance_;
class LaunchplanSettingsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaunchplanSettings> _instance;
} _LaunchplanSettings_default_instance_;
class GlobalLevelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GlobalLevel> _instance;
} _GlobalLevel_default_instance_;
class ProjectLevelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProjectLevel> _instance;
} _ProjectLevel_default_instance_;
class DomainLevelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DomainLevel> _instance;
} _DomainLevel_default_instance_;
class WorkflowLevelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WorkflowLevel> _instance;
} _WorkflowLevel_default_instance_;
class LaunchplanLevelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaunchplanLevel> _instance;
} _LaunchplanLevel_default_instance_;
class SettingsUpdateRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SettingsUpdateRequest> _instance;
  const ::flyteidl::admin::GlobalLevel* global_level_;
  const ::flyteidl::admin::ProjectLevel* project_level_;
  const ::flyteidl::admin::DomainLevel* domain_level_;
  const ::flyteidl::admin::WorkflowLevel* workflow_level_;
  const ::flyteidl::admin::LaunchplanLevel* launchplan_level_;
} _SettingsUpdateRequest_default_instance_;
class FullSettingsUpdateRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FullSettingsUpdateRequest> _instance;
  const ::flyteidl::admin::GlobalLevel* global_level_;
  const ::flyteidl::admin::ProjectLevel* project_level_;
  const ::flyteidl::admin::DomainLevel* domain_level_;
  const ::flyteidl::admin::WorkflowLevel* workflow_level_;
  const ::flyteidl::admin::LaunchplanLevel* launchplan_level_;
} _FullSettingsUpdateRequest_default_instance_;
class FullSettingsUpdateResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FullSettingsUpdateResponse> _instance;
} _FullSettingsUpdateResponse_default_instance_;
class SettingsGetRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SettingsGetRequest> _instance;
  const ::flyteidl::admin::GlobalLevel* global_level_;
  const ::flyteidl::admin::ProjectLevel* project_level_;
  const ::flyteidl::admin::DomainLevel* domain_level_;
  const ::flyteidl::admin::WorkflowLevel* workflow_level_;
  const ::flyteidl::admin::LaunchplanLevel* launchplan_level_;
} _SettingsGetRequest_default_instance_;
class SettingsGetResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SettingsGetResponse> _instance;
  const ::flyteidl::admin::GlobalLevel* global_level_;
  const ::flyteidl::admin::ProjectLevel* project_level_;
  const ::flyteidl::admin::DomainLevel* domain_level_;
  const ::flyteidl::admin::WorkflowLevel* workflow_level_;
  const ::flyteidl::admin::LaunchplanLevel* launchplan_level_;
} _SettingsGetResponse_default_instance_;
class FullSettingsGetRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FullSettingsGetRequest> _instance;
} _FullSettingsGetRequest_default_instance_;
class FullSettingsGetResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FullSettingsGetResponse> _instance;
} _FullSettingsGetResponse_default_instance_;
class SettingsDeleteRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SettingsDeleteRequest> _instance;
  const ::flyteidl::admin::GlobalLevel* global_level_;
  const ::flyteidl::admin::ProjectLevel* project_level_;
  const ::flyteidl::admin::DomainLevel* domain_level_;
  const ::flyteidl::admin::WorkflowLevel* workflow_level_;
  const ::flyteidl::admin::LaunchplanLevel* launchplan_level_;
} _SettingsDeleteRequest_default_instance_;
class SettingsDeleteResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SettingsDeleteResponse> _instance;
} _SettingsDeleteResponse_default_instance_;
}  // namespace admin
}  // namespace flyteidl
static void InitDefaultsSettingsCollection_flyteidl_2fadmin_2fsettings_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_SettingsCollection_default_instance_;
    new (ptr) ::flyteidl::admin::SettingsCollection();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::SettingsCollection::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<8> scc_info_SettingsCollection_flyteidl_2fadmin_2fsettings_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 8, InitDefaultsSettingsCollection_flyteidl_2fadmin_2fsettings_2eproto}, {
      &scc_info_TaskResourceAttributes_flyteidl_2fadmin_2fmatchable_5fresource_2eproto.base,
      &scc_info_ClusterResourceAttributes_flyteidl_2fadmin_2fmatchable_5fresource_2eproto.base,
      &scc_info_ExecutionQueueAttributes_flyteidl_2fadmin_2fmatchable_5fresource_2eproto.base,
      &scc_info_ExecutionClusterLabel_flyteidl_2fadmin_2fmatchable_5fresource_2eproto.base,
      &scc_info_QualityOfService_flyteidl_2fcore_2fexecution_2eproto.base,
      &scc_info_PluginOverride_flyteidl_2fadmin_2fmatchable_5fresource_2eproto.base,
      &scc_info_WorkflowExecutionConfig_flyteidl_2fadmin_2fmatchable_5fresource_2eproto.base,
      &scc_info_ClusterAssignment_flyteidl_2fadmin_2fcluster_5fassignment_2eproto.base,}};

static void InitDefaultsSettings_ProjectSettingsEntry_DoNotUse_flyteidl_2fadmin_2fsettings_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_Settings_ProjectSettingsEntry_DoNotUse_default_instance_;
    new (ptr) ::flyteidl::admin::Settings_ProjectSettingsEntry_DoNotUse();
  }
  ::flyteidl::admin::Settings_ProjectSettingsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Settings_ProjectSettingsEntry_DoNotUse_flyteidl_2fadmin_2fsettings_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSettings_ProjectSettingsEntry_DoNotUse_flyteidl_2fadmin_2fsettings_2eproto}, {
      &scc_info_ProjectSettings_flyteidl_2fadmin_2fsettings_2eproto.base,}};

static void InitDefaultsSettings_flyteidl_2fadmin_2fsettings_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_Settings_default_instance_;
    new (ptr) ::flyteidl::admin::Settings();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::Settings::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Settings_flyteidl_2fadmin_2fsettings_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSettings_flyteidl_2fadmin_2fsettings_2eproto}, {
      &scc_info_SettingsCollection_flyteidl_2fadmin_2fsettings_2eproto.base,
      &scc_info_Settings_ProjectSettingsEntry_DoNotUse_flyteidl_2fadmin_2fsettings_2eproto.base,}};

static void InitDefaultsProjectSettings_DomainSettingsEntry_DoNotUse_flyteidl_2fadmin_2fsettings_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_ProjectSettings_DomainSettingsEntry_DoNotUse_default_instance_;
    new (ptr) ::flyteidl::admin::ProjectSettings_DomainSettingsEntry_DoNotUse();
  }
  ::flyteidl::admin::ProjectSettings_DomainSettingsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ProjectSettings_DomainSettingsEntry_DoNotUse_flyteidl_2fadmin_2fsettings_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsProjectSettings_DomainSettingsEntry_DoNotUse_flyteidl_2fadmin_2fsettings_2eproto}, {
      &scc_info_DomainSettings_flyteidl_2fadmin_2fsettings_2eproto.base,}};

static void InitDefaultsProjectSettings_flyteidl_2fadmin_2fsettings_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_ProjectSettings_default_instance_;
    new (ptr) ::flyteidl::admin::ProjectSettings();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::ProjectSettings::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ProjectSettings_flyteidl_2fadmin_2fsettings_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsProjectSettings_flyteidl_2fadmin_2fsettings_2eproto}, {
      &scc_info_SettingsCollection_flyteidl_2fadmin_2fsettings_2eproto.base,
      &scc_info_ProjectSettings_DomainSettingsEntry_DoNotUse_flyteidl_2fadmin_2fsettings_2eproto.base,}};

static void InitDefaultsDomainSettings_WorkflowSettingsEntry_DoNotUse_flyteidl_2fadmin_2fsettings_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_DomainSettings_WorkflowSettingsEntry_DoNotUse_default_instance_;
    new (ptr) ::flyteidl::admin::DomainSettings_WorkflowSettingsEntry_DoNotUse();
  }
  ::flyteidl::admin::DomainSettings_WorkflowSettingsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DomainSettings_WorkflowSettingsEntry_DoNotUse_flyteidl_2fadmin_2fsettings_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDomainSettings_WorkflowSettingsEntry_DoNotUse_flyteidl_2fadmin_2fsettings_2eproto}, {
      &scc_info_WorkflowSettings_flyteidl_2fadmin_2fsettings_2eproto.base,}};

static void InitDefaultsDomainSettings_flyteidl_2fadmin_2fsettings_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_DomainSettings_default_instance_;
    new (ptr) ::flyteidl::admin::DomainSettings();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::DomainSettings::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_DomainSettings_flyteidl_2fadmin_2fsettings_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsDomainSettings_flyteidl_2fadmin_2fsettings_2eproto}, {
      &scc_info_SettingsCollection_flyteidl_2fadmin_2fsettings_2eproto.base,
      &scc_info_DomainSettings_WorkflowSettingsEntry_DoNotUse_flyteidl_2fadmin_2fsettings_2eproto.base,}};

static void InitDefaultsWorkflowSettings_LaunchplanSettingsEntry_DoNotUse_flyteidl_2fadmin_2fsettings_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_WorkflowSettings_LaunchplanSettingsEntry_DoNotUse_default_instance_;
    new (ptr) ::flyteidl::admin::WorkflowSettings_LaunchplanSettingsEntry_DoNotUse();
  }
  ::flyteidl::admin::WorkflowSettings_LaunchplanSettingsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_WorkflowSettings_LaunchplanSettingsEntry_DoNotUse_flyteidl_2fadmin_2fsettings_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsWorkflowSettings_LaunchplanSettingsEntry_DoNotUse_flyteidl_2fadmin_2fsettings_2eproto}, {
      &scc_info_LaunchplanSettings_flyteidl_2fadmin_2fsettings_2eproto.base,}};

static void InitDefaultsWorkflowSettings_flyteidl_2fadmin_2fsettings_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_WorkflowSettings_default_instance_;
    new (ptr) ::flyteidl::admin::WorkflowSettings();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::WorkflowSettings::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_WorkflowSettings_flyteidl_2fadmin_2fsettings_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsWorkflowSettings_flyteidl_2fadmin_2fsettings_2eproto}, {
      &scc_info_SettingsCollection_flyteidl_2fadmin_2fsettings_2eproto.base,
      &scc_info_WorkflowSettings_LaunchplanSettingsEntry_DoNotUse_flyteidl_2fadmin_2fsettings_2eproto.base,}};

static void InitDefaultsLaunchplanSettings_flyteidl_2fadmin_2fsettings_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_LaunchplanSettings_default_instance_;
    new (ptr) ::flyteidl::admin::LaunchplanSettings();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::LaunchplanSettings::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LaunchplanSettings_flyteidl_2fadmin_2fsettings_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLaunchplanSettings_flyteidl_2fadmin_2fsettings_2eproto}, {
      &scc_info_SettingsCollection_flyteidl_2fadmin_2fsettings_2eproto.base,}};

static void InitDefaultsGlobalLevel_flyteidl_2fadmin_2fsettings_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_GlobalLevel_default_instance_;
    new (ptr) ::flyteidl::admin::GlobalLevel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::GlobalLevel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GlobalLevel_flyteidl_2fadmin_2fsettings_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGlobalLevel_flyteidl_2fadmin_2fsettings_2eproto}, {}};

static void InitDefaultsProjectLevel_flyteidl_2fadmin_2fsettings_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_ProjectLevel_default_instance_;
    new (ptr) ::flyteidl::admin::ProjectLevel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::ProjectLevel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ProjectLevel_flyteidl_2fadmin_2fsettings_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProjectLevel_flyteidl_2fadmin_2fsettings_2eproto}, {}};

static void InitDefaultsDomainLevel_flyteidl_2fadmin_2fsettings_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_DomainLevel_default_instance_;
    new (ptr) ::flyteidl::admin::DomainLevel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::DomainLevel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DomainLevel_flyteidl_2fadmin_2fsettings_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDomainLevel_flyteidl_2fadmin_2fsettings_2eproto}, {}};

static void InitDefaultsWorkflowLevel_flyteidl_2fadmin_2fsettings_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_WorkflowLevel_default_instance_;
    new (ptr) ::flyteidl::admin::WorkflowLevel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::WorkflowLevel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_WorkflowLevel_flyteidl_2fadmin_2fsettings_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWorkflowLevel_flyteidl_2fadmin_2fsettings_2eproto}, {}};

static void InitDefaultsLaunchplanLevel_flyteidl_2fadmin_2fsettings_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_LaunchplanLevel_default_instance_;
    new (ptr) ::flyteidl::admin::LaunchplanLevel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::LaunchplanLevel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LaunchplanLevel_flyteidl_2fadmin_2fsettings_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLaunchplanLevel_flyteidl_2fadmin_2fsettings_2eproto}, {}};

static void InitDefaultsSettingsUpdateRequest_flyteidl_2fadmin_2fsettings_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_SettingsUpdateRequest_default_instance_;
    new (ptr) ::flyteidl::admin::SettingsUpdateRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::SettingsUpdateRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_SettingsUpdateRequest_flyteidl_2fadmin_2fsettings_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsSettingsUpdateRequest_flyteidl_2fadmin_2fsettings_2eproto}, {
      &scc_info_GlobalLevel_flyteidl_2fadmin_2fsettings_2eproto.base,
      &scc_info_ProjectLevel_flyteidl_2fadmin_2fsettings_2eproto.base,
      &scc_info_DomainLevel_flyteidl_2fadmin_2fsettings_2eproto.base,
      &scc_info_WorkflowLevel_flyteidl_2fadmin_2fsettings_2eproto.base,
      &scc_info_LaunchplanLevel_flyteidl_2fadmin_2fsettings_2eproto.base,
      &scc_info_SettingsCollection_flyteidl_2fadmin_2fsettings_2eproto.base,}};

static void InitDefaultsFullSettingsUpdateRequest_flyteidl_2fadmin_2fsettings_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_FullSettingsUpdateRequest_default_instance_;
    new (ptr) ::flyteidl::admin::FullSettingsUpdateRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::FullSettingsUpdateRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_FullSettingsUpdateRequest_flyteidl_2fadmin_2fsettings_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsFullSettingsUpdateRequest_flyteidl_2fadmin_2fsettings_2eproto}, {
      &scc_info_GlobalLevel_flyteidl_2fadmin_2fsettings_2eproto.base,
      &scc_info_ProjectLevel_flyteidl_2fadmin_2fsettings_2eproto.base,
      &scc_info_DomainLevel_flyteidl_2fadmin_2fsettings_2eproto.base,
      &scc_info_WorkflowLevel_flyteidl_2fadmin_2fsettings_2eproto.base,
      &scc_info_LaunchplanLevel_flyteidl_2fadmin_2fsettings_2eproto.base,
      &scc_info_SettingsCollection_flyteidl_2fadmin_2fsettings_2eproto.base,}};

static void InitDefaultsFullSettingsUpdateResponse_flyteidl_2fadmin_2fsettings_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_FullSettingsUpdateResponse_default_instance_;
    new (ptr) ::flyteidl::admin::FullSettingsUpdateResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::FullSettingsUpdateResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FullSettingsUpdateResponse_flyteidl_2fadmin_2fsettings_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFullSettingsUpdateResponse_flyteidl_2fadmin_2fsettings_2eproto}, {}};

static void InitDefaultsSettingsGetRequest_flyteidl_2fadmin_2fsettings_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_SettingsGetRequest_default_instance_;
    new (ptr) ::flyteidl::admin::SettingsGetRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::SettingsGetRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_SettingsGetRequest_flyteidl_2fadmin_2fsettings_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsSettingsGetRequest_flyteidl_2fadmin_2fsettings_2eproto}, {
      &scc_info_GlobalLevel_flyteidl_2fadmin_2fsettings_2eproto.base,
      &scc_info_ProjectLevel_flyteidl_2fadmin_2fsettings_2eproto.base,
      &scc_info_DomainLevel_flyteidl_2fadmin_2fsettings_2eproto.base,
      &scc_info_WorkflowLevel_flyteidl_2fadmin_2fsettings_2eproto.base,
      &scc_info_LaunchplanLevel_flyteidl_2fadmin_2fsettings_2eproto.base,}};

static void InitDefaultsSettingsGetResponse_flyteidl_2fadmin_2fsettings_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_SettingsGetResponse_default_instance_;
    new (ptr) ::flyteidl::admin::SettingsGetResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::SettingsGetResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_SettingsGetResponse_flyteidl_2fadmin_2fsettings_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsSettingsGetResponse_flyteidl_2fadmin_2fsettings_2eproto}, {
      &scc_info_GlobalLevel_flyteidl_2fadmin_2fsettings_2eproto.base,
      &scc_info_ProjectLevel_flyteidl_2fadmin_2fsettings_2eproto.base,
      &scc_info_DomainLevel_flyteidl_2fadmin_2fsettings_2eproto.base,
      &scc_info_WorkflowLevel_flyteidl_2fadmin_2fsettings_2eproto.base,
      &scc_info_LaunchplanLevel_flyteidl_2fadmin_2fsettings_2eproto.base,
      &scc_info_SettingsCollection_flyteidl_2fadmin_2fsettings_2eproto.base,}};

static void InitDefaultsFullSettingsGetRequest_flyteidl_2fadmin_2fsettings_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_FullSettingsGetRequest_default_instance_;
    new (ptr) ::flyteidl::admin::FullSettingsGetRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::FullSettingsGetRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FullSettingsGetRequest_flyteidl_2fadmin_2fsettings_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFullSettingsGetRequest_flyteidl_2fadmin_2fsettings_2eproto}, {}};

static void InitDefaultsFullSettingsGetResponse_flyteidl_2fadmin_2fsettings_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_FullSettingsGetResponse_default_instance_;
    new (ptr) ::flyteidl::admin::FullSettingsGetResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::FullSettingsGetResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FullSettingsGetResponse_flyteidl_2fadmin_2fsettings_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFullSettingsGetResponse_flyteidl_2fadmin_2fsettings_2eproto}, {
      &scc_info_Settings_flyteidl_2fadmin_2fsettings_2eproto.base,}};

static void InitDefaultsSettingsDeleteRequest_flyteidl_2fadmin_2fsettings_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_SettingsDeleteRequest_default_instance_;
    new (ptr) ::flyteidl::admin::SettingsDeleteRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::SettingsDeleteRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_SettingsDeleteRequest_flyteidl_2fadmin_2fsettings_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsSettingsDeleteRequest_flyteidl_2fadmin_2fsettings_2eproto}, {
      &scc_info_GlobalLevel_flyteidl_2fadmin_2fsettings_2eproto.base,
      &scc_info_ProjectLevel_flyteidl_2fadmin_2fsettings_2eproto.base,
      &scc_info_DomainLevel_flyteidl_2fadmin_2fsettings_2eproto.base,
      &scc_info_WorkflowLevel_flyteidl_2fadmin_2fsettings_2eproto.base,
      &scc_info_LaunchplanLevel_flyteidl_2fadmin_2fsettings_2eproto.base,}};

static void InitDefaultsSettingsDeleteResponse_flyteidl_2fadmin_2fsettings_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_SettingsDeleteResponse_default_instance_;
    new (ptr) ::flyteidl::admin::SettingsDeleteResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::SettingsDeleteResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SettingsDeleteResponse_flyteidl_2fadmin_2fsettings_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSettingsDeleteResponse_flyteidl_2fadmin_2fsettings_2eproto}, {}};

void InitDefaults_flyteidl_2fadmin_2fsettings_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_SettingsCollection_flyteidl_2fadmin_2fsettings_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Settings_ProjectSettingsEntry_DoNotUse_flyteidl_2fadmin_2fsettings_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Settings_flyteidl_2fadmin_2fsettings_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ProjectSettings_DomainSettingsEntry_DoNotUse_flyteidl_2fadmin_2fsettings_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ProjectSettings_flyteidl_2fadmin_2fsettings_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DomainSettings_WorkflowSettingsEntry_DoNotUse_flyteidl_2fadmin_2fsettings_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DomainSettings_flyteidl_2fadmin_2fsettings_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WorkflowSettings_LaunchplanSettingsEntry_DoNotUse_flyteidl_2fadmin_2fsettings_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WorkflowSettings_flyteidl_2fadmin_2fsettings_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LaunchplanSettings_flyteidl_2fadmin_2fsettings_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GlobalLevel_flyteidl_2fadmin_2fsettings_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ProjectLevel_flyteidl_2fadmin_2fsettings_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DomainLevel_flyteidl_2fadmin_2fsettings_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WorkflowLevel_flyteidl_2fadmin_2fsettings_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LaunchplanLevel_flyteidl_2fadmin_2fsettings_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SettingsUpdateRequest_flyteidl_2fadmin_2fsettings_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FullSettingsUpdateRequest_flyteidl_2fadmin_2fsettings_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FullSettingsUpdateResponse_flyteidl_2fadmin_2fsettings_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SettingsGetRequest_flyteidl_2fadmin_2fsettings_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SettingsGetResponse_flyteidl_2fadmin_2fsettings_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FullSettingsGetRequest_flyteidl_2fadmin_2fsettings_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FullSettingsGetResponse_flyteidl_2fadmin_2fsettings_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SettingsDeleteRequest_flyteidl_2fadmin_2fsettings_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SettingsDeleteResponse_flyteidl_2fadmin_2fsettings_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_flyteidl_2fadmin_2fsettings_2eproto[24];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_flyteidl_2fadmin_2fsettings_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fadmin_2fsettings_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_flyteidl_2fadmin_2fsettings_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::SettingsCollection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::SettingsCollection, task_resource_settings_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::SettingsCollection, cluster_resource_settings_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::SettingsCollection, execution_queue_settings_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::SettingsCollection, execution_cluster_label_settings_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::SettingsCollection, quality_of_service_settings_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::SettingsCollection, plugin_override_settings_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::SettingsCollection, workflow_execution_settings_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::SettingsCollection, cluster_assignment_settings_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Settings_ProjectSettingsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Settings_ProjectSettingsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Settings_ProjectSettingsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Settings_ProjectSettingsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Settings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Settings, global_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Settings, project_settings_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ProjectSettings_DomainSettingsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ProjectSettings_DomainSettingsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ProjectSettings_DomainSettingsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ProjectSettings_DomainSettingsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ProjectSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ProjectSettings, project_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ProjectSettings, settings_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ProjectSettings, domain_settings_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::DomainSettings_WorkflowSettingsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::DomainSettings_WorkflowSettingsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::DomainSettings_WorkflowSettingsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::DomainSettings_WorkflowSettingsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::DomainSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::DomainSettings, domain_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::DomainSettings, settings_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::DomainSettings, workflow_settings_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowSettings_LaunchplanSettingsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowSettings_LaunchplanSettingsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowSettings_LaunchplanSettingsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowSettings_LaunchplanSettingsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowSettings, workflow_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowSettings, settings_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowSettings, launchplan_settings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchplanSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchplanSettings, launchplan_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchplanSettings, settings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::GlobalLevel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ProjectLevel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ProjectLevel, project_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::DomainLevel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::DomainLevel, project_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::DomainLevel, domain_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowLevel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowLevel, project_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowLevel, domain_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowLevel, workflow_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchplanLevel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchplanLevel, project_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchplanLevel, domain_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchplanLevel, workflow_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchplanLevel, launchplan_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::SettingsUpdateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::SettingsUpdateRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::flyteidl::admin::SettingsUpdateRequestDefaultTypeInternal, global_level_),
  offsetof(::flyteidl::admin::SettingsUpdateRequestDefaultTypeInternal, project_level_),
  offsetof(::flyteidl::admin::SettingsUpdateRequestDefaultTypeInternal, domain_level_),
  offsetof(::flyteidl::admin::SettingsUpdateRequestDefaultTypeInternal, workflow_level_),
  offsetof(::flyteidl::admin::SettingsUpdateRequestDefaultTypeInternal, launchplan_level_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::SettingsUpdateRequest, settings_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::SettingsUpdateRequest, level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::FullSettingsUpdateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::FullSettingsUpdateRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::flyteidl::admin::FullSettingsUpdateRequestDefaultTypeInternal, global_level_),
  offsetof(::flyteidl::admin::FullSettingsUpdateRequestDefaultTypeInternal, project_level_),
  offsetof(::flyteidl::admin::FullSettingsUpdateRequestDefaultTypeInternal, domain_level_),
  offsetof(::flyteidl::admin::FullSettingsUpdateRequestDefaultTypeInternal, workflow_level_),
  offsetof(::flyteidl::admin::FullSettingsUpdateRequestDefaultTypeInternal, launchplan_level_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::FullSettingsUpdateRequest, settings_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::FullSettingsUpdateRequest, level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::FullSettingsUpdateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::SettingsGetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::SettingsGetRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::flyteidl::admin::SettingsGetRequestDefaultTypeInternal, global_level_),
  offsetof(::flyteidl::admin::SettingsGetRequestDefaultTypeInternal, project_level_),
  offsetof(::flyteidl::admin::SettingsGetRequestDefaultTypeInternal, domain_level_),
  offsetof(::flyteidl::admin::SettingsGetRequestDefaultTypeInternal, workflow_level_),
  offsetof(::flyteidl::admin::SettingsGetRequestDefaultTypeInternal, launchplan_level_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::SettingsGetRequest, level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::SettingsGetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::SettingsGetResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::flyteidl::admin::SettingsGetResponseDefaultTypeInternal, global_level_),
  offsetof(::flyteidl::admin::SettingsGetResponseDefaultTypeInternal, project_level_),
  offsetof(::flyteidl::admin::SettingsGetResponseDefaultTypeInternal, domain_level_),
  offsetof(::flyteidl::admin::SettingsGetResponseDefaultTypeInternal, workflow_level_),
  offsetof(::flyteidl::admin::SettingsGetResponseDefaultTypeInternal, launchplan_level_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::SettingsGetResponse, settings_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::SettingsGetResponse, level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::FullSettingsGetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::FullSettingsGetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::FullSettingsGetResponse, settings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::SettingsDeleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::SettingsDeleteRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::flyteidl::admin::SettingsDeleteRequestDefaultTypeInternal, global_level_),
  offsetof(::flyteidl::admin::SettingsDeleteRequestDefaultTypeInternal, project_level_),
  offsetof(::flyteidl::admin::SettingsDeleteRequestDefaultTypeInternal, domain_level_),
  offsetof(::flyteidl::admin::SettingsDeleteRequestDefaultTypeInternal, workflow_level_),
  offsetof(::flyteidl::admin::SettingsDeleteRequestDefaultTypeInternal, launchplan_level_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::SettingsDeleteRequest, level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::SettingsDeleteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::flyteidl::admin::SettingsCollection)},
  { 13, 20, sizeof(::flyteidl::admin::Settings_ProjectSettingsEntry_DoNotUse)},
  { 22, -1, sizeof(::flyteidl::admin::Settings)},
  { 29, 36, sizeof(::flyteidl::admin::ProjectSettings_DomainSettingsEntry_DoNotUse)},
  { 38, -1, sizeof(::flyteidl::admin::ProjectSettings)},
  { 46, 53, sizeof(::flyteidl::admin::DomainSettings_WorkflowSettingsEntry_DoNotUse)},
  { 55, -1, sizeof(::flyteidl::admin::DomainSettings)},
  { 63, 70, sizeof(::flyteidl::admin::WorkflowSettings_LaunchplanSettingsEntry_DoNotUse)},
  { 72, -1, sizeof(::flyteidl::admin::WorkflowSettings)},
  { 80, -1, sizeof(::flyteidl::admin::LaunchplanSettings)},
  { 87, -1, sizeof(::flyteidl::admin::GlobalLevel)},
  { 92, -1, sizeof(::flyteidl::admin::ProjectLevel)},
  { 98, -1, sizeof(::flyteidl::admin::DomainLevel)},
  { 105, -1, sizeof(::flyteidl::admin::WorkflowLevel)},
  { 113, -1, sizeof(::flyteidl::admin::LaunchplanLevel)},
  { 122, -1, sizeof(::flyteidl::admin::SettingsUpdateRequest)},
  { 134, -1, sizeof(::flyteidl::admin::FullSettingsUpdateRequest)},
  { 146, -1, sizeof(::flyteidl::admin::FullSettingsUpdateResponse)},
  { 151, -1, sizeof(::flyteidl::admin::SettingsGetRequest)},
  { 162, -1, sizeof(::flyteidl::admin::SettingsGetResponse)},
  { 174, -1, sizeof(::flyteidl::admin::FullSettingsGetRequest)},
  { 179, -1, sizeof(::flyteidl::admin::FullSettingsGetResponse)},
  { 185, -1, sizeof(::flyteidl::admin::SettingsDeleteRequest)},
  { 196, -1, sizeof(::flyteidl::admin::SettingsDeleteResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_SettingsCollection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_Settings_ProjectSettingsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_Settings_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_ProjectSettings_DomainSettingsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_ProjectSettings_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_DomainSettings_WorkflowSettingsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_DomainSettings_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_WorkflowSettings_LaunchplanSettingsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_WorkflowSettings_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_LaunchplanSettings_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_GlobalLevel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_ProjectLevel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_DomainLevel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_WorkflowLevel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_LaunchplanLevel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_SettingsUpdateRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_FullSettingsUpdateRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_FullSettingsUpdateResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_SettingsGetRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_SettingsGetResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_FullSettingsGetRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_FullSettingsGetResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_SettingsDeleteRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_SettingsDeleteResponse_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_flyteidl_2fadmin_2fsettings_2eproto = {
  {}, AddDescriptors_flyteidl_2fadmin_2fsettings_2eproto, "flyteidl/admin/settings.proto", schemas,
  file_default_instances, TableStruct_flyteidl_2fadmin_2fsettings_2eproto::offsets,
  file_level_metadata_flyteidl_2fadmin_2fsettings_2eproto, 24, file_level_enum_descriptors_flyteidl_2fadmin_2fsettings_2eproto, file_level_service_descriptors_flyteidl_2fadmin_2fsettings_2eproto,
};

const char descriptor_table_protodef_flyteidl_2fadmin_2fsettings_2eproto[] =
  "\n\035flyteidl/admin/settings.proto\022\016flyteid"
  "l.admin\032\'flyteidl/admin/cluster_assignme"
  "nt.proto\032\035flyteidl/core/execution.proto\032"
  "\'flyteidl/admin/matchable_resource.proto"
  "\"\345\004\n\022SettingsCollection\022F\n\026task_resource"
  "_settings\030\001 \001(\0132&.flyteidl.admin.TaskRes"
  "ourceAttributes\022L\n\031cluster_resource_sett"
  "ings\030\002 \001(\0132).flyteidl.admin.ClusterResou"
  "rceAttributes\022J\n\030execution_queue_setting"
  "s\030\003 \001(\0132(.flyteidl.admin.ExecutionQueueA"
  "ttributes\022O\n execution_cluster_label_set"
  "tings\030\004 \001(\0132%.flyteidl.admin.ExecutionCl"
  "usterLabel\022D\n\033quality_of_service_setting"
  "s\030\005 \001(\0132\037.flyteidl.core.QualityOfService"
  "\022@\n\030plugin_override_settings\030\006 \001(\0132\036.fly"
  "teidl.admin.PluginOverride\022L\n\033workflow_e"
  "xecution_settings\030\007 \001(\0132\'.flyteidl.admin"
  ".WorkflowExecutionConfig\022F\n\033cluster_assi"
  "gnment_settings\030\010 \001(\0132!.flyteidl.admin.C"
  "lusterAssignment\"\340\001\n\010Settings\0222\n\006global\030"
  "\001 \001(\0132\".flyteidl.admin.SettingsCollectio"
  "n\022G\n\020project_settings\030\002 \003(\0132-.flyteidl.a"
  "dmin.Settings.ProjectSettingsEntry\032W\n\024Pr"
  "ojectSettingsEntry\022\013\n\003key\030\001 \001(\t\022.\n\005value"
  "\030\002 \001(\0132\037.flyteidl.admin.ProjectSettings:"
  "\0028\001\"\375\001\n\017ProjectSettings\022\017\n\007project\030\001 \001(\t"
  "\0224\n\010settings\030\002 \001(\0132\".flyteidl.admin.Sett"
  "ingsCollection\022L\n\017domain_settings\030\003 \003(\0132"
  "3.flyteidl.admin.ProjectSettings.DomainS"
  "ettingsEntry\032U\n\023DomainSettingsEntry\022\013\n\003k"
  "ey\030\001 \001(\t\022-\n\005value\030\002 \001(\0132\036.flyteidl.admin"
  ".DomainSettings:\0028\001\"\202\002\n\016DomainSettings\022\016"
  "\n\006domain\030\001 \001(\t\0224\n\010settings\030\002 \001(\0132\".flyte"
  "idl.admin.SettingsCollection\022O\n\021workflow"
  "_settings\030\003 \003(\01324.flyteidl.admin.DomainS"
  "ettings.WorkflowSettingsEntry\032Y\n\025Workflo"
  "wSettingsEntry\022\013\n\003key\030\001 \001(\t\022/\n\005value\030\002 \001"
  "(\0132 .flyteidl.admin.WorkflowSettings:\0028\001"
  "\"\220\002\n\020WorkflowSettings\022\020\n\010workflow\030\001 \001(\t\022"
  "4\n\010settings\030\002 \001(\0132\".flyteidl.admin.Setti"
  "ngsCollection\022U\n\023launchplan_settings\030\003 \003"
  "(\01328.flyteidl.admin.WorkflowSettings.Lau"
  "nchplanSettingsEntry\032]\n\027LaunchplanSettin"
  "gsEntry\022\013\n\003key\030\001 \001(\t\0221\n\005value\030\002 \001(\0132\".fl"
  "yteidl.admin.LaunchplanSettings:\0028\001\"^\n\022L"
  "aunchplanSettings\022\022\n\nlaunchplan\030\001 \001(\t\0224\n"
  "\010settings\030\002 \001(\0132\".flyteidl.admin.Setting"
  "sCollection\"\r\n\013GlobalLevel\"\037\n\014ProjectLev"
  "el\022\017\n\007project\030\001 \001(\t\".\n\013DomainLevel\022\017\n\007pr"
  "oject\030\001 \001(\t\022\016\n\006domain\030\002 \001(\t\"B\n\rWorkflowL"
  "evel\022\017\n\007project\030\001 \001(\t\022\016\n\006domain\030\002 \001(\t\022\020\n"
  "\010workflow\030\003 \001(\t\"X\n\017LaunchplanLevel\022\017\n\007pr"
  "oject\030\001 \001(\t\022\016\n\006domain\030\002 \001(\t\022\020\n\010workflow\030"
  "\003 \001(\t\022\022\n\nlaunchplan\030\004 \001(\t\"\355\002\n\025SettingsUp"
  "dateRequest\0223\n\014global_level\030\001 \001(\0132\033.flyt"
  "eidl.admin.GlobalLevelH\000\0225\n\rproject_leve"
  "l\030\002 \001(\0132\034.flyteidl.admin.ProjectLevelH\000\022"
  "3\n\014domain_level\030\003 \001(\0132\033.flyteidl.admin.D"
  "omainLevelH\000\0227\n\016workflow_level\030\004 \001(\0132\035.f"
  "lyteidl.admin.WorkflowLevelH\000\022;\n\020launchp"
  "lan_level\030\005 \001(\0132\037.flyteidl.admin.Launchp"
  "lanLevelH\000\0224\n\010settings\030\006 \001(\0132\".flyteidl."
  "admin.SettingsCollectionB\007\n\005level\"\361\002\n\031Fu"
  "llSettingsUpdateRequest\0223\n\014global_level\030"
  "\001 \001(\0132\033.flyteidl.admin.GlobalLevelH\000\0225\n\r"
  "project_level\030\002 \001(\0132\034.flyteidl.admin.Pro"
  "jectLevelH\000\0223\n\014domain_level\030\003 \001(\0132\033.flyt"
  "eidl.admin.DomainLevelH\000\0227\n\016workflow_lev"
  "el\030\004 \001(\0132\035.flyteidl.admin.WorkflowLevelH"
  "\000\022;\n\020launchplan_level\030\005 \001(\0132\037.flyteidl.a"
  "dmin.LaunchplanLevelH\000\0224\n\010settings\030\006 \001(\013"
  "2\".flyteidl.admin.SettingsCollectionB\007\n\005"
  "level\"\034\n\032FullSettingsUpdateResponse\"\264\002\n\022"
  "SettingsGetRequest\0223\n\014global_level\030\001 \001(\013"
  "2\033.flyteidl.admin.GlobalLevelH\000\0225\n\rproje"
  "ct_level\030\002 \001(\0132\034.flyteidl.admin.ProjectL"
  "evelH\000\0223\n\014domain_level\030\003 \001(\0132\033.flyteidl."
  "admin.DomainLevelH\000\0227\n\016workflow_level\030\004 "
  "\001(\0132\035.flyteidl.admin.WorkflowLevelH\000\022;\n\020"
  "launchplan_level\030\005 \001(\0132\037.flyteidl.admin."
  "LaunchplanLevelH\000B\007\n\005level\"\353\002\n\023SettingsG"
  "etResponse\0223\n\014global_level\030\001 \001(\0132\033.flyte"
  "idl.admin.GlobalLevelH\000\0225\n\rproject_level"
  "\030\002 \001(\0132\034.flyteidl.admin.ProjectLevelH\000\0223"
  "\n\014domain_level\030\003 \001(\0132\033.flyteidl.admin.Do"
  "mainLevelH\000\0227\n\016workflow_level\030\004 \001(\0132\035.fl"
  "yteidl.admin.WorkflowLevelH\000\022;\n\020launchpl"
  "an_level\030\005 \001(\0132\037.flyteidl.admin.Launchpl"
  "anLevelH\000\0224\n\010settings\030\006 \001(\0132\".flyteidl.a"
  "dmin.SettingsCollectionB\007\n\005level\"\030\n\026Full"
  "SettingsGetRequest\"E\n\027FullSettingsGetRes"
  "ponse\022*\n\010settings\030\001 \001(\0132\030.flyteidl.admin"
  ".Settings\"\267\002\n\025SettingsDeleteRequest\0223\n\014g"
  "lobal_level\030\001 \001(\0132\033.flyteidl.admin.Globa"
  "lLevelH\000\0225\n\rproject_level\030\002 \001(\0132\034.flytei"
  "dl.admin.ProjectLevelH\000\0223\n\014domain_level\030"
  "\003 \001(\0132\033.flyteidl.admin.DomainLevelH\000\0227\n\016"
  "workflow_level\030\004 \001(\0132\035.flyteidl.admin.Wo"
  "rkflowLevelH\000\022;\n\020launchplan_level\030\005 \001(\0132"
  "\037.flyteidl.admin.LaunchplanLevelH\000B\007\n\005le"
  "vel\"\030\n\026SettingsDeleteResponseB7Z5github."
  "com/flyteorg/flyteidl/gen/pb-go/flyteidl"
  "/adminb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_flyteidl_2fadmin_2fsettings_2eproto = {
  false, InitDefaults_flyteidl_2fadmin_2fsettings_2eproto, 
  descriptor_table_protodef_flyteidl_2fadmin_2fsettings_2eproto,
  "flyteidl/admin/settings.proto", &assign_descriptors_table_flyteidl_2fadmin_2fsettings_2eproto, 4094,
};

void AddDescriptors_flyteidl_2fadmin_2fsettings_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[3] =
  {
    ::AddDescriptors_flyteidl_2fadmin_2fcluster_5fassignment_2eproto,
    ::AddDescriptors_flyteidl_2fcore_2fexecution_2eproto,
    ::AddDescriptors_flyteidl_2fadmin_2fmatchable_5fresource_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_flyteidl_2fadmin_2fsettings_2eproto, deps, 3);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_flyteidl_2fadmin_2fsettings_2eproto = []() { AddDescriptors_flyteidl_2fadmin_2fsettings_2eproto(); return true; }();
namespace flyteidl {
namespace admin {

// ===================================================================

void SettingsCollection::InitAsDefaultInstance() {
  ::flyteidl::admin::_SettingsCollection_default_instance_._instance.get_mutable()->task_resource_settings_ = const_cast< ::flyteidl::admin::TaskResourceAttributes*>(
      ::flyteidl::admin::TaskResourceAttributes::internal_default_instance());
  ::flyteidl::admin::_SettingsCollection_default_instance_._instance.get_mutable()->cluster_resource_settings_ = const_cast< ::flyteidl::admin::ClusterResourceAttributes*>(
      ::flyteidl::admin::ClusterResourceAttributes::internal_default_instance());
  ::flyteidl::admin::_SettingsCollection_default_instance_._instance.get_mutable()->execution_queue_settings_ = const_cast< ::flyteidl::admin::ExecutionQueueAttributes*>(
      ::flyteidl::admin::ExecutionQueueAttributes::internal_default_instance());
  ::flyteidl::admin::_SettingsCollection_default_instance_._instance.get_mutable()->execution_cluster_label_settings_ = const_cast< ::flyteidl::admin::ExecutionClusterLabel*>(
      ::flyteidl::admin::ExecutionClusterLabel::internal_default_instance());
  ::flyteidl::admin::_SettingsCollection_default_instance_._instance.get_mutable()->quality_of_service_settings_ = const_cast< ::flyteidl::core::QualityOfService*>(
      ::flyteidl::core::QualityOfService::internal_default_instance());
  ::flyteidl::admin::_SettingsCollection_default_instance_._instance.get_mutable()->plugin_override_settings_ = const_cast< ::flyteidl::admin::PluginOverride*>(
      ::flyteidl::admin::PluginOverride::internal_default_instance());
  ::flyteidl::admin::_SettingsCollection_default_instance_._instance.get_mutable()->workflow_execution_settings_ = const_cast< ::flyteidl::admin::WorkflowExecutionConfig*>(
      ::flyteidl::admin::WorkflowExecutionConfig::internal_default_instance());
  ::flyteidl::admin::_SettingsCollection_default_instance_._instance.get_mutable()->cluster_assignment_settings_ = const_cast< ::flyteidl::admin::ClusterAssignment*>(
      ::flyteidl::admin::ClusterAssignment::internal_default_instance());
}
class SettingsCollection::HasBitSetters {
 public:
  static const ::flyteidl::admin::TaskResourceAttributes& task_resource_settings(const SettingsCollection* msg);
  static const ::flyteidl::admin::ClusterResourceAttributes& cluster_resource_settings(const SettingsCollection* msg);
  static const ::flyteidl::admin::ExecutionQueueAttributes& execution_queue_settings(const SettingsCollection* msg);
  static const ::flyteidl::admin::ExecutionClusterLabel& execution_cluster_label_settings(const SettingsCollection* msg);
  static const ::flyteidl::core::QualityOfService& quality_of_service_settings(const SettingsCollection* msg);
  static const ::flyteidl::admin::PluginOverride& plugin_override_settings(const SettingsCollection* msg);
  static const ::flyteidl::admin::WorkflowExecutionConfig& workflow_execution_settings(const SettingsCollection* msg);
  static const ::flyteidl::admin::ClusterAssignment& cluster_assignment_settings(const SettingsCollection* msg);
};

const ::flyteidl::admin::TaskResourceAttributes&
SettingsCollection::HasBitSetters::task_resource_settings(const SettingsCollection* msg) {
  return *msg->task_resource_settings_;
}
const ::flyteidl::admin::ClusterResourceAttributes&
SettingsCollection::HasBitSetters::cluster_resource_settings(const SettingsCollection* msg) {
  return *msg->cluster_resource_settings_;
}
const ::flyteidl::admin::ExecutionQueueAttributes&
SettingsCollection::HasBitSetters::execution_queue_settings(const SettingsCollection* msg) {
  return *msg->execution_queue_settings_;
}
const ::flyteidl::admin::ExecutionClusterLabel&
SettingsCollection::HasBitSetters::execution_cluster_label_settings(const SettingsCollection* msg) {
  return *msg->execution_cluster_label_settings_;
}
const ::flyteidl::core::QualityOfService&
SettingsCollection::HasBitSetters::quality_of_service_settings(const SettingsCollection* msg) {
  return *msg->quality_of_service_settings_;
}
const ::flyteidl::admin::PluginOverride&
SettingsCollection::HasBitSetters::plugin_override_settings(const SettingsCollection* msg) {
  return *msg->plugin_override_settings_;
}
const ::flyteidl::admin::WorkflowExecutionConfig&
SettingsCollection::HasBitSetters::workflow_execution_settings(const SettingsCollection* msg) {
  return *msg->workflow_execution_settings_;
}
const ::flyteidl::admin::ClusterAssignment&
SettingsCollection::HasBitSetters::cluster_assignment_settings(const SettingsCollection* msg) {
  return *msg->cluster_assignment_settings_;
}
void SettingsCollection::clear_task_resource_settings() {
  if (GetArenaNoVirtual() == nullptr && task_resource_settings_ != nullptr) {
    delete task_resource_settings_;
  }
  task_resource_settings_ = nullptr;
}
void SettingsCollection::clear_cluster_resource_settings() {
  if (GetArenaNoVirtual() == nullptr && cluster_resource_settings_ != nullptr) {
    delete cluster_resource_settings_;
  }
  cluster_resource_settings_ = nullptr;
}
void SettingsCollection::clear_execution_queue_settings() {
  if (GetArenaNoVirtual() == nullptr && execution_queue_settings_ != nullptr) {
    delete execution_queue_settings_;
  }
  execution_queue_settings_ = nullptr;
}
void SettingsCollection::clear_execution_cluster_label_settings() {
  if (GetArenaNoVirtual() == nullptr && execution_cluster_label_settings_ != nullptr) {
    delete execution_cluster_label_settings_;
  }
  execution_cluster_label_settings_ = nullptr;
}
void SettingsCollection::clear_quality_of_service_settings() {
  if (GetArenaNoVirtual() == nullptr && quality_of_service_settings_ != nullptr) {
    delete quality_of_service_settings_;
  }
  quality_of_service_settings_ = nullptr;
}
void SettingsCollection::clear_plugin_override_settings() {
  if (GetArenaNoVirtual() == nullptr && plugin_override_settings_ != nullptr) {
    delete plugin_override_settings_;
  }
  plugin_override_settings_ = nullptr;
}
void SettingsCollection::clear_workflow_execution_settings() {
  if (GetArenaNoVirtual() == nullptr && workflow_execution_settings_ != nullptr) {
    delete workflow_execution_settings_;
  }
  workflow_execution_settings_ = nullptr;
}
void SettingsCollection::clear_cluster_assignment_settings() {
  if (GetArenaNoVirtual() == nullptr && cluster_assignment_settings_ != nullptr) {
    delete cluster_assignment_settings_;
  }
  cluster_assignment_settings_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SettingsCollection::kTaskResourceSettingsFieldNumber;
const int SettingsCollection::kClusterResourceSettingsFieldNumber;
const int SettingsCollection::kExecutionQueueSettingsFieldNumber;
const int SettingsCollection::kExecutionClusterLabelSettingsFieldNumber;
const int SettingsCollection::kQualityOfServiceSettingsFieldNumber;
const int SettingsCollection::kPluginOverrideSettingsFieldNumber;
const int SettingsCollection::kWorkflowExecutionSettingsFieldNumber;
const int SettingsCollection::kClusterAssignmentSettingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SettingsCollection::SettingsCollection()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.SettingsCollection)
}
SettingsCollection::SettingsCollection(const SettingsCollection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_task_resource_settings()) {
    task_resource_settings_ = new ::flyteidl::admin::TaskResourceAttributes(*from.task_resource_settings_);
  } else {
    task_resource_settings_ = nullptr;
  }
  if (from.has_cluster_resource_settings()) {
    cluster_resource_settings_ = new ::flyteidl::admin::ClusterResourceAttributes(*from.cluster_resource_settings_);
  } else {
    cluster_resource_settings_ = nullptr;
  }
  if (from.has_execution_queue_settings()) {
    execution_queue_settings_ = new ::flyteidl::admin::ExecutionQueueAttributes(*from.execution_queue_settings_);
  } else {
    execution_queue_settings_ = nullptr;
  }
  if (from.has_execution_cluster_label_settings()) {
    execution_cluster_label_settings_ = new ::flyteidl::admin::ExecutionClusterLabel(*from.execution_cluster_label_settings_);
  } else {
    execution_cluster_label_settings_ = nullptr;
  }
  if (from.has_quality_of_service_settings()) {
    quality_of_service_settings_ = new ::flyteidl::core::QualityOfService(*from.quality_of_service_settings_);
  } else {
    quality_of_service_settings_ = nullptr;
  }
  if (from.has_plugin_override_settings()) {
    plugin_override_settings_ = new ::flyteidl::admin::PluginOverride(*from.plugin_override_settings_);
  } else {
    plugin_override_settings_ = nullptr;
  }
  if (from.has_workflow_execution_settings()) {
    workflow_execution_settings_ = new ::flyteidl::admin::WorkflowExecutionConfig(*from.workflow_execution_settings_);
  } else {
    workflow_execution_settings_ = nullptr;
  }
  if (from.has_cluster_assignment_settings()) {
    cluster_assignment_settings_ = new ::flyteidl::admin::ClusterAssignment(*from.cluster_assignment_settings_);
  } else {
    cluster_assignment_settings_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.SettingsCollection)
}

void SettingsCollection::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SettingsCollection_flyteidl_2fadmin_2fsettings_2eproto.base);
  ::memset(&task_resource_settings_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cluster_assignment_settings_) -
      reinterpret_cast<char*>(&task_resource_settings_)) + sizeof(cluster_assignment_settings_));
}

SettingsCollection::~SettingsCollection() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.SettingsCollection)
  SharedDtor();
}

void SettingsCollection::SharedDtor() {
  if (this != internal_default_instance()) delete task_resource_settings_;
  if (this != internal_default_instance()) delete cluster_resource_settings_;
  if (this != internal_default_instance()) delete execution_queue_settings_;
  if (this != internal_default_instance()) delete execution_cluster_label_settings_;
  if (this != internal_default_instance()) delete quality_of_service_settings_;
  if (this != internal_default_instance()) delete plugin_override_settings_;
  if (this != internal_default_instance()) delete workflow_execution_settings_;
  if (this != internal_default_instance()) delete cluster_assignment_settings_;
}

void SettingsCollection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SettingsCollection& SettingsCollection::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SettingsCollection_flyteidl_2fadmin_2fsettings_2eproto.base);
  return *internal_default_instance();
}


void SettingsCollection::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.SettingsCollection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && task_resource_settings_ != nullptr) {
    delete task_resource_settings_;
  }
  task_resource_settings_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && cluster_resource_settings_ != nullptr) {
    delete cluster_resource_settings_;
  }
  cluster_resource_settings_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && execution_queue_settings_ != nullptr) {
    delete execution_queue_settings_;
  }
  execution_queue_settings_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && execution_cluster_label_settings_ != nullptr) {
    delete execution_cluster_label_settings_;
  }
  execution_cluster_label_settings_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && quality_of_service_settings_ != nullptr) {
    delete quality_of_service_settings_;
  }
  quality_of_service_settings_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && plugin_override_settings_ != nullptr) {
    delete plugin_override_settings_;
  }
  plugin_override_settings_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && workflow_execution_settings_ != nullptr) {
    delete workflow_execution_settings_;
  }
  workflow_execution_settings_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && cluster_assignment_settings_ != nullptr) {
    delete cluster_assignment_settings_;
  }
  cluster_assignment_settings_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SettingsCollection::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SettingsCollection*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.admin.TaskResourceAttributes task_resource_settings = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::TaskResourceAttributes::_InternalParse;
        object = msg->mutable_task_resource_settings();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.ClusterResourceAttributes cluster_resource_settings = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::ClusterResourceAttributes::_InternalParse;
        object = msg->mutable_cluster_resource_settings();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.ExecutionQueueAttributes execution_queue_settings = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::ExecutionQueueAttributes::_InternalParse;
        object = msg->mutable_execution_queue_settings();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.ExecutionClusterLabel execution_cluster_label_settings = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::ExecutionClusterLabel::_InternalParse;
        object = msg->mutable_execution_cluster_label_settings();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.QualityOfService quality_of_service_settings = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::QualityOfService::_InternalParse;
        object = msg->mutable_quality_of_service_settings();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.PluginOverride plugin_override_settings = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::PluginOverride::_InternalParse;
        object = msg->mutable_plugin_override_settings();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.WorkflowExecutionConfig workflow_execution_settings = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::WorkflowExecutionConfig::_InternalParse;
        object = msg->mutable_workflow_execution_settings();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.ClusterAssignment cluster_assignment_settings = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::ClusterAssignment::_InternalParse;
        object = msg->mutable_cluster_assignment_settings();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SettingsCollection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.SettingsCollection)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.admin.TaskResourceAttributes task_resource_settings = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_task_resource_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.ClusterResourceAttributes cluster_resource_settings = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cluster_resource_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.ExecutionQueueAttributes execution_queue_settings = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_execution_queue_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.ExecutionClusterLabel execution_cluster_label_settings = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_execution_cluster_label_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.QualityOfService quality_of_service_settings = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_quality_of_service_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.PluginOverride plugin_override_settings = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_plugin_override_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.WorkflowExecutionConfig workflow_execution_settings = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_workflow_execution_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.ClusterAssignment cluster_assignment_settings = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cluster_assignment_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.SettingsCollection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.SettingsCollection)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SettingsCollection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.SettingsCollection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.admin.TaskResourceAttributes task_resource_settings = 1;
  if (this->has_task_resource_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::task_resource_settings(this), output);
  }

  // .flyteidl.admin.ClusterResourceAttributes cluster_resource_settings = 2;
  if (this->has_cluster_resource_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::cluster_resource_settings(this), output);
  }

  // .flyteidl.admin.ExecutionQueueAttributes execution_queue_settings = 3;
  if (this->has_execution_queue_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::execution_queue_settings(this), output);
  }

  // .flyteidl.admin.ExecutionClusterLabel execution_cluster_label_settings = 4;
  if (this->has_execution_cluster_label_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::execution_cluster_label_settings(this), output);
  }

  // .flyteidl.core.QualityOfService quality_of_service_settings = 5;
  if (this->has_quality_of_service_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::quality_of_service_settings(this), output);
  }

  // .flyteidl.admin.PluginOverride plugin_override_settings = 6;
  if (this->has_plugin_override_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::plugin_override_settings(this), output);
  }

  // .flyteidl.admin.WorkflowExecutionConfig workflow_execution_settings = 7;
  if (this->has_workflow_execution_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::workflow_execution_settings(this), output);
  }

  // .flyteidl.admin.ClusterAssignment cluster_assignment_settings = 8;
  if (this->has_cluster_assignment_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::cluster_assignment_settings(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.SettingsCollection)
}

::google::protobuf::uint8* SettingsCollection::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.SettingsCollection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.admin.TaskResourceAttributes task_resource_settings = 1;
  if (this->has_task_resource_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::task_resource_settings(this), target);
  }

  // .flyteidl.admin.ClusterResourceAttributes cluster_resource_settings = 2;
  if (this->has_cluster_resource_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::cluster_resource_settings(this), target);
  }

  // .flyteidl.admin.ExecutionQueueAttributes execution_queue_settings = 3;
  if (this->has_execution_queue_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::execution_queue_settings(this), target);
  }

  // .flyteidl.admin.ExecutionClusterLabel execution_cluster_label_settings = 4;
  if (this->has_execution_cluster_label_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::execution_cluster_label_settings(this), target);
  }

  // .flyteidl.core.QualityOfService quality_of_service_settings = 5;
  if (this->has_quality_of_service_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::quality_of_service_settings(this), target);
  }

  // .flyteidl.admin.PluginOverride plugin_override_settings = 6;
  if (this->has_plugin_override_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::plugin_override_settings(this), target);
  }

  // .flyteidl.admin.WorkflowExecutionConfig workflow_execution_settings = 7;
  if (this->has_workflow_execution_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::workflow_execution_settings(this), target);
  }

  // .flyteidl.admin.ClusterAssignment cluster_assignment_settings = 8;
  if (this->has_cluster_assignment_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::cluster_assignment_settings(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.SettingsCollection)
  return target;
}

size_t SettingsCollection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.SettingsCollection)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.admin.TaskResourceAttributes task_resource_settings = 1;
  if (this->has_task_resource_settings()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *task_resource_settings_);
  }

  // .flyteidl.admin.ClusterResourceAttributes cluster_resource_settings = 2;
  if (this->has_cluster_resource_settings()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *cluster_resource_settings_);
  }

  // .flyteidl.admin.ExecutionQueueAttributes execution_queue_settings = 3;
  if (this->has_execution_queue_settings()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *execution_queue_settings_);
  }

  // .flyteidl.admin.ExecutionClusterLabel execution_cluster_label_settings = 4;
  if (this->has_execution_cluster_label_settings()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *execution_cluster_label_settings_);
  }

  // .flyteidl.core.QualityOfService quality_of_service_settings = 5;
  if (this->has_quality_of_service_settings()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *quality_of_service_settings_);
  }

  // .flyteidl.admin.PluginOverride plugin_override_settings = 6;
  if (this->has_plugin_override_settings()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *plugin_override_settings_);
  }

  // .flyteidl.admin.WorkflowExecutionConfig workflow_execution_settings = 7;
  if (this->has_workflow_execution_settings()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *workflow_execution_settings_);
  }

  // .flyteidl.admin.ClusterAssignment cluster_assignment_settings = 8;
  if (this->has_cluster_assignment_settings()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *cluster_assignment_settings_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SettingsCollection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.SettingsCollection)
  GOOGLE_DCHECK_NE(&from, this);
  const SettingsCollection* source =
      ::google::protobuf::DynamicCastToGenerated<SettingsCollection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.SettingsCollection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.SettingsCollection)
    MergeFrom(*source);
  }
}

void SettingsCollection::MergeFrom(const SettingsCollection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.SettingsCollection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_task_resource_settings()) {
    mutable_task_resource_settings()->::flyteidl::admin::TaskResourceAttributes::MergeFrom(from.task_resource_settings());
  }
  if (from.has_cluster_resource_settings()) {
    mutable_cluster_resource_settings()->::flyteidl::admin::ClusterResourceAttributes::MergeFrom(from.cluster_resource_settings());
  }
  if (from.has_execution_queue_settings()) {
    mutable_execution_queue_settings()->::flyteidl::admin::ExecutionQueueAttributes::MergeFrom(from.execution_queue_settings());
  }
  if (from.has_execution_cluster_label_settings()) {
    mutable_execution_cluster_label_settings()->::flyteidl::admin::ExecutionClusterLabel::MergeFrom(from.execution_cluster_label_settings());
  }
  if (from.has_quality_of_service_settings()) {
    mutable_quality_of_service_settings()->::flyteidl::core::QualityOfService::MergeFrom(from.quality_of_service_settings());
  }
  if (from.has_plugin_override_settings()) {
    mutable_plugin_override_settings()->::flyteidl::admin::PluginOverride::MergeFrom(from.plugin_override_settings());
  }
  if (from.has_workflow_execution_settings()) {
    mutable_workflow_execution_settings()->::flyteidl::admin::WorkflowExecutionConfig::MergeFrom(from.workflow_execution_settings());
  }
  if (from.has_cluster_assignment_settings()) {
    mutable_cluster_assignment_settings()->::flyteidl::admin::ClusterAssignment::MergeFrom(from.cluster_assignment_settings());
  }
}

void SettingsCollection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.SettingsCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SettingsCollection::CopyFrom(const SettingsCollection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.SettingsCollection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SettingsCollection::IsInitialized() const {
  return true;
}

void SettingsCollection::Swap(SettingsCollection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SettingsCollection::InternalSwap(SettingsCollection* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(task_resource_settings_, other->task_resource_settings_);
  swap(cluster_resource_settings_, other->cluster_resource_settings_);
  swap(execution_queue_settings_, other->execution_queue_settings_);
  swap(execution_cluster_label_settings_, other->execution_cluster_label_settings_);
  swap(quality_of_service_settings_, other->quality_of_service_settings_);
  swap(plugin_override_settings_, other->plugin_override_settings_);
  swap(workflow_execution_settings_, other->workflow_execution_settings_);
  swap(cluster_assignment_settings_, other->cluster_assignment_settings_);
}

::google::protobuf::Metadata SettingsCollection::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fsettings_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fsettings_2eproto[kIndexInFileMessages];
}


// ===================================================================

Settings_ProjectSettingsEntry_DoNotUse::Settings_ProjectSettingsEntry_DoNotUse() {}
Settings_ProjectSettingsEntry_DoNotUse::Settings_ProjectSettingsEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void Settings_ProjectSettingsEntry_DoNotUse::MergeFrom(const Settings_ProjectSettingsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata Settings_ProjectSettingsEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fsettings_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fsettings_2eproto[1];
}
void Settings_ProjectSettingsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Settings_ProjectSettingsEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      Settings_ProjectSettingsEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "flyteidl.admin.Settings.ProjectSettingsEntry.key"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void Settings::InitAsDefaultInstance() {
  ::flyteidl::admin::_Settings_default_instance_._instance.get_mutable()->global_ = const_cast< ::flyteidl::admin::SettingsCollection*>(
      ::flyteidl::admin::SettingsCollection::internal_default_instance());
}
class Settings::HasBitSetters {
 public:
  static const ::flyteidl::admin::SettingsCollection& global(const Settings* msg);
};

const ::flyteidl::admin::SettingsCollection&
Settings::HasBitSetters::global(const Settings* msg) {
  return *msg->global_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Settings::kGlobalFieldNumber;
const int Settings::kProjectSettingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Settings::Settings()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.Settings)
}
Settings::Settings(const Settings& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_settings_.MergeFrom(from.project_settings_);
  if (from.has_global()) {
    global_ = new ::flyteidl::admin::SettingsCollection(*from.global_);
  } else {
    global_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.Settings)
}

void Settings::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Settings_flyteidl_2fadmin_2fsettings_2eproto.base);
  global_ = nullptr;
}

Settings::~Settings() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.Settings)
  SharedDtor();
}

void Settings::SharedDtor() {
  if (this != internal_default_instance()) delete global_;
}

void Settings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Settings& Settings::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Settings_flyteidl_2fadmin_2fsettings_2eproto.base);
  return *internal_default_instance();
}


void Settings::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.Settings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  project_settings_.Clear();
  if (GetArenaNoVirtual() == nullptr && global_ != nullptr) {
    delete global_;
  }
  global_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Settings::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Settings*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.admin.SettingsCollection global = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::SettingsCollection::_InternalParse;
        object = msg->mutable_global();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // map<string, .flyteidl.admin.ProjectSettings> project_settings = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::flyteidl::admin::Settings_ProjectSettingsEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->project_settings_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Settings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.Settings)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.admin.SettingsCollection global = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_global()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .flyteidl.admin.ProjectSettings> project_settings = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          Settings_ProjectSettingsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              Settings_ProjectSettingsEntry_DoNotUse,
              ::std::string, ::flyteidl::admin::ProjectSettings,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::flyteidl::admin::ProjectSettings > > parser(&project_settings_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.Settings.ProjectSettingsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.Settings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.Settings)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Settings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.Settings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.admin.SettingsCollection global = 1;
  if (this->has_global()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::global(this), output);
  }

  // map<string, .flyteidl.admin.ProjectSettings> project_settings = 2;
  if (!this->project_settings().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::flyteidl::admin::ProjectSettings >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.admin.Settings.ProjectSettingsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->project_settings().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->project_settings().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::flyteidl::admin::ProjectSettings >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::flyteidl::admin::ProjectSettings >::const_iterator
          it = this->project_settings().begin();
          it != this->project_settings().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Settings_ProjectSettingsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(project_settings_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(2, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<Settings_ProjectSettingsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::flyteidl::admin::ProjectSettings >::const_iterator
          it = this->project_settings().begin();
          it != this->project_settings().end(); ++it) {
        entry.reset(project_settings_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(2, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.Settings)
}

::google::protobuf::uint8* Settings::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.Settings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.admin.SettingsCollection global = 1;
  if (this->has_global()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::global(this), target);
  }

  // map<string, .flyteidl.admin.ProjectSettings> project_settings = 2;
  if (!this->project_settings().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::flyteidl::admin::ProjectSettings >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.admin.Settings.ProjectSettingsEntry.key");
      }
    };

    if (false &&
        this->project_settings().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->project_settings().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::flyteidl::admin::ProjectSettings >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::flyteidl::admin::ProjectSettings >::const_iterator
          it = this->project_settings().begin();
          it != this->project_settings().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Settings_ProjectSettingsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(project_settings_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(2, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<Settings_ProjectSettingsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::flyteidl::admin::ProjectSettings >::const_iterator
          it = this->project_settings().begin();
          it != this->project_settings().end(); ++it) {
        entry.reset(project_settings_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(2, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.Settings)
  return target;
}

size_t Settings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.Settings)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .flyteidl.admin.ProjectSettings> project_settings = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->project_settings_size());
  {
    ::std::unique_ptr<Settings_ProjectSettingsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::flyteidl::admin::ProjectSettings >::const_iterator
        it = this->project_settings().begin();
        it != this->project_settings().end(); ++it) {
      entry.reset(project_settings_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // .flyteidl.admin.SettingsCollection global = 1;
  if (this->has_global()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *global_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Settings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.Settings)
  GOOGLE_DCHECK_NE(&from, this);
  const Settings* source =
      ::google::protobuf::DynamicCastToGenerated<Settings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.Settings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.Settings)
    MergeFrom(*source);
  }
}

void Settings::MergeFrom(const Settings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.Settings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  project_settings_.MergeFrom(from.project_settings_);
  if (from.has_global()) {
    mutable_global()->::flyteidl::admin::SettingsCollection::MergeFrom(from.global());
  }
}

void Settings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.Settings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Settings::CopyFrom(const Settings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.Settings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Settings::IsInitialized() const {
  return true;
}

void Settings::Swap(Settings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Settings::InternalSwap(Settings* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  project_settings_.Swap(&other->project_settings_);
  swap(global_, other->global_);
}

::google::protobuf::Metadata Settings::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fsettings_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fsettings_2eproto[kIndexInFileMessages];
}


// ===================================================================

ProjectSettings_DomainSettingsEntry_DoNotUse::ProjectSettings_DomainSettingsEntry_DoNotUse() {}
ProjectSettings_DomainSettingsEntry_DoNotUse::ProjectSettings_DomainSettingsEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void ProjectSettings_DomainSettingsEntry_DoNotUse::MergeFrom(const ProjectSettings_DomainSettingsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata ProjectSettings_DomainSettingsEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fsettings_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fsettings_2eproto[3];
}
void ProjectSettings_DomainSettingsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProjectSettings_DomainSettingsEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      ProjectSettings_DomainSettingsEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "flyteidl.admin.ProjectSettings.DomainSettingsEntry.key"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void ProjectSettings::InitAsDefaultInstance() {
  ::flyteidl::admin::_ProjectSettings_default_instance_._instance.get_mutable()->settings_ = const_cast< ::flyteidl::admin::SettingsCollection*>(
      ::flyteidl::admin::SettingsCollection::internal_default_instance());
}
class ProjectSettings::HasBitSetters {
 public:
  static const ::flyteidl::admin::SettingsCollection& settings(const ProjectSettings* msg);
};

const ::flyteidl::admin::SettingsCollection&
ProjectSettings::HasBitSetters::settings(const ProjectSettings* msg) {
  return *msg->settings_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProjectSettings::kProjectFieldNumber;
const int ProjectSettings::kSettingsFieldNumber;
const int ProjectSettings::kDomainSettingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProjectSettings::ProjectSettings()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.ProjectSettings)
}
ProjectSettings::ProjectSettings(const ProjectSettings& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  domain_settings_.MergeFrom(from.domain_settings_);
  project_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project().size() > 0) {
    project_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_);
  }
  if (from.has_settings()) {
    settings_ = new ::flyteidl::admin::SettingsCollection(*from.settings_);
  } else {
    settings_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.ProjectSettings)
}

void ProjectSettings::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ProjectSettings_flyteidl_2fadmin_2fsettings_2eproto.base);
  project_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  settings_ = nullptr;
}

ProjectSettings::~ProjectSettings() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.ProjectSettings)
  SharedDtor();
}

void ProjectSettings::SharedDtor() {
  project_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete settings_;
}

void ProjectSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProjectSettings& ProjectSettings::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ProjectSettings_flyteidl_2fadmin_2fsettings_2eproto.base);
  return *internal_default_instance();
}


void ProjectSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.ProjectSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  domain_settings_.Clear();
  project_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProjectSettings::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ProjectSettings*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string project = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.ProjectSettings.project");
        object = msg->mutable_project();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .flyteidl.admin.SettingsCollection settings = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::SettingsCollection::_InternalParse;
        object = msg->mutable_settings();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // map<string, .flyteidl.admin.DomainSettings> domain_settings = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::flyteidl::admin::ProjectSettings_DomainSettingsEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->domain_settings_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProjectSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.ProjectSettings)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project().data(), static_cast<int>(this->project().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.ProjectSettings.project"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.SettingsCollection settings = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .flyteidl.admin.DomainSettings> domain_settings = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          ProjectSettings_DomainSettingsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              ProjectSettings_DomainSettingsEntry_DoNotUse,
              ::std::string, ::flyteidl::admin::DomainSettings,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::flyteidl::admin::DomainSettings > > parser(&domain_settings_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.ProjectSettings.DomainSettingsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.ProjectSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.ProjectSettings)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProjectSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.ProjectSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project().data(), static_cast<int>(this->project().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.ProjectSettings.project");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project(), output);
  }

  // .flyteidl.admin.SettingsCollection settings = 2;
  if (this->has_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::settings(this), output);
  }

  // map<string, .flyteidl.admin.DomainSettings> domain_settings = 3;
  if (!this->domain_settings().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::flyteidl::admin::DomainSettings >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.admin.ProjectSettings.DomainSettingsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->domain_settings().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->domain_settings().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::flyteidl::admin::DomainSettings >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::flyteidl::admin::DomainSettings >::const_iterator
          it = this->domain_settings().begin();
          it != this->domain_settings().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<ProjectSettings_DomainSettingsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(domain_settings_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<ProjectSettings_DomainSettingsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::flyteidl::admin::DomainSettings >::const_iterator
          it = this->domain_settings().begin();
          it != this->domain_settings().end(); ++it) {
        entry.reset(domain_settings_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.ProjectSettings)
}

::google::protobuf::uint8* ProjectSettings::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.ProjectSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project().data(), static_cast<int>(this->project().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.ProjectSettings.project");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project(), target);
  }

  // .flyteidl.admin.SettingsCollection settings = 2;
  if (this->has_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::settings(this), target);
  }

  // map<string, .flyteidl.admin.DomainSettings> domain_settings = 3;
  if (!this->domain_settings().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::flyteidl::admin::DomainSettings >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.admin.ProjectSettings.DomainSettingsEntry.key");
      }
    };

    if (false &&
        this->domain_settings().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->domain_settings().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::flyteidl::admin::DomainSettings >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::flyteidl::admin::DomainSettings >::const_iterator
          it = this->domain_settings().begin();
          it != this->domain_settings().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<ProjectSettings_DomainSettingsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(domain_settings_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(3, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<ProjectSettings_DomainSettingsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::flyteidl::admin::DomainSettings >::const_iterator
          it = this->domain_settings().begin();
          it != this->domain_settings().end(); ++it) {
        entry.reset(domain_settings_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(3, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.ProjectSettings)
  return target;
}

size_t ProjectSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.ProjectSettings)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .flyteidl.admin.DomainSettings> domain_settings = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->domain_settings_size());
  {
    ::std::unique_ptr<ProjectSettings_DomainSettingsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::flyteidl::admin::DomainSettings >::const_iterator
        it = this->domain_settings().begin();
        it != this->domain_settings().end(); ++it) {
      entry.reset(domain_settings_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string project = 1;
  if (this->project().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project());
  }

  // .flyteidl.admin.SettingsCollection settings = 2;
  if (this->has_settings()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *settings_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProjectSettings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.ProjectSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const ProjectSettings* source =
      ::google::protobuf::DynamicCastToGenerated<ProjectSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.ProjectSettings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.ProjectSettings)
    MergeFrom(*source);
  }
}

void ProjectSettings::MergeFrom(const ProjectSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.ProjectSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  domain_settings_.MergeFrom(from.domain_settings_);
  if (from.project().size() > 0) {

    project_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_);
  }
  if (from.has_settings()) {
    mutable_settings()->::flyteidl::admin::SettingsCollection::MergeFrom(from.settings());
  }
}

void ProjectSettings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.ProjectSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProjectSettings::CopyFrom(const ProjectSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.ProjectSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjectSettings::IsInitialized() const {
  return true;
}

void ProjectSettings::Swap(ProjectSettings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProjectSettings::InternalSwap(ProjectSettings* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  domain_settings_.Swap(&other->domain_settings_);
  project_.Swap(&other->project_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(settings_, other->settings_);
}

::google::protobuf::Metadata ProjectSettings::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fsettings_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fsettings_2eproto[kIndexInFileMessages];
}


// ===================================================================

DomainSettings_WorkflowSettingsEntry_DoNotUse::DomainSettings_WorkflowSettingsEntry_DoNotUse() {}
DomainSettings_WorkflowSettingsEntry_DoNotUse::DomainSettings_WorkflowSettingsEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void DomainSettings_WorkflowSettingsEntry_DoNotUse::MergeFrom(const DomainSettings_WorkflowSettingsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata DomainSettings_WorkflowSettingsEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fsettings_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fsettings_2eproto[5];
}
void DomainSettings_WorkflowSettingsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DomainSettings_WorkflowSettingsEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      DomainSettings_WorkflowSettingsEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "flyteidl.admin.DomainSettings.WorkflowSettingsEntry.key"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void DomainSettings::InitAsDefaultInstance() {
  ::flyteidl::admin::_DomainSettings_default_instance_._instance.get_mutable()->settings_ = const_cast< ::flyteidl::admin::SettingsCollection*>(
      ::flyteidl::admin::SettingsCollection::internal_default_instance());
}
class DomainSettings::HasBitSetters {
 public:
  static const ::flyteidl::admin::SettingsCollection& settings(const DomainSettings* msg);
};

const ::flyteidl::admin::SettingsCollection&
DomainSettings::HasBitSetters::settings(const DomainSettings* msg) {
  return *msg->settings_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DomainSettings::kDomainFieldNumber;
const int DomainSettings::kSettingsFieldNumber;
const int DomainSettings::kWorkflowSettingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DomainSettings::DomainSettings()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.DomainSettings)
}
DomainSettings::DomainSettings(const DomainSettings& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  workflow_settings_.MergeFrom(from.workflow_settings_);
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.domain().size() > 0) {
    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  if (from.has_settings()) {
    settings_ = new ::flyteidl::admin::SettingsCollection(*from.settings_);
  } else {
    settings_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.DomainSettings)
}

void DomainSettings::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DomainSettings_flyteidl_2fadmin_2fsettings_2eproto.base);
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  settings_ = nullptr;
}

DomainSettings::~DomainSettings() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.DomainSettings)
  SharedDtor();
}

void DomainSettings::SharedDtor() {
  domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete settings_;
}

void DomainSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DomainSettings& DomainSettings::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DomainSettings_flyteidl_2fadmin_2fsettings_2eproto.base);
  return *internal_default_instance();
}


void DomainSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.DomainSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  workflow_settings_.Clear();
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DomainSettings::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DomainSettings*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string domain = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.DomainSettings.domain");
        object = msg->mutable_domain();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .flyteidl.admin.SettingsCollection settings = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::SettingsCollection::_InternalParse;
        object = msg->mutable_settings();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // map<string, .flyteidl.admin.WorkflowSettings> workflow_settings = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::flyteidl::admin::DomainSettings_WorkflowSettingsEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->workflow_settings_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DomainSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.DomainSettings)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string domain = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->domain().data(), static_cast<int>(this->domain().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.DomainSettings.domain"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.SettingsCollection settings = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .flyteidl.admin.WorkflowSettings> workflow_settings = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DomainSettings_WorkflowSettingsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              DomainSettings_WorkflowSettingsEntry_DoNotUse,
              ::std::string, ::flyteidl::admin::WorkflowSettings,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::flyteidl::admin::WorkflowSettings > > parser(&workflow_settings_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.DomainSettings.WorkflowSettingsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.DomainSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.DomainSettings)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DomainSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.DomainSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string domain = 1;
  if (this->domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), static_cast<int>(this->domain().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.DomainSettings.domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->domain(), output);
  }

  // .flyteidl.admin.SettingsCollection settings = 2;
  if (this->has_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::settings(this), output);
  }

  // map<string, .flyteidl.admin.WorkflowSettings> workflow_settings = 3;
  if (!this->workflow_settings().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::flyteidl::admin::WorkflowSettings >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.admin.DomainSettings.WorkflowSettingsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->workflow_settings().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->workflow_settings().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::flyteidl::admin::WorkflowSettings >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::flyteidl::admin::WorkflowSettings >::const_iterator
          it = this->workflow_settings().begin();
          it != this->workflow_settings().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<DomainSettings_WorkflowSettingsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(workflow_settings_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<DomainSettings_WorkflowSettingsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::flyteidl::admin::WorkflowSettings >::const_iterator
          it = this->workflow_settings().begin();
          it != this->workflow_settings().end(); ++it) {
        entry.reset(workflow_settings_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.DomainSettings)
}

::google::protobuf::uint8* DomainSettings::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.DomainSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string domain = 1;
  if (this->domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), static_cast<int>(this->domain().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.DomainSettings.domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->domain(), target);
  }

  // .flyteidl.admin.SettingsCollection settings = 2;
  if (this->has_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::settings(this), target);
  }

  // map<string, .flyteidl.admin.WorkflowSettings> workflow_settings = 3;
  if (!this->workflow_settings().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::flyteidl::admin::WorkflowSettings >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.admin.DomainSettings.WorkflowSettingsEntry.key");
      }
    };

    if (false &&
        this->workflow_settings().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->workflow_settings().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::flyteidl::admin::WorkflowSettings >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::flyteidl::admin::WorkflowSettings >::const_iterator
          it = this->workflow_settings().begin();
          it != this->workflow_settings().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<DomainSettings_WorkflowSettingsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(workflow_settings_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(3, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<DomainSettings_WorkflowSettingsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::flyteidl::admin::WorkflowSettings >::const_iterator
          it = this->workflow_settings().begin();
          it != this->workflow_settings().end(); ++it) {
        entry.reset(workflow_settings_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(3, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.DomainSettings)
  return target;
}

size_t DomainSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.DomainSettings)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .flyteidl.admin.WorkflowSettings> workflow_settings = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->workflow_settings_size());
  {
    ::std::unique_ptr<DomainSettings_WorkflowSettingsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::flyteidl::admin::WorkflowSettings >::const_iterator
        it = this->workflow_settings().begin();
        it != this->workflow_settings().end(); ++it) {
      entry.reset(workflow_settings_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string domain = 1;
  if (this->domain().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->domain());
  }

  // .flyteidl.admin.SettingsCollection settings = 2;
  if (this->has_settings()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *settings_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DomainSettings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.DomainSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const DomainSettings* source =
      ::google::protobuf::DynamicCastToGenerated<DomainSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.DomainSettings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.DomainSettings)
    MergeFrom(*source);
  }
}

void DomainSettings::MergeFrom(const DomainSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.DomainSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  workflow_settings_.MergeFrom(from.workflow_settings_);
  if (from.domain().size() > 0) {

    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  if (from.has_settings()) {
    mutable_settings()->::flyteidl::admin::SettingsCollection::MergeFrom(from.settings());
  }
}

void DomainSettings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.DomainSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DomainSettings::CopyFrom(const DomainSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.DomainSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DomainSettings::IsInitialized() const {
  return true;
}

void DomainSettings::Swap(DomainSettings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DomainSettings::InternalSwap(DomainSettings* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  workflow_settings_.Swap(&other->workflow_settings_);
  domain_.Swap(&other->domain_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(settings_, other->settings_);
}

::google::protobuf::Metadata DomainSettings::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fsettings_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fsettings_2eproto[kIndexInFileMessages];
}


// ===================================================================

WorkflowSettings_LaunchplanSettingsEntry_DoNotUse::WorkflowSettings_LaunchplanSettingsEntry_DoNotUse() {}
WorkflowSettings_LaunchplanSettingsEntry_DoNotUse::WorkflowSettings_LaunchplanSettingsEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void WorkflowSettings_LaunchplanSettingsEntry_DoNotUse::MergeFrom(const WorkflowSettings_LaunchplanSettingsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata WorkflowSettings_LaunchplanSettingsEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fsettings_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fsettings_2eproto[7];
}
void WorkflowSettings_LaunchplanSettingsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WorkflowSettings_LaunchplanSettingsEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      WorkflowSettings_LaunchplanSettingsEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "flyteidl.admin.WorkflowSettings.LaunchplanSettingsEntry.key"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void WorkflowSettings::InitAsDefaultInstance() {
  ::flyteidl::admin::_WorkflowSettings_default_instance_._instance.get_mutable()->settings_ = const_cast< ::flyteidl::admin::SettingsCollection*>(
      ::flyteidl::admin::SettingsCollection::internal_default_instance());
}
class WorkflowSettings::HasBitSetters {
 public:
  static const ::flyteidl::admin::SettingsCollection& settings(const WorkflowSettings* msg);
};

const ::flyteidl::admin::SettingsCollection&
WorkflowSettings::HasBitSetters::settings(const WorkflowSettings* msg) {
  return *msg->settings_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorkflowSettings::kWorkflowFieldNumber;
const int WorkflowSettings::kSettingsFieldNumber;
const int WorkflowSettings::kLaunchplanSettingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorkflowSettings::WorkflowSettings()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.WorkflowSettings)
}
WorkflowSettings::WorkflowSettings(const WorkflowSettings& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  launchplan_settings_.MergeFrom(from.launchplan_settings_);
  workflow_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.workflow().size() > 0) {
    workflow_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.workflow_);
  }
  if (from.has_settings()) {
    settings_ = new ::flyteidl::admin::SettingsCollection(*from.settings_);
  } else {
    settings_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.WorkflowSettings)
}

void WorkflowSettings::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_WorkflowSettings_flyteidl_2fadmin_2fsettings_2eproto.base);
  workflow_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  settings_ = nullptr;
}

WorkflowSettings::~WorkflowSettings() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.WorkflowSettings)
  SharedDtor();
}

void WorkflowSettings::SharedDtor() {
  workflow_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete settings_;
}

void WorkflowSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkflowSettings& WorkflowSettings::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_WorkflowSettings_flyteidl_2fadmin_2fsettings_2eproto.base);
  return *internal_default_instance();
}


void WorkflowSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.WorkflowSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  launchplan_settings_.Clear();
  workflow_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WorkflowSettings::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<WorkflowSettings*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string workflow = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.WorkflowSettings.workflow");
        object = msg->mutable_workflow();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .flyteidl.admin.SettingsCollection settings = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::SettingsCollection::_InternalParse;
        object = msg->mutable_settings();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // map<string, .flyteidl.admin.LaunchplanSettings> launchplan_settings = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::flyteidl::admin::WorkflowSettings_LaunchplanSettingsEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->launchplan_settings_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WorkflowSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.WorkflowSettings)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string workflow = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_workflow()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->workflow().data(), static_cast<int>(this->workflow().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.WorkflowSettings.workflow"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.SettingsCollection settings = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .flyteidl.admin.LaunchplanSettings> launchplan_settings = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          WorkflowSettings_LaunchplanSettingsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              WorkflowSettings_LaunchplanSettingsEntry_DoNotUse,
              ::std::string, ::flyteidl::admin::LaunchplanSettings,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::flyteidl::admin::LaunchplanSettings > > parser(&launchplan_settings_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.WorkflowSettings.LaunchplanSettingsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.WorkflowSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.WorkflowSettings)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WorkflowSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.WorkflowSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string workflow = 1;
  if (this->workflow().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->workflow().data(), static_cast<int>(this->workflow().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.WorkflowSettings.workflow");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->workflow(), output);
  }

  // .flyteidl.admin.SettingsCollection settings = 2;
  if (this->has_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::settings(this), output);
  }

  // map<string, .flyteidl.admin.LaunchplanSettings> launchplan_settings = 3;
  if (!this->launchplan_settings().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::flyteidl::admin::LaunchplanSettings >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.admin.WorkflowSettings.LaunchplanSettingsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->launchplan_settings().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->launchplan_settings().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::flyteidl::admin::LaunchplanSettings >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::flyteidl::admin::LaunchplanSettings >::const_iterator
          it = this->launchplan_settings().begin();
          it != this->launchplan_settings().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<WorkflowSettings_LaunchplanSettingsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(launchplan_settings_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<WorkflowSettings_LaunchplanSettingsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::flyteidl::admin::LaunchplanSettings >::const_iterator
          it = this->launchplan_settings().begin();
          it != this->launchplan_settings().end(); ++it) {
        entry.reset(launchplan_settings_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.WorkflowSettings)
}

::google::protobuf::uint8* WorkflowSettings::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.WorkflowSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string workflow = 1;
  if (this->workflow().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->workflow().data(), static_cast<int>(this->workflow().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.WorkflowSettings.workflow");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->workflow(), target);
  }

  // .flyteidl.admin.SettingsCollection settings = 2;
  if (this->has_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::settings(this), target);
  }

  // map<string, .flyteidl.admin.LaunchplanSettings> launchplan_settings = 3;
  if (!this->launchplan_settings().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::flyteidl::admin::LaunchplanSettings >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.admin.WorkflowSettings.LaunchplanSettingsEntry.key");
      }
    };

    if (false &&
        this->launchplan_settings().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->launchplan_settings().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::flyteidl::admin::LaunchplanSettings >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::flyteidl::admin::LaunchplanSettings >::const_iterator
          it = this->launchplan_settings().begin();
          it != this->launchplan_settings().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<WorkflowSettings_LaunchplanSettingsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(launchplan_settings_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(3, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<WorkflowSettings_LaunchplanSettingsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::flyteidl::admin::LaunchplanSettings >::const_iterator
          it = this->launchplan_settings().begin();
          it != this->launchplan_settings().end(); ++it) {
        entry.reset(launchplan_settings_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(3, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.WorkflowSettings)
  return target;
}

size_t WorkflowSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.WorkflowSettings)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .flyteidl.admin.LaunchplanSettings> launchplan_settings = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->launchplan_settings_size());
  {
    ::std::unique_ptr<WorkflowSettings_LaunchplanSettingsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::flyteidl::admin::LaunchplanSettings >::const_iterator
        it = this->launchplan_settings().begin();
        it != this->launchplan_settings().end(); ++it) {
      entry.reset(launchplan_settings_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string workflow = 1;
  if (this->workflow().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->workflow());
  }

  // .flyteidl.admin.SettingsCollection settings = 2;
  if (this->has_settings()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *settings_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkflowSettings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.WorkflowSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkflowSettings* source =
      ::google::protobuf::DynamicCastToGenerated<WorkflowSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.WorkflowSettings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.WorkflowSettings)
    MergeFrom(*source);
  }
}

void WorkflowSettings::MergeFrom(const WorkflowSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.WorkflowSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  launchplan_settings_.MergeFrom(from.launchplan_settings_);
  if (from.workflow().size() > 0) {

    workflow_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.workflow_);
  }
  if (from.has_settings()) {
    mutable_settings()->::flyteidl::admin::SettingsCollection::MergeFrom(from.settings());
  }
}

void WorkflowSettings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.WorkflowSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkflowSettings::CopyFrom(const WorkflowSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.WorkflowSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowSettings::IsInitialized() const {
  return true;
}

void WorkflowSettings::Swap(WorkflowSettings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorkflowSettings::InternalSwap(WorkflowSettings* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  launchplan_settings_.Swap(&other->launchplan_settings_);
  workflow_.Swap(&other->workflow_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(settings_, other->settings_);
}

::google::protobuf::Metadata WorkflowSettings::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fsettings_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fsettings_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LaunchplanSettings::InitAsDefaultInstance() {
  ::flyteidl::admin::_LaunchplanSettings_default_instance_._instance.get_mutable()->settings_ = const_cast< ::flyteidl::admin::SettingsCollection*>(
      ::flyteidl::admin::SettingsCollection::internal_default_instance());
}
class LaunchplanSettings::HasBitSetters {
 public:
  static const ::flyteidl::admin::SettingsCollection& settings(const LaunchplanSettings* msg);
};

const ::flyteidl::admin::SettingsCollection&
LaunchplanSettings::HasBitSetters::settings(const LaunchplanSettings* msg) {
  return *msg->settings_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaunchplanSettings::kLaunchplanFieldNumber;
const int LaunchplanSettings::kSettingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaunchplanSettings::LaunchplanSettings()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.LaunchplanSettings)
}
LaunchplanSettings::LaunchplanSettings(const LaunchplanSettings& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  launchplan_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.launchplan().size() > 0) {
    launchplan_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.launchplan_);
  }
  if (from.has_settings()) {
    settings_ = new ::flyteidl::admin::SettingsCollection(*from.settings_);
  } else {
    settings_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.LaunchplanSettings)
}

void LaunchplanSettings::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LaunchplanSettings_flyteidl_2fadmin_2fsettings_2eproto.base);
  launchplan_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  settings_ = nullptr;
}

LaunchplanSettings::~LaunchplanSettings() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.LaunchplanSettings)
  SharedDtor();
}

void LaunchplanSettings::SharedDtor() {
  launchplan_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete settings_;
}

void LaunchplanSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaunchplanSettings& LaunchplanSettings::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LaunchplanSettings_flyteidl_2fadmin_2fsettings_2eproto.base);
  return *internal_default_instance();
}


void LaunchplanSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.LaunchplanSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  launchplan_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LaunchplanSettings::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LaunchplanSettings*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string launchplan = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.LaunchplanSettings.launchplan");
        object = msg->mutable_launchplan();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .flyteidl.admin.SettingsCollection settings = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::SettingsCollection::_InternalParse;
        object = msg->mutable_settings();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LaunchplanSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.LaunchplanSettings)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string launchplan = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_launchplan()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->launchplan().data(), static_cast<int>(this->launchplan().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.LaunchplanSettings.launchplan"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.SettingsCollection settings = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.LaunchplanSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.LaunchplanSettings)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LaunchplanSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.LaunchplanSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string launchplan = 1;
  if (this->launchplan().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->launchplan().data(), static_cast<int>(this->launchplan().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.LaunchplanSettings.launchplan");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->launchplan(), output);
  }

  // .flyteidl.admin.SettingsCollection settings = 2;
  if (this->has_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::settings(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.LaunchplanSettings)
}

::google::protobuf::uint8* LaunchplanSettings::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.LaunchplanSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string launchplan = 1;
  if (this->launchplan().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->launchplan().data(), static_cast<int>(this->launchplan().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.LaunchplanSettings.launchplan");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->launchplan(), target);
  }

  // .flyteidl.admin.SettingsCollection settings = 2;
  if (this->has_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::settings(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.LaunchplanSettings)
  return target;
}

size_t LaunchplanSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.LaunchplanSettings)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string launchplan = 1;
  if (this->launchplan().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->launchplan());
  }

  // .flyteidl.admin.SettingsCollection settings = 2;
  if (this->has_settings()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *settings_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaunchplanSettings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.LaunchplanSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const LaunchplanSettings* source =
      ::google::protobuf::DynamicCastToGenerated<LaunchplanSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.LaunchplanSettings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.LaunchplanSettings)
    MergeFrom(*source);
  }
}

void LaunchplanSettings::MergeFrom(const LaunchplanSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.LaunchplanSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.launchplan().size() > 0) {

    launchplan_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.launchplan_);
  }
  if (from.has_settings()) {
    mutable_settings()->::flyteidl::admin::SettingsCollection::MergeFrom(from.settings());
  }
}

void LaunchplanSettings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.LaunchplanSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaunchplanSettings::CopyFrom(const LaunchplanSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.LaunchplanSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaunchplanSettings::IsInitialized() const {
  return true;
}

void LaunchplanSettings::Swap(LaunchplanSettings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaunchplanSettings::InternalSwap(LaunchplanSettings* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  launchplan_.Swap(&other->launchplan_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(settings_, other->settings_);
}

::google::protobuf::Metadata LaunchplanSettings::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fsettings_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fsettings_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GlobalLevel::InitAsDefaultInstance() {
}
class GlobalLevel::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GlobalLevel::GlobalLevel()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.GlobalLevel)
}
GlobalLevel::GlobalLevel(const GlobalLevel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.GlobalLevel)
}

void GlobalLevel::SharedCtor() {
}

GlobalLevel::~GlobalLevel() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.GlobalLevel)
  SharedDtor();
}

void GlobalLevel::SharedDtor() {
}

void GlobalLevel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalLevel& GlobalLevel::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GlobalLevel_flyteidl_2fadmin_2fsettings_2eproto.base);
  return *internal_default_instance();
}


void GlobalLevel::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.GlobalLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalLevel::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GlobalLevel*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.GlobalLevel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.GlobalLevel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.GlobalLevel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.GlobalLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.GlobalLevel)
}

::google::protobuf::uint8* GlobalLevel::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.GlobalLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.GlobalLevel)
  return target;
}

size_t GlobalLevel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.GlobalLevel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalLevel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.GlobalLevel)
  GOOGLE_DCHECK_NE(&from, this);
  const GlobalLevel* source =
      ::google::protobuf::DynamicCastToGenerated<GlobalLevel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.GlobalLevel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.GlobalLevel)
    MergeFrom(*source);
  }
}

void GlobalLevel::MergeFrom(const GlobalLevel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.GlobalLevel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GlobalLevel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.GlobalLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalLevel::CopyFrom(const GlobalLevel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.GlobalLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalLevel::IsInitialized() const {
  return true;
}

void GlobalLevel::Swap(GlobalLevel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GlobalLevel::InternalSwap(GlobalLevel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GlobalLevel::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fsettings_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fsettings_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ProjectLevel::InitAsDefaultInstance() {
}
class ProjectLevel::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProjectLevel::kProjectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProjectLevel::ProjectLevel()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.ProjectLevel)
}
ProjectLevel::ProjectLevel(const ProjectLevel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project().size() > 0) {
    project_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_);
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.ProjectLevel)
}

void ProjectLevel::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ProjectLevel_flyteidl_2fadmin_2fsettings_2eproto.base);
  project_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ProjectLevel::~ProjectLevel() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.ProjectLevel)
  SharedDtor();
}

void ProjectLevel::SharedDtor() {
  project_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ProjectLevel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProjectLevel& ProjectLevel::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ProjectLevel_flyteidl_2fadmin_2fsettings_2eproto.base);
  return *internal_default_instance();
}


void ProjectLevel::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.ProjectLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  project_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProjectLevel::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ProjectLevel*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string project = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.ProjectLevel.project");
        object = msg->mutable_project();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProjectLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.ProjectLevel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project().data(), static_cast<int>(this->project().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.ProjectLevel.project"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.ProjectLevel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.ProjectLevel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProjectLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.ProjectLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project().data(), static_cast<int>(this->project().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.ProjectLevel.project");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.ProjectLevel)
}

::google::protobuf::uint8* ProjectLevel::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.ProjectLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project().data(), static_cast<int>(this->project().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.ProjectLevel.project");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.ProjectLevel)
  return target;
}

size_t ProjectLevel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.ProjectLevel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProjectLevel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.ProjectLevel)
  GOOGLE_DCHECK_NE(&from, this);
  const ProjectLevel* source =
      ::google::protobuf::DynamicCastToGenerated<ProjectLevel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.ProjectLevel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.ProjectLevel)
    MergeFrom(*source);
  }
}

void ProjectLevel::MergeFrom(const ProjectLevel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.ProjectLevel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project().size() > 0) {

    project_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_);
  }
}

void ProjectLevel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.ProjectLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProjectLevel::CopyFrom(const ProjectLevel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.ProjectLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjectLevel::IsInitialized() const {
  return true;
}

void ProjectLevel::Swap(ProjectLevel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProjectLevel::InternalSwap(ProjectLevel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  project_.Swap(&other->project_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata ProjectLevel::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fsettings_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fsettings_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DomainLevel::InitAsDefaultInstance() {
}
class DomainLevel::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DomainLevel::kProjectFieldNumber;
const int DomainLevel::kDomainFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DomainLevel::DomainLevel()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.DomainLevel)
}
DomainLevel::DomainLevel(const DomainLevel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project().size() > 0) {
    project_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_);
  }
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.domain().size() > 0) {
    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.DomainLevel)
}

void DomainLevel::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DomainLevel_flyteidl_2fadmin_2fsettings_2eproto.base);
  project_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DomainLevel::~DomainLevel() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.DomainLevel)
  SharedDtor();
}

void DomainLevel::SharedDtor() {
  project_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DomainLevel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DomainLevel& DomainLevel::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DomainLevel_flyteidl_2fadmin_2fsettings_2eproto.base);
  return *internal_default_instance();
}


void DomainLevel::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.DomainLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  project_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DomainLevel::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DomainLevel*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string project = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.DomainLevel.project");
        object = msg->mutable_project();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string domain = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.DomainLevel.domain");
        object = msg->mutable_domain();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DomainLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.DomainLevel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project().data(), static_cast<int>(this->project().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.DomainLevel.project"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string domain = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->domain().data(), static_cast<int>(this->domain().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.DomainLevel.domain"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.DomainLevel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.DomainLevel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DomainLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.DomainLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project().data(), static_cast<int>(this->project().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.DomainLevel.project");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project(), output);
  }

  // string domain = 2;
  if (this->domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), static_cast<int>(this->domain().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.DomainLevel.domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->domain(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.DomainLevel)
}

::google::protobuf::uint8* DomainLevel::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.DomainLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project().data(), static_cast<int>(this->project().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.DomainLevel.project");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project(), target);
  }

  // string domain = 2;
  if (this->domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), static_cast<int>(this->domain().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.DomainLevel.domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->domain(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.DomainLevel)
  return target;
}

size_t DomainLevel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.DomainLevel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project());
  }

  // string domain = 2;
  if (this->domain().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->domain());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DomainLevel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.DomainLevel)
  GOOGLE_DCHECK_NE(&from, this);
  const DomainLevel* source =
      ::google::protobuf::DynamicCastToGenerated<DomainLevel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.DomainLevel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.DomainLevel)
    MergeFrom(*source);
  }
}

void DomainLevel::MergeFrom(const DomainLevel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.DomainLevel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project().size() > 0) {

    project_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_);
  }
  if (from.domain().size() > 0) {

    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
}

void DomainLevel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.DomainLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DomainLevel::CopyFrom(const DomainLevel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.DomainLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DomainLevel::IsInitialized() const {
  return true;
}

void DomainLevel::Swap(DomainLevel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DomainLevel::InternalSwap(DomainLevel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  project_.Swap(&other->project_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  domain_.Swap(&other->domain_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata DomainLevel::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fsettings_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fsettings_2eproto[kIndexInFileMessages];
}


// ===================================================================

void WorkflowLevel::InitAsDefaultInstance() {
}
class WorkflowLevel::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorkflowLevel::kProjectFieldNumber;
const int WorkflowLevel::kDomainFieldNumber;
const int WorkflowLevel::kWorkflowFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorkflowLevel::WorkflowLevel()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.WorkflowLevel)
}
WorkflowLevel::WorkflowLevel(const WorkflowLevel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project().size() > 0) {
    project_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_);
  }
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.domain().size() > 0) {
    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  workflow_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.workflow().size() > 0) {
    workflow_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.workflow_);
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.WorkflowLevel)
}

void WorkflowLevel::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_WorkflowLevel_flyteidl_2fadmin_2fsettings_2eproto.base);
  project_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  workflow_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

WorkflowLevel::~WorkflowLevel() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.WorkflowLevel)
  SharedDtor();
}

void WorkflowLevel::SharedDtor() {
  project_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  workflow_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WorkflowLevel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkflowLevel& WorkflowLevel::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_WorkflowLevel_flyteidl_2fadmin_2fsettings_2eproto.base);
  return *internal_default_instance();
}


void WorkflowLevel::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.WorkflowLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  project_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  workflow_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WorkflowLevel::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<WorkflowLevel*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string project = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.WorkflowLevel.project");
        object = msg->mutable_project();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string domain = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.WorkflowLevel.domain");
        object = msg->mutable_domain();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string workflow = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.WorkflowLevel.workflow");
        object = msg->mutable_workflow();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WorkflowLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.WorkflowLevel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project().data(), static_cast<int>(this->project().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.WorkflowLevel.project"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string domain = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->domain().data(), static_cast<int>(this->domain().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.WorkflowLevel.domain"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string workflow = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_workflow()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->workflow().data(), static_cast<int>(this->workflow().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.WorkflowLevel.workflow"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.WorkflowLevel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.WorkflowLevel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WorkflowLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.WorkflowLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project().data(), static_cast<int>(this->project().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.WorkflowLevel.project");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project(), output);
  }

  // string domain = 2;
  if (this->domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), static_cast<int>(this->domain().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.WorkflowLevel.domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->domain(), output);
  }

  // string workflow = 3;
  if (this->workflow().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->workflow().data(), static_cast<int>(this->workflow().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.WorkflowLevel.workflow");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->workflow(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.WorkflowLevel)
}

::google::protobuf::uint8* WorkflowLevel::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.WorkflowLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project().data(), static_cast<int>(this->project().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.WorkflowLevel.project");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project(), target);
  }

  // string domain = 2;
  if (this->domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), static_cast<int>(this->domain().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.WorkflowLevel.domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->domain(), target);
  }

  // string workflow = 3;
  if (this->workflow().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->workflow().data(), static_cast<int>(this->workflow().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.WorkflowLevel.workflow");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->workflow(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.WorkflowLevel)
  return target;
}

size_t WorkflowLevel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.WorkflowLevel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project());
  }

  // string domain = 2;
  if (this->domain().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->domain());
  }

  // string workflow = 3;
  if (this->workflow().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->workflow());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkflowLevel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.WorkflowLevel)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkflowLevel* source =
      ::google::protobuf::DynamicCastToGenerated<WorkflowLevel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.WorkflowLevel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.WorkflowLevel)
    MergeFrom(*source);
  }
}

void WorkflowLevel::MergeFrom(const WorkflowLevel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.WorkflowLevel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project().size() > 0) {

    project_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_);
  }
  if (from.domain().size() > 0) {

    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  if (from.workflow().size() > 0) {

    workflow_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.workflow_);
  }
}

void WorkflowLevel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.WorkflowLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkflowLevel::CopyFrom(const WorkflowLevel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.WorkflowLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkflowLevel::IsInitialized() const {
  return true;
}

void WorkflowLevel::Swap(WorkflowLevel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorkflowLevel::InternalSwap(WorkflowLevel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  project_.Swap(&other->project_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  domain_.Swap(&other->domain_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  workflow_.Swap(&other->workflow_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata WorkflowLevel::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fsettings_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fsettings_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LaunchplanLevel::InitAsDefaultInstance() {
}
class LaunchplanLevel::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaunchplanLevel::kProjectFieldNumber;
const int LaunchplanLevel::kDomainFieldNumber;
const int LaunchplanLevel::kWorkflowFieldNumber;
const int LaunchplanLevel::kLaunchplanFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaunchplanLevel::LaunchplanLevel()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.LaunchplanLevel)
}
LaunchplanLevel::LaunchplanLevel(const LaunchplanLevel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project().size() > 0) {
    project_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_);
  }
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.domain().size() > 0) {
    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  workflow_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.workflow().size() > 0) {
    workflow_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.workflow_);
  }
  launchplan_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.launchplan().size() > 0) {
    launchplan_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.launchplan_);
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.LaunchplanLevel)
}

void LaunchplanLevel::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LaunchplanLevel_flyteidl_2fadmin_2fsettings_2eproto.base);
  project_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  workflow_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  launchplan_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LaunchplanLevel::~LaunchplanLevel() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.LaunchplanLevel)
  SharedDtor();
}

void LaunchplanLevel::SharedDtor() {
  project_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  workflow_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  launchplan_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LaunchplanLevel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaunchplanLevel& LaunchplanLevel::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LaunchplanLevel_flyteidl_2fadmin_2fsettings_2eproto.base);
  return *internal_default_instance();
}


void LaunchplanLevel::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.LaunchplanLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  project_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  workflow_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  launchplan_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LaunchplanLevel::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LaunchplanLevel*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string project = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.LaunchplanLevel.project");
        object = msg->mutable_project();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string domain = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.LaunchplanLevel.domain");
        object = msg->mutable_domain();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string workflow = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.LaunchplanLevel.workflow");
        object = msg->mutable_workflow();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string launchplan = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.LaunchplanLevel.launchplan");
        object = msg->mutable_launchplan();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LaunchplanLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.LaunchplanLevel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project().data(), static_cast<int>(this->project().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.LaunchplanLevel.project"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string domain = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->domain().data(), static_cast<int>(this->domain().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.LaunchplanLevel.domain"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string workflow = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_workflow()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->workflow().data(), static_cast<int>(this->workflow().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.LaunchplanLevel.workflow"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string launchplan = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_launchplan()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->launchplan().data(), static_cast<int>(this->launchplan().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.LaunchplanLevel.launchplan"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.LaunchplanLevel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.LaunchplanLevel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LaunchplanLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.LaunchplanLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project().data(), static_cast<int>(this->project().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.LaunchplanLevel.project");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project(), output);
  }

  // string domain = 2;
  if (this->domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), static_cast<int>(this->domain().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.LaunchplanLevel.domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->domain(), output);
  }

  // string workflow = 3;
  if (this->workflow().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->workflow().data(), static_cast<int>(this->workflow().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.LaunchplanLevel.workflow");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->workflow(), output);
  }

  // string launchplan = 4;
  if (this->launchplan().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->launchplan().data(), static_cast<int>(this->launchplan().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.LaunchplanLevel.launchplan");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->launchplan(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.LaunchplanLevel)
}

::google::protobuf::uint8* LaunchplanLevel::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.LaunchplanLevel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project().data(), static_cast<int>(this->project().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.LaunchplanLevel.project");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project(), target);
  }

  // string domain = 2;
  if (this->domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), static_cast<int>(this->domain().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.LaunchplanLevel.domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->domain(), target);
  }

  // string workflow = 3;
  if (this->workflow().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->workflow().data(), static_cast<int>(this->workflow().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.LaunchplanLevel.workflow");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->workflow(), target);
  }

  // string launchplan = 4;
  if (this->launchplan().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->launchplan().data(), static_cast<int>(this->launchplan().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.LaunchplanLevel.launchplan");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->launchplan(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.LaunchplanLevel)
  return target;
}

size_t LaunchplanLevel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.LaunchplanLevel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project());
  }

  // string domain = 2;
  if (this->domain().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->domain());
  }

  // string workflow = 3;
  if (this->workflow().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->workflow());
  }

  // string launchplan = 4;
  if (this->launchplan().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->launchplan());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaunchplanLevel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.LaunchplanLevel)
  GOOGLE_DCHECK_NE(&from, this);
  const LaunchplanLevel* source =
      ::google::protobuf::DynamicCastToGenerated<LaunchplanLevel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.LaunchplanLevel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.LaunchplanLevel)
    MergeFrom(*source);
  }
}

void LaunchplanLevel::MergeFrom(const LaunchplanLevel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.LaunchplanLevel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project().size() > 0) {

    project_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_);
  }
  if (from.domain().size() > 0) {

    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  if (from.workflow().size() > 0) {

    workflow_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.workflow_);
  }
  if (from.launchplan().size() > 0) {

    launchplan_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.launchplan_);
  }
}

void LaunchplanLevel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.LaunchplanLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaunchplanLevel::CopyFrom(const LaunchplanLevel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.LaunchplanLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaunchplanLevel::IsInitialized() const {
  return true;
}

void LaunchplanLevel::Swap(LaunchplanLevel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaunchplanLevel::InternalSwap(LaunchplanLevel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  project_.Swap(&other->project_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  domain_.Swap(&other->domain_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  workflow_.Swap(&other->workflow_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  launchplan_.Swap(&other->launchplan_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata LaunchplanLevel::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fsettings_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fsettings_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SettingsUpdateRequest::InitAsDefaultInstance() {
  ::flyteidl::admin::_SettingsUpdateRequest_default_instance_.global_level_ = const_cast< ::flyteidl::admin::GlobalLevel*>(
      ::flyteidl::admin::GlobalLevel::internal_default_instance());
  ::flyteidl::admin::_SettingsUpdateRequest_default_instance_.project_level_ = const_cast< ::flyteidl::admin::ProjectLevel*>(
      ::flyteidl::admin::ProjectLevel::internal_default_instance());
  ::flyteidl::admin::_SettingsUpdateRequest_default_instance_.domain_level_ = const_cast< ::flyteidl::admin::DomainLevel*>(
      ::flyteidl::admin::DomainLevel::internal_default_instance());
  ::flyteidl::admin::_SettingsUpdateRequest_default_instance_.workflow_level_ = const_cast< ::flyteidl::admin::WorkflowLevel*>(
      ::flyteidl::admin::WorkflowLevel::internal_default_instance());
  ::flyteidl::admin::_SettingsUpdateRequest_default_instance_.launchplan_level_ = const_cast< ::flyteidl::admin::LaunchplanLevel*>(
      ::flyteidl::admin::LaunchplanLevel::internal_default_instance());
  ::flyteidl::admin::_SettingsUpdateRequest_default_instance_._instance.get_mutable()->settings_ = const_cast< ::flyteidl::admin::SettingsCollection*>(
      ::flyteidl::admin::SettingsCollection::internal_default_instance());
}
class SettingsUpdateRequest::HasBitSetters {
 public:
  static const ::flyteidl::admin::GlobalLevel& global_level(const SettingsUpdateRequest* msg);
  static const ::flyteidl::admin::ProjectLevel& project_level(const SettingsUpdateRequest* msg);
  static const ::flyteidl::admin::DomainLevel& domain_level(const SettingsUpdateRequest* msg);
  static const ::flyteidl::admin::WorkflowLevel& workflow_level(const SettingsUpdateRequest* msg);
  static const ::flyteidl::admin::LaunchplanLevel& launchplan_level(const SettingsUpdateRequest* msg);
  static const ::flyteidl::admin::SettingsCollection& settings(const SettingsUpdateRequest* msg);
};

const ::flyteidl::admin::GlobalLevel&
SettingsUpdateRequest::HasBitSetters::global_level(const SettingsUpdateRequest* msg) {
  return *msg->level_.global_level_;
}
const ::flyteidl::admin::ProjectLevel&
SettingsUpdateRequest::HasBitSetters::project_level(const SettingsUpdateRequest* msg) {
  return *msg->level_.project_level_;
}
const ::flyteidl::admin::DomainLevel&
SettingsUpdateRequest::HasBitSetters::domain_level(const SettingsUpdateRequest* msg) {
  return *msg->level_.domain_level_;
}
const ::flyteidl::admin::WorkflowLevel&
SettingsUpdateRequest::HasBitSetters::workflow_level(const SettingsUpdateRequest* msg) {
  return *msg->level_.workflow_level_;
}
const ::flyteidl::admin::LaunchplanLevel&
SettingsUpdateRequest::HasBitSetters::launchplan_level(const SettingsUpdateRequest* msg) {
  return *msg->level_.launchplan_level_;
}
const ::flyteidl::admin::SettingsCollection&
SettingsUpdateRequest::HasBitSetters::settings(const SettingsUpdateRequest* msg) {
  return *msg->settings_;
}
void SettingsUpdateRequest::set_allocated_global_level(::flyteidl::admin::GlobalLevel* global_level) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_level();
  if (global_level) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      global_level = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, global_level, submessage_arena);
    }
    set_has_global_level();
    level_.global_level_ = global_level;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.SettingsUpdateRequest.global_level)
}
void SettingsUpdateRequest::set_allocated_project_level(::flyteidl::admin::ProjectLevel* project_level) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_level();
  if (project_level) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      project_level = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, project_level, submessage_arena);
    }
    set_has_project_level();
    level_.project_level_ = project_level;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.SettingsUpdateRequest.project_level)
}
void SettingsUpdateRequest::set_allocated_domain_level(::flyteidl::admin::DomainLevel* domain_level) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_level();
  if (domain_level) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      domain_level = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, domain_level, submessage_arena);
    }
    set_has_domain_level();
    level_.domain_level_ = domain_level;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.SettingsUpdateRequest.domain_level)
}
void SettingsUpdateRequest::set_allocated_workflow_level(::flyteidl::admin::WorkflowLevel* workflow_level) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_level();
  if (workflow_level) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      workflow_level = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, workflow_level, submessage_arena);
    }
    set_has_workflow_level();
    level_.workflow_level_ = workflow_level;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.SettingsUpdateRequest.workflow_level)
}
void SettingsUpdateRequest::set_allocated_launchplan_level(::flyteidl::admin::LaunchplanLevel* launchplan_level) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_level();
  if (launchplan_level) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      launchplan_level = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, launchplan_level, submessage_arena);
    }
    set_has_launchplan_level();
    level_.launchplan_level_ = launchplan_level;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.SettingsUpdateRequest.launchplan_level)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SettingsUpdateRequest::kGlobalLevelFieldNumber;
const int SettingsUpdateRequest::kProjectLevelFieldNumber;
const int SettingsUpdateRequest::kDomainLevelFieldNumber;
const int SettingsUpdateRequest::kWorkflowLevelFieldNumber;
const int SettingsUpdateRequest::kLaunchplanLevelFieldNumber;
const int SettingsUpdateRequest::kSettingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SettingsUpdateRequest::SettingsUpdateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.SettingsUpdateRequest)
}
SettingsUpdateRequest::SettingsUpdateRequest(const SettingsUpdateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_settings()) {
    settings_ = new ::flyteidl::admin::SettingsCollection(*from.settings_);
  } else {
    settings_ = nullptr;
  }
  clear_has_level();
  switch (from.level_case()) {
    case kGlobalLevel: {
      mutable_global_level()->::flyteidl::admin::GlobalLevel::MergeFrom(from.global_level());
      break;
    }
    case kProjectLevel: {
      mutable_project_level()->::flyteidl::admin::ProjectLevel::MergeFrom(from.project_level());
      break;
    }
    case kDomainLevel: {
      mutable_domain_level()->::flyteidl::admin::DomainLevel::MergeFrom(from.domain_level());
      break;
    }
    case kWorkflowLevel: {
      mutable_workflow_level()->::flyteidl::admin::WorkflowLevel::MergeFrom(from.workflow_level());
      break;
    }
    case kLaunchplanLevel: {
      mutable_launchplan_level()->::flyteidl::admin::LaunchplanLevel::MergeFrom(from.launchplan_level());
      break;
    }
    case LEVEL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.SettingsUpdateRequest)
}

void SettingsUpdateRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SettingsUpdateRequest_flyteidl_2fadmin_2fsettings_2eproto.base);
  settings_ = nullptr;
  clear_has_level();
}

SettingsUpdateRequest::~SettingsUpdateRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.SettingsUpdateRequest)
  SharedDtor();
}

void SettingsUpdateRequest::SharedDtor() {
  if (this != internal_default_instance()) delete settings_;
  if (has_level()) {
    clear_level();
  }
}

void SettingsUpdateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SettingsUpdateRequest& SettingsUpdateRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SettingsUpdateRequest_flyteidl_2fadmin_2fsettings_2eproto.base);
  return *internal_default_instance();
}


void SettingsUpdateRequest::clear_level() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.admin.SettingsUpdateRequest)
  switch (level_case()) {
    case kGlobalLevel: {
      delete level_.global_level_;
      break;
    }
    case kProjectLevel: {
      delete level_.project_level_;
      break;
    }
    case kDomainLevel: {
      delete level_.domain_level_;
      break;
    }
    case kWorkflowLevel: {
      delete level_.workflow_level_;
      break;
    }
    case kLaunchplanLevel: {
      delete level_.launchplan_level_;
      break;
    }
    case LEVEL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LEVEL_NOT_SET;
}


void SettingsUpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.SettingsUpdateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
  clear_level();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SettingsUpdateRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SettingsUpdateRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.admin.GlobalLevel global_level = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::GlobalLevel::_InternalParse;
        object = msg->mutable_global_level();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.ProjectLevel project_level = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::ProjectLevel::_InternalParse;
        object = msg->mutable_project_level();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.DomainLevel domain_level = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::DomainLevel::_InternalParse;
        object = msg->mutable_domain_level();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.WorkflowLevel workflow_level = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::WorkflowLevel::_InternalParse;
        object = msg->mutable_workflow_level();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.LaunchplanLevel launchplan_level = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::LaunchplanLevel::_InternalParse;
        object = msg->mutable_launchplan_level();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.SettingsCollection settings = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::SettingsCollection::_InternalParse;
        object = msg->mutable_settings();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SettingsUpdateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.SettingsUpdateRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.admin.GlobalLevel global_level = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_global_level()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.ProjectLevel project_level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_project_level()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.DomainLevel domain_level = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_domain_level()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.WorkflowLevel workflow_level = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_workflow_level()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.LaunchplanLevel launchplan_level = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_launchplan_level()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.SettingsCollection settings = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.SettingsUpdateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.SettingsUpdateRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SettingsUpdateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.SettingsUpdateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.admin.GlobalLevel global_level = 1;
  if (has_global_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::global_level(this), output);
  }

  // .flyteidl.admin.ProjectLevel project_level = 2;
  if (has_project_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::project_level(this), output);
  }

  // .flyteidl.admin.DomainLevel domain_level = 3;
  if (has_domain_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::domain_level(this), output);
  }

  // .flyteidl.admin.WorkflowLevel workflow_level = 4;
  if (has_workflow_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::workflow_level(this), output);
  }

  // .flyteidl.admin.LaunchplanLevel launchplan_level = 5;
  if (has_launchplan_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::launchplan_level(this), output);
  }

  // .flyteidl.admin.SettingsCollection settings = 6;
  if (this->has_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::settings(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.SettingsUpdateRequest)
}

::google::protobuf::uint8* SettingsUpdateRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.SettingsUpdateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.admin.GlobalLevel global_level = 1;
  if (has_global_level()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::global_level(this), target);
  }

  // .flyteidl.admin.ProjectLevel project_level = 2;
  if (has_project_level()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::project_level(this), target);
  }

  // .flyteidl.admin.DomainLevel domain_level = 3;
  if (has_domain_level()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::domain_level(this), target);
  }

  // .flyteidl.admin.WorkflowLevel workflow_level = 4;
  if (has_workflow_level()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::workflow_level(this), target);
  }

  // .flyteidl.admin.LaunchplanLevel launchplan_level = 5;
  if (has_launchplan_level()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::launchplan_level(this), target);
  }

  // .flyteidl.admin.SettingsCollection settings = 6;
  if (this->has_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::settings(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.SettingsUpdateRequest)
  return target;
}

size_t SettingsUpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.SettingsUpdateRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.admin.SettingsCollection settings = 6;
  if (this->has_settings()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *settings_);
  }

  switch (level_case()) {
    // .flyteidl.admin.GlobalLevel global_level = 1;
    case kGlobalLevel: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *level_.global_level_);
      break;
    }
    // .flyteidl.admin.ProjectLevel project_level = 2;
    case kProjectLevel: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *level_.project_level_);
      break;
    }
    // .flyteidl.admin.DomainLevel domain_level = 3;
    case kDomainLevel: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *level_.domain_level_);
      break;
    }
    // .flyteidl.admin.WorkflowLevel workflow_level = 4;
    case kWorkflowLevel: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *level_.workflow_level_);
      break;
    }
    // .flyteidl.admin.LaunchplanLevel launchplan_level = 5;
    case kLaunchplanLevel: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *level_.launchplan_level_);
      break;
    }
    case LEVEL_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SettingsUpdateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.SettingsUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SettingsUpdateRequest* source =
      ::google::protobuf::DynamicCastToGenerated<SettingsUpdateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.SettingsUpdateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.SettingsUpdateRequest)
    MergeFrom(*source);
  }
}

void SettingsUpdateRequest::MergeFrom(const SettingsUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.SettingsUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_settings()) {
    mutable_settings()->::flyteidl::admin::SettingsCollection::MergeFrom(from.settings());
  }
  switch (from.level_case()) {
    case kGlobalLevel: {
      mutable_global_level()->::flyteidl::admin::GlobalLevel::MergeFrom(from.global_level());
      break;
    }
    case kProjectLevel: {
      mutable_project_level()->::flyteidl::admin::ProjectLevel::MergeFrom(from.project_level());
      break;
    }
    case kDomainLevel: {
      mutable_domain_level()->::flyteidl::admin::DomainLevel::MergeFrom(from.domain_level());
      break;
    }
    case kWorkflowLevel: {
      mutable_workflow_level()->::flyteidl::admin::WorkflowLevel::MergeFrom(from.workflow_level());
      break;
    }
    case kLaunchplanLevel: {
      mutable_launchplan_level()->::flyteidl::admin::LaunchplanLevel::MergeFrom(from.launchplan_level());
      break;
    }
    case LEVEL_NOT_SET: {
      break;
    }
  }
}

void SettingsUpdateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.SettingsUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SettingsUpdateRequest::CopyFrom(const SettingsUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.SettingsUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SettingsUpdateRequest::IsInitialized() const {
  return true;
}

void SettingsUpdateRequest::Swap(SettingsUpdateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SettingsUpdateRequest::InternalSwap(SettingsUpdateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(settings_, other->settings_);
  swap(level_, other->level_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata SettingsUpdateRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fsettings_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fsettings_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FullSettingsUpdateRequest::InitAsDefaultInstance() {
  ::flyteidl::admin::_FullSettingsUpdateRequest_default_instance_.global_level_ = const_cast< ::flyteidl::admin::GlobalLevel*>(
      ::flyteidl::admin::GlobalLevel::internal_default_instance());
  ::flyteidl::admin::_FullSettingsUpdateRequest_default_instance_.project_level_ = const_cast< ::flyteidl::admin::ProjectLevel*>(
      ::flyteidl::admin::ProjectLevel::internal_default_instance());
  ::flyteidl::admin::_FullSettingsUpdateRequest_default_instance_.domain_level_ = const_cast< ::flyteidl::admin::DomainLevel*>(
      ::flyteidl::admin::DomainLevel::internal_default_instance());
  ::flyteidl::admin::_FullSettingsUpdateRequest_default_instance_.workflow_level_ = const_cast< ::flyteidl::admin::WorkflowLevel*>(
      ::flyteidl::admin::WorkflowLevel::internal_default_instance());
  ::flyteidl::admin::_FullSettingsUpdateRequest_default_instance_.launchplan_level_ = const_cast< ::flyteidl::admin::LaunchplanLevel*>(
      ::flyteidl::admin::LaunchplanLevel::internal_default_instance());
  ::flyteidl::admin::_FullSettingsUpdateRequest_default_instance_._instance.get_mutable()->settings_ = const_cast< ::flyteidl::admin::SettingsCollection*>(
      ::flyteidl::admin::SettingsCollection::internal_default_instance());
}
class FullSettingsUpdateRequest::HasBitSetters {
 public:
  static const ::flyteidl::admin::GlobalLevel& global_level(const FullSettingsUpdateRequest* msg);
  static const ::flyteidl::admin::ProjectLevel& project_level(const FullSettingsUpdateRequest* msg);
  static const ::flyteidl::admin::DomainLevel& domain_level(const FullSettingsUpdateRequest* msg);
  static const ::flyteidl::admin::WorkflowLevel& workflow_level(const FullSettingsUpdateRequest* msg);
  static const ::flyteidl::admin::LaunchplanLevel& launchplan_level(const FullSettingsUpdateRequest* msg);
  static const ::flyteidl::admin::SettingsCollection& settings(const FullSettingsUpdateRequest* msg);
};

const ::flyteidl::admin::GlobalLevel&
FullSettingsUpdateRequest::HasBitSetters::global_level(const FullSettingsUpdateRequest* msg) {
  return *msg->level_.global_level_;
}
const ::flyteidl::admin::ProjectLevel&
FullSettingsUpdateRequest::HasBitSetters::project_level(const FullSettingsUpdateRequest* msg) {
  return *msg->level_.project_level_;
}
const ::flyteidl::admin::DomainLevel&
FullSettingsUpdateRequest::HasBitSetters::domain_level(const FullSettingsUpdateRequest* msg) {
  return *msg->level_.domain_level_;
}
const ::flyteidl::admin::WorkflowLevel&
FullSettingsUpdateRequest::HasBitSetters::workflow_level(const FullSettingsUpdateRequest* msg) {
  return *msg->level_.workflow_level_;
}
const ::flyteidl::admin::LaunchplanLevel&
FullSettingsUpdateRequest::HasBitSetters::launchplan_level(const FullSettingsUpdateRequest* msg) {
  return *msg->level_.launchplan_level_;
}
const ::flyteidl::admin::SettingsCollection&
FullSettingsUpdateRequest::HasBitSetters::settings(const FullSettingsUpdateRequest* msg) {
  return *msg->settings_;
}
void FullSettingsUpdateRequest::set_allocated_global_level(::flyteidl::admin::GlobalLevel* global_level) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_level();
  if (global_level) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      global_level = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, global_level, submessage_arena);
    }
    set_has_global_level();
    level_.global_level_ = global_level;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.FullSettingsUpdateRequest.global_level)
}
void FullSettingsUpdateRequest::set_allocated_project_level(::flyteidl::admin::ProjectLevel* project_level) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_level();
  if (project_level) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      project_level = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, project_level, submessage_arena);
    }
    set_has_project_level();
    level_.project_level_ = project_level;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.FullSettingsUpdateRequest.project_level)
}
void FullSettingsUpdateRequest::set_allocated_domain_level(::flyteidl::admin::DomainLevel* domain_level) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_level();
  if (domain_level) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      domain_level = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, domain_level, submessage_arena);
    }
    set_has_domain_level();
    level_.domain_level_ = domain_level;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.FullSettingsUpdateRequest.domain_level)
}
void FullSettingsUpdateRequest::set_allocated_workflow_level(::flyteidl::admin::WorkflowLevel* workflow_level) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_level();
  if (workflow_level) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      workflow_level = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, workflow_level, submessage_arena);
    }
    set_has_workflow_level();
    level_.workflow_level_ = workflow_level;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.FullSettingsUpdateRequest.workflow_level)
}
void FullSettingsUpdateRequest::set_allocated_launchplan_level(::flyteidl::admin::LaunchplanLevel* launchplan_level) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_level();
  if (launchplan_level) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      launchplan_level = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, launchplan_level, submessage_arena);
    }
    set_has_launchplan_level();
    level_.launchplan_level_ = launchplan_level;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.FullSettingsUpdateRequest.launchplan_level)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FullSettingsUpdateRequest::kGlobalLevelFieldNumber;
const int FullSettingsUpdateRequest::kProjectLevelFieldNumber;
const int FullSettingsUpdateRequest::kDomainLevelFieldNumber;
const int FullSettingsUpdateRequest::kWorkflowLevelFieldNumber;
const int FullSettingsUpdateRequest::kLaunchplanLevelFieldNumber;
const int FullSettingsUpdateRequest::kSettingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FullSettingsUpdateRequest::FullSettingsUpdateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.FullSettingsUpdateRequest)
}
FullSettingsUpdateRequest::FullSettingsUpdateRequest(const FullSettingsUpdateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_settings()) {
    settings_ = new ::flyteidl::admin::SettingsCollection(*from.settings_);
  } else {
    settings_ = nullptr;
  }
  clear_has_level();
  switch (from.level_case()) {
    case kGlobalLevel: {
      mutable_global_level()->::flyteidl::admin::GlobalLevel::MergeFrom(from.global_level());
      break;
    }
    case kProjectLevel: {
      mutable_project_level()->::flyteidl::admin::ProjectLevel::MergeFrom(from.project_level());
      break;
    }
    case kDomainLevel: {
      mutable_domain_level()->::flyteidl::admin::DomainLevel::MergeFrom(from.domain_level());
      break;
    }
    case kWorkflowLevel: {
      mutable_workflow_level()->::flyteidl::admin::WorkflowLevel::MergeFrom(from.workflow_level());
      break;
    }
    case kLaunchplanLevel: {
      mutable_launchplan_level()->::flyteidl::admin::LaunchplanLevel::MergeFrom(from.launchplan_level());
      break;
    }
    case LEVEL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.FullSettingsUpdateRequest)
}

void FullSettingsUpdateRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FullSettingsUpdateRequest_flyteidl_2fadmin_2fsettings_2eproto.base);
  settings_ = nullptr;
  clear_has_level();
}

FullSettingsUpdateRequest::~FullSettingsUpdateRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.FullSettingsUpdateRequest)
  SharedDtor();
}

void FullSettingsUpdateRequest::SharedDtor() {
  if (this != internal_default_instance()) delete settings_;
  if (has_level()) {
    clear_level();
  }
}

void FullSettingsUpdateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FullSettingsUpdateRequest& FullSettingsUpdateRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FullSettingsUpdateRequest_flyteidl_2fadmin_2fsettings_2eproto.base);
  return *internal_default_instance();
}


void FullSettingsUpdateRequest::clear_level() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.admin.FullSettingsUpdateRequest)
  switch (level_case()) {
    case kGlobalLevel: {
      delete level_.global_level_;
      break;
    }
    case kProjectLevel: {
      delete level_.project_level_;
      break;
    }
    case kDomainLevel: {
      delete level_.domain_level_;
      break;
    }
    case kWorkflowLevel: {
      delete level_.workflow_level_;
      break;
    }
    case kLaunchplanLevel: {
      delete level_.launchplan_level_;
      break;
    }
    case LEVEL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LEVEL_NOT_SET;
}


void FullSettingsUpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.FullSettingsUpdateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
  clear_level();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FullSettingsUpdateRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FullSettingsUpdateRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.admin.GlobalLevel global_level = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::GlobalLevel::_InternalParse;
        object = msg->mutable_global_level();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.ProjectLevel project_level = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::ProjectLevel::_InternalParse;
        object = msg->mutable_project_level();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.DomainLevel domain_level = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::DomainLevel::_InternalParse;
        object = msg->mutable_domain_level();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.WorkflowLevel workflow_level = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::WorkflowLevel::_InternalParse;
        object = msg->mutable_workflow_level();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.LaunchplanLevel launchplan_level = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::LaunchplanLevel::_InternalParse;
        object = msg->mutable_launchplan_level();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.SettingsCollection settings = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::SettingsCollection::_InternalParse;
        object = msg->mutable_settings();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FullSettingsUpdateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.FullSettingsUpdateRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.admin.GlobalLevel global_level = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_global_level()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.ProjectLevel project_level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_project_level()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.DomainLevel domain_level = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_domain_level()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.WorkflowLevel workflow_level = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_workflow_level()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.LaunchplanLevel launchplan_level = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_launchplan_level()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.SettingsCollection settings = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.FullSettingsUpdateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.FullSettingsUpdateRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FullSettingsUpdateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.FullSettingsUpdateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.admin.GlobalLevel global_level = 1;
  if (has_global_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::global_level(this), output);
  }

  // .flyteidl.admin.ProjectLevel project_level = 2;
  if (has_project_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::project_level(this), output);
  }

  // .flyteidl.admin.DomainLevel domain_level = 3;
  if (has_domain_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::domain_level(this), output);
  }

  // .flyteidl.admin.WorkflowLevel workflow_level = 4;
  if (has_workflow_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::workflow_level(this), output);
  }

  // .flyteidl.admin.LaunchplanLevel launchplan_level = 5;
  if (has_launchplan_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::launchplan_level(this), output);
  }

  // .flyteidl.admin.SettingsCollection settings = 6;
  if (this->has_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::settings(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.FullSettingsUpdateRequest)
}

::google::protobuf::uint8* FullSettingsUpdateRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.FullSettingsUpdateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.admin.GlobalLevel global_level = 1;
  if (has_global_level()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::global_level(this), target);
  }

  // .flyteidl.admin.ProjectLevel project_level = 2;
  if (has_project_level()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::project_level(this), target);
  }

  // .flyteidl.admin.DomainLevel domain_level = 3;
  if (has_domain_level()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::domain_level(this), target);
  }

  // .flyteidl.admin.WorkflowLevel workflow_level = 4;
  if (has_workflow_level()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::workflow_level(this), target);
  }

  // .flyteidl.admin.LaunchplanLevel launchplan_level = 5;
  if (has_launchplan_level()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::launchplan_level(this), target);
  }

  // .flyteidl.admin.SettingsCollection settings = 6;
  if (this->has_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::settings(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.FullSettingsUpdateRequest)
  return target;
}

size_t FullSettingsUpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.FullSettingsUpdateRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.admin.SettingsCollection settings = 6;
  if (this->has_settings()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *settings_);
  }

  switch (level_case()) {
    // .flyteidl.admin.GlobalLevel global_level = 1;
    case kGlobalLevel: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *level_.global_level_);
      break;
    }
    // .flyteidl.admin.ProjectLevel project_level = 2;
    case kProjectLevel: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *level_.project_level_);
      break;
    }
    // .flyteidl.admin.DomainLevel domain_level = 3;
    case kDomainLevel: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *level_.domain_level_);
      break;
    }
    // .flyteidl.admin.WorkflowLevel workflow_level = 4;
    case kWorkflowLevel: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *level_.workflow_level_);
      break;
    }
    // .flyteidl.admin.LaunchplanLevel launchplan_level = 5;
    case kLaunchplanLevel: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *level_.launchplan_level_);
      break;
    }
    case LEVEL_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FullSettingsUpdateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.FullSettingsUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FullSettingsUpdateRequest* source =
      ::google::protobuf::DynamicCastToGenerated<FullSettingsUpdateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.FullSettingsUpdateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.FullSettingsUpdateRequest)
    MergeFrom(*source);
  }
}

void FullSettingsUpdateRequest::MergeFrom(const FullSettingsUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.FullSettingsUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_settings()) {
    mutable_settings()->::flyteidl::admin::SettingsCollection::MergeFrom(from.settings());
  }
  switch (from.level_case()) {
    case kGlobalLevel: {
      mutable_global_level()->::flyteidl::admin::GlobalLevel::MergeFrom(from.global_level());
      break;
    }
    case kProjectLevel: {
      mutable_project_level()->::flyteidl::admin::ProjectLevel::MergeFrom(from.project_level());
      break;
    }
    case kDomainLevel: {
      mutable_domain_level()->::flyteidl::admin::DomainLevel::MergeFrom(from.domain_level());
      break;
    }
    case kWorkflowLevel: {
      mutable_workflow_level()->::flyteidl::admin::WorkflowLevel::MergeFrom(from.workflow_level());
      break;
    }
    case kLaunchplanLevel: {
      mutable_launchplan_level()->::flyteidl::admin::LaunchplanLevel::MergeFrom(from.launchplan_level());
      break;
    }
    case LEVEL_NOT_SET: {
      break;
    }
  }
}

void FullSettingsUpdateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.FullSettingsUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FullSettingsUpdateRequest::CopyFrom(const FullSettingsUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.FullSettingsUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FullSettingsUpdateRequest::IsInitialized() const {
  return true;
}

void FullSettingsUpdateRequest::Swap(FullSettingsUpdateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FullSettingsUpdateRequest::InternalSwap(FullSettingsUpdateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(settings_, other->settings_);
  swap(level_, other->level_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata FullSettingsUpdateRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fsettings_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fsettings_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FullSettingsUpdateResponse::InitAsDefaultInstance() {
}
class FullSettingsUpdateResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FullSettingsUpdateResponse::FullSettingsUpdateResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.FullSettingsUpdateResponse)
}
FullSettingsUpdateResponse::FullSettingsUpdateResponse(const FullSettingsUpdateResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.FullSettingsUpdateResponse)
}

void FullSettingsUpdateResponse::SharedCtor() {
}

FullSettingsUpdateResponse::~FullSettingsUpdateResponse() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.FullSettingsUpdateResponse)
  SharedDtor();
}

void FullSettingsUpdateResponse::SharedDtor() {
}

void FullSettingsUpdateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FullSettingsUpdateResponse& FullSettingsUpdateResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FullSettingsUpdateResponse_flyteidl_2fadmin_2fsettings_2eproto.base);
  return *internal_default_instance();
}


void FullSettingsUpdateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.FullSettingsUpdateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FullSettingsUpdateResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FullSettingsUpdateResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FullSettingsUpdateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.FullSettingsUpdateResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.FullSettingsUpdateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.FullSettingsUpdateResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FullSettingsUpdateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.FullSettingsUpdateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.FullSettingsUpdateResponse)
}

::google::protobuf::uint8* FullSettingsUpdateResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.FullSettingsUpdateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.FullSettingsUpdateResponse)
  return target;
}

size_t FullSettingsUpdateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.FullSettingsUpdateResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FullSettingsUpdateResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.FullSettingsUpdateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FullSettingsUpdateResponse* source =
      ::google::protobuf::DynamicCastToGenerated<FullSettingsUpdateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.FullSettingsUpdateResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.FullSettingsUpdateResponse)
    MergeFrom(*source);
  }
}

void FullSettingsUpdateResponse::MergeFrom(const FullSettingsUpdateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.FullSettingsUpdateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FullSettingsUpdateResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.FullSettingsUpdateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FullSettingsUpdateResponse::CopyFrom(const FullSettingsUpdateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.FullSettingsUpdateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FullSettingsUpdateResponse::IsInitialized() const {
  return true;
}

void FullSettingsUpdateResponse::Swap(FullSettingsUpdateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FullSettingsUpdateResponse::InternalSwap(FullSettingsUpdateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FullSettingsUpdateResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fsettings_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fsettings_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SettingsGetRequest::InitAsDefaultInstance() {
  ::flyteidl::admin::_SettingsGetRequest_default_instance_.global_level_ = const_cast< ::flyteidl::admin::GlobalLevel*>(
      ::flyteidl::admin::GlobalLevel::internal_default_instance());
  ::flyteidl::admin::_SettingsGetRequest_default_instance_.project_level_ = const_cast< ::flyteidl::admin::ProjectLevel*>(
      ::flyteidl::admin::ProjectLevel::internal_default_instance());
  ::flyteidl::admin::_SettingsGetRequest_default_instance_.domain_level_ = const_cast< ::flyteidl::admin::DomainLevel*>(
      ::flyteidl::admin::DomainLevel::internal_default_instance());
  ::flyteidl::admin::_SettingsGetRequest_default_instance_.workflow_level_ = const_cast< ::flyteidl::admin::WorkflowLevel*>(
      ::flyteidl::admin::WorkflowLevel::internal_default_instance());
  ::flyteidl::admin::_SettingsGetRequest_default_instance_.launchplan_level_ = const_cast< ::flyteidl::admin::LaunchplanLevel*>(
      ::flyteidl::admin::LaunchplanLevel::internal_default_instance());
}
class SettingsGetRequest::HasBitSetters {
 public:
  static const ::flyteidl::admin::GlobalLevel& global_level(const SettingsGetRequest* msg);
  static const ::flyteidl::admin::ProjectLevel& project_level(const SettingsGetRequest* msg);
  static const ::flyteidl::admin::DomainLevel& domain_level(const SettingsGetRequest* msg);
  static const ::flyteidl::admin::WorkflowLevel& workflow_level(const SettingsGetRequest* msg);
  static const ::flyteidl::admin::LaunchplanLevel& launchplan_level(const SettingsGetRequest* msg);
};

const ::flyteidl::admin::GlobalLevel&
SettingsGetRequest::HasBitSetters::global_level(const SettingsGetRequest* msg) {
  return *msg->level_.global_level_;
}
const ::flyteidl::admin::ProjectLevel&
SettingsGetRequest::HasBitSetters::project_level(const SettingsGetRequest* msg) {
  return *msg->level_.project_level_;
}
const ::flyteidl::admin::DomainLevel&
SettingsGetRequest::HasBitSetters::domain_level(const SettingsGetRequest* msg) {
  return *msg->level_.domain_level_;
}
const ::flyteidl::admin::WorkflowLevel&
SettingsGetRequest::HasBitSetters::workflow_level(const SettingsGetRequest* msg) {
  return *msg->level_.workflow_level_;
}
const ::flyteidl::admin::LaunchplanLevel&
SettingsGetRequest::HasBitSetters::launchplan_level(const SettingsGetRequest* msg) {
  return *msg->level_.launchplan_level_;
}
void SettingsGetRequest::set_allocated_global_level(::flyteidl::admin::GlobalLevel* global_level) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_level();
  if (global_level) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      global_level = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, global_level, submessage_arena);
    }
    set_has_global_level();
    level_.global_level_ = global_level;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.SettingsGetRequest.global_level)
}
void SettingsGetRequest::set_allocated_project_level(::flyteidl::admin::ProjectLevel* project_level) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_level();
  if (project_level) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      project_level = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, project_level, submessage_arena);
    }
    set_has_project_level();
    level_.project_level_ = project_level;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.SettingsGetRequest.project_level)
}
void SettingsGetRequest::set_allocated_domain_level(::flyteidl::admin::DomainLevel* domain_level) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_level();
  if (domain_level) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      domain_level = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, domain_level, submessage_arena);
    }
    set_has_domain_level();
    level_.domain_level_ = domain_level;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.SettingsGetRequest.domain_level)
}
void SettingsGetRequest::set_allocated_workflow_level(::flyteidl::admin::WorkflowLevel* workflow_level) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_level();
  if (workflow_level) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      workflow_level = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, workflow_level, submessage_arena);
    }
    set_has_workflow_level();
    level_.workflow_level_ = workflow_level;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.SettingsGetRequest.workflow_level)
}
void SettingsGetRequest::set_allocated_launchplan_level(::flyteidl::admin::LaunchplanLevel* launchplan_level) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_level();
  if (launchplan_level) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      launchplan_level = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, launchplan_level, submessage_arena);
    }
    set_has_launchplan_level();
    level_.launchplan_level_ = launchplan_level;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.SettingsGetRequest.launchplan_level)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SettingsGetRequest::kGlobalLevelFieldNumber;
const int SettingsGetRequest::kProjectLevelFieldNumber;
const int SettingsGetRequest::kDomainLevelFieldNumber;
const int SettingsGetRequest::kWorkflowLevelFieldNumber;
const int SettingsGetRequest::kLaunchplanLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SettingsGetRequest::SettingsGetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.SettingsGetRequest)
}
SettingsGetRequest::SettingsGetRequest(const SettingsGetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_level();
  switch (from.level_case()) {
    case kGlobalLevel: {
      mutable_global_level()->::flyteidl::admin::GlobalLevel::MergeFrom(from.global_level());
      break;
    }
    case kProjectLevel: {
      mutable_project_level()->::flyteidl::admin::ProjectLevel::MergeFrom(from.project_level());
      break;
    }
    case kDomainLevel: {
      mutable_domain_level()->::flyteidl::admin::DomainLevel::MergeFrom(from.domain_level());
      break;
    }
    case kWorkflowLevel: {
      mutable_workflow_level()->::flyteidl::admin::WorkflowLevel::MergeFrom(from.workflow_level());
      break;
    }
    case kLaunchplanLevel: {
      mutable_launchplan_level()->::flyteidl::admin::LaunchplanLevel::MergeFrom(from.launchplan_level());
      break;
    }
    case LEVEL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.SettingsGetRequest)
}

void SettingsGetRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SettingsGetRequest_flyteidl_2fadmin_2fsettings_2eproto.base);
  clear_has_level();
}

SettingsGetRequest::~SettingsGetRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.SettingsGetRequest)
  SharedDtor();
}

void SettingsGetRequest::SharedDtor() {
  if (has_level()) {
    clear_level();
  }
}

void SettingsGetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SettingsGetRequest& SettingsGetRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SettingsGetRequest_flyteidl_2fadmin_2fsettings_2eproto.base);
  return *internal_default_instance();
}


void SettingsGetRequest::clear_level() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.admin.SettingsGetRequest)
  switch (level_case()) {
    case kGlobalLevel: {
      delete level_.global_level_;
      break;
    }
    case kProjectLevel: {
      delete level_.project_level_;
      break;
    }
    case kDomainLevel: {
      delete level_.domain_level_;
      break;
    }
    case kWorkflowLevel: {
      delete level_.workflow_level_;
      break;
    }
    case kLaunchplanLevel: {
      delete level_.launchplan_level_;
      break;
    }
    case LEVEL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LEVEL_NOT_SET;
}


void SettingsGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.SettingsGetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_level();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SettingsGetRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SettingsGetRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.admin.GlobalLevel global_level = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::GlobalLevel::_InternalParse;
        object = msg->mutable_global_level();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.ProjectLevel project_level = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::ProjectLevel::_InternalParse;
        object = msg->mutable_project_level();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.DomainLevel domain_level = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::DomainLevel::_InternalParse;
        object = msg->mutable_domain_level();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.WorkflowLevel workflow_level = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::WorkflowLevel::_InternalParse;
        object = msg->mutable_workflow_level();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.LaunchplanLevel launchplan_level = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::LaunchplanLevel::_InternalParse;
        object = msg->mutable_launchplan_level();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SettingsGetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.SettingsGetRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.admin.GlobalLevel global_level = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_global_level()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.ProjectLevel project_level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_project_level()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.DomainLevel domain_level = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_domain_level()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.WorkflowLevel workflow_level = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_workflow_level()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.LaunchplanLevel launchplan_level = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_launchplan_level()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.SettingsGetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.SettingsGetRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SettingsGetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.SettingsGetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.admin.GlobalLevel global_level = 1;
  if (has_global_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::global_level(this), output);
  }

  // .flyteidl.admin.ProjectLevel project_level = 2;
  if (has_project_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::project_level(this), output);
  }

  // .flyteidl.admin.DomainLevel domain_level = 3;
  if (has_domain_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::domain_level(this), output);
  }

  // .flyteidl.admin.WorkflowLevel workflow_level = 4;
  if (has_workflow_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::workflow_level(this), output);
  }

  // .flyteidl.admin.LaunchplanLevel launchplan_level = 5;
  if (has_launchplan_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::launchplan_level(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.SettingsGetRequest)
}

::google::protobuf::uint8* SettingsGetRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.SettingsGetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.admin.GlobalLevel global_level = 1;
  if (has_global_level()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::global_level(this), target);
  }

  // .flyteidl.admin.ProjectLevel project_level = 2;
  if (has_project_level()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::project_level(this), target);
  }

  // .flyteidl.admin.DomainLevel domain_level = 3;
  if (has_domain_level()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::domain_level(this), target);
  }

  // .flyteidl.admin.WorkflowLevel workflow_level = 4;
  if (has_workflow_level()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::workflow_level(this), target);
  }

  // .flyteidl.admin.LaunchplanLevel launchplan_level = 5;
  if (has_launchplan_level()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::launchplan_level(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.SettingsGetRequest)
  return target;
}

size_t SettingsGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.SettingsGetRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (level_case()) {
    // .flyteidl.admin.GlobalLevel global_level = 1;
    case kGlobalLevel: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *level_.global_level_);
      break;
    }
    // .flyteidl.admin.ProjectLevel project_level = 2;
    case kProjectLevel: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *level_.project_level_);
      break;
    }
    // .flyteidl.admin.DomainLevel domain_level = 3;
    case kDomainLevel: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *level_.domain_level_);
      break;
    }
    // .flyteidl.admin.WorkflowLevel workflow_level = 4;
    case kWorkflowLevel: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *level_.workflow_level_);
      break;
    }
    // .flyteidl.admin.LaunchplanLevel launchplan_level = 5;
    case kLaunchplanLevel: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *level_.launchplan_level_);
      break;
    }
    case LEVEL_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SettingsGetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.SettingsGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SettingsGetRequest* source =
      ::google::protobuf::DynamicCastToGenerated<SettingsGetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.SettingsGetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.SettingsGetRequest)
    MergeFrom(*source);
  }
}

void SettingsGetRequest::MergeFrom(const SettingsGetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.SettingsGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.level_case()) {
    case kGlobalLevel: {
      mutable_global_level()->::flyteidl::admin::GlobalLevel::MergeFrom(from.global_level());
      break;
    }
    case kProjectLevel: {
      mutable_project_level()->::flyteidl::admin::ProjectLevel::MergeFrom(from.project_level());
      break;
    }
    case kDomainLevel: {
      mutable_domain_level()->::flyteidl::admin::DomainLevel::MergeFrom(from.domain_level());
      break;
    }
    case kWorkflowLevel: {
      mutable_workflow_level()->::flyteidl::admin::WorkflowLevel::MergeFrom(from.workflow_level());
      break;
    }
    case kLaunchplanLevel: {
      mutable_launchplan_level()->::flyteidl::admin::LaunchplanLevel::MergeFrom(from.launchplan_level());
      break;
    }
    case LEVEL_NOT_SET: {
      break;
    }
  }
}

void SettingsGetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.SettingsGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SettingsGetRequest::CopyFrom(const SettingsGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.SettingsGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SettingsGetRequest::IsInitialized() const {
  return true;
}

void SettingsGetRequest::Swap(SettingsGetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SettingsGetRequest::InternalSwap(SettingsGetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(level_, other->level_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata SettingsGetRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fsettings_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fsettings_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SettingsGetResponse::InitAsDefaultInstance() {
  ::flyteidl::admin::_SettingsGetResponse_default_instance_.global_level_ = const_cast< ::flyteidl::admin::GlobalLevel*>(
      ::flyteidl::admin::GlobalLevel::internal_default_instance());
  ::flyteidl::admin::_SettingsGetResponse_default_instance_.project_level_ = const_cast< ::flyteidl::admin::ProjectLevel*>(
      ::flyteidl::admin::ProjectLevel::internal_default_instance());
  ::flyteidl::admin::_SettingsGetResponse_default_instance_.domain_level_ = const_cast< ::flyteidl::admin::DomainLevel*>(
      ::flyteidl::admin::DomainLevel::internal_default_instance());
  ::flyteidl::admin::_SettingsGetResponse_default_instance_.workflow_level_ = const_cast< ::flyteidl::admin::WorkflowLevel*>(
      ::flyteidl::admin::WorkflowLevel::internal_default_instance());
  ::flyteidl::admin::_SettingsGetResponse_default_instance_.launchplan_level_ = const_cast< ::flyteidl::admin::LaunchplanLevel*>(
      ::flyteidl::admin::LaunchplanLevel::internal_default_instance());
  ::flyteidl::admin::_SettingsGetResponse_default_instance_._instance.get_mutable()->settings_ = const_cast< ::flyteidl::admin::SettingsCollection*>(
      ::flyteidl::admin::SettingsCollection::internal_default_instance());
}
class SettingsGetResponse::HasBitSetters {
 public:
  static const ::flyteidl::admin::GlobalLevel& global_level(const SettingsGetResponse* msg);
  static const ::flyteidl::admin::ProjectLevel& project_level(const SettingsGetResponse* msg);
  static const ::flyteidl::admin::DomainLevel& domain_level(const SettingsGetResponse* msg);
  static const ::flyteidl::admin::WorkflowLevel& workflow_level(const SettingsGetResponse* msg);
  static const ::flyteidl::admin::LaunchplanLevel& launchplan_level(const SettingsGetResponse* msg);
  static const ::flyteidl::admin::SettingsCollection& settings(const SettingsGetResponse* msg);
};

const ::flyteidl::admin::GlobalLevel&
SettingsGetResponse::HasBitSetters::global_level(const SettingsGetResponse* msg) {
  return *msg->level_.global_level_;
}
const ::flyteidl::admin::ProjectLevel&
SettingsGetResponse::HasBitSetters::project_level(const SettingsGetResponse* msg) {
  return *msg->level_.project_level_;
}
const ::flyteidl::admin::DomainLevel&
SettingsGetResponse::HasBitSetters::domain_level(const SettingsGetResponse* msg) {
  return *msg->level_.domain_level_;
}
const ::flyteidl::admin::WorkflowLevel&
SettingsGetResponse::HasBitSetters::workflow_level(const SettingsGetResponse* msg) {
  return *msg->level_.workflow_level_;
}
const ::flyteidl::admin::LaunchplanLevel&
SettingsGetResponse::HasBitSetters::launchplan_level(const SettingsGetResponse* msg) {
  return *msg->level_.launchplan_level_;
}
const ::flyteidl::admin::SettingsCollection&
SettingsGetResponse::HasBitSetters::settings(const SettingsGetResponse* msg) {
  return *msg->settings_;
}
void SettingsGetResponse::set_allocated_global_level(::flyteidl::admin::GlobalLevel* global_level) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_level();
  if (global_level) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      global_level = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, global_level, submessage_arena);
    }
    set_has_global_level();
    level_.global_level_ = global_level;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.SettingsGetResponse.global_level)
}
void SettingsGetResponse::set_allocated_project_level(::flyteidl::admin::ProjectLevel* project_level) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_level();
  if (project_level) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      project_level = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, project_level, submessage_arena);
    }
    set_has_project_level();
    level_.project_level_ = project_level;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.SettingsGetResponse.project_level)
}
void SettingsGetResponse::set_allocated_domain_level(::flyteidl::admin::DomainLevel* domain_level) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_level();
  if (domain_level) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      domain_level = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, domain_level, submessage_arena);
    }
    set_has_domain_level();
    level_.domain_level_ = domain_level;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.SettingsGetResponse.domain_level)
}
void SettingsGetResponse::set_allocated_workflow_level(::flyteidl::admin::WorkflowLevel* workflow_level) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_level();
  if (workflow_level) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      workflow_level = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, workflow_level, submessage_arena);
    }
    set_has_workflow_level();
    level_.workflow_level_ = workflow_level;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.SettingsGetResponse.workflow_level)
}
void SettingsGetResponse::set_allocated_launchplan_level(::flyteidl::admin::LaunchplanLevel* launchplan_level) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_level();
  if (launchplan_level) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      launchplan_level = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, launchplan_level, submessage_arena);
    }
    set_has_launchplan_level();
    level_.launchplan_level_ = launchplan_level;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.SettingsGetResponse.launchplan_level)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SettingsGetResponse::kGlobalLevelFieldNumber;
const int SettingsGetResponse::kProjectLevelFieldNumber;
const int SettingsGetResponse::kDomainLevelFieldNumber;
const int SettingsGetResponse::kWorkflowLevelFieldNumber;
const int SettingsGetResponse::kLaunchplanLevelFieldNumber;
const int SettingsGetResponse::kSettingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SettingsGetResponse::SettingsGetResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.SettingsGetResponse)
}
SettingsGetResponse::SettingsGetResponse(const SettingsGetResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_settings()) {
    settings_ = new ::flyteidl::admin::SettingsCollection(*from.settings_);
  } else {
    settings_ = nullptr;
  }
  clear_has_level();
  switch (from.level_case()) {
    case kGlobalLevel: {
      mutable_global_level()->::flyteidl::admin::GlobalLevel::MergeFrom(from.global_level());
      break;
    }
    case kProjectLevel: {
      mutable_project_level()->::flyteidl::admin::ProjectLevel::MergeFrom(from.project_level());
      break;
    }
    case kDomainLevel: {
      mutable_domain_level()->::flyteidl::admin::DomainLevel::MergeFrom(from.domain_level());
      break;
    }
    case kWorkflowLevel: {
      mutable_workflow_level()->::flyteidl::admin::WorkflowLevel::MergeFrom(from.workflow_level());
      break;
    }
    case kLaunchplanLevel: {
      mutable_launchplan_level()->::flyteidl::admin::LaunchplanLevel::MergeFrom(from.launchplan_level());
      break;
    }
    case LEVEL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.SettingsGetResponse)
}

void SettingsGetResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SettingsGetResponse_flyteidl_2fadmin_2fsettings_2eproto.base);
  settings_ = nullptr;
  clear_has_level();
}

SettingsGetResponse::~SettingsGetResponse() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.SettingsGetResponse)
  SharedDtor();
}

void SettingsGetResponse::SharedDtor() {
  if (this != internal_default_instance()) delete settings_;
  if (has_level()) {
    clear_level();
  }
}

void SettingsGetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SettingsGetResponse& SettingsGetResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SettingsGetResponse_flyteidl_2fadmin_2fsettings_2eproto.base);
  return *internal_default_instance();
}


void SettingsGetResponse::clear_level() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.admin.SettingsGetResponse)
  switch (level_case()) {
    case kGlobalLevel: {
      delete level_.global_level_;
      break;
    }
    case kProjectLevel: {
      delete level_.project_level_;
      break;
    }
    case kDomainLevel: {
      delete level_.domain_level_;
      break;
    }
    case kWorkflowLevel: {
      delete level_.workflow_level_;
      break;
    }
    case kLaunchplanLevel: {
      delete level_.launchplan_level_;
      break;
    }
    case LEVEL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LEVEL_NOT_SET;
}


void SettingsGetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.SettingsGetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
  clear_level();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SettingsGetResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SettingsGetResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.admin.GlobalLevel global_level = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::GlobalLevel::_InternalParse;
        object = msg->mutable_global_level();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.ProjectLevel project_level = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::ProjectLevel::_InternalParse;
        object = msg->mutable_project_level();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.DomainLevel domain_level = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::DomainLevel::_InternalParse;
        object = msg->mutable_domain_level();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.WorkflowLevel workflow_level = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::WorkflowLevel::_InternalParse;
        object = msg->mutable_workflow_level();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.LaunchplanLevel launchplan_level = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::LaunchplanLevel::_InternalParse;
        object = msg->mutable_launchplan_level();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.SettingsCollection settings = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::SettingsCollection::_InternalParse;
        object = msg->mutable_settings();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SettingsGetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.SettingsGetResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.admin.GlobalLevel global_level = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_global_level()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.ProjectLevel project_level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_project_level()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.DomainLevel domain_level = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_domain_level()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.WorkflowLevel workflow_level = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_workflow_level()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.LaunchplanLevel launchplan_level = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_launchplan_level()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.SettingsCollection settings = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.SettingsGetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.SettingsGetResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SettingsGetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.SettingsGetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.admin.GlobalLevel global_level = 1;
  if (has_global_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::global_level(this), output);
  }

  // .flyteidl.admin.ProjectLevel project_level = 2;
  if (has_project_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::project_level(this), output);
  }

  // .flyteidl.admin.DomainLevel domain_level = 3;
  if (has_domain_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::domain_level(this), output);
  }

  // .flyteidl.admin.WorkflowLevel workflow_level = 4;
  if (has_workflow_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::workflow_level(this), output);
  }

  // .flyteidl.admin.LaunchplanLevel launchplan_level = 5;
  if (has_launchplan_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::launchplan_level(this), output);
  }

  // .flyteidl.admin.SettingsCollection settings = 6;
  if (this->has_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::settings(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.SettingsGetResponse)
}

::google::protobuf::uint8* SettingsGetResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.SettingsGetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.admin.GlobalLevel global_level = 1;
  if (has_global_level()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::global_level(this), target);
  }

  // .flyteidl.admin.ProjectLevel project_level = 2;
  if (has_project_level()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::project_level(this), target);
  }

  // .flyteidl.admin.DomainLevel domain_level = 3;
  if (has_domain_level()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::domain_level(this), target);
  }

  // .flyteidl.admin.WorkflowLevel workflow_level = 4;
  if (has_workflow_level()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::workflow_level(this), target);
  }

  // .flyteidl.admin.LaunchplanLevel launchplan_level = 5;
  if (has_launchplan_level()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::launchplan_level(this), target);
  }

  // .flyteidl.admin.SettingsCollection settings = 6;
  if (this->has_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::settings(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.SettingsGetResponse)
  return target;
}

size_t SettingsGetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.SettingsGetResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.admin.SettingsCollection settings = 6;
  if (this->has_settings()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *settings_);
  }

  switch (level_case()) {
    // .flyteidl.admin.GlobalLevel global_level = 1;
    case kGlobalLevel: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *level_.global_level_);
      break;
    }
    // .flyteidl.admin.ProjectLevel project_level = 2;
    case kProjectLevel: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *level_.project_level_);
      break;
    }
    // .flyteidl.admin.DomainLevel domain_level = 3;
    case kDomainLevel: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *level_.domain_level_);
      break;
    }
    // .flyteidl.admin.WorkflowLevel workflow_level = 4;
    case kWorkflowLevel: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *level_.workflow_level_);
      break;
    }
    // .flyteidl.admin.LaunchplanLevel launchplan_level = 5;
    case kLaunchplanLevel: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *level_.launchplan_level_);
      break;
    }
    case LEVEL_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SettingsGetResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.SettingsGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SettingsGetResponse* source =
      ::google::protobuf::DynamicCastToGenerated<SettingsGetResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.SettingsGetResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.SettingsGetResponse)
    MergeFrom(*source);
  }
}

void SettingsGetResponse::MergeFrom(const SettingsGetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.SettingsGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_settings()) {
    mutable_settings()->::flyteidl::admin::SettingsCollection::MergeFrom(from.settings());
  }
  switch (from.level_case()) {
    case kGlobalLevel: {
      mutable_global_level()->::flyteidl::admin::GlobalLevel::MergeFrom(from.global_level());
      break;
    }
    case kProjectLevel: {
      mutable_project_level()->::flyteidl::admin::ProjectLevel::MergeFrom(from.project_level());
      break;
    }
    case kDomainLevel: {
      mutable_domain_level()->::flyteidl::admin::DomainLevel::MergeFrom(from.domain_level());
      break;
    }
    case kWorkflowLevel: {
      mutable_workflow_level()->::flyteidl::admin::WorkflowLevel::MergeFrom(from.workflow_level());
      break;
    }
    case kLaunchplanLevel: {
      mutable_launchplan_level()->::flyteidl::admin::LaunchplanLevel::MergeFrom(from.launchplan_level());
      break;
    }
    case LEVEL_NOT_SET: {
      break;
    }
  }
}

void SettingsGetResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.SettingsGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SettingsGetResponse::CopyFrom(const SettingsGetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.SettingsGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SettingsGetResponse::IsInitialized() const {
  return true;
}

void SettingsGetResponse::Swap(SettingsGetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SettingsGetResponse::InternalSwap(SettingsGetResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(settings_, other->settings_);
  swap(level_, other->level_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata SettingsGetResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fsettings_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fsettings_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FullSettingsGetRequest::InitAsDefaultInstance() {
}
class FullSettingsGetRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FullSettingsGetRequest::FullSettingsGetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.FullSettingsGetRequest)
}
FullSettingsGetRequest::FullSettingsGetRequest(const FullSettingsGetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.FullSettingsGetRequest)
}

void FullSettingsGetRequest::SharedCtor() {
}

FullSettingsGetRequest::~FullSettingsGetRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.FullSettingsGetRequest)
  SharedDtor();
}

void FullSettingsGetRequest::SharedDtor() {
}

void FullSettingsGetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FullSettingsGetRequest& FullSettingsGetRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FullSettingsGetRequest_flyteidl_2fadmin_2fsettings_2eproto.base);
  return *internal_default_instance();
}


void FullSettingsGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.FullSettingsGetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FullSettingsGetRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FullSettingsGetRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FullSettingsGetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.FullSettingsGetRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.FullSettingsGetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.FullSettingsGetRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FullSettingsGetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.FullSettingsGetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.FullSettingsGetRequest)
}

::google::protobuf::uint8* FullSettingsGetRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.FullSettingsGetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.FullSettingsGetRequest)
  return target;
}

size_t FullSettingsGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.FullSettingsGetRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FullSettingsGetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.FullSettingsGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FullSettingsGetRequest* source =
      ::google::protobuf::DynamicCastToGenerated<FullSettingsGetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.FullSettingsGetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.FullSettingsGetRequest)
    MergeFrom(*source);
  }
}

void FullSettingsGetRequest::MergeFrom(const FullSettingsGetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.FullSettingsGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FullSettingsGetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.FullSettingsGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FullSettingsGetRequest::CopyFrom(const FullSettingsGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.FullSettingsGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FullSettingsGetRequest::IsInitialized() const {
  return true;
}

void FullSettingsGetRequest::Swap(FullSettingsGetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FullSettingsGetRequest::InternalSwap(FullSettingsGetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FullSettingsGetRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fsettings_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fsettings_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FullSettingsGetResponse::InitAsDefaultInstance() {
  ::flyteidl::admin::_FullSettingsGetResponse_default_instance_._instance.get_mutable()->settings_ = const_cast< ::flyteidl::admin::Settings*>(
      ::flyteidl::admin::Settings::internal_default_instance());
}
class FullSettingsGetResponse::HasBitSetters {
 public:
  static const ::flyteidl::admin::Settings& settings(const FullSettingsGetResponse* msg);
};

const ::flyteidl::admin::Settings&
FullSettingsGetResponse::HasBitSetters::settings(const FullSettingsGetResponse* msg) {
  return *msg->settings_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FullSettingsGetResponse::kSettingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FullSettingsGetResponse::FullSettingsGetResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.FullSettingsGetResponse)
}
FullSettingsGetResponse::FullSettingsGetResponse(const FullSettingsGetResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_settings()) {
    settings_ = new ::flyteidl::admin::Settings(*from.settings_);
  } else {
    settings_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.FullSettingsGetResponse)
}

void FullSettingsGetResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FullSettingsGetResponse_flyteidl_2fadmin_2fsettings_2eproto.base);
  settings_ = nullptr;
}

FullSettingsGetResponse::~FullSettingsGetResponse() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.FullSettingsGetResponse)
  SharedDtor();
}

void FullSettingsGetResponse::SharedDtor() {
  if (this != internal_default_instance()) delete settings_;
}

void FullSettingsGetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FullSettingsGetResponse& FullSettingsGetResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FullSettingsGetResponse_flyteidl_2fadmin_2fsettings_2eproto.base);
  return *internal_default_instance();
}


void FullSettingsGetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.FullSettingsGetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FullSettingsGetResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FullSettingsGetResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.admin.Settings settings = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::Settings::_InternalParse;
        object = msg->mutable_settings();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FullSettingsGetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.FullSettingsGetResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.admin.Settings settings = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.FullSettingsGetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.FullSettingsGetResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FullSettingsGetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.FullSettingsGetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.admin.Settings settings = 1;
  if (this->has_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::settings(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.FullSettingsGetResponse)
}

::google::protobuf::uint8* FullSettingsGetResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.FullSettingsGetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.admin.Settings settings = 1;
  if (this->has_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::settings(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.FullSettingsGetResponse)
  return target;
}

size_t FullSettingsGetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.FullSettingsGetResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.admin.Settings settings = 1;
  if (this->has_settings()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *settings_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FullSettingsGetResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.FullSettingsGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FullSettingsGetResponse* source =
      ::google::protobuf::DynamicCastToGenerated<FullSettingsGetResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.FullSettingsGetResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.FullSettingsGetResponse)
    MergeFrom(*source);
  }
}

void FullSettingsGetResponse::MergeFrom(const FullSettingsGetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.FullSettingsGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_settings()) {
    mutable_settings()->::flyteidl::admin::Settings::MergeFrom(from.settings());
  }
}

void FullSettingsGetResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.FullSettingsGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FullSettingsGetResponse::CopyFrom(const FullSettingsGetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.FullSettingsGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FullSettingsGetResponse::IsInitialized() const {
  return true;
}

void FullSettingsGetResponse::Swap(FullSettingsGetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FullSettingsGetResponse::InternalSwap(FullSettingsGetResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(settings_, other->settings_);
}

::google::protobuf::Metadata FullSettingsGetResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fsettings_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fsettings_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SettingsDeleteRequest::InitAsDefaultInstance() {
  ::flyteidl::admin::_SettingsDeleteRequest_default_instance_.global_level_ = const_cast< ::flyteidl::admin::GlobalLevel*>(
      ::flyteidl::admin::GlobalLevel::internal_default_instance());
  ::flyteidl::admin::_SettingsDeleteRequest_default_instance_.project_level_ = const_cast< ::flyteidl::admin::ProjectLevel*>(
      ::flyteidl::admin::ProjectLevel::internal_default_instance());
  ::flyteidl::admin::_SettingsDeleteRequest_default_instance_.domain_level_ = const_cast< ::flyteidl::admin::DomainLevel*>(
      ::flyteidl::admin::DomainLevel::internal_default_instance());
  ::flyteidl::admin::_SettingsDeleteRequest_default_instance_.workflow_level_ = const_cast< ::flyteidl::admin::WorkflowLevel*>(
      ::flyteidl::admin::WorkflowLevel::internal_default_instance());
  ::flyteidl::admin::_SettingsDeleteRequest_default_instance_.launchplan_level_ = const_cast< ::flyteidl::admin::LaunchplanLevel*>(
      ::flyteidl::admin::LaunchplanLevel::internal_default_instance());
}
class SettingsDeleteRequest::HasBitSetters {
 public:
  static const ::flyteidl::admin::GlobalLevel& global_level(const SettingsDeleteRequest* msg);
  static const ::flyteidl::admin::ProjectLevel& project_level(const SettingsDeleteRequest* msg);
  static const ::flyteidl::admin::DomainLevel& domain_level(const SettingsDeleteRequest* msg);
  static const ::flyteidl::admin::WorkflowLevel& workflow_level(const SettingsDeleteRequest* msg);
  static const ::flyteidl::admin::LaunchplanLevel& launchplan_level(const SettingsDeleteRequest* msg);
};

const ::flyteidl::admin::GlobalLevel&
SettingsDeleteRequest::HasBitSetters::global_level(const SettingsDeleteRequest* msg) {
  return *msg->level_.global_level_;
}
const ::flyteidl::admin::ProjectLevel&
SettingsDeleteRequest::HasBitSetters::project_level(const SettingsDeleteRequest* msg) {
  return *msg->level_.project_level_;
}
const ::flyteidl::admin::DomainLevel&
SettingsDeleteRequest::HasBitSetters::domain_level(const SettingsDeleteRequest* msg) {
  return *msg->level_.domain_level_;
}
const ::flyteidl::admin::WorkflowLevel&
SettingsDeleteRequest::HasBitSetters::workflow_level(const SettingsDeleteRequest* msg) {
  return *msg->level_.workflow_level_;
}
const ::flyteidl::admin::LaunchplanLevel&
SettingsDeleteRequest::HasBitSetters::launchplan_level(const SettingsDeleteRequest* msg) {
  return *msg->level_.launchplan_level_;
}
void SettingsDeleteRequest::set_allocated_global_level(::flyteidl::admin::GlobalLevel* global_level) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_level();
  if (global_level) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      global_level = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, global_level, submessage_arena);
    }
    set_has_global_level();
    level_.global_level_ = global_level;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.SettingsDeleteRequest.global_level)
}
void SettingsDeleteRequest::set_allocated_project_level(::flyteidl::admin::ProjectLevel* project_level) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_level();
  if (project_level) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      project_level = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, project_level, submessage_arena);
    }
    set_has_project_level();
    level_.project_level_ = project_level;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.SettingsDeleteRequest.project_level)
}
void SettingsDeleteRequest::set_allocated_domain_level(::flyteidl::admin::DomainLevel* domain_level) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_level();
  if (domain_level) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      domain_level = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, domain_level, submessage_arena);
    }
    set_has_domain_level();
    level_.domain_level_ = domain_level;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.SettingsDeleteRequest.domain_level)
}
void SettingsDeleteRequest::set_allocated_workflow_level(::flyteidl::admin::WorkflowLevel* workflow_level) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_level();
  if (workflow_level) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      workflow_level = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, workflow_level, submessage_arena);
    }
    set_has_workflow_level();
    level_.workflow_level_ = workflow_level;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.SettingsDeleteRequest.workflow_level)
}
void SettingsDeleteRequest::set_allocated_launchplan_level(::flyteidl::admin::LaunchplanLevel* launchplan_level) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_level();
  if (launchplan_level) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      launchplan_level = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, launchplan_level, submessage_arena);
    }
    set_has_launchplan_level();
    level_.launchplan_level_ = launchplan_level;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.SettingsDeleteRequest.launchplan_level)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SettingsDeleteRequest::kGlobalLevelFieldNumber;
const int SettingsDeleteRequest::kProjectLevelFieldNumber;
const int SettingsDeleteRequest::kDomainLevelFieldNumber;
const int SettingsDeleteRequest::kWorkflowLevelFieldNumber;
const int SettingsDeleteRequest::kLaunchplanLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SettingsDeleteRequest::SettingsDeleteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.SettingsDeleteRequest)
}
SettingsDeleteRequest::SettingsDeleteRequest(const SettingsDeleteRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_level();
  switch (from.level_case()) {
    case kGlobalLevel: {
      mutable_global_level()->::flyteidl::admin::GlobalLevel::MergeFrom(from.global_level());
      break;
    }
    case kProjectLevel: {
      mutable_project_level()->::flyteidl::admin::ProjectLevel::MergeFrom(from.project_level());
      break;
    }
    case kDomainLevel: {
      mutable_domain_level()->::flyteidl::admin::DomainLevel::MergeFrom(from.domain_level());
      break;
    }
    case kWorkflowLevel: {
      mutable_workflow_level()->::flyteidl::admin::WorkflowLevel::MergeFrom(from.workflow_level());
      break;
    }
    case kLaunchplanLevel: {
      mutable_launchplan_level()->::flyteidl::admin::LaunchplanLevel::MergeFrom(from.launchplan_level());
      break;
    }
    case LEVEL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.SettingsDeleteRequest)
}

void SettingsDeleteRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SettingsDeleteRequest_flyteidl_2fadmin_2fsettings_2eproto.base);
  clear_has_level();
}

SettingsDeleteRequest::~SettingsDeleteRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.SettingsDeleteRequest)
  SharedDtor();
}

void SettingsDeleteRequest::SharedDtor() {
  if (has_level()) {
    clear_level();
  }
}

void SettingsDeleteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SettingsDeleteRequest& SettingsDeleteRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SettingsDeleteRequest_flyteidl_2fadmin_2fsettings_2eproto.base);
  return *internal_default_instance();
}


void SettingsDeleteRequest::clear_level() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.admin.SettingsDeleteRequest)
  switch (level_case()) {
    case kGlobalLevel: {
      delete level_.global_level_;
      break;
    }
    case kProjectLevel: {
      delete level_.project_level_;
      break;
    }
    case kDomainLevel: {
      delete level_.domain_level_;
      break;
    }
    case kWorkflowLevel: {
      delete level_.workflow_level_;
      break;
    }
    case kLaunchplanLevel: {
      delete level_.launchplan_level_;
      break;
    }
    case LEVEL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LEVEL_NOT_SET;
}


void SettingsDeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.SettingsDeleteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_level();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SettingsDeleteRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SettingsDeleteRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.admin.GlobalLevel global_level = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::GlobalLevel::_InternalParse;
        object = msg->mutable_global_level();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.ProjectLevel project_level = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::ProjectLevel::_InternalParse;
        object = msg->mutable_project_level();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.DomainLevel domain_level = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::DomainLevel::_InternalParse;
        object = msg->mutable_domain_level();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.WorkflowLevel workflow_level = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::WorkflowLevel::_InternalParse;
        object = msg->mutable_workflow_level();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.LaunchplanLevel launchplan_level = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::LaunchplanLevel::_InternalParse;
        object = msg->mutable_launchplan_level();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SettingsDeleteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.SettingsDeleteRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.admin.GlobalLevel global_level = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_global_level()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.ProjectLevel project_level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_project_level()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.DomainLevel domain_level = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_domain_level()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.WorkflowLevel workflow_level = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_workflow_level()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.LaunchplanLevel launchplan_level = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_launchplan_level()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.SettingsDeleteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.SettingsDeleteRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SettingsDeleteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.SettingsDeleteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.admin.GlobalLevel global_level = 1;
  if (has_global_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::global_level(this), output);
  }

  // .flyteidl.admin.ProjectLevel project_level = 2;
  if (has_project_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::project_level(this), output);
  }

  // .flyteidl.admin.DomainLevel domain_level = 3;
  if (has_domain_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::domain_level(this), output);
  }

  // .flyteidl.admin.WorkflowLevel workflow_level = 4;
  if (has_workflow_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::workflow_level(this), output);
  }

  // .flyteidl.admin.LaunchplanLevel launchplan_level = 5;
  if (has_launchplan_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::launchplan_level(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.SettingsDeleteRequest)
}

::google::protobuf::uint8* SettingsDeleteRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.SettingsDeleteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.admin.GlobalLevel global_level = 1;
  if (has_global_level()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::global_level(this), target);
  }

  // .flyteidl.admin.ProjectLevel project_level = 2;
  if (has_project_level()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::project_level(this), target);
  }

  // .flyteidl.admin.DomainLevel domain_level = 3;
  if (has_domain_level()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::domain_level(this), target);
  }

  // .flyteidl.admin.WorkflowLevel workflow_level = 4;
  if (has_workflow_level()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::workflow_level(this), target);
  }

  // .flyteidl.admin.LaunchplanLevel launchplan_level = 5;
  if (has_launchplan_level()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::launchplan_level(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.SettingsDeleteRequest)
  return target;
}

size_t SettingsDeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.SettingsDeleteRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (level_case()) {
    // .flyteidl.admin.GlobalLevel global_level = 1;
    case kGlobalLevel: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *level_.global_level_);
      break;
    }
    // .flyteidl.admin.ProjectLevel project_level = 2;
    case kProjectLevel: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *level_.project_level_);
      break;
    }
    // .flyteidl.admin.DomainLevel domain_level = 3;
    case kDomainLevel: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *level_.domain_level_);
      break;
    }
    // .flyteidl.admin.WorkflowLevel workflow_level = 4;
    case kWorkflowLevel: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *level_.workflow_level_);
      break;
    }
    // .flyteidl.admin.LaunchplanLevel launchplan_level = 5;
    case kLaunchplanLevel: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *level_.launchplan_level_);
      break;
    }
    case LEVEL_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SettingsDeleteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.SettingsDeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SettingsDeleteRequest* source =
      ::google::protobuf::DynamicCastToGenerated<SettingsDeleteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.SettingsDeleteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.SettingsDeleteRequest)
    MergeFrom(*source);
  }
}

void SettingsDeleteRequest::MergeFrom(const SettingsDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.SettingsDeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.level_case()) {
    case kGlobalLevel: {
      mutable_global_level()->::flyteidl::admin::GlobalLevel::MergeFrom(from.global_level());
      break;
    }
    case kProjectLevel: {
      mutable_project_level()->::flyteidl::admin::ProjectLevel::MergeFrom(from.project_level());
      break;
    }
    case kDomainLevel: {
      mutable_domain_level()->::flyteidl::admin::DomainLevel::MergeFrom(from.domain_level());
      break;
    }
    case kWorkflowLevel: {
      mutable_workflow_level()->::flyteidl::admin::WorkflowLevel::MergeFrom(from.workflow_level());
      break;
    }
    case kLaunchplanLevel: {
      mutable_launchplan_level()->::flyteidl::admin::LaunchplanLevel::MergeFrom(from.launchplan_level());
      break;
    }
    case LEVEL_NOT_SET: {
      break;
    }
  }
}

void SettingsDeleteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.SettingsDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SettingsDeleteRequest::CopyFrom(const SettingsDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.SettingsDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SettingsDeleteRequest::IsInitialized() const {
  return true;
}

void SettingsDeleteRequest::Swap(SettingsDeleteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SettingsDeleteRequest::InternalSwap(SettingsDeleteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(level_, other->level_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata SettingsDeleteRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fsettings_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fsettings_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SettingsDeleteResponse::InitAsDefaultInstance() {
}
class SettingsDeleteResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SettingsDeleteResponse::SettingsDeleteResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.SettingsDeleteResponse)
}
SettingsDeleteResponse::SettingsDeleteResponse(const SettingsDeleteResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.SettingsDeleteResponse)
}

void SettingsDeleteResponse::SharedCtor() {
}

SettingsDeleteResponse::~SettingsDeleteResponse() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.SettingsDeleteResponse)
  SharedDtor();
}

void SettingsDeleteResponse::SharedDtor() {
}

void SettingsDeleteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SettingsDeleteResponse& SettingsDeleteResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SettingsDeleteResponse_flyteidl_2fadmin_2fsettings_2eproto.base);
  return *internal_default_instance();
}


void SettingsDeleteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.SettingsDeleteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SettingsDeleteResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SettingsDeleteResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SettingsDeleteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.SettingsDeleteResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.SettingsDeleteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.SettingsDeleteResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SettingsDeleteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.SettingsDeleteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.SettingsDeleteResponse)
}

::google::protobuf::uint8* SettingsDeleteResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.SettingsDeleteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.SettingsDeleteResponse)
  return target;
}

size_t SettingsDeleteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.SettingsDeleteResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SettingsDeleteResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.SettingsDeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SettingsDeleteResponse* source =
      ::google::protobuf::DynamicCastToGenerated<SettingsDeleteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.SettingsDeleteResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.SettingsDeleteResponse)
    MergeFrom(*source);
  }
}

void SettingsDeleteResponse::MergeFrom(const SettingsDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.SettingsDeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SettingsDeleteResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.SettingsDeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SettingsDeleteResponse::CopyFrom(const SettingsDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.SettingsDeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SettingsDeleteResponse::IsInitialized() const {
  return true;
}

void SettingsDeleteResponse::Swap(SettingsDeleteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SettingsDeleteResponse::InternalSwap(SettingsDeleteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SettingsDeleteResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fsettings_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fsettings_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace admin
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::flyteidl::admin::SettingsCollection* Arena::CreateMaybeMessage< ::flyteidl::admin::SettingsCollection >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::SettingsCollection >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::Settings_ProjectSettingsEntry_DoNotUse* Arena::CreateMaybeMessage< ::flyteidl::admin::Settings_ProjectSettingsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::Settings_ProjectSettingsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::Settings* Arena::CreateMaybeMessage< ::flyteidl::admin::Settings >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::Settings >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::ProjectSettings_DomainSettingsEntry_DoNotUse* Arena::CreateMaybeMessage< ::flyteidl::admin::ProjectSettings_DomainSettingsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::ProjectSettings_DomainSettingsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::ProjectSettings* Arena::CreateMaybeMessage< ::flyteidl::admin::ProjectSettings >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::ProjectSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::DomainSettings_WorkflowSettingsEntry_DoNotUse* Arena::CreateMaybeMessage< ::flyteidl::admin::DomainSettings_WorkflowSettingsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::DomainSettings_WorkflowSettingsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::DomainSettings* Arena::CreateMaybeMessage< ::flyteidl::admin::DomainSettings >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::DomainSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::WorkflowSettings_LaunchplanSettingsEntry_DoNotUse* Arena::CreateMaybeMessage< ::flyteidl::admin::WorkflowSettings_LaunchplanSettingsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::WorkflowSettings_LaunchplanSettingsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::WorkflowSettings* Arena::CreateMaybeMessage< ::flyteidl::admin::WorkflowSettings >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::WorkflowSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::LaunchplanSettings* Arena::CreateMaybeMessage< ::flyteidl::admin::LaunchplanSettings >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::LaunchplanSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::GlobalLevel* Arena::CreateMaybeMessage< ::flyteidl::admin::GlobalLevel >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::GlobalLevel >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::ProjectLevel* Arena::CreateMaybeMessage< ::flyteidl::admin::ProjectLevel >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::ProjectLevel >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::DomainLevel* Arena::CreateMaybeMessage< ::flyteidl::admin::DomainLevel >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::DomainLevel >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::WorkflowLevel* Arena::CreateMaybeMessage< ::flyteidl::admin::WorkflowLevel >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::WorkflowLevel >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::LaunchplanLevel* Arena::CreateMaybeMessage< ::flyteidl::admin::LaunchplanLevel >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::LaunchplanLevel >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::SettingsUpdateRequest* Arena::CreateMaybeMessage< ::flyteidl::admin::SettingsUpdateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::SettingsUpdateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::FullSettingsUpdateRequest* Arena::CreateMaybeMessage< ::flyteidl::admin::FullSettingsUpdateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::FullSettingsUpdateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::FullSettingsUpdateResponse* Arena::CreateMaybeMessage< ::flyteidl::admin::FullSettingsUpdateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::FullSettingsUpdateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::SettingsGetRequest* Arena::CreateMaybeMessage< ::flyteidl::admin::SettingsGetRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::SettingsGetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::SettingsGetResponse* Arena::CreateMaybeMessage< ::flyteidl::admin::SettingsGetResponse >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::SettingsGetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::FullSettingsGetRequest* Arena::CreateMaybeMessage< ::flyteidl::admin::FullSettingsGetRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::FullSettingsGetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::FullSettingsGetResponse* Arena::CreateMaybeMessage< ::flyteidl::admin::FullSettingsGetResponse >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::FullSettingsGetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::SettingsDeleteRequest* Arena::CreateMaybeMessage< ::flyteidl::admin::SettingsDeleteRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::SettingsDeleteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::SettingsDeleteResponse* Arena::CreateMaybeMessage< ::flyteidl::admin::SettingsDeleteResponse >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::SettingsDeleteResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
