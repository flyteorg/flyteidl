// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	service "github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/service"
	mock "github.com/stretchr/testify/mock"
)

// CacheServiceServer is an autogenerated mock type for the CacheServiceServer type
type CacheServiceServer struct {
	mock.Mock
}

type CacheServiceServer_EvictExecutionCache struct {
	*mock.Call
}

func (_m CacheServiceServer_EvictExecutionCache) Return(_a0 *service.EvictCacheResponse, _a1 error) *CacheServiceServer_EvictExecutionCache {
	return &CacheServiceServer_EvictExecutionCache{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *CacheServiceServer) OnEvictExecutionCache(_a0 context.Context, _a1 *service.EvictExecutionCacheRequest) *CacheServiceServer_EvictExecutionCache {
	c_call := _m.On("EvictExecutionCache", _a0, _a1)
	return &CacheServiceServer_EvictExecutionCache{Call: c_call}
}

func (_m *CacheServiceServer) OnEvictExecutionCacheMatch(matchers ...interface{}) *CacheServiceServer_EvictExecutionCache {
	c_call := _m.On("EvictExecutionCache", matchers...)
	return &CacheServiceServer_EvictExecutionCache{Call: c_call}
}

// EvictExecutionCache provides a mock function with given fields: _a0, _a1
func (_m *CacheServiceServer) EvictExecutionCache(_a0 context.Context, _a1 *service.EvictExecutionCacheRequest) (*service.EvictCacheResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *service.EvictCacheResponse
	if rf, ok := ret.Get(0).(func(context.Context, *service.EvictExecutionCacheRequest) *service.EvictCacheResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.EvictCacheResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *service.EvictExecutionCacheRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type CacheServiceServer_EvictTaskExecutionCache struct {
	*mock.Call
}

func (_m CacheServiceServer_EvictTaskExecutionCache) Return(_a0 *service.EvictCacheResponse, _a1 error) *CacheServiceServer_EvictTaskExecutionCache {
	return &CacheServiceServer_EvictTaskExecutionCache{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *CacheServiceServer) OnEvictTaskExecutionCache(_a0 context.Context, _a1 *service.EvictTaskExecutionCacheRequest) *CacheServiceServer_EvictTaskExecutionCache {
	c_call := _m.On("EvictTaskExecutionCache", _a0, _a1)
	return &CacheServiceServer_EvictTaskExecutionCache{Call: c_call}
}

func (_m *CacheServiceServer) OnEvictTaskExecutionCacheMatch(matchers ...interface{}) *CacheServiceServer_EvictTaskExecutionCache {
	c_call := _m.On("EvictTaskExecutionCache", matchers...)
	return &CacheServiceServer_EvictTaskExecutionCache{Call: c_call}
}

// EvictTaskExecutionCache provides a mock function with given fields: _a0, _a1
func (_m *CacheServiceServer) EvictTaskExecutionCache(_a0 context.Context, _a1 *service.EvictTaskExecutionCacheRequest) (*service.EvictCacheResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *service.EvictCacheResponse
	if rf, ok := ret.Get(0).(func(context.Context, *service.EvictTaskExecutionCacheRequest) *service.EvictCacheResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.EvictCacheResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *service.EvictTaskExecutionCacheRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
