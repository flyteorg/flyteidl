// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/signal.proto

#ifndef PROTOBUF_INCLUDED_flyteidl_2fadmin_2fsignal_2eproto
#define PROTOBUF_INCLUDED_flyteidl_2fadmin_2fsignal_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "flyteidl/core/identifier.pb.h"
#include "flyteidl/core/literals.pb.h"
#include "flyteidl/core/types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fsignal_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fadmin_2fsignal_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_flyteidl_2fadmin_2fsignal_2eproto();
namespace flyteidl {
namespace admin {
class Signal;
class SignalDefaultTypeInternal;
extern SignalDefaultTypeInternal _Signal_default_instance_;
class SignalGetOrCreateRequest;
class SignalGetOrCreateRequestDefaultTypeInternal;
extern SignalGetOrCreateRequestDefaultTypeInternal _SignalGetOrCreateRequest_default_instance_;
class SignalSetRequest;
class SignalSetRequestDefaultTypeInternal;
extern SignalSetRequestDefaultTypeInternal _SignalSetRequest_default_instance_;
class SignalSetResponse;
class SignalSetResponseDefaultTypeInternal;
extern SignalSetResponseDefaultTypeInternal _SignalSetResponse_default_instance_;
}  // namespace admin
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> ::flyteidl::admin::Signal* Arena::CreateMaybeMessage<::flyteidl::admin::Signal>(Arena*);
template<> ::flyteidl::admin::SignalGetOrCreateRequest* Arena::CreateMaybeMessage<::flyteidl::admin::SignalGetOrCreateRequest>(Arena*);
template<> ::flyteidl::admin::SignalSetRequest* Arena::CreateMaybeMessage<::flyteidl::admin::SignalSetRequest>(Arena*);
template<> ::flyteidl::admin::SignalSetResponse* Arena::CreateMaybeMessage<::flyteidl::admin::SignalSetResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace flyteidl {
namespace admin {

// ===================================================================

class SignalGetOrCreateRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.SignalGetOrCreateRequest) */ {
 public:
  SignalGetOrCreateRequest();
  virtual ~SignalGetOrCreateRequest();

  SignalGetOrCreateRequest(const SignalGetOrCreateRequest& from);

  inline SignalGetOrCreateRequest& operator=(const SignalGetOrCreateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SignalGetOrCreateRequest(SignalGetOrCreateRequest&& from) noexcept
    : SignalGetOrCreateRequest() {
    *this = ::std::move(from);
  }

  inline SignalGetOrCreateRequest& operator=(SignalGetOrCreateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SignalGetOrCreateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignalGetOrCreateRequest* internal_default_instance() {
    return reinterpret_cast<const SignalGetOrCreateRequest*>(
               &_SignalGetOrCreateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SignalGetOrCreateRequest* other);
  friend void swap(SignalGetOrCreateRequest& a, SignalGetOrCreateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SignalGetOrCreateRequest* New() const final {
    return CreateMaybeMessage<SignalGetOrCreateRequest>(nullptr);
  }

  SignalGetOrCreateRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SignalGetOrCreateRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SignalGetOrCreateRequest& from);
  void MergeFrom(const SignalGetOrCreateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignalGetOrCreateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.core.SignalIdentifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::flyteidl::core::SignalIdentifier& id() const;
  ::flyteidl::core::SignalIdentifier* release_id();
  ::flyteidl::core::SignalIdentifier* mutable_id();
  void set_allocated_id(::flyteidl::core::SignalIdentifier* id);

  // .flyteidl.core.LiteralType type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::flyteidl::core::LiteralType& type() const;
  ::flyteidl::core::LiteralType* release_type();
  ::flyteidl::core::LiteralType* mutable_type();
  void set_allocated_type(::flyteidl::core::LiteralType* type);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.SignalGetOrCreateRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::core::SignalIdentifier* id_;
  ::flyteidl::core::LiteralType* type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fsignal_2eproto;
};
// -------------------------------------------------------------------

class SignalSetRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.SignalSetRequest) */ {
 public:
  SignalSetRequest();
  virtual ~SignalSetRequest();

  SignalSetRequest(const SignalSetRequest& from);

  inline SignalSetRequest& operator=(const SignalSetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SignalSetRequest(SignalSetRequest&& from) noexcept
    : SignalSetRequest() {
    *this = ::std::move(from);
  }

  inline SignalSetRequest& operator=(SignalSetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SignalSetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignalSetRequest* internal_default_instance() {
    return reinterpret_cast<const SignalSetRequest*>(
               &_SignalSetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SignalSetRequest* other);
  friend void swap(SignalSetRequest& a, SignalSetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SignalSetRequest* New() const final {
    return CreateMaybeMessage<SignalSetRequest>(nullptr);
  }

  SignalSetRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SignalSetRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SignalSetRequest& from);
  void MergeFrom(const SignalSetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignalSetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.core.SignalIdentifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::flyteidl::core::SignalIdentifier& id() const;
  ::flyteidl::core::SignalIdentifier* release_id();
  ::flyteidl::core::SignalIdentifier* mutable_id();
  void set_allocated_id(::flyteidl::core::SignalIdentifier* id);

  // .flyteidl.core.Literal value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::flyteidl::core::Literal& value() const;
  ::flyteidl::core::Literal* release_value();
  ::flyteidl::core::Literal* mutable_value();
  void set_allocated_value(::flyteidl::core::Literal* value);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.SignalSetRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::core::SignalIdentifier* id_;
  ::flyteidl::core::Literal* value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fsignal_2eproto;
};
// -------------------------------------------------------------------

class SignalSetResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.SignalSetResponse) */ {
 public:
  SignalSetResponse();
  virtual ~SignalSetResponse();

  SignalSetResponse(const SignalSetResponse& from);

  inline SignalSetResponse& operator=(const SignalSetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SignalSetResponse(SignalSetResponse&& from) noexcept
    : SignalSetResponse() {
    *this = ::std::move(from);
  }

  inline SignalSetResponse& operator=(SignalSetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SignalSetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignalSetResponse* internal_default_instance() {
    return reinterpret_cast<const SignalSetResponse*>(
               &_SignalSetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SignalSetResponse* other);
  friend void swap(SignalSetResponse& a, SignalSetResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SignalSetResponse* New() const final {
    return CreateMaybeMessage<SignalSetResponse>(nullptr);
  }

  SignalSetResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SignalSetResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SignalSetResponse& from);
  void MergeFrom(const SignalSetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignalSetResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyteidl.admin.SignalSetResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fsignal_2eproto;
};
// -------------------------------------------------------------------

class Signal final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.Signal) */ {
 public:
  Signal();
  virtual ~Signal();

  Signal(const Signal& from);

  inline Signal& operator=(const Signal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Signal(Signal&& from) noexcept
    : Signal() {
    *this = ::std::move(from);
  }

  inline Signal& operator=(Signal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Signal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Signal* internal_default_instance() {
    return reinterpret_cast<const Signal*>(
               &_Signal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Signal* other);
  friend void swap(Signal& a, Signal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Signal* New() const final {
    return CreateMaybeMessage<Signal>(nullptr);
  }

  Signal* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Signal>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Signal& from);
  void MergeFrom(const Signal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Signal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.core.SignalIdentifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::flyteidl::core::SignalIdentifier& id() const;
  ::flyteidl::core::SignalIdentifier* release_id();
  ::flyteidl::core::SignalIdentifier* mutable_id();
  void set_allocated_id(::flyteidl::core::SignalIdentifier* id);

  // .flyteidl.core.LiteralType type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::flyteidl::core::LiteralType& type() const;
  ::flyteidl::core::LiteralType* release_type();
  ::flyteidl::core::LiteralType* mutable_type();
  void set_allocated_type(::flyteidl::core::LiteralType* type);

  // .flyteidl.core.Literal value = 3;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  const ::flyteidl::core::Literal& value() const;
  ::flyteidl::core::Literal* release_value();
  ::flyteidl::core::Literal* mutable_value();
  void set_allocated_value(::flyteidl::core::Literal* value);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.Signal)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::core::SignalIdentifier* id_;
  ::flyteidl::core::LiteralType* type_;
  ::flyteidl::core::Literal* value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fsignal_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SignalGetOrCreateRequest

// .flyteidl.core.SignalIdentifier id = 1;
inline bool SignalGetOrCreateRequest::has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline const ::flyteidl::core::SignalIdentifier& SignalGetOrCreateRequest::id() const {
  const ::flyteidl::core::SignalIdentifier* p = id_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.SignalGetOrCreateRequest.id)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::SignalIdentifier*>(
      &::flyteidl::core::_SignalIdentifier_default_instance_);
}
inline ::flyteidl::core::SignalIdentifier* SignalGetOrCreateRequest::release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.SignalGetOrCreateRequest.id)
  
  ::flyteidl::core::SignalIdentifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::SignalIdentifier* SignalGetOrCreateRequest::mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::SignalIdentifier>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.SignalGetOrCreateRequest.id)
  return id_;
}
inline void SignalGetOrCreateRequest::set_allocated_id(::flyteidl::core::SignalIdentifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.SignalGetOrCreateRequest.id)
}

// .flyteidl.core.LiteralType type = 2;
inline bool SignalGetOrCreateRequest::has_type() const {
  return this != internal_default_instance() && type_ != nullptr;
}
inline const ::flyteidl::core::LiteralType& SignalGetOrCreateRequest::type() const {
  const ::flyteidl::core::LiteralType* p = type_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.SignalGetOrCreateRequest.type)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::LiteralType*>(
      &::flyteidl::core::_LiteralType_default_instance_);
}
inline ::flyteidl::core::LiteralType* SignalGetOrCreateRequest::release_type() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.SignalGetOrCreateRequest.type)
  
  ::flyteidl::core::LiteralType* temp = type_;
  type_ = nullptr;
  return temp;
}
inline ::flyteidl::core::LiteralType* SignalGetOrCreateRequest::mutable_type() {
  
  if (type_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::LiteralType>(GetArenaNoVirtual());
    type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.SignalGetOrCreateRequest.type)
  return type_;
}
inline void SignalGetOrCreateRequest::set_allocated_type(::flyteidl::core::LiteralType* type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(type_);
  }
  if (type) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    
  } else {
    
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.SignalGetOrCreateRequest.type)
}

// -------------------------------------------------------------------

// SignalSetRequest

// .flyteidl.core.SignalIdentifier id = 1;
inline bool SignalSetRequest::has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline const ::flyteidl::core::SignalIdentifier& SignalSetRequest::id() const {
  const ::flyteidl::core::SignalIdentifier* p = id_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.SignalSetRequest.id)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::SignalIdentifier*>(
      &::flyteidl::core::_SignalIdentifier_default_instance_);
}
inline ::flyteidl::core::SignalIdentifier* SignalSetRequest::release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.SignalSetRequest.id)
  
  ::flyteidl::core::SignalIdentifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::SignalIdentifier* SignalSetRequest::mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::SignalIdentifier>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.SignalSetRequest.id)
  return id_;
}
inline void SignalSetRequest::set_allocated_id(::flyteidl::core::SignalIdentifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.SignalSetRequest.id)
}

// .flyteidl.core.Literal value = 2;
inline bool SignalSetRequest::has_value() const {
  return this != internal_default_instance() && value_ != nullptr;
}
inline const ::flyteidl::core::Literal& SignalSetRequest::value() const {
  const ::flyteidl::core::Literal* p = value_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.SignalSetRequest.value)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::Literal*>(
      &::flyteidl::core::_Literal_default_instance_);
}
inline ::flyteidl::core::Literal* SignalSetRequest::release_value() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.SignalSetRequest.value)
  
  ::flyteidl::core::Literal* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::flyteidl::core::Literal* SignalSetRequest::mutable_value() {
  
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::Literal>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.SignalSetRequest.value)
  return value_;
}
inline void SignalSetRequest::set_allocated_value(::flyteidl::core::Literal* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_);
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.SignalSetRequest.value)
}

// -------------------------------------------------------------------

// SignalSetResponse

// -------------------------------------------------------------------

// Signal

// .flyteidl.core.SignalIdentifier id = 1;
inline bool Signal::has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline const ::flyteidl::core::SignalIdentifier& Signal::id() const {
  const ::flyteidl::core::SignalIdentifier* p = id_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.Signal.id)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::SignalIdentifier*>(
      &::flyteidl::core::_SignalIdentifier_default_instance_);
}
inline ::flyteidl::core::SignalIdentifier* Signal::release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Signal.id)
  
  ::flyteidl::core::SignalIdentifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::SignalIdentifier* Signal::mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::SignalIdentifier>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Signal.id)
  return id_;
}
inline void Signal::set_allocated_id(::flyteidl::core::SignalIdentifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Signal.id)
}

// .flyteidl.core.LiteralType type = 2;
inline bool Signal::has_type() const {
  return this != internal_default_instance() && type_ != nullptr;
}
inline const ::flyteidl::core::LiteralType& Signal::type() const {
  const ::flyteidl::core::LiteralType* p = type_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.Signal.type)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::LiteralType*>(
      &::flyteidl::core::_LiteralType_default_instance_);
}
inline ::flyteidl::core::LiteralType* Signal::release_type() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Signal.type)
  
  ::flyteidl::core::LiteralType* temp = type_;
  type_ = nullptr;
  return temp;
}
inline ::flyteidl::core::LiteralType* Signal::mutable_type() {
  
  if (type_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::LiteralType>(GetArenaNoVirtual());
    type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Signal.type)
  return type_;
}
inline void Signal::set_allocated_type(::flyteidl::core::LiteralType* type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(type_);
  }
  if (type) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    
  } else {
    
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Signal.type)
}

// .flyteidl.core.Literal value = 3;
inline bool Signal::has_value() const {
  return this != internal_default_instance() && value_ != nullptr;
}
inline const ::flyteidl::core::Literal& Signal::value() const {
  const ::flyteidl::core::Literal* p = value_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.Signal.value)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::Literal*>(
      &::flyteidl::core::_Literal_default_instance_);
}
inline ::flyteidl::core::Literal* Signal::release_value() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Signal.value)
  
  ::flyteidl::core::Literal* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::flyteidl::core::Literal* Signal::mutable_value() {
  
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::Literal>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Signal.value)
  return value_;
}
inline void Signal::set_allocated_value(::flyteidl::core::Literal* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_);
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Signal.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace admin
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_flyteidl_2fadmin_2fsignal_2eproto
