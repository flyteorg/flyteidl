// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/catalog.proto

package com.flyteidl.core;

public interface CatalogMetadataOrBuilder extends
    // @@protoc_insertion_point(interface_extends:flyteidl.core.CatalogMetadata)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Dataset ID in the catalog
   * </pre>
   *
   * <code>.flyteidl.core.Identifier dataset_id = 1 [json_name = "datasetId"];</code>
   * @return Whether the datasetId field is set.
   */
  boolean hasDatasetId();
  /**
   * <pre>
   * Dataset ID in the catalog
   * </pre>
   *
   * <code>.flyteidl.core.Identifier dataset_id = 1 [json_name = "datasetId"];</code>
   * @return The datasetId.
   */
  com.flyteidl.core.Identifier getDatasetId();
  /**
   * <pre>
   * Dataset ID in the catalog
   * </pre>
   *
   * <code>.flyteidl.core.Identifier dataset_id = 1 [json_name = "datasetId"];</code>
   */
  com.flyteidl.core.IdentifierOrBuilder getDatasetIdOrBuilder();

  /**
   * <pre>
   * Artifact tag in the catalog
   * </pre>
   *
   * <code>.flyteidl.core.CatalogArtifactTag artifact_tag = 2 [json_name = "artifactTag"];</code>
   * @return Whether the artifactTag field is set.
   */
  boolean hasArtifactTag();
  /**
   * <pre>
   * Artifact tag in the catalog
   * </pre>
   *
   * <code>.flyteidl.core.CatalogArtifactTag artifact_tag = 2 [json_name = "artifactTag"];</code>
   * @return The artifactTag.
   */
  com.flyteidl.core.CatalogArtifactTag getArtifactTag();
  /**
   * <pre>
   * Artifact tag in the catalog
   * </pre>
   *
   * <code>.flyteidl.core.CatalogArtifactTag artifact_tag = 2 [json_name = "artifactTag"];</code>
   */
  com.flyteidl.core.CatalogArtifactTagOrBuilder getArtifactTagOrBuilder();

  /**
   * <pre>
   * Today we only support TaskExecutionIdentifier as a source, as catalog caching only works for task executions
   * </pre>
   *
   * <code>.flyteidl.core.TaskExecutionIdentifier source_task_execution = 3 [json_name = "sourceTaskExecution"];</code>
   * @return Whether the sourceTaskExecution field is set.
   */
  boolean hasSourceTaskExecution();
  /**
   * <pre>
   * Today we only support TaskExecutionIdentifier as a source, as catalog caching only works for task executions
   * </pre>
   *
   * <code>.flyteidl.core.TaskExecutionIdentifier source_task_execution = 3 [json_name = "sourceTaskExecution"];</code>
   * @return The sourceTaskExecution.
   */
  com.flyteidl.core.TaskExecutionIdentifier getSourceTaskExecution();
  /**
   * <pre>
   * Today we only support TaskExecutionIdentifier as a source, as catalog caching only works for task executions
   * </pre>
   *
   * <code>.flyteidl.core.TaskExecutionIdentifier source_task_execution = 3 [json_name = "sourceTaskExecution"];</code>
   */
  com.flyteidl.core.TaskExecutionIdentifierOrBuilder getSourceTaskExecutionOrBuilder();

  public com.flyteidl.core.CatalogMetadata.SourceExecutionCase getSourceExecutionCase();
}
