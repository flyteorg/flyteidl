// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/service/auth.proto

#ifndef PROTOBUF_INCLUDED_flyteidl_2fservice_2fauth_2eproto
#define PROTOBUF_INCLUDED_flyteidl_2fservice_2fauth_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fservice_2fauth_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fservice_2fauth_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_flyteidl_2fservice_2fauth_2eproto();
namespace flyteidl {
namespace service {
class OAuth2MetadataRequest;
class OAuth2MetadataRequestDefaultTypeInternal;
extern OAuth2MetadataRequestDefaultTypeInternal _OAuth2MetadataRequest_default_instance_;
class OAuth2MetadataResponse;
class OAuth2MetadataResponseDefaultTypeInternal;
extern OAuth2MetadataResponseDefaultTypeInternal _OAuth2MetadataResponse_default_instance_;
class PublicClientAuthConfigRequest;
class PublicClientAuthConfigRequestDefaultTypeInternal;
extern PublicClientAuthConfigRequestDefaultTypeInternal _PublicClientAuthConfigRequest_default_instance_;
class PublicClientAuthConfigResponse;
class PublicClientAuthConfigResponseDefaultTypeInternal;
extern PublicClientAuthConfigResponseDefaultTypeInternal _PublicClientAuthConfigResponse_default_instance_;
}  // namespace service
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> ::flyteidl::service::OAuth2MetadataRequest* Arena::CreateMaybeMessage<::flyteidl::service::OAuth2MetadataRequest>(Arena*);
template<> ::flyteidl::service::OAuth2MetadataResponse* Arena::CreateMaybeMessage<::flyteidl::service::OAuth2MetadataResponse>(Arena*);
template<> ::flyteidl::service::PublicClientAuthConfigRequest* Arena::CreateMaybeMessage<::flyteidl::service::PublicClientAuthConfigRequest>(Arena*);
template<> ::flyteidl::service::PublicClientAuthConfigResponse* Arena::CreateMaybeMessage<::flyteidl::service::PublicClientAuthConfigResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace flyteidl {
namespace service {

// ===================================================================

class OAuth2MetadataRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.service.OAuth2MetadataRequest) */ {
 public:
  OAuth2MetadataRequest();
  virtual ~OAuth2MetadataRequest();

  OAuth2MetadataRequest(const OAuth2MetadataRequest& from);

  inline OAuth2MetadataRequest& operator=(const OAuth2MetadataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OAuth2MetadataRequest(OAuth2MetadataRequest&& from) noexcept
    : OAuth2MetadataRequest() {
    *this = ::std::move(from);
  }

  inline OAuth2MetadataRequest& operator=(OAuth2MetadataRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const OAuth2MetadataRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OAuth2MetadataRequest* internal_default_instance() {
    return reinterpret_cast<const OAuth2MetadataRequest*>(
               &_OAuth2MetadataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(OAuth2MetadataRequest* other);
  friend void swap(OAuth2MetadataRequest& a, OAuth2MetadataRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OAuth2MetadataRequest* New() const final {
    return CreateMaybeMessage<OAuth2MetadataRequest>(nullptr);
  }

  OAuth2MetadataRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OAuth2MetadataRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OAuth2MetadataRequest& from);
  void MergeFrom(const OAuth2MetadataRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OAuth2MetadataRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyteidl.service.OAuth2MetadataRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fservice_2fauth_2eproto;
};
// -------------------------------------------------------------------

class OAuth2MetadataResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.service.OAuth2MetadataResponse) */ {
 public:
  OAuth2MetadataResponse();
  virtual ~OAuth2MetadataResponse();

  OAuth2MetadataResponse(const OAuth2MetadataResponse& from);

  inline OAuth2MetadataResponse& operator=(const OAuth2MetadataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OAuth2MetadataResponse(OAuth2MetadataResponse&& from) noexcept
    : OAuth2MetadataResponse() {
    *this = ::std::move(from);
  }

  inline OAuth2MetadataResponse& operator=(OAuth2MetadataResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const OAuth2MetadataResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OAuth2MetadataResponse* internal_default_instance() {
    return reinterpret_cast<const OAuth2MetadataResponse*>(
               &_OAuth2MetadataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(OAuth2MetadataResponse* other);
  friend void swap(OAuth2MetadataResponse& a, OAuth2MetadataResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OAuth2MetadataResponse* New() const final {
    return CreateMaybeMessage<OAuth2MetadataResponse>(nullptr);
  }

  OAuth2MetadataResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OAuth2MetadataResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OAuth2MetadataResponse& from);
  void MergeFrom(const OAuth2MetadataResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OAuth2MetadataResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string response_types_supported = 4;
  int response_types_supported_size() const;
  void clear_response_types_supported();
  static const int kResponseTypesSupportedFieldNumber = 4;
  const ::std::string& response_types_supported(int index) const;
  ::std::string* mutable_response_types_supported(int index);
  void set_response_types_supported(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_response_types_supported(int index, ::std::string&& value);
  #endif
  void set_response_types_supported(int index, const char* value);
  void set_response_types_supported(int index, const char* value, size_t size);
  ::std::string* add_response_types_supported();
  void add_response_types_supported(const ::std::string& value);
  #if LANG_CXX11
  void add_response_types_supported(::std::string&& value);
  #endif
  void add_response_types_supported(const char* value);
  void add_response_types_supported(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& response_types_supported() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_response_types_supported();

  // repeated string scopes_supported = 5;
  int scopes_supported_size() const;
  void clear_scopes_supported();
  static const int kScopesSupportedFieldNumber = 5;
  const ::std::string& scopes_supported(int index) const;
  ::std::string* mutable_scopes_supported(int index);
  void set_scopes_supported(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_scopes_supported(int index, ::std::string&& value);
  #endif
  void set_scopes_supported(int index, const char* value);
  void set_scopes_supported(int index, const char* value, size_t size);
  ::std::string* add_scopes_supported();
  void add_scopes_supported(const ::std::string& value);
  #if LANG_CXX11
  void add_scopes_supported(::std::string&& value);
  #endif
  void add_scopes_supported(const char* value);
  void add_scopes_supported(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& scopes_supported() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_scopes_supported();

  // repeated string token_endpoint_auth_methods_supported = 6;
  int token_endpoint_auth_methods_supported_size() const;
  void clear_token_endpoint_auth_methods_supported();
  static const int kTokenEndpointAuthMethodsSupportedFieldNumber = 6;
  const ::std::string& token_endpoint_auth_methods_supported(int index) const;
  ::std::string* mutable_token_endpoint_auth_methods_supported(int index);
  void set_token_endpoint_auth_methods_supported(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_token_endpoint_auth_methods_supported(int index, ::std::string&& value);
  #endif
  void set_token_endpoint_auth_methods_supported(int index, const char* value);
  void set_token_endpoint_auth_methods_supported(int index, const char* value, size_t size);
  ::std::string* add_token_endpoint_auth_methods_supported();
  void add_token_endpoint_auth_methods_supported(const ::std::string& value);
  #if LANG_CXX11
  void add_token_endpoint_auth_methods_supported(::std::string&& value);
  #endif
  void add_token_endpoint_auth_methods_supported(const char* value);
  void add_token_endpoint_auth_methods_supported(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& token_endpoint_auth_methods_supported() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_token_endpoint_auth_methods_supported();

  // repeated string code_challenge_methods_supported = 8;
  int code_challenge_methods_supported_size() const;
  void clear_code_challenge_methods_supported();
  static const int kCodeChallengeMethodsSupportedFieldNumber = 8;
  const ::std::string& code_challenge_methods_supported(int index) const;
  ::std::string* mutable_code_challenge_methods_supported(int index);
  void set_code_challenge_methods_supported(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_code_challenge_methods_supported(int index, ::std::string&& value);
  #endif
  void set_code_challenge_methods_supported(int index, const char* value);
  void set_code_challenge_methods_supported(int index, const char* value, size_t size);
  ::std::string* add_code_challenge_methods_supported();
  void add_code_challenge_methods_supported(const ::std::string& value);
  #if LANG_CXX11
  void add_code_challenge_methods_supported(::std::string&& value);
  #endif
  void add_code_challenge_methods_supported(const char* value);
  void add_code_challenge_methods_supported(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& code_challenge_methods_supported() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_code_challenge_methods_supported();

  // repeated string grant_types_supported = 9;
  int grant_types_supported_size() const;
  void clear_grant_types_supported();
  static const int kGrantTypesSupportedFieldNumber = 9;
  const ::std::string& grant_types_supported(int index) const;
  ::std::string* mutable_grant_types_supported(int index);
  void set_grant_types_supported(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_grant_types_supported(int index, ::std::string&& value);
  #endif
  void set_grant_types_supported(int index, const char* value);
  void set_grant_types_supported(int index, const char* value, size_t size);
  ::std::string* add_grant_types_supported();
  void add_grant_types_supported(const ::std::string& value);
  #if LANG_CXX11
  void add_grant_types_supported(::std::string&& value);
  #endif
  void add_grant_types_supported(const char* value);
  void add_grant_types_supported(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& grant_types_supported() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_grant_types_supported();

  // string issuer = 1;
  void clear_issuer();
  static const int kIssuerFieldNumber = 1;
  const ::std::string& issuer() const;
  void set_issuer(const ::std::string& value);
  #if LANG_CXX11
  void set_issuer(::std::string&& value);
  #endif
  void set_issuer(const char* value);
  void set_issuer(const char* value, size_t size);
  ::std::string* mutable_issuer();
  ::std::string* release_issuer();
  void set_allocated_issuer(::std::string* issuer);

  // string authorization_endpoint = 2;
  void clear_authorization_endpoint();
  static const int kAuthorizationEndpointFieldNumber = 2;
  const ::std::string& authorization_endpoint() const;
  void set_authorization_endpoint(const ::std::string& value);
  #if LANG_CXX11
  void set_authorization_endpoint(::std::string&& value);
  #endif
  void set_authorization_endpoint(const char* value);
  void set_authorization_endpoint(const char* value, size_t size);
  ::std::string* mutable_authorization_endpoint();
  ::std::string* release_authorization_endpoint();
  void set_allocated_authorization_endpoint(::std::string* authorization_endpoint);

  // string token_endpoint = 3;
  void clear_token_endpoint();
  static const int kTokenEndpointFieldNumber = 3;
  const ::std::string& token_endpoint() const;
  void set_token_endpoint(const ::std::string& value);
  #if LANG_CXX11
  void set_token_endpoint(::std::string&& value);
  #endif
  void set_token_endpoint(const char* value);
  void set_token_endpoint(const char* value, size_t size);
  ::std::string* mutable_token_endpoint();
  ::std::string* release_token_endpoint();
  void set_allocated_token_endpoint(::std::string* token_endpoint);

  // string jwks_uri = 7;
  void clear_jwks_uri();
  static const int kJwksUriFieldNumber = 7;
  const ::std::string& jwks_uri() const;
  void set_jwks_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_jwks_uri(::std::string&& value);
  #endif
  void set_jwks_uri(const char* value);
  void set_jwks_uri(const char* value, size_t size);
  ::std::string* mutable_jwks_uri();
  ::std::string* release_jwks_uri();
  void set_allocated_jwks_uri(::std::string* jwks_uri);

  // string device_authorization_endpoint = 10;
  void clear_device_authorization_endpoint();
  static const int kDeviceAuthorizationEndpointFieldNumber = 10;
  const ::std::string& device_authorization_endpoint() const;
  void set_device_authorization_endpoint(const ::std::string& value);
  #if LANG_CXX11
  void set_device_authorization_endpoint(::std::string&& value);
  #endif
  void set_device_authorization_endpoint(const char* value);
  void set_device_authorization_endpoint(const char* value, size_t size);
  ::std::string* mutable_device_authorization_endpoint();
  ::std::string* release_device_authorization_endpoint();
  void set_allocated_device_authorization_endpoint(::std::string* device_authorization_endpoint);

  // @@protoc_insertion_point(class_scope:flyteidl.service.OAuth2MetadataResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> response_types_supported_;
  ::google::protobuf::RepeatedPtrField<::std::string> scopes_supported_;
  ::google::protobuf::RepeatedPtrField<::std::string> token_endpoint_auth_methods_supported_;
  ::google::protobuf::RepeatedPtrField<::std::string> code_challenge_methods_supported_;
  ::google::protobuf::RepeatedPtrField<::std::string> grant_types_supported_;
  ::google::protobuf::internal::ArenaStringPtr issuer_;
  ::google::protobuf::internal::ArenaStringPtr authorization_endpoint_;
  ::google::protobuf::internal::ArenaStringPtr token_endpoint_;
  ::google::protobuf::internal::ArenaStringPtr jwks_uri_;
  ::google::protobuf::internal::ArenaStringPtr device_authorization_endpoint_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fservice_2fauth_2eproto;
};
// -------------------------------------------------------------------

class PublicClientAuthConfigRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.service.PublicClientAuthConfigRequest) */ {
 public:
  PublicClientAuthConfigRequest();
  virtual ~PublicClientAuthConfigRequest();

  PublicClientAuthConfigRequest(const PublicClientAuthConfigRequest& from);

  inline PublicClientAuthConfigRequest& operator=(const PublicClientAuthConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PublicClientAuthConfigRequest(PublicClientAuthConfigRequest&& from) noexcept
    : PublicClientAuthConfigRequest() {
    *this = ::std::move(from);
  }

  inline PublicClientAuthConfigRequest& operator=(PublicClientAuthConfigRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PublicClientAuthConfigRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PublicClientAuthConfigRequest* internal_default_instance() {
    return reinterpret_cast<const PublicClientAuthConfigRequest*>(
               &_PublicClientAuthConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PublicClientAuthConfigRequest* other);
  friend void swap(PublicClientAuthConfigRequest& a, PublicClientAuthConfigRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PublicClientAuthConfigRequest* New() const final {
    return CreateMaybeMessage<PublicClientAuthConfigRequest>(nullptr);
  }

  PublicClientAuthConfigRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PublicClientAuthConfigRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PublicClientAuthConfigRequest& from);
  void MergeFrom(const PublicClientAuthConfigRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublicClientAuthConfigRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyteidl.service.PublicClientAuthConfigRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fservice_2fauth_2eproto;
};
// -------------------------------------------------------------------

class PublicClientAuthConfigResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.service.PublicClientAuthConfigResponse) */ {
 public:
  PublicClientAuthConfigResponse();
  virtual ~PublicClientAuthConfigResponse();

  PublicClientAuthConfigResponse(const PublicClientAuthConfigResponse& from);

  inline PublicClientAuthConfigResponse& operator=(const PublicClientAuthConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PublicClientAuthConfigResponse(PublicClientAuthConfigResponse&& from) noexcept
    : PublicClientAuthConfigResponse() {
    *this = ::std::move(from);
  }

  inline PublicClientAuthConfigResponse& operator=(PublicClientAuthConfigResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PublicClientAuthConfigResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PublicClientAuthConfigResponse* internal_default_instance() {
    return reinterpret_cast<const PublicClientAuthConfigResponse*>(
               &_PublicClientAuthConfigResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(PublicClientAuthConfigResponse* other);
  friend void swap(PublicClientAuthConfigResponse& a, PublicClientAuthConfigResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PublicClientAuthConfigResponse* New() const final {
    return CreateMaybeMessage<PublicClientAuthConfigResponse>(nullptr);
  }

  PublicClientAuthConfigResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PublicClientAuthConfigResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PublicClientAuthConfigResponse& from);
  void MergeFrom(const PublicClientAuthConfigResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublicClientAuthConfigResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string scopes = 3;
  int scopes_size() const;
  void clear_scopes();
  static const int kScopesFieldNumber = 3;
  const ::std::string& scopes(int index) const;
  ::std::string* mutable_scopes(int index);
  void set_scopes(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_scopes(int index, ::std::string&& value);
  #endif
  void set_scopes(int index, const char* value);
  void set_scopes(int index, const char* value, size_t size);
  ::std::string* add_scopes();
  void add_scopes(const ::std::string& value);
  #if LANG_CXX11
  void add_scopes(::std::string&& value);
  #endif
  void add_scopes(const char* value);
  void add_scopes(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& scopes() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_scopes();

  // string client_id = 1;
  void clear_client_id();
  static const int kClientIdFieldNumber = 1;
  const ::std::string& client_id() const;
  void set_client_id(const ::std::string& value);
  #if LANG_CXX11
  void set_client_id(::std::string&& value);
  #endif
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  ::std::string* mutable_client_id();
  ::std::string* release_client_id();
  void set_allocated_client_id(::std::string* client_id);

  // string redirect_uri = 2;
  void clear_redirect_uri();
  static const int kRedirectUriFieldNumber = 2;
  const ::std::string& redirect_uri() const;
  void set_redirect_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_redirect_uri(::std::string&& value);
  #endif
  void set_redirect_uri(const char* value);
  void set_redirect_uri(const char* value, size_t size);
  ::std::string* mutable_redirect_uri();
  ::std::string* release_redirect_uri();
  void set_allocated_redirect_uri(::std::string* redirect_uri);

  // string authorization_metadata_key = 4;
  void clear_authorization_metadata_key();
  static const int kAuthorizationMetadataKeyFieldNumber = 4;
  const ::std::string& authorization_metadata_key() const;
  void set_authorization_metadata_key(const ::std::string& value);
  #if LANG_CXX11
  void set_authorization_metadata_key(::std::string&& value);
  #endif
  void set_authorization_metadata_key(const char* value);
  void set_authorization_metadata_key(const char* value, size_t size);
  ::std::string* mutable_authorization_metadata_key();
  ::std::string* release_authorization_metadata_key();
  void set_allocated_authorization_metadata_key(::std::string* authorization_metadata_key);

  // string service_http_endpoint = 5;
  void clear_service_http_endpoint();
  static const int kServiceHttpEndpointFieldNumber = 5;
  const ::std::string& service_http_endpoint() const;
  void set_service_http_endpoint(const ::std::string& value);
  #if LANG_CXX11
  void set_service_http_endpoint(::std::string&& value);
  #endif
  void set_service_http_endpoint(const char* value);
  void set_service_http_endpoint(const char* value, size_t size);
  ::std::string* mutable_service_http_endpoint();
  ::std::string* release_service_http_endpoint();
  void set_allocated_service_http_endpoint(::std::string* service_http_endpoint);

  // string audience = 6;
  void clear_audience();
  static const int kAudienceFieldNumber = 6;
  const ::std::string& audience() const;
  void set_audience(const ::std::string& value);
  #if LANG_CXX11
  void set_audience(::std::string&& value);
  #endif
  void set_audience(const char* value);
  void set_audience(const char* value, size_t size);
  ::std::string* mutable_audience();
  ::std::string* release_audience();
  void set_allocated_audience(::std::string* audience);

  // @@protoc_insertion_point(class_scope:flyteidl.service.PublicClientAuthConfigResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> scopes_;
  ::google::protobuf::internal::ArenaStringPtr client_id_;
  ::google::protobuf::internal::ArenaStringPtr redirect_uri_;
  ::google::protobuf::internal::ArenaStringPtr authorization_metadata_key_;
  ::google::protobuf::internal::ArenaStringPtr service_http_endpoint_;
  ::google::protobuf::internal::ArenaStringPtr audience_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fservice_2fauth_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OAuth2MetadataRequest

// -------------------------------------------------------------------

// OAuth2MetadataResponse

// string issuer = 1;
inline void OAuth2MetadataResponse::clear_issuer() {
  issuer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OAuth2MetadataResponse::issuer() const {
  // @@protoc_insertion_point(field_get:flyteidl.service.OAuth2MetadataResponse.issuer)
  return issuer_.GetNoArena();
}
inline void OAuth2MetadataResponse::set_issuer(const ::std::string& value) {
  
  issuer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.service.OAuth2MetadataResponse.issuer)
}
#if LANG_CXX11
inline void OAuth2MetadataResponse::set_issuer(::std::string&& value) {
  
  issuer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.service.OAuth2MetadataResponse.issuer)
}
#endif
inline void OAuth2MetadataResponse::set_issuer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  issuer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.service.OAuth2MetadataResponse.issuer)
}
inline void OAuth2MetadataResponse::set_issuer(const char* value, size_t size) {
  
  issuer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.service.OAuth2MetadataResponse.issuer)
}
inline ::std::string* OAuth2MetadataResponse::mutable_issuer() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.service.OAuth2MetadataResponse.issuer)
  return issuer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OAuth2MetadataResponse::release_issuer() {
  // @@protoc_insertion_point(field_release:flyteidl.service.OAuth2MetadataResponse.issuer)
  
  return issuer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OAuth2MetadataResponse::set_allocated_issuer(::std::string* issuer) {
  if (issuer != nullptr) {
    
  } else {
    
  }
  issuer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), issuer);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.OAuth2MetadataResponse.issuer)
}

// string authorization_endpoint = 2;
inline void OAuth2MetadataResponse::clear_authorization_endpoint() {
  authorization_endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OAuth2MetadataResponse::authorization_endpoint() const {
  // @@protoc_insertion_point(field_get:flyteidl.service.OAuth2MetadataResponse.authorization_endpoint)
  return authorization_endpoint_.GetNoArena();
}
inline void OAuth2MetadataResponse::set_authorization_endpoint(const ::std::string& value) {
  
  authorization_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.service.OAuth2MetadataResponse.authorization_endpoint)
}
#if LANG_CXX11
inline void OAuth2MetadataResponse::set_authorization_endpoint(::std::string&& value) {
  
  authorization_endpoint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.service.OAuth2MetadataResponse.authorization_endpoint)
}
#endif
inline void OAuth2MetadataResponse::set_authorization_endpoint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  authorization_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.service.OAuth2MetadataResponse.authorization_endpoint)
}
inline void OAuth2MetadataResponse::set_authorization_endpoint(const char* value, size_t size) {
  
  authorization_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.service.OAuth2MetadataResponse.authorization_endpoint)
}
inline ::std::string* OAuth2MetadataResponse::mutable_authorization_endpoint() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.service.OAuth2MetadataResponse.authorization_endpoint)
  return authorization_endpoint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OAuth2MetadataResponse::release_authorization_endpoint() {
  // @@protoc_insertion_point(field_release:flyteidl.service.OAuth2MetadataResponse.authorization_endpoint)
  
  return authorization_endpoint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OAuth2MetadataResponse::set_allocated_authorization_endpoint(::std::string* authorization_endpoint) {
  if (authorization_endpoint != nullptr) {
    
  } else {
    
  }
  authorization_endpoint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), authorization_endpoint);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.OAuth2MetadataResponse.authorization_endpoint)
}

// string token_endpoint = 3;
inline void OAuth2MetadataResponse::clear_token_endpoint() {
  token_endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OAuth2MetadataResponse::token_endpoint() const {
  // @@protoc_insertion_point(field_get:flyteidl.service.OAuth2MetadataResponse.token_endpoint)
  return token_endpoint_.GetNoArena();
}
inline void OAuth2MetadataResponse::set_token_endpoint(const ::std::string& value) {
  
  token_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.service.OAuth2MetadataResponse.token_endpoint)
}
#if LANG_CXX11
inline void OAuth2MetadataResponse::set_token_endpoint(::std::string&& value) {
  
  token_endpoint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.service.OAuth2MetadataResponse.token_endpoint)
}
#endif
inline void OAuth2MetadataResponse::set_token_endpoint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.service.OAuth2MetadataResponse.token_endpoint)
}
inline void OAuth2MetadataResponse::set_token_endpoint(const char* value, size_t size) {
  
  token_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.service.OAuth2MetadataResponse.token_endpoint)
}
inline ::std::string* OAuth2MetadataResponse::mutable_token_endpoint() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.service.OAuth2MetadataResponse.token_endpoint)
  return token_endpoint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OAuth2MetadataResponse::release_token_endpoint() {
  // @@protoc_insertion_point(field_release:flyteidl.service.OAuth2MetadataResponse.token_endpoint)
  
  return token_endpoint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OAuth2MetadataResponse::set_allocated_token_endpoint(::std::string* token_endpoint) {
  if (token_endpoint != nullptr) {
    
  } else {
    
  }
  token_endpoint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token_endpoint);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.OAuth2MetadataResponse.token_endpoint)
}

// repeated string response_types_supported = 4;
inline int OAuth2MetadataResponse::response_types_supported_size() const {
  return response_types_supported_.size();
}
inline void OAuth2MetadataResponse::clear_response_types_supported() {
  response_types_supported_.Clear();
}
inline const ::std::string& OAuth2MetadataResponse::response_types_supported(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.service.OAuth2MetadataResponse.response_types_supported)
  return response_types_supported_.Get(index);
}
inline ::std::string* OAuth2MetadataResponse::mutable_response_types_supported(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.service.OAuth2MetadataResponse.response_types_supported)
  return response_types_supported_.Mutable(index);
}
inline void OAuth2MetadataResponse::set_response_types_supported(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flyteidl.service.OAuth2MetadataResponse.response_types_supported)
  response_types_supported_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void OAuth2MetadataResponse::set_response_types_supported(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:flyteidl.service.OAuth2MetadataResponse.response_types_supported)
  response_types_supported_.Mutable(index)->assign(std::move(value));
}
#endif
inline void OAuth2MetadataResponse::set_response_types_supported(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  response_types_supported_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flyteidl.service.OAuth2MetadataResponse.response_types_supported)
}
inline void OAuth2MetadataResponse::set_response_types_supported(int index, const char* value, size_t size) {
  response_types_supported_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flyteidl.service.OAuth2MetadataResponse.response_types_supported)
}
inline ::std::string* OAuth2MetadataResponse::add_response_types_supported() {
  // @@protoc_insertion_point(field_add_mutable:flyteidl.service.OAuth2MetadataResponse.response_types_supported)
  return response_types_supported_.Add();
}
inline void OAuth2MetadataResponse::add_response_types_supported(const ::std::string& value) {
  response_types_supported_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flyteidl.service.OAuth2MetadataResponse.response_types_supported)
}
#if LANG_CXX11
inline void OAuth2MetadataResponse::add_response_types_supported(::std::string&& value) {
  response_types_supported_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flyteidl.service.OAuth2MetadataResponse.response_types_supported)
}
#endif
inline void OAuth2MetadataResponse::add_response_types_supported(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  response_types_supported_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flyteidl.service.OAuth2MetadataResponse.response_types_supported)
}
inline void OAuth2MetadataResponse::add_response_types_supported(const char* value, size_t size) {
  response_types_supported_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flyteidl.service.OAuth2MetadataResponse.response_types_supported)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
OAuth2MetadataResponse::response_types_supported() const {
  // @@protoc_insertion_point(field_list:flyteidl.service.OAuth2MetadataResponse.response_types_supported)
  return response_types_supported_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
OAuth2MetadataResponse::mutable_response_types_supported() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.service.OAuth2MetadataResponse.response_types_supported)
  return &response_types_supported_;
}

// repeated string scopes_supported = 5;
inline int OAuth2MetadataResponse::scopes_supported_size() const {
  return scopes_supported_.size();
}
inline void OAuth2MetadataResponse::clear_scopes_supported() {
  scopes_supported_.Clear();
}
inline const ::std::string& OAuth2MetadataResponse::scopes_supported(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.service.OAuth2MetadataResponse.scopes_supported)
  return scopes_supported_.Get(index);
}
inline ::std::string* OAuth2MetadataResponse::mutable_scopes_supported(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.service.OAuth2MetadataResponse.scopes_supported)
  return scopes_supported_.Mutable(index);
}
inline void OAuth2MetadataResponse::set_scopes_supported(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flyteidl.service.OAuth2MetadataResponse.scopes_supported)
  scopes_supported_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void OAuth2MetadataResponse::set_scopes_supported(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:flyteidl.service.OAuth2MetadataResponse.scopes_supported)
  scopes_supported_.Mutable(index)->assign(std::move(value));
}
#endif
inline void OAuth2MetadataResponse::set_scopes_supported(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  scopes_supported_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flyteidl.service.OAuth2MetadataResponse.scopes_supported)
}
inline void OAuth2MetadataResponse::set_scopes_supported(int index, const char* value, size_t size) {
  scopes_supported_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flyteidl.service.OAuth2MetadataResponse.scopes_supported)
}
inline ::std::string* OAuth2MetadataResponse::add_scopes_supported() {
  // @@protoc_insertion_point(field_add_mutable:flyteidl.service.OAuth2MetadataResponse.scopes_supported)
  return scopes_supported_.Add();
}
inline void OAuth2MetadataResponse::add_scopes_supported(const ::std::string& value) {
  scopes_supported_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flyteidl.service.OAuth2MetadataResponse.scopes_supported)
}
#if LANG_CXX11
inline void OAuth2MetadataResponse::add_scopes_supported(::std::string&& value) {
  scopes_supported_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flyteidl.service.OAuth2MetadataResponse.scopes_supported)
}
#endif
inline void OAuth2MetadataResponse::add_scopes_supported(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  scopes_supported_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flyteidl.service.OAuth2MetadataResponse.scopes_supported)
}
inline void OAuth2MetadataResponse::add_scopes_supported(const char* value, size_t size) {
  scopes_supported_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flyteidl.service.OAuth2MetadataResponse.scopes_supported)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
OAuth2MetadataResponse::scopes_supported() const {
  // @@protoc_insertion_point(field_list:flyteidl.service.OAuth2MetadataResponse.scopes_supported)
  return scopes_supported_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
OAuth2MetadataResponse::mutable_scopes_supported() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.service.OAuth2MetadataResponse.scopes_supported)
  return &scopes_supported_;
}

// repeated string token_endpoint_auth_methods_supported = 6;
inline int OAuth2MetadataResponse::token_endpoint_auth_methods_supported_size() const {
  return token_endpoint_auth_methods_supported_.size();
}
inline void OAuth2MetadataResponse::clear_token_endpoint_auth_methods_supported() {
  token_endpoint_auth_methods_supported_.Clear();
}
inline const ::std::string& OAuth2MetadataResponse::token_endpoint_auth_methods_supported(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.service.OAuth2MetadataResponse.token_endpoint_auth_methods_supported)
  return token_endpoint_auth_methods_supported_.Get(index);
}
inline ::std::string* OAuth2MetadataResponse::mutable_token_endpoint_auth_methods_supported(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.service.OAuth2MetadataResponse.token_endpoint_auth_methods_supported)
  return token_endpoint_auth_methods_supported_.Mutable(index);
}
inline void OAuth2MetadataResponse::set_token_endpoint_auth_methods_supported(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flyteidl.service.OAuth2MetadataResponse.token_endpoint_auth_methods_supported)
  token_endpoint_auth_methods_supported_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void OAuth2MetadataResponse::set_token_endpoint_auth_methods_supported(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:flyteidl.service.OAuth2MetadataResponse.token_endpoint_auth_methods_supported)
  token_endpoint_auth_methods_supported_.Mutable(index)->assign(std::move(value));
}
#endif
inline void OAuth2MetadataResponse::set_token_endpoint_auth_methods_supported(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  token_endpoint_auth_methods_supported_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flyteidl.service.OAuth2MetadataResponse.token_endpoint_auth_methods_supported)
}
inline void OAuth2MetadataResponse::set_token_endpoint_auth_methods_supported(int index, const char* value, size_t size) {
  token_endpoint_auth_methods_supported_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flyteidl.service.OAuth2MetadataResponse.token_endpoint_auth_methods_supported)
}
inline ::std::string* OAuth2MetadataResponse::add_token_endpoint_auth_methods_supported() {
  // @@protoc_insertion_point(field_add_mutable:flyteidl.service.OAuth2MetadataResponse.token_endpoint_auth_methods_supported)
  return token_endpoint_auth_methods_supported_.Add();
}
inline void OAuth2MetadataResponse::add_token_endpoint_auth_methods_supported(const ::std::string& value) {
  token_endpoint_auth_methods_supported_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flyteidl.service.OAuth2MetadataResponse.token_endpoint_auth_methods_supported)
}
#if LANG_CXX11
inline void OAuth2MetadataResponse::add_token_endpoint_auth_methods_supported(::std::string&& value) {
  token_endpoint_auth_methods_supported_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flyteidl.service.OAuth2MetadataResponse.token_endpoint_auth_methods_supported)
}
#endif
inline void OAuth2MetadataResponse::add_token_endpoint_auth_methods_supported(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  token_endpoint_auth_methods_supported_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flyteidl.service.OAuth2MetadataResponse.token_endpoint_auth_methods_supported)
}
inline void OAuth2MetadataResponse::add_token_endpoint_auth_methods_supported(const char* value, size_t size) {
  token_endpoint_auth_methods_supported_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flyteidl.service.OAuth2MetadataResponse.token_endpoint_auth_methods_supported)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
OAuth2MetadataResponse::token_endpoint_auth_methods_supported() const {
  // @@protoc_insertion_point(field_list:flyteidl.service.OAuth2MetadataResponse.token_endpoint_auth_methods_supported)
  return token_endpoint_auth_methods_supported_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
OAuth2MetadataResponse::mutable_token_endpoint_auth_methods_supported() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.service.OAuth2MetadataResponse.token_endpoint_auth_methods_supported)
  return &token_endpoint_auth_methods_supported_;
}

// string jwks_uri = 7;
inline void OAuth2MetadataResponse::clear_jwks_uri() {
  jwks_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OAuth2MetadataResponse::jwks_uri() const {
  // @@protoc_insertion_point(field_get:flyteidl.service.OAuth2MetadataResponse.jwks_uri)
  return jwks_uri_.GetNoArena();
}
inline void OAuth2MetadataResponse::set_jwks_uri(const ::std::string& value) {
  
  jwks_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.service.OAuth2MetadataResponse.jwks_uri)
}
#if LANG_CXX11
inline void OAuth2MetadataResponse::set_jwks_uri(::std::string&& value) {
  
  jwks_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.service.OAuth2MetadataResponse.jwks_uri)
}
#endif
inline void OAuth2MetadataResponse::set_jwks_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  jwks_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.service.OAuth2MetadataResponse.jwks_uri)
}
inline void OAuth2MetadataResponse::set_jwks_uri(const char* value, size_t size) {
  
  jwks_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.service.OAuth2MetadataResponse.jwks_uri)
}
inline ::std::string* OAuth2MetadataResponse::mutable_jwks_uri() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.service.OAuth2MetadataResponse.jwks_uri)
  return jwks_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OAuth2MetadataResponse::release_jwks_uri() {
  // @@protoc_insertion_point(field_release:flyteidl.service.OAuth2MetadataResponse.jwks_uri)
  
  return jwks_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OAuth2MetadataResponse::set_allocated_jwks_uri(::std::string* jwks_uri) {
  if (jwks_uri != nullptr) {
    
  } else {
    
  }
  jwks_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), jwks_uri);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.OAuth2MetadataResponse.jwks_uri)
}

// repeated string code_challenge_methods_supported = 8;
inline int OAuth2MetadataResponse::code_challenge_methods_supported_size() const {
  return code_challenge_methods_supported_.size();
}
inline void OAuth2MetadataResponse::clear_code_challenge_methods_supported() {
  code_challenge_methods_supported_.Clear();
}
inline const ::std::string& OAuth2MetadataResponse::code_challenge_methods_supported(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.service.OAuth2MetadataResponse.code_challenge_methods_supported)
  return code_challenge_methods_supported_.Get(index);
}
inline ::std::string* OAuth2MetadataResponse::mutable_code_challenge_methods_supported(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.service.OAuth2MetadataResponse.code_challenge_methods_supported)
  return code_challenge_methods_supported_.Mutable(index);
}
inline void OAuth2MetadataResponse::set_code_challenge_methods_supported(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flyteidl.service.OAuth2MetadataResponse.code_challenge_methods_supported)
  code_challenge_methods_supported_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void OAuth2MetadataResponse::set_code_challenge_methods_supported(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:flyteidl.service.OAuth2MetadataResponse.code_challenge_methods_supported)
  code_challenge_methods_supported_.Mutable(index)->assign(std::move(value));
}
#endif
inline void OAuth2MetadataResponse::set_code_challenge_methods_supported(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  code_challenge_methods_supported_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flyteidl.service.OAuth2MetadataResponse.code_challenge_methods_supported)
}
inline void OAuth2MetadataResponse::set_code_challenge_methods_supported(int index, const char* value, size_t size) {
  code_challenge_methods_supported_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flyteidl.service.OAuth2MetadataResponse.code_challenge_methods_supported)
}
inline ::std::string* OAuth2MetadataResponse::add_code_challenge_methods_supported() {
  // @@protoc_insertion_point(field_add_mutable:flyteidl.service.OAuth2MetadataResponse.code_challenge_methods_supported)
  return code_challenge_methods_supported_.Add();
}
inline void OAuth2MetadataResponse::add_code_challenge_methods_supported(const ::std::string& value) {
  code_challenge_methods_supported_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flyteidl.service.OAuth2MetadataResponse.code_challenge_methods_supported)
}
#if LANG_CXX11
inline void OAuth2MetadataResponse::add_code_challenge_methods_supported(::std::string&& value) {
  code_challenge_methods_supported_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flyteidl.service.OAuth2MetadataResponse.code_challenge_methods_supported)
}
#endif
inline void OAuth2MetadataResponse::add_code_challenge_methods_supported(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  code_challenge_methods_supported_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flyteidl.service.OAuth2MetadataResponse.code_challenge_methods_supported)
}
inline void OAuth2MetadataResponse::add_code_challenge_methods_supported(const char* value, size_t size) {
  code_challenge_methods_supported_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flyteidl.service.OAuth2MetadataResponse.code_challenge_methods_supported)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
OAuth2MetadataResponse::code_challenge_methods_supported() const {
  // @@protoc_insertion_point(field_list:flyteidl.service.OAuth2MetadataResponse.code_challenge_methods_supported)
  return code_challenge_methods_supported_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
OAuth2MetadataResponse::mutable_code_challenge_methods_supported() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.service.OAuth2MetadataResponse.code_challenge_methods_supported)
  return &code_challenge_methods_supported_;
}

// repeated string grant_types_supported = 9;
inline int OAuth2MetadataResponse::grant_types_supported_size() const {
  return grant_types_supported_.size();
}
inline void OAuth2MetadataResponse::clear_grant_types_supported() {
  grant_types_supported_.Clear();
}
inline const ::std::string& OAuth2MetadataResponse::grant_types_supported(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.service.OAuth2MetadataResponse.grant_types_supported)
  return grant_types_supported_.Get(index);
}
inline ::std::string* OAuth2MetadataResponse::mutable_grant_types_supported(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.service.OAuth2MetadataResponse.grant_types_supported)
  return grant_types_supported_.Mutable(index);
}
inline void OAuth2MetadataResponse::set_grant_types_supported(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flyteidl.service.OAuth2MetadataResponse.grant_types_supported)
  grant_types_supported_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void OAuth2MetadataResponse::set_grant_types_supported(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:flyteidl.service.OAuth2MetadataResponse.grant_types_supported)
  grant_types_supported_.Mutable(index)->assign(std::move(value));
}
#endif
inline void OAuth2MetadataResponse::set_grant_types_supported(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  grant_types_supported_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flyteidl.service.OAuth2MetadataResponse.grant_types_supported)
}
inline void OAuth2MetadataResponse::set_grant_types_supported(int index, const char* value, size_t size) {
  grant_types_supported_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flyteidl.service.OAuth2MetadataResponse.grant_types_supported)
}
inline ::std::string* OAuth2MetadataResponse::add_grant_types_supported() {
  // @@protoc_insertion_point(field_add_mutable:flyteidl.service.OAuth2MetadataResponse.grant_types_supported)
  return grant_types_supported_.Add();
}
inline void OAuth2MetadataResponse::add_grant_types_supported(const ::std::string& value) {
  grant_types_supported_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flyteidl.service.OAuth2MetadataResponse.grant_types_supported)
}
#if LANG_CXX11
inline void OAuth2MetadataResponse::add_grant_types_supported(::std::string&& value) {
  grant_types_supported_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flyteidl.service.OAuth2MetadataResponse.grant_types_supported)
}
#endif
inline void OAuth2MetadataResponse::add_grant_types_supported(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  grant_types_supported_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flyteidl.service.OAuth2MetadataResponse.grant_types_supported)
}
inline void OAuth2MetadataResponse::add_grant_types_supported(const char* value, size_t size) {
  grant_types_supported_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flyteidl.service.OAuth2MetadataResponse.grant_types_supported)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
OAuth2MetadataResponse::grant_types_supported() const {
  // @@protoc_insertion_point(field_list:flyteidl.service.OAuth2MetadataResponse.grant_types_supported)
  return grant_types_supported_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
OAuth2MetadataResponse::mutable_grant_types_supported() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.service.OAuth2MetadataResponse.grant_types_supported)
  return &grant_types_supported_;
}

// string device_authorization_endpoint = 10;
inline void OAuth2MetadataResponse::clear_device_authorization_endpoint() {
  device_authorization_endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OAuth2MetadataResponse::device_authorization_endpoint() const {
  // @@protoc_insertion_point(field_get:flyteidl.service.OAuth2MetadataResponse.device_authorization_endpoint)
  return device_authorization_endpoint_.GetNoArena();
}
inline void OAuth2MetadataResponse::set_device_authorization_endpoint(const ::std::string& value) {
  
  device_authorization_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.service.OAuth2MetadataResponse.device_authorization_endpoint)
}
#if LANG_CXX11
inline void OAuth2MetadataResponse::set_device_authorization_endpoint(::std::string&& value) {
  
  device_authorization_endpoint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.service.OAuth2MetadataResponse.device_authorization_endpoint)
}
#endif
inline void OAuth2MetadataResponse::set_device_authorization_endpoint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_authorization_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.service.OAuth2MetadataResponse.device_authorization_endpoint)
}
inline void OAuth2MetadataResponse::set_device_authorization_endpoint(const char* value, size_t size) {
  
  device_authorization_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.service.OAuth2MetadataResponse.device_authorization_endpoint)
}
inline ::std::string* OAuth2MetadataResponse::mutable_device_authorization_endpoint() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.service.OAuth2MetadataResponse.device_authorization_endpoint)
  return device_authorization_endpoint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OAuth2MetadataResponse::release_device_authorization_endpoint() {
  // @@protoc_insertion_point(field_release:flyteidl.service.OAuth2MetadataResponse.device_authorization_endpoint)
  
  return device_authorization_endpoint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OAuth2MetadataResponse::set_allocated_device_authorization_endpoint(::std::string* device_authorization_endpoint) {
  if (device_authorization_endpoint != nullptr) {
    
  } else {
    
  }
  device_authorization_endpoint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_authorization_endpoint);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.OAuth2MetadataResponse.device_authorization_endpoint)
}

// -------------------------------------------------------------------

// PublicClientAuthConfigRequest

// -------------------------------------------------------------------

// PublicClientAuthConfigResponse

// string client_id = 1;
inline void PublicClientAuthConfigResponse::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PublicClientAuthConfigResponse::client_id() const {
  // @@protoc_insertion_point(field_get:flyteidl.service.PublicClientAuthConfigResponse.client_id)
  return client_id_.GetNoArena();
}
inline void PublicClientAuthConfigResponse::set_client_id(const ::std::string& value) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.service.PublicClientAuthConfigResponse.client_id)
}
#if LANG_CXX11
inline void PublicClientAuthConfigResponse::set_client_id(::std::string&& value) {
  
  client_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.service.PublicClientAuthConfigResponse.client_id)
}
#endif
inline void PublicClientAuthConfigResponse::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.service.PublicClientAuthConfigResponse.client_id)
}
inline void PublicClientAuthConfigResponse::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.service.PublicClientAuthConfigResponse.client_id)
}
inline ::std::string* PublicClientAuthConfigResponse::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.service.PublicClientAuthConfigResponse.client_id)
  return client_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PublicClientAuthConfigResponse::release_client_id() {
  // @@protoc_insertion_point(field_release:flyteidl.service.PublicClientAuthConfigResponse.client_id)
  
  return client_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PublicClientAuthConfigResponse::set_allocated_client_id(::std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.PublicClientAuthConfigResponse.client_id)
}

// string redirect_uri = 2;
inline void PublicClientAuthConfigResponse::clear_redirect_uri() {
  redirect_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PublicClientAuthConfigResponse::redirect_uri() const {
  // @@protoc_insertion_point(field_get:flyteidl.service.PublicClientAuthConfigResponse.redirect_uri)
  return redirect_uri_.GetNoArena();
}
inline void PublicClientAuthConfigResponse::set_redirect_uri(const ::std::string& value) {
  
  redirect_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.service.PublicClientAuthConfigResponse.redirect_uri)
}
#if LANG_CXX11
inline void PublicClientAuthConfigResponse::set_redirect_uri(::std::string&& value) {
  
  redirect_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.service.PublicClientAuthConfigResponse.redirect_uri)
}
#endif
inline void PublicClientAuthConfigResponse::set_redirect_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  redirect_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.service.PublicClientAuthConfigResponse.redirect_uri)
}
inline void PublicClientAuthConfigResponse::set_redirect_uri(const char* value, size_t size) {
  
  redirect_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.service.PublicClientAuthConfigResponse.redirect_uri)
}
inline ::std::string* PublicClientAuthConfigResponse::mutable_redirect_uri() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.service.PublicClientAuthConfigResponse.redirect_uri)
  return redirect_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PublicClientAuthConfigResponse::release_redirect_uri() {
  // @@protoc_insertion_point(field_release:flyteidl.service.PublicClientAuthConfigResponse.redirect_uri)
  
  return redirect_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PublicClientAuthConfigResponse::set_allocated_redirect_uri(::std::string* redirect_uri) {
  if (redirect_uri != nullptr) {
    
  } else {
    
  }
  redirect_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), redirect_uri);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.PublicClientAuthConfigResponse.redirect_uri)
}

// repeated string scopes = 3;
inline int PublicClientAuthConfigResponse::scopes_size() const {
  return scopes_.size();
}
inline void PublicClientAuthConfigResponse::clear_scopes() {
  scopes_.Clear();
}
inline const ::std::string& PublicClientAuthConfigResponse::scopes(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.service.PublicClientAuthConfigResponse.scopes)
  return scopes_.Get(index);
}
inline ::std::string* PublicClientAuthConfigResponse::mutable_scopes(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.service.PublicClientAuthConfigResponse.scopes)
  return scopes_.Mutable(index);
}
inline void PublicClientAuthConfigResponse::set_scopes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flyteidl.service.PublicClientAuthConfigResponse.scopes)
  scopes_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PublicClientAuthConfigResponse::set_scopes(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:flyteidl.service.PublicClientAuthConfigResponse.scopes)
  scopes_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PublicClientAuthConfigResponse::set_scopes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  scopes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flyteidl.service.PublicClientAuthConfigResponse.scopes)
}
inline void PublicClientAuthConfigResponse::set_scopes(int index, const char* value, size_t size) {
  scopes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flyteidl.service.PublicClientAuthConfigResponse.scopes)
}
inline ::std::string* PublicClientAuthConfigResponse::add_scopes() {
  // @@protoc_insertion_point(field_add_mutable:flyteidl.service.PublicClientAuthConfigResponse.scopes)
  return scopes_.Add();
}
inline void PublicClientAuthConfigResponse::add_scopes(const ::std::string& value) {
  scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flyteidl.service.PublicClientAuthConfigResponse.scopes)
}
#if LANG_CXX11
inline void PublicClientAuthConfigResponse::add_scopes(::std::string&& value) {
  scopes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flyteidl.service.PublicClientAuthConfigResponse.scopes)
}
#endif
inline void PublicClientAuthConfigResponse::add_scopes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flyteidl.service.PublicClientAuthConfigResponse.scopes)
}
inline void PublicClientAuthConfigResponse::add_scopes(const char* value, size_t size) {
  scopes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flyteidl.service.PublicClientAuthConfigResponse.scopes)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
PublicClientAuthConfigResponse::scopes() const {
  // @@protoc_insertion_point(field_list:flyteidl.service.PublicClientAuthConfigResponse.scopes)
  return scopes_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
PublicClientAuthConfigResponse::mutable_scopes() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.service.PublicClientAuthConfigResponse.scopes)
  return &scopes_;
}

// string authorization_metadata_key = 4;
inline void PublicClientAuthConfigResponse::clear_authorization_metadata_key() {
  authorization_metadata_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PublicClientAuthConfigResponse::authorization_metadata_key() const {
  // @@protoc_insertion_point(field_get:flyteidl.service.PublicClientAuthConfigResponse.authorization_metadata_key)
  return authorization_metadata_key_.GetNoArena();
}
inline void PublicClientAuthConfigResponse::set_authorization_metadata_key(const ::std::string& value) {
  
  authorization_metadata_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.service.PublicClientAuthConfigResponse.authorization_metadata_key)
}
#if LANG_CXX11
inline void PublicClientAuthConfigResponse::set_authorization_metadata_key(::std::string&& value) {
  
  authorization_metadata_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.service.PublicClientAuthConfigResponse.authorization_metadata_key)
}
#endif
inline void PublicClientAuthConfigResponse::set_authorization_metadata_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  authorization_metadata_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.service.PublicClientAuthConfigResponse.authorization_metadata_key)
}
inline void PublicClientAuthConfigResponse::set_authorization_metadata_key(const char* value, size_t size) {
  
  authorization_metadata_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.service.PublicClientAuthConfigResponse.authorization_metadata_key)
}
inline ::std::string* PublicClientAuthConfigResponse::mutable_authorization_metadata_key() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.service.PublicClientAuthConfigResponse.authorization_metadata_key)
  return authorization_metadata_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PublicClientAuthConfigResponse::release_authorization_metadata_key() {
  // @@protoc_insertion_point(field_release:flyteidl.service.PublicClientAuthConfigResponse.authorization_metadata_key)
  
  return authorization_metadata_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PublicClientAuthConfigResponse::set_allocated_authorization_metadata_key(::std::string* authorization_metadata_key) {
  if (authorization_metadata_key != nullptr) {
    
  } else {
    
  }
  authorization_metadata_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), authorization_metadata_key);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.PublicClientAuthConfigResponse.authorization_metadata_key)
}

// string service_http_endpoint = 5;
inline void PublicClientAuthConfigResponse::clear_service_http_endpoint() {
  service_http_endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PublicClientAuthConfigResponse::service_http_endpoint() const {
  // @@protoc_insertion_point(field_get:flyteidl.service.PublicClientAuthConfigResponse.service_http_endpoint)
  return service_http_endpoint_.GetNoArena();
}
inline void PublicClientAuthConfigResponse::set_service_http_endpoint(const ::std::string& value) {
  
  service_http_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.service.PublicClientAuthConfigResponse.service_http_endpoint)
}
#if LANG_CXX11
inline void PublicClientAuthConfigResponse::set_service_http_endpoint(::std::string&& value) {
  
  service_http_endpoint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.service.PublicClientAuthConfigResponse.service_http_endpoint)
}
#endif
inline void PublicClientAuthConfigResponse::set_service_http_endpoint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_http_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.service.PublicClientAuthConfigResponse.service_http_endpoint)
}
inline void PublicClientAuthConfigResponse::set_service_http_endpoint(const char* value, size_t size) {
  
  service_http_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.service.PublicClientAuthConfigResponse.service_http_endpoint)
}
inline ::std::string* PublicClientAuthConfigResponse::mutable_service_http_endpoint() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.service.PublicClientAuthConfigResponse.service_http_endpoint)
  return service_http_endpoint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PublicClientAuthConfigResponse::release_service_http_endpoint() {
  // @@protoc_insertion_point(field_release:flyteidl.service.PublicClientAuthConfigResponse.service_http_endpoint)
  
  return service_http_endpoint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PublicClientAuthConfigResponse::set_allocated_service_http_endpoint(::std::string* service_http_endpoint) {
  if (service_http_endpoint != nullptr) {
    
  } else {
    
  }
  service_http_endpoint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_http_endpoint);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.PublicClientAuthConfigResponse.service_http_endpoint)
}

// string audience = 6;
inline void PublicClientAuthConfigResponse::clear_audience() {
  audience_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PublicClientAuthConfigResponse::audience() const {
  // @@protoc_insertion_point(field_get:flyteidl.service.PublicClientAuthConfigResponse.audience)
  return audience_.GetNoArena();
}
inline void PublicClientAuthConfigResponse::set_audience(const ::std::string& value) {
  
  audience_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.service.PublicClientAuthConfigResponse.audience)
}
#if LANG_CXX11
inline void PublicClientAuthConfigResponse::set_audience(::std::string&& value) {
  
  audience_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.service.PublicClientAuthConfigResponse.audience)
}
#endif
inline void PublicClientAuthConfigResponse::set_audience(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  audience_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.service.PublicClientAuthConfigResponse.audience)
}
inline void PublicClientAuthConfigResponse::set_audience(const char* value, size_t size) {
  
  audience_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.service.PublicClientAuthConfigResponse.audience)
}
inline ::std::string* PublicClientAuthConfigResponse::mutable_audience() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.service.PublicClientAuthConfigResponse.audience)
  return audience_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PublicClientAuthConfigResponse::release_audience() {
  // @@protoc_insertion_point(field_release:flyteidl.service.PublicClientAuthConfigResponse.audience)
  
  return audience_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PublicClientAuthConfigResponse::set_allocated_audience(::std::string* audience) {
  if (audience != nullptr) {
    
  } else {
    
  }
  audience_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), audience);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.service.PublicClientAuthConfigResponse.audience)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace service
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_flyteidl_2fservice_2fauth_2eproto
