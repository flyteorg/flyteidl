// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	datacatalog "github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/datacatalog"
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// ArtifactsClient is an autogenerated mock type for the ArtifactsClient type
type ArtifactsClient struct {
	mock.Mock
}

type ArtifactsClient_Create struct {
	*mock.Call
}

func (_m ArtifactsClient_Create) Return(_a0 *datacatalog.CreateResponse, _a1 error) *ArtifactsClient_Create {
	return &ArtifactsClient_Create{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *ArtifactsClient) OnCreate(ctx context.Context, in *datacatalog.CreateRequest, opts ...grpc.CallOption) *ArtifactsClient_Create {
	c := _m.On("Create", ctx, in, opts)
	return &ArtifactsClient_Create{Call: c}
}

func (_m *ArtifactsClient) OnCreateMatch(matchers ...interface{}) *ArtifactsClient_Create {
	c := _m.On("Create", matchers...)
	return &ArtifactsClient_Create{Call: c}
}

// Create provides a mock function with given fields: ctx, in, opts
func (_m *ArtifactsClient) Create(ctx context.Context, in *datacatalog.CreateRequest, opts ...grpc.CallOption) (*datacatalog.CreateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *datacatalog.CreateResponse
	if rf, ok := ret.Get(0).(func(context.Context, *datacatalog.CreateRequest, ...grpc.CallOption) *datacatalog.CreateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datacatalog.CreateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *datacatalog.CreateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type ArtifactsClient_GenerateProvenance struct {
	*mock.Call
}

func (_m ArtifactsClient_GenerateProvenance) Return(_a0 *datacatalog.GenerateProvenanceResponse, _a1 error) *ArtifactsClient_GenerateProvenance {
	return &ArtifactsClient_GenerateProvenance{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *ArtifactsClient) OnGenerateProvenance(ctx context.Context, in *datacatalog.GenerateProvenanceRequest, opts ...grpc.CallOption) *ArtifactsClient_GenerateProvenance {
	c := _m.On("GenerateProvenance", ctx, in, opts)
	return &ArtifactsClient_GenerateProvenance{Call: c}
}

func (_m *ArtifactsClient) OnGenerateProvenanceMatch(matchers ...interface{}) *ArtifactsClient_GenerateProvenance {
	c := _m.On("GenerateProvenance", matchers...)
	return &ArtifactsClient_GenerateProvenance{Call: c}
}

// GenerateProvenance provides a mock function with given fields: ctx, in, opts
func (_m *ArtifactsClient) GenerateProvenance(ctx context.Context, in *datacatalog.GenerateProvenanceRequest, opts ...grpc.CallOption) (*datacatalog.GenerateProvenanceResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *datacatalog.GenerateProvenanceResponse
	if rf, ok := ret.Get(0).(func(context.Context, *datacatalog.GenerateProvenanceRequest, ...grpc.CallOption) *datacatalog.GenerateProvenanceResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datacatalog.GenerateProvenanceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *datacatalog.GenerateProvenanceRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type ArtifactsClient_Get struct {
	*mock.Call
}

func (_m ArtifactsClient_Get) Return(_a0 *datacatalog.GetResponse, _a1 error) *ArtifactsClient_Get {
	return &ArtifactsClient_Get{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *ArtifactsClient) OnGet(ctx context.Context, in *datacatalog.GetRequest, opts ...grpc.CallOption) *ArtifactsClient_Get {
	c := _m.On("Get", ctx, in, opts)
	return &ArtifactsClient_Get{Call: c}
}

func (_m *ArtifactsClient) OnGetMatch(matchers ...interface{}) *ArtifactsClient_Get {
	c := _m.On("Get", matchers...)
	return &ArtifactsClient_Get{Call: c}
}

// Get provides a mock function with given fields: ctx, in, opts
func (_m *ArtifactsClient) Get(ctx context.Context, in *datacatalog.GetRequest, opts ...grpc.CallOption) (*datacatalog.GetResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *datacatalog.GetResponse
	if rf, ok := ret.Get(0).(func(context.Context, *datacatalog.GetRequest, ...grpc.CallOption) *datacatalog.GetResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datacatalog.GetResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *datacatalog.GetRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type ArtifactsClient_Query struct {
	*mock.Call
}

func (_m ArtifactsClient_Query) Return(_a0 *datacatalog.QueryResponse, _a1 error) *ArtifactsClient_Query {
	return &ArtifactsClient_Query{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *ArtifactsClient) OnQuery(ctx context.Context, in *datacatalog.QueryRequest, opts ...grpc.CallOption) *ArtifactsClient_Query {
	c := _m.On("Query", ctx, in, opts)
	return &ArtifactsClient_Query{Call: c}
}

func (_m *ArtifactsClient) OnQueryMatch(matchers ...interface{}) *ArtifactsClient_Query {
	c := _m.On("Query", matchers...)
	return &ArtifactsClient_Query{Call: c}
}

// Query provides a mock function with given fields: ctx, in, opts
func (_m *ArtifactsClient) Query(ctx context.Context, in *datacatalog.QueryRequest, opts ...grpc.CallOption) (*datacatalog.QueryResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *datacatalog.QueryResponse
	if rf, ok := ret.Get(0).(func(context.Context, *datacatalog.QueryRequest, ...grpc.CallOption) *datacatalog.QueryResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datacatalog.QueryResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *datacatalog.QueryRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
