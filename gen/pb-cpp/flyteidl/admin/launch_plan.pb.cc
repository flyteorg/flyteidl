// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/launch_plan.proto

#include "flyteidl/admin/launch_plan.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AuthRole_flyteidl_2fadmin_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NamedEntityIdentifier_flyteidl_2fadmin_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RawOutputDataConfig_flyteidl_2fadmin_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Sort_flyteidl_2fadmin_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Annotations_flyteidl_2fadmin_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Labels_flyteidl_2fadmin_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Notification_flyteidl_2fadmin_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2flaunch_5fplan_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Auth_flyteidl_2fadmin_2flaunch_5fplan_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2flaunch_5fplan_2eproto ::google::protobuf::internal::SCCInfo<12> scc_info_LaunchPlanSpec_flyteidl_2fadmin_2flaunch_5fplan_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2flaunch_5fplan_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_LaunchPlanMetadata_flyteidl_2fadmin_2flaunch_5fplan_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2flaunch_5fplan_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_LaunchPlanClosure_flyteidl_2fadmin_2flaunch_5fplan_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2flaunch_5fplan_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_LaunchPlan_flyteidl_2fadmin_2flaunch_5fplan_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fschedule_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Schedule_flyteidl_2fadmin_2fschedule_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fexecution_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_QualityOfService_flyteidl_2fcore_2fexecution_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fidentifier_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Identifier_flyteidl_2fcore_2fidentifier_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2finterface_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ParameterMap_flyteidl_2fcore_2finterface_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2finterface_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_VariableMap_flyteidl_2fcore_2finterface_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fliterals_2eproto ::google::protobuf::internal::SCCInfo<9> scc_info_Literal_flyteidl_2fcore_2fliterals_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fsecurity_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_SecurityContext_flyteidl_2fcore_2fsecurity_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto;
namespace flyteidl {
namespace admin {
class LaunchPlanCreateRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaunchPlanCreateRequest> _instance;
} _LaunchPlanCreateRequest_default_instance_;
class LaunchPlanCreateResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaunchPlanCreateResponse> _instance;
} _LaunchPlanCreateResponse_default_instance_;
class LaunchPlanDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaunchPlan> _instance;
} _LaunchPlan_default_instance_;
class LaunchPlanListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaunchPlanList> _instance;
} _LaunchPlanList_default_instance_;
class AuthDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Auth> _instance;
} _Auth_default_instance_;
class LaunchPlanSpecDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaunchPlanSpec> _instance;
} _LaunchPlanSpec_default_instance_;
class LaunchPlanClosureDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaunchPlanClosure> _instance;
} _LaunchPlanClosure_default_instance_;
class LaunchPlanMetadataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaunchPlanMetadata> _instance;
} _LaunchPlanMetadata_default_instance_;
class LaunchPlanUpdateRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaunchPlanUpdateRequest> _instance;
} _LaunchPlanUpdateRequest_default_instance_;
class LaunchPlanUpdateResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LaunchPlanUpdateResponse> _instance;
} _LaunchPlanUpdateResponse_default_instance_;
class ActiveLaunchPlanRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ActiveLaunchPlanRequest> _instance;
} _ActiveLaunchPlanRequest_default_instance_;
class ActiveLaunchPlanListRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ActiveLaunchPlanListRequest> _instance;
} _ActiveLaunchPlanListRequest_default_instance_;
}  // namespace admin
}  // namespace flyteidl
static void InitDefaultsLaunchPlanCreateRequest_flyteidl_2fadmin_2flaunch_5fplan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_LaunchPlanCreateRequest_default_instance_;
    new (ptr) ::flyteidl::admin::LaunchPlanCreateRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::LaunchPlanCreateRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_LaunchPlanCreateRequest_flyteidl_2fadmin_2flaunch_5fplan_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsLaunchPlanCreateRequest_flyteidl_2fadmin_2flaunch_5fplan_2eproto}, {
      &scc_info_Identifier_flyteidl_2fcore_2fidentifier_2eproto.base,
      &scc_info_LaunchPlanSpec_flyteidl_2fadmin_2flaunch_5fplan_2eproto.base,}};

static void InitDefaultsLaunchPlanCreateResponse_flyteidl_2fadmin_2flaunch_5fplan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_LaunchPlanCreateResponse_default_instance_;
    new (ptr) ::flyteidl::admin::LaunchPlanCreateResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::LaunchPlanCreateResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LaunchPlanCreateResponse_flyteidl_2fadmin_2flaunch_5fplan_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLaunchPlanCreateResponse_flyteidl_2fadmin_2flaunch_5fplan_2eproto}, {}};

static void InitDefaultsLaunchPlan_flyteidl_2fadmin_2flaunch_5fplan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_LaunchPlan_default_instance_;
    new (ptr) ::flyteidl::admin::LaunchPlan();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::LaunchPlan::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_LaunchPlan_flyteidl_2fadmin_2flaunch_5fplan_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsLaunchPlan_flyteidl_2fadmin_2flaunch_5fplan_2eproto}, {
      &scc_info_Identifier_flyteidl_2fcore_2fidentifier_2eproto.base,
      &scc_info_LaunchPlanSpec_flyteidl_2fadmin_2flaunch_5fplan_2eproto.base,
      &scc_info_LaunchPlanClosure_flyteidl_2fadmin_2flaunch_5fplan_2eproto.base,}};

static void InitDefaultsLaunchPlanList_flyteidl_2fadmin_2flaunch_5fplan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_LaunchPlanList_default_instance_;
    new (ptr) ::flyteidl::admin::LaunchPlanList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::LaunchPlanList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LaunchPlanList_flyteidl_2fadmin_2flaunch_5fplan_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLaunchPlanList_flyteidl_2fadmin_2flaunch_5fplan_2eproto}, {
      &scc_info_LaunchPlan_flyteidl_2fadmin_2flaunch_5fplan_2eproto.base,}};

static void InitDefaultsAuth_flyteidl_2fadmin_2flaunch_5fplan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_Auth_default_instance_;
    new (ptr) ::flyteidl::admin::Auth();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::Auth::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Auth_flyteidl_2fadmin_2flaunch_5fplan_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAuth_flyteidl_2fadmin_2flaunch_5fplan_2eproto}, {}};

static void InitDefaultsLaunchPlanSpec_flyteidl_2fadmin_2flaunch_5fplan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_LaunchPlanSpec_default_instance_;
    new (ptr) ::flyteidl::admin::LaunchPlanSpec();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::LaunchPlanSpec::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<12> scc_info_LaunchPlanSpec_flyteidl_2fadmin_2flaunch_5fplan_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 12, InitDefaultsLaunchPlanSpec_flyteidl_2fadmin_2flaunch_5fplan_2eproto}, {
      &scc_info_Identifier_flyteidl_2fcore_2fidentifier_2eproto.base,
      &scc_info_LaunchPlanMetadata_flyteidl_2fadmin_2flaunch_5fplan_2eproto.base,
      &scc_info_ParameterMap_flyteidl_2fcore_2finterface_2eproto.base,
      &scc_info_Literal_flyteidl_2fcore_2fliterals_2eproto.base,
      &scc_info_Labels_flyteidl_2fadmin_2fcommon_2eproto.base,
      &scc_info_Annotations_flyteidl_2fadmin_2fcommon_2eproto.base,
      &scc_info_Auth_flyteidl_2fadmin_2flaunch_5fplan_2eproto.base,
      &scc_info_AuthRole_flyteidl_2fadmin_2fcommon_2eproto.base,
      &scc_info_SecurityContext_flyteidl_2fcore_2fsecurity_2eproto.base,
      &scc_info_QualityOfService_flyteidl_2fcore_2fexecution_2eproto.base,
      &scc_info_RawOutputDataConfig_flyteidl_2fadmin_2fcommon_2eproto.base,
      &scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsLaunchPlanClosure_flyteidl_2fadmin_2flaunch_5fplan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_LaunchPlanClosure_default_instance_;
    new (ptr) ::flyteidl::admin::LaunchPlanClosure();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::LaunchPlanClosure::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_LaunchPlanClosure_flyteidl_2fadmin_2flaunch_5fplan_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsLaunchPlanClosure_flyteidl_2fadmin_2flaunch_5fplan_2eproto}, {
      &scc_info_ParameterMap_flyteidl_2fcore_2finterface_2eproto.base,
      &scc_info_VariableMap_flyteidl_2fcore_2finterface_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsLaunchPlanMetadata_flyteidl_2fadmin_2flaunch_5fplan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_LaunchPlanMetadata_default_instance_;
    new (ptr) ::flyteidl::admin::LaunchPlanMetadata();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::LaunchPlanMetadata::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_LaunchPlanMetadata_flyteidl_2fadmin_2flaunch_5fplan_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsLaunchPlanMetadata_flyteidl_2fadmin_2flaunch_5fplan_2eproto}, {
      &scc_info_Schedule_flyteidl_2fadmin_2fschedule_2eproto.base,
      &scc_info_Notification_flyteidl_2fadmin_2fcommon_2eproto.base,}};

static void InitDefaultsLaunchPlanUpdateRequest_flyteidl_2fadmin_2flaunch_5fplan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_LaunchPlanUpdateRequest_default_instance_;
    new (ptr) ::flyteidl::admin::LaunchPlanUpdateRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::LaunchPlanUpdateRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LaunchPlanUpdateRequest_flyteidl_2fadmin_2flaunch_5fplan_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLaunchPlanUpdateRequest_flyteidl_2fadmin_2flaunch_5fplan_2eproto}, {
      &scc_info_Identifier_flyteidl_2fcore_2fidentifier_2eproto.base,}};

static void InitDefaultsLaunchPlanUpdateResponse_flyteidl_2fadmin_2flaunch_5fplan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_LaunchPlanUpdateResponse_default_instance_;
    new (ptr) ::flyteidl::admin::LaunchPlanUpdateResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::LaunchPlanUpdateResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LaunchPlanUpdateResponse_flyteidl_2fadmin_2flaunch_5fplan_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLaunchPlanUpdateResponse_flyteidl_2fadmin_2flaunch_5fplan_2eproto}, {}};

static void InitDefaultsActiveLaunchPlanRequest_flyteidl_2fadmin_2flaunch_5fplan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_ActiveLaunchPlanRequest_default_instance_;
    new (ptr) ::flyteidl::admin::ActiveLaunchPlanRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::ActiveLaunchPlanRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ActiveLaunchPlanRequest_flyteidl_2fadmin_2flaunch_5fplan_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsActiveLaunchPlanRequest_flyteidl_2fadmin_2flaunch_5fplan_2eproto}, {
      &scc_info_NamedEntityIdentifier_flyteidl_2fadmin_2fcommon_2eproto.base,}};

static void InitDefaultsActiveLaunchPlanListRequest_flyteidl_2fadmin_2flaunch_5fplan_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_ActiveLaunchPlanListRequest_default_instance_;
    new (ptr) ::flyteidl::admin::ActiveLaunchPlanListRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::ActiveLaunchPlanListRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ActiveLaunchPlanListRequest_flyteidl_2fadmin_2flaunch_5fplan_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsActiveLaunchPlanListRequest_flyteidl_2fadmin_2flaunch_5fplan_2eproto}, {
      &scc_info_Sort_flyteidl_2fadmin_2fcommon_2eproto.base,}};

void InitDefaults_flyteidl_2fadmin_2flaunch_5fplan_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_LaunchPlanCreateRequest_flyteidl_2fadmin_2flaunch_5fplan_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LaunchPlanCreateResponse_flyteidl_2fadmin_2flaunch_5fplan_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LaunchPlan_flyteidl_2fadmin_2flaunch_5fplan_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LaunchPlanList_flyteidl_2fadmin_2flaunch_5fplan_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Auth_flyteidl_2fadmin_2flaunch_5fplan_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LaunchPlanSpec_flyteidl_2fadmin_2flaunch_5fplan_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LaunchPlanClosure_flyteidl_2fadmin_2flaunch_5fplan_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LaunchPlanMetadata_flyteidl_2fadmin_2flaunch_5fplan_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LaunchPlanUpdateRequest_flyteidl_2fadmin_2flaunch_5fplan_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LaunchPlanUpdateResponse_flyteidl_2fadmin_2flaunch_5fplan_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ActiveLaunchPlanRequest_flyteidl_2fadmin_2flaunch_5fplan_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ActiveLaunchPlanListRequest_flyteidl_2fadmin_2flaunch_5fplan_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_flyteidl_2fadmin_2flaunch_5fplan_2eproto[12];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_flyteidl_2fadmin_2flaunch_5fplan_2eproto[1];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fadmin_2flaunch_5fplan_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_flyteidl_2fadmin_2flaunch_5fplan_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanCreateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanCreateRequest, id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanCreateRequest, spec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanCreateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlan, id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlan, spec_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlan, closure_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanList, launch_plans_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanList, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Auth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Auth, assumable_iam_role_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Auth, kubernetes_service_account_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanSpec, workflow_id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanSpec, entity_metadata_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanSpec, default_inputs_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanSpec, fixed_inputs_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanSpec, role_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanSpec, labels_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanSpec, annotations_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanSpec, auth_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanSpec, auth_role_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanSpec, security_context_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanSpec, quality_of_service_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanSpec, raw_output_data_config_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanSpec, max_parallelism_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanSpec, interruptible_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanSpec, overwrite_cache_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanClosure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanClosure, state_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanClosure, expected_inputs_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanClosure, expected_outputs_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanClosure, created_at_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanClosure, updated_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanMetadata, schedule_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanMetadata, notifications_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanUpdateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanUpdateRequest, id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanUpdateRequest, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::LaunchPlanUpdateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ActiveLaunchPlanRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ActiveLaunchPlanRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ActiveLaunchPlanListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ActiveLaunchPlanListRequest, project_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ActiveLaunchPlanListRequest, domain_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ActiveLaunchPlanListRequest, limit_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ActiveLaunchPlanListRequest, token_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ActiveLaunchPlanListRequest, sort_by_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::flyteidl::admin::LaunchPlanCreateRequest)},
  { 7, -1, sizeof(::flyteidl::admin::LaunchPlanCreateResponse)},
  { 12, -1, sizeof(::flyteidl::admin::LaunchPlan)},
  { 20, -1, sizeof(::flyteidl::admin::LaunchPlanList)},
  { 27, -1, sizeof(::flyteidl::admin::Auth)},
  { 34, -1, sizeof(::flyteidl::admin::LaunchPlanSpec)},
  { 54, -1, sizeof(::flyteidl::admin::LaunchPlanClosure)},
  { 64, -1, sizeof(::flyteidl::admin::LaunchPlanMetadata)},
  { 71, -1, sizeof(::flyteidl::admin::LaunchPlanUpdateRequest)},
  { 78, -1, sizeof(::flyteidl::admin::LaunchPlanUpdateResponse)},
  { 83, -1, sizeof(::flyteidl::admin::ActiveLaunchPlanRequest)},
  { 89, -1, sizeof(::flyteidl::admin::ActiveLaunchPlanListRequest)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_LaunchPlanCreateRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_LaunchPlanCreateResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_LaunchPlan_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_LaunchPlanList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_Auth_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_LaunchPlanSpec_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_LaunchPlanClosure_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_LaunchPlanMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_LaunchPlanUpdateRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_LaunchPlanUpdateResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_ActiveLaunchPlanRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_ActiveLaunchPlanListRequest_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_flyteidl_2fadmin_2flaunch_5fplan_2eproto = {
  {}, AddDescriptors_flyteidl_2fadmin_2flaunch_5fplan_2eproto, "flyteidl/admin/launch_plan.proto", schemas,
  file_default_instances, TableStruct_flyteidl_2fadmin_2flaunch_5fplan_2eproto::offsets,
  file_level_metadata_flyteidl_2fadmin_2flaunch_5fplan_2eproto, 12, file_level_enum_descriptors_flyteidl_2fadmin_2flaunch_5fplan_2eproto, file_level_service_descriptors_flyteidl_2fadmin_2flaunch_5fplan_2eproto,
};

const char descriptor_table_protodef_flyteidl_2fadmin_2flaunch_5fplan_2eproto[] =
  "\n flyteidl/admin/launch_plan.proto\022\016flyt"
  "eidl.admin\032\035flyteidl/core/execution.prot"
  "o\032\034flyteidl/core/literals.proto\032\036flyteid"
  "l/core/identifier.proto\032\035flyteidl/core/i"
  "nterface.proto\032\034flyteidl/core/security.p"
  "roto\032\035flyteidl/admin/schedule.proto\032\033fly"
  "teidl/admin/common.proto\032\037google/protobu"
  "f/timestamp.proto\032\036google/protobuf/wrapp"
  "ers.proto\"n\n\027LaunchPlanCreateRequest\022%\n\002"
  "id\030\001 \001(\0132\031.flyteidl.core.Identifier\022,\n\004s"
  "pec\030\002 \001(\0132\036.flyteidl.admin.LaunchPlanSpe"
  "c\"\032\n\030LaunchPlanCreateResponse\"\225\001\n\nLaunch"
  "Plan\022%\n\002id\030\001 \001(\0132\031.flyteidl.core.Identif"
  "ier\022,\n\004spec\030\002 \001(\0132\036.flyteidl.admin.Launc"
  "hPlanSpec\0222\n\007closure\030\003 \001(\0132!.flyteidl.ad"
  "min.LaunchPlanClosure\"Q\n\016LaunchPlanList\022"
  "0\n\014launch_plans\030\001 \003(\0132\032.flyteidl.admin.L"
  "aunchPlan\022\r\n\005token\030\002 \001(\t\"J\n\004Auth\022\032\n\022assu"
  "mable_iam_role\030\001 \001(\t\022\"\n\032kubernetes_servi"
  "ce_account\030\002 \001(\t:\002\030\001\"\311\005\n\016LaunchPlanSpec\022"
  ".\n\013workflow_id\030\001 \001(\0132\031.flyteidl.core.Ide"
  "ntifier\022;\n\017entity_metadata\030\002 \001(\0132\".flyte"
  "idl.admin.LaunchPlanMetadata\0223\n\016default_"
  "inputs\030\003 \001(\0132\033.flyteidl.core.ParameterMa"
  "p\022/\n\014fixed_inputs\030\004 \001(\0132\031.flyteidl.core."
  "LiteralMap\022\020\n\004role\030\005 \001(\tB\002\030\001\022&\n\006labels\030\006"
  " \001(\0132\026.flyteidl.admin.Labels\0220\n\013annotati"
  "ons\030\007 \001(\0132\033.flyteidl.admin.Annotations\022&"
  "\n\004auth\030\010 \001(\0132\024.flyteidl.admin.AuthB\002\030\001\022/"
  "\n\tauth_role\030\t \001(\0132\030.flyteidl.admin.AuthR"
  "oleB\002\030\001\0228\n\020security_context\030\n \001(\0132\036.flyt"
  "eidl.core.SecurityContext\022;\n\022quality_of_"
  "service\030\020 \001(\0132\037.flyteidl.core.QualityOfS"
  "ervice\022C\n\026raw_output_data_config\030\021 \001(\0132#"
  ".flyteidl.admin.RawOutputDataConfig\022\027\n\017m"
  "ax_parallelism\030\022 \001(\005\0221\n\rinterruptible\030\023 "
  "\001(\0132\032.google.protobuf.BoolValue\022\027\n\017overw"
  "rite_cache\030\024 \001(\010\"\217\002\n\021LaunchPlanClosure\022."
  "\n\005state\030\001 \001(\0162\037.flyteidl.admin.LaunchPla"
  "nState\0224\n\017expected_inputs\030\002 \001(\0132\033.flytei"
  "dl.core.ParameterMap\0224\n\020expected_outputs"
  "\030\003 \001(\0132\032.flyteidl.core.VariableMap\022.\n\ncr"
  "eated_at\030\004 \001(\0132\032.google.protobuf.Timesta"
  "mp\022.\n\nupdated_at\030\005 \001(\0132\032.google.protobuf"
  ".Timestamp\"u\n\022LaunchPlanMetadata\022*\n\010sche"
  "dule\030\001 \001(\0132\030.flyteidl.admin.Schedule\0223\n\r"
  "notifications\030\002 \003(\0132\034.flyteidl.admin.Not"
  "ification\"p\n\027LaunchPlanUpdateRequest\022%\n\002"
  "id\030\001 \001(\0132\031.flyteidl.core.Identifier\022.\n\005s"
  "tate\030\002 \001(\0162\037.flyteidl.admin.LaunchPlanSt"
  "ate\"\032\n\030LaunchPlanUpdateResponse\"L\n\027Activ"
  "eLaunchPlanRequest\0221\n\002id\030\001 \001(\0132%.flyteid"
  "l.admin.NamedEntityIdentifier\"\203\001\n\033Active"
  "LaunchPlanListRequest\022\017\n\007project\030\001 \001(\t\022\016"
  "\n\006domain\030\002 \001(\t\022\r\n\005limit\030\003 \001(\r\022\r\n\005token\030\004"
  " \001(\t\022%\n\007sort_by\030\005 \001(\0132\024.flyteidl.admin.S"
  "ort*+\n\017LaunchPlanState\022\014\n\010INACTIVE\020\000\022\n\n\006"
  "ACTIVE\020\001B7Z5github.com/flyteorg/flyteidl"
  "/gen/pb-go/flyteidl/adminb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_flyteidl_2fadmin_2flaunch_5fplan_2eproto = {
  false, InitDefaults_flyteidl_2fadmin_2flaunch_5fplan_2eproto, 
  descriptor_table_protodef_flyteidl_2fadmin_2flaunch_5fplan_2eproto,
  "flyteidl/admin/launch_plan.proto", &assign_descriptors_table_flyteidl_2fadmin_2flaunch_5fplan_2eproto, 2353,
};

void AddDescriptors_flyteidl_2fadmin_2flaunch_5fplan_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[9] =
  {
    ::AddDescriptors_flyteidl_2fcore_2fexecution_2eproto,
    ::AddDescriptors_flyteidl_2fcore_2fliterals_2eproto,
    ::AddDescriptors_flyteidl_2fcore_2fidentifier_2eproto,
    ::AddDescriptors_flyteidl_2fcore_2finterface_2eproto,
    ::AddDescriptors_flyteidl_2fcore_2fsecurity_2eproto,
    ::AddDescriptors_flyteidl_2fadmin_2fschedule_2eproto,
    ::AddDescriptors_flyteidl_2fadmin_2fcommon_2eproto,
    ::AddDescriptors_google_2fprotobuf_2ftimestamp_2eproto,
    ::AddDescriptors_google_2fprotobuf_2fwrappers_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_flyteidl_2fadmin_2flaunch_5fplan_2eproto, deps, 9);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_flyteidl_2fadmin_2flaunch_5fplan_2eproto = []() { AddDescriptors_flyteidl_2fadmin_2flaunch_5fplan_2eproto(); return true; }();
namespace flyteidl {
namespace admin {
const ::google::protobuf::EnumDescriptor* LaunchPlanState_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_flyteidl_2fadmin_2flaunch_5fplan_2eproto);
  return file_level_enum_descriptors_flyteidl_2fadmin_2flaunch_5fplan_2eproto[0];
}
bool LaunchPlanState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void LaunchPlanCreateRequest::InitAsDefaultInstance() {
  ::flyteidl::admin::_LaunchPlanCreateRequest_default_instance_._instance.get_mutable()->id_ = const_cast< ::flyteidl::core::Identifier*>(
      ::flyteidl::core::Identifier::internal_default_instance());
  ::flyteidl::admin::_LaunchPlanCreateRequest_default_instance_._instance.get_mutable()->spec_ = const_cast< ::flyteidl::admin::LaunchPlanSpec*>(
      ::flyteidl::admin::LaunchPlanSpec::internal_default_instance());
}
class LaunchPlanCreateRequest::HasBitSetters {
 public:
  static const ::flyteidl::core::Identifier& id(const LaunchPlanCreateRequest* msg);
  static const ::flyteidl::admin::LaunchPlanSpec& spec(const LaunchPlanCreateRequest* msg);
};

const ::flyteidl::core::Identifier&
LaunchPlanCreateRequest::HasBitSetters::id(const LaunchPlanCreateRequest* msg) {
  return *msg->id_;
}
const ::flyteidl::admin::LaunchPlanSpec&
LaunchPlanCreateRequest::HasBitSetters::spec(const LaunchPlanCreateRequest* msg) {
  return *msg->spec_;
}
void LaunchPlanCreateRequest::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaunchPlanCreateRequest::kIdFieldNumber;
const int LaunchPlanCreateRequest::kSpecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaunchPlanCreateRequest::LaunchPlanCreateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.LaunchPlanCreateRequest)
}
LaunchPlanCreateRequest::LaunchPlanCreateRequest(const LaunchPlanCreateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::flyteidl::core::Identifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from.has_spec()) {
    spec_ = new ::flyteidl::admin::LaunchPlanSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.LaunchPlanCreateRequest)
}

void LaunchPlanCreateRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LaunchPlanCreateRequest_flyteidl_2fadmin_2flaunch_5fplan_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&spec_) -
      reinterpret_cast<char*>(&id_)) + sizeof(spec_));
}

LaunchPlanCreateRequest::~LaunchPlanCreateRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.LaunchPlanCreateRequest)
  SharedDtor();
}

void LaunchPlanCreateRequest::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete spec_;
}

void LaunchPlanCreateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaunchPlanCreateRequest& LaunchPlanCreateRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LaunchPlanCreateRequest_flyteidl_2fadmin_2flaunch_5fplan_2eproto.base);
  return *internal_default_instance();
}


void LaunchPlanCreateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.LaunchPlanCreateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LaunchPlanCreateRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LaunchPlanCreateRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.Identifier id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::Identifier::_InternalParse;
        object = msg->mutable_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.LaunchPlanSpec spec = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::LaunchPlanSpec::_InternalParse;
        object = msg->mutable_spec();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LaunchPlanCreateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.LaunchPlanCreateRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.Identifier id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.LaunchPlanSpec spec = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_spec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.LaunchPlanCreateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.LaunchPlanCreateRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LaunchPlanCreateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.LaunchPlanCreateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::id(this), output);
  }

  // .flyteidl.admin.LaunchPlanSpec spec = 2;
  if (this->has_spec()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::spec(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.LaunchPlanCreateRequest)
}

::google::protobuf::uint8* LaunchPlanCreateRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.LaunchPlanCreateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::id(this), target);
  }

  // .flyteidl.admin.LaunchPlanSpec spec = 2;
  if (this->has_spec()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::spec(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.LaunchPlanCreateRequest)
  return target;
}

size_t LaunchPlanCreateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.LaunchPlanCreateRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.core.Identifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .flyteidl.admin.LaunchPlanSpec spec = 2;
  if (this->has_spec()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *spec_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaunchPlanCreateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.LaunchPlanCreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LaunchPlanCreateRequest* source =
      ::google::protobuf::DynamicCastToGenerated<LaunchPlanCreateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.LaunchPlanCreateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.LaunchPlanCreateRequest)
    MergeFrom(*source);
  }
}

void LaunchPlanCreateRequest::MergeFrom(const LaunchPlanCreateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.LaunchPlanCreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    mutable_id()->::flyteidl::core::Identifier::MergeFrom(from.id());
  }
  if (from.has_spec()) {
    mutable_spec()->::flyteidl::admin::LaunchPlanSpec::MergeFrom(from.spec());
  }
}

void LaunchPlanCreateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.LaunchPlanCreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaunchPlanCreateRequest::CopyFrom(const LaunchPlanCreateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.LaunchPlanCreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaunchPlanCreateRequest::IsInitialized() const {
  return true;
}

void LaunchPlanCreateRequest::Swap(LaunchPlanCreateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaunchPlanCreateRequest::InternalSwap(LaunchPlanCreateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(spec_, other->spec_);
}

::google::protobuf::Metadata LaunchPlanCreateRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2flaunch_5fplan_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2flaunch_5fplan_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LaunchPlanCreateResponse::InitAsDefaultInstance() {
}
class LaunchPlanCreateResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaunchPlanCreateResponse::LaunchPlanCreateResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.LaunchPlanCreateResponse)
}
LaunchPlanCreateResponse::LaunchPlanCreateResponse(const LaunchPlanCreateResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.LaunchPlanCreateResponse)
}

void LaunchPlanCreateResponse::SharedCtor() {
}

LaunchPlanCreateResponse::~LaunchPlanCreateResponse() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.LaunchPlanCreateResponse)
  SharedDtor();
}

void LaunchPlanCreateResponse::SharedDtor() {
}

void LaunchPlanCreateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaunchPlanCreateResponse& LaunchPlanCreateResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LaunchPlanCreateResponse_flyteidl_2fadmin_2flaunch_5fplan_2eproto.base);
  return *internal_default_instance();
}


void LaunchPlanCreateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.LaunchPlanCreateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LaunchPlanCreateResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LaunchPlanCreateResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LaunchPlanCreateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.LaunchPlanCreateResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.LaunchPlanCreateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.LaunchPlanCreateResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LaunchPlanCreateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.LaunchPlanCreateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.LaunchPlanCreateResponse)
}

::google::protobuf::uint8* LaunchPlanCreateResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.LaunchPlanCreateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.LaunchPlanCreateResponse)
  return target;
}

size_t LaunchPlanCreateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.LaunchPlanCreateResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaunchPlanCreateResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.LaunchPlanCreateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LaunchPlanCreateResponse* source =
      ::google::protobuf::DynamicCastToGenerated<LaunchPlanCreateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.LaunchPlanCreateResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.LaunchPlanCreateResponse)
    MergeFrom(*source);
  }
}

void LaunchPlanCreateResponse::MergeFrom(const LaunchPlanCreateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.LaunchPlanCreateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void LaunchPlanCreateResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.LaunchPlanCreateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaunchPlanCreateResponse::CopyFrom(const LaunchPlanCreateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.LaunchPlanCreateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaunchPlanCreateResponse::IsInitialized() const {
  return true;
}

void LaunchPlanCreateResponse::Swap(LaunchPlanCreateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaunchPlanCreateResponse::InternalSwap(LaunchPlanCreateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LaunchPlanCreateResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2flaunch_5fplan_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2flaunch_5fplan_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LaunchPlan::InitAsDefaultInstance() {
  ::flyteidl::admin::_LaunchPlan_default_instance_._instance.get_mutable()->id_ = const_cast< ::flyteidl::core::Identifier*>(
      ::flyteidl::core::Identifier::internal_default_instance());
  ::flyteidl::admin::_LaunchPlan_default_instance_._instance.get_mutable()->spec_ = const_cast< ::flyteidl::admin::LaunchPlanSpec*>(
      ::flyteidl::admin::LaunchPlanSpec::internal_default_instance());
  ::flyteidl::admin::_LaunchPlan_default_instance_._instance.get_mutable()->closure_ = const_cast< ::flyteidl::admin::LaunchPlanClosure*>(
      ::flyteidl::admin::LaunchPlanClosure::internal_default_instance());
}
class LaunchPlan::HasBitSetters {
 public:
  static const ::flyteidl::core::Identifier& id(const LaunchPlan* msg);
  static const ::flyteidl::admin::LaunchPlanSpec& spec(const LaunchPlan* msg);
  static const ::flyteidl::admin::LaunchPlanClosure& closure(const LaunchPlan* msg);
};

const ::flyteidl::core::Identifier&
LaunchPlan::HasBitSetters::id(const LaunchPlan* msg) {
  return *msg->id_;
}
const ::flyteidl::admin::LaunchPlanSpec&
LaunchPlan::HasBitSetters::spec(const LaunchPlan* msg) {
  return *msg->spec_;
}
const ::flyteidl::admin::LaunchPlanClosure&
LaunchPlan::HasBitSetters::closure(const LaunchPlan* msg) {
  return *msg->closure_;
}
void LaunchPlan::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaunchPlan::kIdFieldNumber;
const int LaunchPlan::kSpecFieldNumber;
const int LaunchPlan::kClosureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaunchPlan::LaunchPlan()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.LaunchPlan)
}
LaunchPlan::LaunchPlan(const LaunchPlan& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::flyteidl::core::Identifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from.has_spec()) {
    spec_ = new ::flyteidl::admin::LaunchPlanSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from.has_closure()) {
    closure_ = new ::flyteidl::admin::LaunchPlanClosure(*from.closure_);
  } else {
    closure_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.LaunchPlan)
}

void LaunchPlan::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LaunchPlan_flyteidl_2fadmin_2flaunch_5fplan_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&closure_) -
      reinterpret_cast<char*>(&id_)) + sizeof(closure_));
}

LaunchPlan::~LaunchPlan() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.LaunchPlan)
  SharedDtor();
}

void LaunchPlan::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete closure_;
}

void LaunchPlan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaunchPlan& LaunchPlan::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LaunchPlan_flyteidl_2fadmin_2flaunch_5fplan_2eproto.base);
  return *internal_default_instance();
}


void LaunchPlan::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.LaunchPlan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && closure_ != nullptr) {
    delete closure_;
  }
  closure_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LaunchPlan::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LaunchPlan*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.Identifier id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::Identifier::_InternalParse;
        object = msg->mutable_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.LaunchPlanSpec spec = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::LaunchPlanSpec::_InternalParse;
        object = msg->mutable_spec();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.LaunchPlanClosure closure = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::LaunchPlanClosure::_InternalParse;
        object = msg->mutable_closure();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LaunchPlan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.LaunchPlan)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.Identifier id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.LaunchPlanSpec spec = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_spec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.LaunchPlanClosure closure = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_closure()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.LaunchPlan)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.LaunchPlan)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LaunchPlan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.LaunchPlan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::id(this), output);
  }

  // .flyteidl.admin.LaunchPlanSpec spec = 2;
  if (this->has_spec()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::spec(this), output);
  }

  // .flyteidl.admin.LaunchPlanClosure closure = 3;
  if (this->has_closure()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::closure(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.LaunchPlan)
}

::google::protobuf::uint8* LaunchPlan::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.LaunchPlan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::id(this), target);
  }

  // .flyteidl.admin.LaunchPlanSpec spec = 2;
  if (this->has_spec()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::spec(this), target);
  }

  // .flyteidl.admin.LaunchPlanClosure closure = 3;
  if (this->has_closure()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::closure(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.LaunchPlan)
  return target;
}

size_t LaunchPlan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.LaunchPlan)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.core.Identifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .flyteidl.admin.LaunchPlanSpec spec = 2;
  if (this->has_spec()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *spec_);
  }

  // .flyteidl.admin.LaunchPlanClosure closure = 3;
  if (this->has_closure()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *closure_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaunchPlan::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.LaunchPlan)
  GOOGLE_DCHECK_NE(&from, this);
  const LaunchPlan* source =
      ::google::protobuf::DynamicCastToGenerated<LaunchPlan>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.LaunchPlan)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.LaunchPlan)
    MergeFrom(*source);
  }
}

void LaunchPlan::MergeFrom(const LaunchPlan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.LaunchPlan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    mutable_id()->::flyteidl::core::Identifier::MergeFrom(from.id());
  }
  if (from.has_spec()) {
    mutable_spec()->::flyteidl::admin::LaunchPlanSpec::MergeFrom(from.spec());
  }
  if (from.has_closure()) {
    mutable_closure()->::flyteidl::admin::LaunchPlanClosure::MergeFrom(from.closure());
  }
}

void LaunchPlan::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.LaunchPlan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaunchPlan::CopyFrom(const LaunchPlan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.LaunchPlan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaunchPlan::IsInitialized() const {
  return true;
}

void LaunchPlan::Swap(LaunchPlan* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaunchPlan::InternalSwap(LaunchPlan* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(spec_, other->spec_);
  swap(closure_, other->closure_);
}

::google::protobuf::Metadata LaunchPlan::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2flaunch_5fplan_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2flaunch_5fplan_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LaunchPlanList::InitAsDefaultInstance() {
}
class LaunchPlanList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaunchPlanList::kLaunchPlansFieldNumber;
const int LaunchPlanList::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaunchPlanList::LaunchPlanList()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.LaunchPlanList)
}
LaunchPlanList::LaunchPlanList(const LaunchPlanList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      launch_plans_(from.launch_plans_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.LaunchPlanList)
}

void LaunchPlanList::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LaunchPlanList_flyteidl_2fadmin_2flaunch_5fplan_2eproto.base);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LaunchPlanList::~LaunchPlanList() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.LaunchPlanList)
  SharedDtor();
}

void LaunchPlanList::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LaunchPlanList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaunchPlanList& LaunchPlanList::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LaunchPlanList_flyteidl_2fadmin_2flaunch_5fplan_2eproto.base);
  return *internal_default_instance();
}


void LaunchPlanList::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.LaunchPlanList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  launch_plans_.Clear();
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LaunchPlanList::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LaunchPlanList*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .flyteidl.admin.LaunchPlan launch_plans = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::flyteidl::admin::LaunchPlan::_InternalParse;
          object = msg->add_launch_plans();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // string token = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.LaunchPlanList.token");
        object = msg->mutable_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LaunchPlanList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.LaunchPlanList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .flyteidl.admin.LaunchPlan launch_plans = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_launch_plans()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.LaunchPlanList.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.LaunchPlanList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.LaunchPlanList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LaunchPlanList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.LaunchPlanList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .flyteidl.admin.LaunchPlan launch_plans = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->launch_plans_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->launch_plans(static_cast<int>(i)),
      output);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.LaunchPlanList.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.LaunchPlanList)
}

::google::protobuf::uint8* LaunchPlanList::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.LaunchPlanList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .flyteidl.admin.LaunchPlan launch_plans = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->launch_plans_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->launch_plans(static_cast<int>(i)), target);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.LaunchPlanList.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.LaunchPlanList)
  return target;
}

size_t LaunchPlanList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.LaunchPlanList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .flyteidl.admin.LaunchPlan launch_plans = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->launch_plans_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->launch_plans(static_cast<int>(i)));
    }
  }

  // string token = 2;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaunchPlanList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.LaunchPlanList)
  GOOGLE_DCHECK_NE(&from, this);
  const LaunchPlanList* source =
      ::google::protobuf::DynamicCastToGenerated<LaunchPlanList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.LaunchPlanList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.LaunchPlanList)
    MergeFrom(*source);
  }
}

void LaunchPlanList::MergeFrom(const LaunchPlanList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.LaunchPlanList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  launch_plans_.MergeFrom(from.launch_plans_);
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
}

void LaunchPlanList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.LaunchPlanList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaunchPlanList::CopyFrom(const LaunchPlanList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.LaunchPlanList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaunchPlanList::IsInitialized() const {
  return true;
}

void LaunchPlanList::Swap(LaunchPlanList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaunchPlanList::InternalSwap(LaunchPlanList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&launch_plans_)->InternalSwap(CastToBase(&other->launch_plans_));
  token_.Swap(&other->token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata LaunchPlanList::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2flaunch_5fplan_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2flaunch_5fplan_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Auth::InitAsDefaultInstance() {
}
class Auth::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Auth::kAssumableIamRoleFieldNumber;
const int Auth::kKubernetesServiceAccountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Auth::Auth()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.Auth)
}
Auth::Auth(const Auth& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  assumable_iam_role_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.assumable_iam_role().size() > 0) {
    assumable_iam_role_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.assumable_iam_role_);
  }
  kubernetes_service_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.kubernetes_service_account().size() > 0) {
    kubernetes_service_account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kubernetes_service_account_);
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.Auth)
}

void Auth::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Auth_flyteidl_2fadmin_2flaunch_5fplan_2eproto.base);
  assumable_iam_role_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kubernetes_service_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Auth::~Auth() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.Auth)
  SharedDtor();
}

void Auth::SharedDtor() {
  assumable_iam_role_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kubernetes_service_account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Auth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Auth& Auth::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Auth_flyteidl_2fadmin_2flaunch_5fplan_2eproto.base);
  return *internal_default_instance();
}


void Auth::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.Auth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  assumable_iam_role_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kubernetes_service_account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Auth::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Auth*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string assumable_iam_role = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.Auth.assumable_iam_role");
        object = msg->mutable_assumable_iam_role();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string kubernetes_service_account = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.Auth.kubernetes_service_account");
        object = msg->mutable_kubernetes_service_account();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Auth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.Auth)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string assumable_iam_role = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_assumable_iam_role()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->assumable_iam_role().data(), static_cast<int>(this->assumable_iam_role().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.Auth.assumable_iam_role"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string kubernetes_service_account = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kubernetes_service_account()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->kubernetes_service_account().data(), static_cast<int>(this->kubernetes_service_account().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.Auth.kubernetes_service_account"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.Auth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.Auth)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Auth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.Auth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string assumable_iam_role = 1;
  if (this->assumable_iam_role().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->assumable_iam_role().data(), static_cast<int>(this->assumable_iam_role().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.Auth.assumable_iam_role");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->assumable_iam_role(), output);
  }

  // string kubernetes_service_account = 2;
  if (this->kubernetes_service_account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kubernetes_service_account().data(), static_cast<int>(this->kubernetes_service_account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.Auth.kubernetes_service_account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->kubernetes_service_account(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.Auth)
}

::google::protobuf::uint8* Auth::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.Auth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string assumable_iam_role = 1;
  if (this->assumable_iam_role().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->assumable_iam_role().data(), static_cast<int>(this->assumable_iam_role().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.Auth.assumable_iam_role");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->assumable_iam_role(), target);
  }

  // string kubernetes_service_account = 2;
  if (this->kubernetes_service_account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kubernetes_service_account().data(), static_cast<int>(this->kubernetes_service_account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.Auth.kubernetes_service_account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->kubernetes_service_account(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.Auth)
  return target;
}

size_t Auth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.Auth)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string assumable_iam_role = 1;
  if (this->assumable_iam_role().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->assumable_iam_role());
  }

  // string kubernetes_service_account = 2;
  if (this->kubernetes_service_account().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->kubernetes_service_account());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Auth::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.Auth)
  GOOGLE_DCHECK_NE(&from, this);
  const Auth* source =
      ::google::protobuf::DynamicCastToGenerated<Auth>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.Auth)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.Auth)
    MergeFrom(*source);
  }
}

void Auth::MergeFrom(const Auth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.Auth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.assumable_iam_role().size() > 0) {

    assumable_iam_role_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.assumable_iam_role_);
  }
  if (from.kubernetes_service_account().size() > 0) {

    kubernetes_service_account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kubernetes_service_account_);
  }
}

void Auth::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.Auth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Auth::CopyFrom(const Auth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.Auth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Auth::IsInitialized() const {
  return true;
}

void Auth::Swap(Auth* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Auth::InternalSwap(Auth* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  assumable_iam_role_.Swap(&other->assumable_iam_role_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  kubernetes_service_account_.Swap(&other->kubernetes_service_account_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata Auth::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2flaunch_5fplan_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2flaunch_5fplan_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LaunchPlanSpec::InitAsDefaultInstance() {
  ::flyteidl::admin::_LaunchPlanSpec_default_instance_._instance.get_mutable()->workflow_id_ = const_cast< ::flyteidl::core::Identifier*>(
      ::flyteidl::core::Identifier::internal_default_instance());
  ::flyteidl::admin::_LaunchPlanSpec_default_instance_._instance.get_mutable()->entity_metadata_ = const_cast< ::flyteidl::admin::LaunchPlanMetadata*>(
      ::flyteidl::admin::LaunchPlanMetadata::internal_default_instance());
  ::flyteidl::admin::_LaunchPlanSpec_default_instance_._instance.get_mutable()->default_inputs_ = const_cast< ::flyteidl::core::ParameterMap*>(
      ::flyteidl::core::ParameterMap::internal_default_instance());
  ::flyteidl::admin::_LaunchPlanSpec_default_instance_._instance.get_mutable()->fixed_inputs_ = const_cast< ::flyteidl::core::LiteralMap*>(
      ::flyteidl::core::LiteralMap::internal_default_instance());
  ::flyteidl::admin::_LaunchPlanSpec_default_instance_._instance.get_mutable()->labels_ = const_cast< ::flyteidl::admin::Labels*>(
      ::flyteidl::admin::Labels::internal_default_instance());
  ::flyteidl::admin::_LaunchPlanSpec_default_instance_._instance.get_mutable()->annotations_ = const_cast< ::flyteidl::admin::Annotations*>(
      ::flyteidl::admin::Annotations::internal_default_instance());
  ::flyteidl::admin::_LaunchPlanSpec_default_instance_._instance.get_mutable()->auth_ = const_cast< ::flyteidl::admin::Auth*>(
      ::flyteidl::admin::Auth::internal_default_instance());
  ::flyteidl::admin::_LaunchPlanSpec_default_instance_._instance.get_mutable()->auth_role_ = const_cast< ::flyteidl::admin::AuthRole*>(
      ::flyteidl::admin::AuthRole::internal_default_instance());
  ::flyteidl::admin::_LaunchPlanSpec_default_instance_._instance.get_mutable()->security_context_ = const_cast< ::flyteidl::core::SecurityContext*>(
      ::flyteidl::core::SecurityContext::internal_default_instance());
  ::flyteidl::admin::_LaunchPlanSpec_default_instance_._instance.get_mutable()->quality_of_service_ = const_cast< ::flyteidl::core::QualityOfService*>(
      ::flyteidl::core::QualityOfService::internal_default_instance());
  ::flyteidl::admin::_LaunchPlanSpec_default_instance_._instance.get_mutable()->raw_output_data_config_ = const_cast< ::flyteidl::admin::RawOutputDataConfig*>(
      ::flyteidl::admin::RawOutputDataConfig::internal_default_instance());
  ::flyteidl::admin::_LaunchPlanSpec_default_instance_._instance.get_mutable()->interruptible_ = const_cast< ::google::protobuf::BoolValue*>(
      ::google::protobuf::BoolValue::internal_default_instance());
}
class LaunchPlanSpec::HasBitSetters {
 public:
  static const ::flyteidl::core::Identifier& workflow_id(const LaunchPlanSpec* msg);
  static const ::flyteidl::admin::LaunchPlanMetadata& entity_metadata(const LaunchPlanSpec* msg);
  static const ::flyteidl::core::ParameterMap& default_inputs(const LaunchPlanSpec* msg);
  static const ::flyteidl::core::LiteralMap& fixed_inputs(const LaunchPlanSpec* msg);
  static const ::flyteidl::admin::Labels& labels(const LaunchPlanSpec* msg);
  static const ::flyteidl::admin::Annotations& annotations(const LaunchPlanSpec* msg);
  static const ::flyteidl::admin::Auth& auth(const LaunchPlanSpec* msg);
  static const ::flyteidl::admin::AuthRole& auth_role(const LaunchPlanSpec* msg);
  static const ::flyteidl::core::SecurityContext& security_context(const LaunchPlanSpec* msg);
  static const ::flyteidl::core::QualityOfService& quality_of_service(const LaunchPlanSpec* msg);
  static const ::flyteidl::admin::RawOutputDataConfig& raw_output_data_config(const LaunchPlanSpec* msg);
  static const ::google::protobuf::BoolValue& interruptible(const LaunchPlanSpec* msg);
};

const ::flyteidl::core::Identifier&
LaunchPlanSpec::HasBitSetters::workflow_id(const LaunchPlanSpec* msg) {
  return *msg->workflow_id_;
}
const ::flyteidl::admin::LaunchPlanMetadata&
LaunchPlanSpec::HasBitSetters::entity_metadata(const LaunchPlanSpec* msg) {
  return *msg->entity_metadata_;
}
const ::flyteidl::core::ParameterMap&
LaunchPlanSpec::HasBitSetters::default_inputs(const LaunchPlanSpec* msg) {
  return *msg->default_inputs_;
}
const ::flyteidl::core::LiteralMap&
LaunchPlanSpec::HasBitSetters::fixed_inputs(const LaunchPlanSpec* msg) {
  return *msg->fixed_inputs_;
}
const ::flyteidl::admin::Labels&
LaunchPlanSpec::HasBitSetters::labels(const LaunchPlanSpec* msg) {
  return *msg->labels_;
}
const ::flyteidl::admin::Annotations&
LaunchPlanSpec::HasBitSetters::annotations(const LaunchPlanSpec* msg) {
  return *msg->annotations_;
}
const ::flyteidl::admin::Auth&
LaunchPlanSpec::HasBitSetters::auth(const LaunchPlanSpec* msg) {
  return *msg->auth_;
}
const ::flyteidl::admin::AuthRole&
LaunchPlanSpec::HasBitSetters::auth_role(const LaunchPlanSpec* msg) {
  return *msg->auth_role_;
}
const ::flyteidl::core::SecurityContext&
LaunchPlanSpec::HasBitSetters::security_context(const LaunchPlanSpec* msg) {
  return *msg->security_context_;
}
const ::flyteidl::core::QualityOfService&
LaunchPlanSpec::HasBitSetters::quality_of_service(const LaunchPlanSpec* msg) {
  return *msg->quality_of_service_;
}
const ::flyteidl::admin::RawOutputDataConfig&
LaunchPlanSpec::HasBitSetters::raw_output_data_config(const LaunchPlanSpec* msg) {
  return *msg->raw_output_data_config_;
}
const ::google::protobuf::BoolValue&
LaunchPlanSpec::HasBitSetters::interruptible(const LaunchPlanSpec* msg) {
  return *msg->interruptible_;
}
void LaunchPlanSpec::clear_workflow_id() {
  if (GetArenaNoVirtual() == nullptr && workflow_id_ != nullptr) {
    delete workflow_id_;
  }
  workflow_id_ = nullptr;
}
void LaunchPlanSpec::clear_default_inputs() {
  if (GetArenaNoVirtual() == nullptr && default_inputs_ != nullptr) {
    delete default_inputs_;
  }
  default_inputs_ = nullptr;
}
void LaunchPlanSpec::clear_fixed_inputs() {
  if (GetArenaNoVirtual() == nullptr && fixed_inputs_ != nullptr) {
    delete fixed_inputs_;
  }
  fixed_inputs_ = nullptr;
}
void LaunchPlanSpec::clear_labels() {
  if (GetArenaNoVirtual() == nullptr && labels_ != nullptr) {
    delete labels_;
  }
  labels_ = nullptr;
}
void LaunchPlanSpec::clear_annotations() {
  if (GetArenaNoVirtual() == nullptr && annotations_ != nullptr) {
    delete annotations_;
  }
  annotations_ = nullptr;
}
void LaunchPlanSpec::clear_auth_role() {
  if (GetArenaNoVirtual() == nullptr && auth_role_ != nullptr) {
    delete auth_role_;
  }
  auth_role_ = nullptr;
}
void LaunchPlanSpec::clear_security_context() {
  if (GetArenaNoVirtual() == nullptr && security_context_ != nullptr) {
    delete security_context_;
  }
  security_context_ = nullptr;
}
void LaunchPlanSpec::clear_quality_of_service() {
  if (GetArenaNoVirtual() == nullptr && quality_of_service_ != nullptr) {
    delete quality_of_service_;
  }
  quality_of_service_ = nullptr;
}
void LaunchPlanSpec::clear_raw_output_data_config() {
  if (GetArenaNoVirtual() == nullptr && raw_output_data_config_ != nullptr) {
    delete raw_output_data_config_;
  }
  raw_output_data_config_ = nullptr;
}
void LaunchPlanSpec::clear_interruptible() {
  if (GetArenaNoVirtual() == nullptr && interruptible_ != nullptr) {
    delete interruptible_;
  }
  interruptible_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaunchPlanSpec::kWorkflowIdFieldNumber;
const int LaunchPlanSpec::kEntityMetadataFieldNumber;
const int LaunchPlanSpec::kDefaultInputsFieldNumber;
const int LaunchPlanSpec::kFixedInputsFieldNumber;
const int LaunchPlanSpec::kRoleFieldNumber;
const int LaunchPlanSpec::kLabelsFieldNumber;
const int LaunchPlanSpec::kAnnotationsFieldNumber;
const int LaunchPlanSpec::kAuthFieldNumber;
const int LaunchPlanSpec::kAuthRoleFieldNumber;
const int LaunchPlanSpec::kSecurityContextFieldNumber;
const int LaunchPlanSpec::kQualityOfServiceFieldNumber;
const int LaunchPlanSpec::kRawOutputDataConfigFieldNumber;
const int LaunchPlanSpec::kMaxParallelismFieldNumber;
const int LaunchPlanSpec::kInterruptibleFieldNumber;
const int LaunchPlanSpec::kOverwriteCacheFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaunchPlanSpec::LaunchPlanSpec()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.LaunchPlanSpec)
}
LaunchPlanSpec::LaunchPlanSpec(const LaunchPlanSpec& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  role_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.role().size() > 0) {
    role_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.role_);
  }
  if (from.has_workflow_id()) {
    workflow_id_ = new ::flyteidl::core::Identifier(*from.workflow_id_);
  } else {
    workflow_id_ = nullptr;
  }
  if (from.has_entity_metadata()) {
    entity_metadata_ = new ::flyteidl::admin::LaunchPlanMetadata(*from.entity_metadata_);
  } else {
    entity_metadata_ = nullptr;
  }
  if (from.has_default_inputs()) {
    default_inputs_ = new ::flyteidl::core::ParameterMap(*from.default_inputs_);
  } else {
    default_inputs_ = nullptr;
  }
  if (from.has_fixed_inputs()) {
    fixed_inputs_ = new ::flyteidl::core::LiteralMap(*from.fixed_inputs_);
  } else {
    fixed_inputs_ = nullptr;
  }
  if (from.has_labels()) {
    labels_ = new ::flyteidl::admin::Labels(*from.labels_);
  } else {
    labels_ = nullptr;
  }
  if (from.has_annotations()) {
    annotations_ = new ::flyteidl::admin::Annotations(*from.annotations_);
  } else {
    annotations_ = nullptr;
  }
  if (from.has_auth()) {
    auth_ = new ::flyteidl::admin::Auth(*from.auth_);
  } else {
    auth_ = nullptr;
  }
  if (from.has_auth_role()) {
    auth_role_ = new ::flyteidl::admin::AuthRole(*from.auth_role_);
  } else {
    auth_role_ = nullptr;
  }
  if (from.has_security_context()) {
    security_context_ = new ::flyteidl::core::SecurityContext(*from.security_context_);
  } else {
    security_context_ = nullptr;
  }
  if (from.has_quality_of_service()) {
    quality_of_service_ = new ::flyteidl::core::QualityOfService(*from.quality_of_service_);
  } else {
    quality_of_service_ = nullptr;
  }
  if (from.has_raw_output_data_config()) {
    raw_output_data_config_ = new ::flyteidl::admin::RawOutputDataConfig(*from.raw_output_data_config_);
  } else {
    raw_output_data_config_ = nullptr;
  }
  if (from.has_interruptible()) {
    interruptible_ = new ::google::protobuf::BoolValue(*from.interruptible_);
  } else {
    interruptible_ = nullptr;
  }
  ::memcpy(&max_parallelism_, &from.max_parallelism_,
    static_cast<size_t>(reinterpret_cast<char*>(&overwrite_cache_) -
    reinterpret_cast<char*>(&max_parallelism_)) + sizeof(overwrite_cache_));
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.LaunchPlanSpec)
}

void LaunchPlanSpec::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LaunchPlanSpec_flyteidl_2fadmin_2flaunch_5fplan_2eproto.base);
  role_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&workflow_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&overwrite_cache_) -
      reinterpret_cast<char*>(&workflow_id_)) + sizeof(overwrite_cache_));
}

LaunchPlanSpec::~LaunchPlanSpec() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.LaunchPlanSpec)
  SharedDtor();
}

void LaunchPlanSpec::SharedDtor() {
  role_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete workflow_id_;
  if (this != internal_default_instance()) delete entity_metadata_;
  if (this != internal_default_instance()) delete default_inputs_;
  if (this != internal_default_instance()) delete fixed_inputs_;
  if (this != internal_default_instance()) delete labels_;
  if (this != internal_default_instance()) delete annotations_;
  if (this != internal_default_instance()) delete auth_;
  if (this != internal_default_instance()) delete auth_role_;
  if (this != internal_default_instance()) delete security_context_;
  if (this != internal_default_instance()) delete quality_of_service_;
  if (this != internal_default_instance()) delete raw_output_data_config_;
  if (this != internal_default_instance()) delete interruptible_;
}

void LaunchPlanSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaunchPlanSpec& LaunchPlanSpec::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LaunchPlanSpec_flyteidl_2fadmin_2flaunch_5fplan_2eproto.base);
  return *internal_default_instance();
}


void LaunchPlanSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.LaunchPlanSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  role_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && workflow_id_ != nullptr) {
    delete workflow_id_;
  }
  workflow_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && entity_metadata_ != nullptr) {
    delete entity_metadata_;
  }
  entity_metadata_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && default_inputs_ != nullptr) {
    delete default_inputs_;
  }
  default_inputs_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && fixed_inputs_ != nullptr) {
    delete fixed_inputs_;
  }
  fixed_inputs_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && labels_ != nullptr) {
    delete labels_;
  }
  labels_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && annotations_ != nullptr) {
    delete annotations_;
  }
  annotations_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && auth_ != nullptr) {
    delete auth_;
  }
  auth_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && auth_role_ != nullptr) {
    delete auth_role_;
  }
  auth_role_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && security_context_ != nullptr) {
    delete security_context_;
  }
  security_context_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && quality_of_service_ != nullptr) {
    delete quality_of_service_;
  }
  quality_of_service_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && raw_output_data_config_ != nullptr) {
    delete raw_output_data_config_;
  }
  raw_output_data_config_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && interruptible_ != nullptr) {
    delete interruptible_;
  }
  interruptible_ = nullptr;
  ::memset(&max_parallelism_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&overwrite_cache_) -
      reinterpret_cast<char*>(&max_parallelism_)) + sizeof(overwrite_cache_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LaunchPlanSpec::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LaunchPlanSpec*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.Identifier workflow_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::Identifier::_InternalParse;
        object = msg->mutable_workflow_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.LaunchPlanMetadata entity_metadata = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::LaunchPlanMetadata::_InternalParse;
        object = msg->mutable_entity_metadata();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.ParameterMap default_inputs = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::ParameterMap::_InternalParse;
        object = msg->mutable_default_inputs();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.LiteralMap fixed_inputs = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::LiteralMap::_InternalParse;
        object = msg->mutable_fixed_inputs();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string role = 5 [deprecated = true];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.LaunchPlanSpec.role");
        object = msg->mutable_role();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .flyteidl.admin.Labels labels = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::Labels::_InternalParse;
        object = msg->mutable_labels();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.Annotations annotations = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::Annotations::_InternalParse;
        object = msg->mutable_annotations();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.Auth auth = 8 [deprecated = true];
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::Auth::_InternalParse;
        object = msg->mutable_auth();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.AuthRole auth_role = 9 [deprecated = true];
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::AuthRole::_InternalParse;
        object = msg->mutable_auth_role();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.SecurityContext security_context = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::SecurityContext::_InternalParse;
        object = msg->mutable_security_context();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.QualityOfService quality_of_service = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 130) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::QualityOfService::_InternalParse;
        object = msg->mutable_quality_of_service();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.RawOutputDataConfig raw_output_data_config = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 138) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::RawOutputDataConfig::_InternalParse;
        object = msg->mutable_raw_output_data_config();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // int32 max_parallelism = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_max_parallelism(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .google.protobuf.BoolValue interruptible = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 154) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::BoolValue::_InternalParse;
        object = msg->mutable_interruptible();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bool overwrite_cache = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 160) goto handle_unusual;
        msg->set_overwrite_cache(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LaunchPlanSpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.LaunchPlanSpec)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.Identifier workflow_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_workflow_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.LaunchPlanMetadata entity_metadata = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_entity_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.ParameterMap default_inputs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_default_inputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.LiteralMap fixed_inputs = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fixed_inputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string role = 5 [deprecated = true];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->role().data(), static_cast<int>(this->role().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.LaunchPlanSpec.role"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.Labels labels = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_labels()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.Annotations annotations = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_annotations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.Auth auth = 8 [deprecated = true];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_auth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.AuthRole auth_role = 9 [deprecated = true];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_auth_role()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.SecurityContext security_context = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_security_context()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.QualityOfService quality_of_service = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (130 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_quality_of_service()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.RawOutputDataConfig raw_output_data_config = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (138 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_raw_output_data_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_parallelism = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (144 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_parallelism_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue interruptible = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (154 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_interruptible()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool overwrite_cache = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (160 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &overwrite_cache_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.LaunchPlanSpec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.LaunchPlanSpec)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LaunchPlanSpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.LaunchPlanSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier workflow_id = 1;
  if (this->has_workflow_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::workflow_id(this), output);
  }

  // .flyteidl.admin.LaunchPlanMetadata entity_metadata = 2;
  if (this->has_entity_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::entity_metadata(this), output);
  }

  // .flyteidl.core.ParameterMap default_inputs = 3;
  if (this->has_default_inputs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::default_inputs(this), output);
  }

  // .flyteidl.core.LiteralMap fixed_inputs = 4;
  if (this->has_fixed_inputs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::fixed_inputs(this), output);
  }

  // string role = 5 [deprecated = true];
  if (this->role().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->role().data(), static_cast<int>(this->role().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.LaunchPlanSpec.role");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->role(), output);
  }

  // .flyteidl.admin.Labels labels = 6;
  if (this->has_labels()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::labels(this), output);
  }

  // .flyteidl.admin.Annotations annotations = 7;
  if (this->has_annotations()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::annotations(this), output);
  }

  // .flyteidl.admin.Auth auth = 8 [deprecated = true];
  if (this->has_auth()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::auth(this), output);
  }

  // .flyteidl.admin.AuthRole auth_role = 9 [deprecated = true];
  if (this->has_auth_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::auth_role(this), output);
  }

  // .flyteidl.core.SecurityContext security_context = 10;
  if (this->has_security_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::security_context(this), output);
  }

  // .flyteidl.core.QualityOfService quality_of_service = 16;
  if (this->has_quality_of_service()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, HasBitSetters::quality_of_service(this), output);
  }

  // .flyteidl.admin.RawOutputDataConfig raw_output_data_config = 17;
  if (this->has_raw_output_data_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, HasBitSetters::raw_output_data_config(this), output);
  }

  // int32 max_parallelism = 18;
  if (this->max_parallelism() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->max_parallelism(), output);
  }

  // .google.protobuf.BoolValue interruptible = 19;
  if (this->has_interruptible()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, HasBitSetters::interruptible(this), output);
  }

  // bool overwrite_cache = 20;
  if (this->overwrite_cache() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->overwrite_cache(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.LaunchPlanSpec)
}

::google::protobuf::uint8* LaunchPlanSpec::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.LaunchPlanSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier workflow_id = 1;
  if (this->has_workflow_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::workflow_id(this), target);
  }

  // .flyteidl.admin.LaunchPlanMetadata entity_metadata = 2;
  if (this->has_entity_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::entity_metadata(this), target);
  }

  // .flyteidl.core.ParameterMap default_inputs = 3;
  if (this->has_default_inputs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::default_inputs(this), target);
  }

  // .flyteidl.core.LiteralMap fixed_inputs = 4;
  if (this->has_fixed_inputs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::fixed_inputs(this), target);
  }

  // string role = 5 [deprecated = true];
  if (this->role().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->role().data(), static_cast<int>(this->role().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.LaunchPlanSpec.role");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->role(), target);
  }

  // .flyteidl.admin.Labels labels = 6;
  if (this->has_labels()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::labels(this), target);
  }

  // .flyteidl.admin.Annotations annotations = 7;
  if (this->has_annotations()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::annotations(this), target);
  }

  // .flyteidl.admin.Auth auth = 8 [deprecated = true];
  if (this->has_auth()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::auth(this), target);
  }

  // .flyteidl.admin.AuthRole auth_role = 9 [deprecated = true];
  if (this->has_auth_role()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::auth_role(this), target);
  }

  // .flyteidl.core.SecurityContext security_context = 10;
  if (this->has_security_context()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::security_context(this), target);
  }

  // .flyteidl.core.QualityOfService quality_of_service = 16;
  if (this->has_quality_of_service()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, HasBitSetters::quality_of_service(this), target);
  }

  // .flyteidl.admin.RawOutputDataConfig raw_output_data_config = 17;
  if (this->has_raw_output_data_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, HasBitSetters::raw_output_data_config(this), target);
  }

  // int32 max_parallelism = 18;
  if (this->max_parallelism() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->max_parallelism(), target);
  }

  // .google.protobuf.BoolValue interruptible = 19;
  if (this->has_interruptible()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, HasBitSetters::interruptible(this), target);
  }

  // bool overwrite_cache = 20;
  if (this->overwrite_cache() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->overwrite_cache(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.LaunchPlanSpec)
  return target;
}

size_t LaunchPlanSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.LaunchPlanSpec)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string role = 5 [deprecated = true];
  if (this->role().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->role());
  }

  // .flyteidl.core.Identifier workflow_id = 1;
  if (this->has_workflow_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *workflow_id_);
  }

  // .flyteidl.admin.LaunchPlanMetadata entity_metadata = 2;
  if (this->has_entity_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *entity_metadata_);
  }

  // .flyteidl.core.ParameterMap default_inputs = 3;
  if (this->has_default_inputs()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *default_inputs_);
  }

  // .flyteidl.core.LiteralMap fixed_inputs = 4;
  if (this->has_fixed_inputs()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *fixed_inputs_);
  }

  // .flyteidl.admin.Labels labels = 6;
  if (this->has_labels()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *labels_);
  }

  // .flyteidl.admin.Annotations annotations = 7;
  if (this->has_annotations()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *annotations_);
  }

  // .flyteidl.admin.Auth auth = 8 [deprecated = true];
  if (this->has_auth()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *auth_);
  }

  // .flyteidl.admin.AuthRole auth_role = 9 [deprecated = true];
  if (this->has_auth_role()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *auth_role_);
  }

  // .flyteidl.core.SecurityContext security_context = 10;
  if (this->has_security_context()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *security_context_);
  }

  // .flyteidl.core.QualityOfService quality_of_service = 16;
  if (this->has_quality_of_service()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *quality_of_service_);
  }

  // .flyteidl.admin.RawOutputDataConfig raw_output_data_config = 17;
  if (this->has_raw_output_data_config()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *raw_output_data_config_);
  }

  // .google.protobuf.BoolValue interruptible = 19;
  if (this->has_interruptible()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *interruptible_);
  }

  // int32 max_parallelism = 18;
  if (this->max_parallelism() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_parallelism());
  }

  // bool overwrite_cache = 20;
  if (this->overwrite_cache() != 0) {
    total_size += 2 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaunchPlanSpec::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.LaunchPlanSpec)
  GOOGLE_DCHECK_NE(&from, this);
  const LaunchPlanSpec* source =
      ::google::protobuf::DynamicCastToGenerated<LaunchPlanSpec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.LaunchPlanSpec)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.LaunchPlanSpec)
    MergeFrom(*source);
  }
}

void LaunchPlanSpec::MergeFrom(const LaunchPlanSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.LaunchPlanSpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.role().size() > 0) {

    role_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.role_);
  }
  if (from.has_workflow_id()) {
    mutable_workflow_id()->::flyteidl::core::Identifier::MergeFrom(from.workflow_id());
  }
  if (from.has_entity_metadata()) {
    mutable_entity_metadata()->::flyteidl::admin::LaunchPlanMetadata::MergeFrom(from.entity_metadata());
  }
  if (from.has_default_inputs()) {
    mutable_default_inputs()->::flyteidl::core::ParameterMap::MergeFrom(from.default_inputs());
  }
  if (from.has_fixed_inputs()) {
    mutable_fixed_inputs()->::flyteidl::core::LiteralMap::MergeFrom(from.fixed_inputs());
  }
  if (from.has_labels()) {
    mutable_labels()->::flyteidl::admin::Labels::MergeFrom(from.labels());
  }
  if (from.has_annotations()) {
    mutable_annotations()->::flyteidl::admin::Annotations::MergeFrom(from.annotations());
  }
  if (from.has_auth()) {
    mutable_auth()->::flyteidl::admin::Auth::MergeFrom(from.auth());
  }
  if (from.has_auth_role()) {
    mutable_auth_role()->::flyteidl::admin::AuthRole::MergeFrom(from.auth_role());
  }
  if (from.has_security_context()) {
    mutable_security_context()->::flyteidl::core::SecurityContext::MergeFrom(from.security_context());
  }
  if (from.has_quality_of_service()) {
    mutable_quality_of_service()->::flyteidl::core::QualityOfService::MergeFrom(from.quality_of_service());
  }
  if (from.has_raw_output_data_config()) {
    mutable_raw_output_data_config()->::flyteidl::admin::RawOutputDataConfig::MergeFrom(from.raw_output_data_config());
  }
  if (from.has_interruptible()) {
    mutable_interruptible()->::google::protobuf::BoolValue::MergeFrom(from.interruptible());
  }
  if (from.max_parallelism() != 0) {
    set_max_parallelism(from.max_parallelism());
  }
  if (from.overwrite_cache() != 0) {
    set_overwrite_cache(from.overwrite_cache());
  }
}

void LaunchPlanSpec::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.LaunchPlanSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaunchPlanSpec::CopyFrom(const LaunchPlanSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.LaunchPlanSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaunchPlanSpec::IsInitialized() const {
  return true;
}

void LaunchPlanSpec::Swap(LaunchPlanSpec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaunchPlanSpec::InternalSwap(LaunchPlanSpec* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  role_.Swap(&other->role_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(workflow_id_, other->workflow_id_);
  swap(entity_metadata_, other->entity_metadata_);
  swap(default_inputs_, other->default_inputs_);
  swap(fixed_inputs_, other->fixed_inputs_);
  swap(labels_, other->labels_);
  swap(annotations_, other->annotations_);
  swap(auth_, other->auth_);
  swap(auth_role_, other->auth_role_);
  swap(security_context_, other->security_context_);
  swap(quality_of_service_, other->quality_of_service_);
  swap(raw_output_data_config_, other->raw_output_data_config_);
  swap(interruptible_, other->interruptible_);
  swap(max_parallelism_, other->max_parallelism_);
  swap(overwrite_cache_, other->overwrite_cache_);
}

::google::protobuf::Metadata LaunchPlanSpec::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2flaunch_5fplan_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2flaunch_5fplan_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LaunchPlanClosure::InitAsDefaultInstance() {
  ::flyteidl::admin::_LaunchPlanClosure_default_instance_._instance.get_mutable()->expected_inputs_ = const_cast< ::flyteidl::core::ParameterMap*>(
      ::flyteidl::core::ParameterMap::internal_default_instance());
  ::flyteidl::admin::_LaunchPlanClosure_default_instance_._instance.get_mutable()->expected_outputs_ = const_cast< ::flyteidl::core::VariableMap*>(
      ::flyteidl::core::VariableMap::internal_default_instance());
  ::flyteidl::admin::_LaunchPlanClosure_default_instance_._instance.get_mutable()->created_at_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::flyteidl::admin::_LaunchPlanClosure_default_instance_._instance.get_mutable()->updated_at_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
class LaunchPlanClosure::HasBitSetters {
 public:
  static const ::flyteidl::core::ParameterMap& expected_inputs(const LaunchPlanClosure* msg);
  static const ::flyteidl::core::VariableMap& expected_outputs(const LaunchPlanClosure* msg);
  static const ::google::protobuf::Timestamp& created_at(const LaunchPlanClosure* msg);
  static const ::google::protobuf::Timestamp& updated_at(const LaunchPlanClosure* msg);
};

const ::flyteidl::core::ParameterMap&
LaunchPlanClosure::HasBitSetters::expected_inputs(const LaunchPlanClosure* msg) {
  return *msg->expected_inputs_;
}
const ::flyteidl::core::VariableMap&
LaunchPlanClosure::HasBitSetters::expected_outputs(const LaunchPlanClosure* msg) {
  return *msg->expected_outputs_;
}
const ::google::protobuf::Timestamp&
LaunchPlanClosure::HasBitSetters::created_at(const LaunchPlanClosure* msg) {
  return *msg->created_at_;
}
const ::google::protobuf::Timestamp&
LaunchPlanClosure::HasBitSetters::updated_at(const LaunchPlanClosure* msg) {
  return *msg->updated_at_;
}
void LaunchPlanClosure::clear_expected_inputs() {
  if (GetArenaNoVirtual() == nullptr && expected_inputs_ != nullptr) {
    delete expected_inputs_;
  }
  expected_inputs_ = nullptr;
}
void LaunchPlanClosure::clear_expected_outputs() {
  if (GetArenaNoVirtual() == nullptr && expected_outputs_ != nullptr) {
    delete expected_outputs_;
  }
  expected_outputs_ = nullptr;
}
void LaunchPlanClosure::clear_created_at() {
  if (GetArenaNoVirtual() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void LaunchPlanClosure::clear_updated_at() {
  if (GetArenaNoVirtual() == nullptr && updated_at_ != nullptr) {
    delete updated_at_;
  }
  updated_at_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaunchPlanClosure::kStateFieldNumber;
const int LaunchPlanClosure::kExpectedInputsFieldNumber;
const int LaunchPlanClosure::kExpectedOutputsFieldNumber;
const int LaunchPlanClosure::kCreatedAtFieldNumber;
const int LaunchPlanClosure::kUpdatedAtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaunchPlanClosure::LaunchPlanClosure()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.LaunchPlanClosure)
}
LaunchPlanClosure::LaunchPlanClosure(const LaunchPlanClosure& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_expected_inputs()) {
    expected_inputs_ = new ::flyteidl::core::ParameterMap(*from.expected_inputs_);
  } else {
    expected_inputs_ = nullptr;
  }
  if (from.has_expected_outputs()) {
    expected_outputs_ = new ::flyteidl::core::VariableMap(*from.expected_outputs_);
  } else {
    expected_outputs_ = nullptr;
  }
  if (from.has_created_at()) {
    created_at_ = new ::google::protobuf::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from.has_updated_at()) {
    updated_at_ = new ::google::protobuf::Timestamp(*from.updated_at_);
  } else {
    updated_at_ = nullptr;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.LaunchPlanClosure)
}

void LaunchPlanClosure::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LaunchPlanClosure_flyteidl_2fadmin_2flaunch_5fplan_2eproto.base);
  ::memset(&expected_inputs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&expected_inputs_)) + sizeof(state_));
}

LaunchPlanClosure::~LaunchPlanClosure() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.LaunchPlanClosure)
  SharedDtor();
}

void LaunchPlanClosure::SharedDtor() {
  if (this != internal_default_instance()) delete expected_inputs_;
  if (this != internal_default_instance()) delete expected_outputs_;
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete updated_at_;
}

void LaunchPlanClosure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaunchPlanClosure& LaunchPlanClosure::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LaunchPlanClosure_flyteidl_2fadmin_2flaunch_5fplan_2eproto.base);
  return *internal_default_instance();
}


void LaunchPlanClosure::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.LaunchPlanClosure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && expected_inputs_ != nullptr) {
    delete expected_inputs_;
  }
  expected_inputs_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && expected_outputs_ != nullptr) {
    delete expected_outputs_;
  }
  expected_outputs_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && updated_at_ != nullptr) {
    delete updated_at_;
  }
  updated_at_ = nullptr;
  state_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LaunchPlanClosure::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LaunchPlanClosure*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.admin.LaunchPlanState state = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_state(static_cast<::flyteidl::admin::LaunchPlanState>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .flyteidl.core.ParameterMap expected_inputs = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::ParameterMap::_InternalParse;
        object = msg->mutable_expected_inputs();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.core.VariableMap expected_outputs = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::VariableMap::_InternalParse;
        object = msg->mutable_expected_outputs();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.Timestamp created_at = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_created_at();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.Timestamp updated_at = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_updated_at();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LaunchPlanClosure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.LaunchPlanClosure)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.admin.LaunchPlanState state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::flyteidl::admin::LaunchPlanState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.ParameterMap expected_inputs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_expected_inputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.core.VariableMap expected_outputs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_expected_outputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp created_at = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_created_at()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp updated_at = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_updated_at()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.LaunchPlanClosure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.LaunchPlanClosure)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LaunchPlanClosure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.LaunchPlanClosure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.admin.LaunchPlanState state = 1;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // .flyteidl.core.ParameterMap expected_inputs = 2;
  if (this->has_expected_inputs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::expected_inputs(this), output);
  }

  // .flyteidl.core.VariableMap expected_outputs = 3;
  if (this->has_expected_outputs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::expected_outputs(this), output);
  }

  // .google.protobuf.Timestamp created_at = 4;
  if (this->has_created_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::created_at(this), output);
  }

  // .google.protobuf.Timestamp updated_at = 5;
  if (this->has_updated_at()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::updated_at(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.LaunchPlanClosure)
}

::google::protobuf::uint8* LaunchPlanClosure::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.LaunchPlanClosure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.admin.LaunchPlanState state = 1;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  // .flyteidl.core.ParameterMap expected_inputs = 2;
  if (this->has_expected_inputs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::expected_inputs(this), target);
  }

  // .flyteidl.core.VariableMap expected_outputs = 3;
  if (this->has_expected_outputs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::expected_outputs(this), target);
  }

  // .google.protobuf.Timestamp created_at = 4;
  if (this->has_created_at()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::created_at(this), target);
  }

  // .google.protobuf.Timestamp updated_at = 5;
  if (this->has_updated_at()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::updated_at(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.LaunchPlanClosure)
  return target;
}

size_t LaunchPlanClosure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.LaunchPlanClosure)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.core.ParameterMap expected_inputs = 2;
  if (this->has_expected_inputs()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *expected_inputs_);
  }

  // .flyteidl.core.VariableMap expected_outputs = 3;
  if (this->has_expected_outputs()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *expected_outputs_);
  }

  // .google.protobuf.Timestamp created_at = 4;
  if (this->has_created_at()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .google.protobuf.Timestamp updated_at = 5;
  if (this->has_updated_at()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *updated_at_);
  }

  // .flyteidl.admin.LaunchPlanState state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaunchPlanClosure::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.LaunchPlanClosure)
  GOOGLE_DCHECK_NE(&from, this);
  const LaunchPlanClosure* source =
      ::google::protobuf::DynamicCastToGenerated<LaunchPlanClosure>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.LaunchPlanClosure)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.LaunchPlanClosure)
    MergeFrom(*source);
  }
}

void LaunchPlanClosure::MergeFrom(const LaunchPlanClosure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.LaunchPlanClosure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_expected_inputs()) {
    mutable_expected_inputs()->::flyteidl::core::ParameterMap::MergeFrom(from.expected_inputs());
  }
  if (from.has_expected_outputs()) {
    mutable_expected_outputs()->::flyteidl::core::VariableMap::MergeFrom(from.expected_outputs());
  }
  if (from.has_created_at()) {
    mutable_created_at()->::google::protobuf::Timestamp::MergeFrom(from.created_at());
  }
  if (from.has_updated_at()) {
    mutable_updated_at()->::google::protobuf::Timestamp::MergeFrom(from.updated_at());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void LaunchPlanClosure::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.LaunchPlanClosure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaunchPlanClosure::CopyFrom(const LaunchPlanClosure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.LaunchPlanClosure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaunchPlanClosure::IsInitialized() const {
  return true;
}

void LaunchPlanClosure::Swap(LaunchPlanClosure* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaunchPlanClosure::InternalSwap(LaunchPlanClosure* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(expected_inputs_, other->expected_inputs_);
  swap(expected_outputs_, other->expected_outputs_);
  swap(created_at_, other->created_at_);
  swap(updated_at_, other->updated_at_);
  swap(state_, other->state_);
}

::google::protobuf::Metadata LaunchPlanClosure::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2flaunch_5fplan_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2flaunch_5fplan_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LaunchPlanMetadata::InitAsDefaultInstance() {
  ::flyteidl::admin::_LaunchPlanMetadata_default_instance_._instance.get_mutable()->schedule_ = const_cast< ::flyteidl::admin::Schedule*>(
      ::flyteidl::admin::Schedule::internal_default_instance());
}
class LaunchPlanMetadata::HasBitSetters {
 public:
  static const ::flyteidl::admin::Schedule& schedule(const LaunchPlanMetadata* msg);
};

const ::flyteidl::admin::Schedule&
LaunchPlanMetadata::HasBitSetters::schedule(const LaunchPlanMetadata* msg) {
  return *msg->schedule_;
}
void LaunchPlanMetadata::clear_schedule() {
  if (GetArenaNoVirtual() == nullptr && schedule_ != nullptr) {
    delete schedule_;
  }
  schedule_ = nullptr;
}
void LaunchPlanMetadata::clear_notifications() {
  notifications_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaunchPlanMetadata::kScheduleFieldNumber;
const int LaunchPlanMetadata::kNotificationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaunchPlanMetadata::LaunchPlanMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.LaunchPlanMetadata)
}
LaunchPlanMetadata::LaunchPlanMetadata(const LaunchPlanMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      notifications_(from.notifications_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_schedule()) {
    schedule_ = new ::flyteidl::admin::Schedule(*from.schedule_);
  } else {
    schedule_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.LaunchPlanMetadata)
}

void LaunchPlanMetadata::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LaunchPlanMetadata_flyteidl_2fadmin_2flaunch_5fplan_2eproto.base);
  schedule_ = nullptr;
}

LaunchPlanMetadata::~LaunchPlanMetadata() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.LaunchPlanMetadata)
  SharedDtor();
}

void LaunchPlanMetadata::SharedDtor() {
  if (this != internal_default_instance()) delete schedule_;
}

void LaunchPlanMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaunchPlanMetadata& LaunchPlanMetadata::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LaunchPlanMetadata_flyteidl_2fadmin_2flaunch_5fplan_2eproto.base);
  return *internal_default_instance();
}


void LaunchPlanMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.LaunchPlanMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  notifications_.Clear();
  if (GetArenaNoVirtual() == nullptr && schedule_ != nullptr) {
    delete schedule_;
  }
  schedule_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LaunchPlanMetadata::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LaunchPlanMetadata*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.admin.Schedule schedule = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::Schedule::_InternalParse;
        object = msg->mutable_schedule();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .flyteidl.admin.Notification notifications = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::flyteidl::admin::Notification::_InternalParse;
          object = msg->add_notifications();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LaunchPlanMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.LaunchPlanMetadata)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.admin.Schedule schedule = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_schedule()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .flyteidl.admin.Notification notifications = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_notifications()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.LaunchPlanMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.LaunchPlanMetadata)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LaunchPlanMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.LaunchPlanMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.admin.Schedule schedule = 1;
  if (this->has_schedule()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::schedule(this), output);
  }

  // repeated .flyteidl.admin.Notification notifications = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->notifications_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->notifications(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.LaunchPlanMetadata)
}

::google::protobuf::uint8* LaunchPlanMetadata::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.LaunchPlanMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.admin.Schedule schedule = 1;
  if (this->has_schedule()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::schedule(this), target);
  }

  // repeated .flyteidl.admin.Notification notifications = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->notifications_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->notifications(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.LaunchPlanMetadata)
  return target;
}

size_t LaunchPlanMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.LaunchPlanMetadata)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .flyteidl.admin.Notification notifications = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->notifications_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->notifications(static_cast<int>(i)));
    }
  }

  // .flyteidl.admin.Schedule schedule = 1;
  if (this->has_schedule()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *schedule_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaunchPlanMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.LaunchPlanMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const LaunchPlanMetadata* source =
      ::google::protobuf::DynamicCastToGenerated<LaunchPlanMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.LaunchPlanMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.LaunchPlanMetadata)
    MergeFrom(*source);
  }
}

void LaunchPlanMetadata::MergeFrom(const LaunchPlanMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.LaunchPlanMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  notifications_.MergeFrom(from.notifications_);
  if (from.has_schedule()) {
    mutable_schedule()->::flyteidl::admin::Schedule::MergeFrom(from.schedule());
  }
}

void LaunchPlanMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.LaunchPlanMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaunchPlanMetadata::CopyFrom(const LaunchPlanMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.LaunchPlanMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaunchPlanMetadata::IsInitialized() const {
  return true;
}

void LaunchPlanMetadata::Swap(LaunchPlanMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaunchPlanMetadata::InternalSwap(LaunchPlanMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&notifications_)->InternalSwap(CastToBase(&other->notifications_));
  swap(schedule_, other->schedule_);
}

::google::protobuf::Metadata LaunchPlanMetadata::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2flaunch_5fplan_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2flaunch_5fplan_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LaunchPlanUpdateRequest::InitAsDefaultInstance() {
  ::flyteidl::admin::_LaunchPlanUpdateRequest_default_instance_._instance.get_mutable()->id_ = const_cast< ::flyteidl::core::Identifier*>(
      ::flyteidl::core::Identifier::internal_default_instance());
}
class LaunchPlanUpdateRequest::HasBitSetters {
 public:
  static const ::flyteidl::core::Identifier& id(const LaunchPlanUpdateRequest* msg);
};

const ::flyteidl::core::Identifier&
LaunchPlanUpdateRequest::HasBitSetters::id(const LaunchPlanUpdateRequest* msg) {
  return *msg->id_;
}
void LaunchPlanUpdateRequest::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaunchPlanUpdateRequest::kIdFieldNumber;
const int LaunchPlanUpdateRequest::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaunchPlanUpdateRequest::LaunchPlanUpdateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.LaunchPlanUpdateRequest)
}
LaunchPlanUpdateRequest::LaunchPlanUpdateRequest(const LaunchPlanUpdateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::flyteidl::core::Identifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.LaunchPlanUpdateRequest)
}

void LaunchPlanUpdateRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LaunchPlanUpdateRequest_flyteidl_2fadmin_2flaunch_5fplan_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&id_)) + sizeof(state_));
}

LaunchPlanUpdateRequest::~LaunchPlanUpdateRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.LaunchPlanUpdateRequest)
  SharedDtor();
}

void LaunchPlanUpdateRequest::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
}

void LaunchPlanUpdateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaunchPlanUpdateRequest& LaunchPlanUpdateRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LaunchPlanUpdateRequest_flyteidl_2fadmin_2flaunch_5fplan_2eproto.base);
  return *internal_default_instance();
}


void LaunchPlanUpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.LaunchPlanUpdateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  state_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LaunchPlanUpdateRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LaunchPlanUpdateRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.Identifier id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::Identifier::_InternalParse;
        object = msg->mutable_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.LaunchPlanState state = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_state(static_cast<::flyteidl::admin::LaunchPlanState>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LaunchPlanUpdateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.LaunchPlanUpdateRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.Identifier id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.LaunchPlanState state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::flyteidl::admin::LaunchPlanState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.LaunchPlanUpdateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.LaunchPlanUpdateRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LaunchPlanUpdateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.LaunchPlanUpdateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::id(this), output);
  }

  // .flyteidl.admin.LaunchPlanState state = 2;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.LaunchPlanUpdateRequest)
}

::google::protobuf::uint8* LaunchPlanUpdateRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.LaunchPlanUpdateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::id(this), target);
  }

  // .flyteidl.admin.LaunchPlanState state = 2;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.LaunchPlanUpdateRequest)
  return target;
}

size_t LaunchPlanUpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.LaunchPlanUpdateRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.core.Identifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .flyteidl.admin.LaunchPlanState state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaunchPlanUpdateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.LaunchPlanUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LaunchPlanUpdateRequest* source =
      ::google::protobuf::DynamicCastToGenerated<LaunchPlanUpdateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.LaunchPlanUpdateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.LaunchPlanUpdateRequest)
    MergeFrom(*source);
  }
}

void LaunchPlanUpdateRequest::MergeFrom(const LaunchPlanUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.LaunchPlanUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    mutable_id()->::flyteidl::core::Identifier::MergeFrom(from.id());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void LaunchPlanUpdateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.LaunchPlanUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaunchPlanUpdateRequest::CopyFrom(const LaunchPlanUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.LaunchPlanUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaunchPlanUpdateRequest::IsInitialized() const {
  return true;
}

void LaunchPlanUpdateRequest::Swap(LaunchPlanUpdateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaunchPlanUpdateRequest::InternalSwap(LaunchPlanUpdateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(state_, other->state_);
}

::google::protobuf::Metadata LaunchPlanUpdateRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2flaunch_5fplan_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2flaunch_5fplan_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LaunchPlanUpdateResponse::InitAsDefaultInstance() {
}
class LaunchPlanUpdateResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaunchPlanUpdateResponse::LaunchPlanUpdateResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.LaunchPlanUpdateResponse)
}
LaunchPlanUpdateResponse::LaunchPlanUpdateResponse(const LaunchPlanUpdateResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.LaunchPlanUpdateResponse)
}

void LaunchPlanUpdateResponse::SharedCtor() {
}

LaunchPlanUpdateResponse::~LaunchPlanUpdateResponse() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.LaunchPlanUpdateResponse)
  SharedDtor();
}

void LaunchPlanUpdateResponse::SharedDtor() {
}

void LaunchPlanUpdateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaunchPlanUpdateResponse& LaunchPlanUpdateResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LaunchPlanUpdateResponse_flyteidl_2fadmin_2flaunch_5fplan_2eproto.base);
  return *internal_default_instance();
}


void LaunchPlanUpdateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.LaunchPlanUpdateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LaunchPlanUpdateResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LaunchPlanUpdateResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LaunchPlanUpdateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.LaunchPlanUpdateResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.LaunchPlanUpdateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.LaunchPlanUpdateResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LaunchPlanUpdateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.LaunchPlanUpdateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.LaunchPlanUpdateResponse)
}

::google::protobuf::uint8* LaunchPlanUpdateResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.LaunchPlanUpdateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.LaunchPlanUpdateResponse)
  return target;
}

size_t LaunchPlanUpdateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.LaunchPlanUpdateResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaunchPlanUpdateResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.LaunchPlanUpdateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LaunchPlanUpdateResponse* source =
      ::google::protobuf::DynamicCastToGenerated<LaunchPlanUpdateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.LaunchPlanUpdateResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.LaunchPlanUpdateResponse)
    MergeFrom(*source);
  }
}

void LaunchPlanUpdateResponse::MergeFrom(const LaunchPlanUpdateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.LaunchPlanUpdateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void LaunchPlanUpdateResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.LaunchPlanUpdateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaunchPlanUpdateResponse::CopyFrom(const LaunchPlanUpdateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.LaunchPlanUpdateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaunchPlanUpdateResponse::IsInitialized() const {
  return true;
}

void LaunchPlanUpdateResponse::Swap(LaunchPlanUpdateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaunchPlanUpdateResponse::InternalSwap(LaunchPlanUpdateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LaunchPlanUpdateResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2flaunch_5fplan_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2flaunch_5fplan_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ActiveLaunchPlanRequest::InitAsDefaultInstance() {
  ::flyteidl::admin::_ActiveLaunchPlanRequest_default_instance_._instance.get_mutable()->id_ = const_cast< ::flyteidl::admin::NamedEntityIdentifier*>(
      ::flyteidl::admin::NamedEntityIdentifier::internal_default_instance());
}
class ActiveLaunchPlanRequest::HasBitSetters {
 public:
  static const ::flyteidl::admin::NamedEntityIdentifier& id(const ActiveLaunchPlanRequest* msg);
};

const ::flyteidl::admin::NamedEntityIdentifier&
ActiveLaunchPlanRequest::HasBitSetters::id(const ActiveLaunchPlanRequest* msg) {
  return *msg->id_;
}
void ActiveLaunchPlanRequest::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActiveLaunchPlanRequest::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActiveLaunchPlanRequest::ActiveLaunchPlanRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.ActiveLaunchPlanRequest)
}
ActiveLaunchPlanRequest::ActiveLaunchPlanRequest(const ActiveLaunchPlanRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::flyteidl::admin::NamedEntityIdentifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.ActiveLaunchPlanRequest)
}

void ActiveLaunchPlanRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ActiveLaunchPlanRequest_flyteidl_2fadmin_2flaunch_5fplan_2eproto.base);
  id_ = nullptr;
}

ActiveLaunchPlanRequest::~ActiveLaunchPlanRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.ActiveLaunchPlanRequest)
  SharedDtor();
}

void ActiveLaunchPlanRequest::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
}

void ActiveLaunchPlanRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActiveLaunchPlanRequest& ActiveLaunchPlanRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ActiveLaunchPlanRequest_flyteidl_2fadmin_2flaunch_5fplan_2eproto.base);
  return *internal_default_instance();
}


void ActiveLaunchPlanRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.ActiveLaunchPlanRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ActiveLaunchPlanRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ActiveLaunchPlanRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.admin.NamedEntityIdentifier id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::NamedEntityIdentifier::_InternalParse;
        object = msg->mutable_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ActiveLaunchPlanRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.ActiveLaunchPlanRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.admin.NamedEntityIdentifier id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.ActiveLaunchPlanRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.ActiveLaunchPlanRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ActiveLaunchPlanRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.ActiveLaunchPlanRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.admin.NamedEntityIdentifier id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::id(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.ActiveLaunchPlanRequest)
}

::google::protobuf::uint8* ActiveLaunchPlanRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.ActiveLaunchPlanRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.admin.NamedEntityIdentifier id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::id(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.ActiveLaunchPlanRequest)
  return target;
}

size_t ActiveLaunchPlanRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.ActiveLaunchPlanRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.admin.NamedEntityIdentifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActiveLaunchPlanRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.ActiveLaunchPlanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ActiveLaunchPlanRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ActiveLaunchPlanRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.ActiveLaunchPlanRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.ActiveLaunchPlanRequest)
    MergeFrom(*source);
  }
}

void ActiveLaunchPlanRequest::MergeFrom(const ActiveLaunchPlanRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.ActiveLaunchPlanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    mutable_id()->::flyteidl::admin::NamedEntityIdentifier::MergeFrom(from.id());
  }
}

void ActiveLaunchPlanRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.ActiveLaunchPlanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActiveLaunchPlanRequest::CopyFrom(const ActiveLaunchPlanRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.ActiveLaunchPlanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActiveLaunchPlanRequest::IsInitialized() const {
  return true;
}

void ActiveLaunchPlanRequest::Swap(ActiveLaunchPlanRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActiveLaunchPlanRequest::InternalSwap(ActiveLaunchPlanRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::google::protobuf::Metadata ActiveLaunchPlanRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2flaunch_5fplan_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2flaunch_5fplan_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ActiveLaunchPlanListRequest::InitAsDefaultInstance() {
  ::flyteidl::admin::_ActiveLaunchPlanListRequest_default_instance_._instance.get_mutable()->sort_by_ = const_cast< ::flyteidl::admin::Sort*>(
      ::flyteidl::admin::Sort::internal_default_instance());
}
class ActiveLaunchPlanListRequest::HasBitSetters {
 public:
  static const ::flyteidl::admin::Sort& sort_by(const ActiveLaunchPlanListRequest* msg);
};

const ::flyteidl::admin::Sort&
ActiveLaunchPlanListRequest::HasBitSetters::sort_by(const ActiveLaunchPlanListRequest* msg) {
  return *msg->sort_by_;
}
void ActiveLaunchPlanListRequest::clear_sort_by() {
  if (GetArenaNoVirtual() == nullptr && sort_by_ != nullptr) {
    delete sort_by_;
  }
  sort_by_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActiveLaunchPlanListRequest::kProjectFieldNumber;
const int ActiveLaunchPlanListRequest::kDomainFieldNumber;
const int ActiveLaunchPlanListRequest::kLimitFieldNumber;
const int ActiveLaunchPlanListRequest::kTokenFieldNumber;
const int ActiveLaunchPlanListRequest::kSortByFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActiveLaunchPlanListRequest::ActiveLaunchPlanListRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.ActiveLaunchPlanListRequest)
}
ActiveLaunchPlanListRequest::ActiveLaunchPlanListRequest(const ActiveLaunchPlanListRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project().size() > 0) {
    project_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_);
  }
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.domain().size() > 0) {
    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.has_sort_by()) {
    sort_by_ = new ::flyteidl::admin::Sort(*from.sort_by_);
  } else {
    sort_by_ = nullptr;
  }
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.ActiveLaunchPlanListRequest)
}

void ActiveLaunchPlanListRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ActiveLaunchPlanListRequest_flyteidl_2fadmin_2flaunch_5fplan_2eproto.base);
  project_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sort_by_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&sort_by_)) + sizeof(limit_));
}

ActiveLaunchPlanListRequest::~ActiveLaunchPlanListRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.ActiveLaunchPlanListRequest)
  SharedDtor();
}

void ActiveLaunchPlanListRequest::SharedDtor() {
  project_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sort_by_;
}

void ActiveLaunchPlanListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActiveLaunchPlanListRequest& ActiveLaunchPlanListRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ActiveLaunchPlanListRequest_flyteidl_2fadmin_2flaunch_5fplan_2eproto.base);
  return *internal_default_instance();
}


void ActiveLaunchPlanListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.ActiveLaunchPlanListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  project_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && sort_by_ != nullptr) {
    delete sort_by_;
  }
  sort_by_ = nullptr;
  limit_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ActiveLaunchPlanListRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ActiveLaunchPlanListRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string project = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.ActiveLaunchPlanListRequest.project");
        object = msg->mutable_project();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string domain = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.ActiveLaunchPlanListRequest.domain");
        object = msg->mutable_domain();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint32 limit = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_limit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string token = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.ActiveLaunchPlanListRequest.token");
        object = msg->mutable_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .flyteidl.admin.Sort sort_by = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::Sort::_InternalParse;
        object = msg->mutable_sort_by();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ActiveLaunchPlanListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.ActiveLaunchPlanListRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project().data(), static_cast<int>(this->project().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.ActiveLaunchPlanListRequest.project"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string domain = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->domain().data(), static_cast<int>(this->domain().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.ActiveLaunchPlanListRequest.domain"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 limit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string token = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.ActiveLaunchPlanListRequest.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.Sort sort_by = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sort_by()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.ActiveLaunchPlanListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.ActiveLaunchPlanListRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ActiveLaunchPlanListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.ActiveLaunchPlanListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project().data(), static_cast<int>(this->project().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.ActiveLaunchPlanListRequest.project");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project(), output);
  }

  // string domain = 2;
  if (this->domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), static_cast<int>(this->domain().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.ActiveLaunchPlanListRequest.domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->domain(), output);
  }

  // uint32 limit = 3;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->limit(), output);
  }

  // string token = 4;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.ActiveLaunchPlanListRequest.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->token(), output);
  }

  // .flyteidl.admin.Sort sort_by = 5;
  if (this->has_sort_by()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::sort_by(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.ActiveLaunchPlanListRequest)
}

::google::protobuf::uint8* ActiveLaunchPlanListRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.ActiveLaunchPlanListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project().data(), static_cast<int>(this->project().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.ActiveLaunchPlanListRequest.project");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project(), target);
  }

  // string domain = 2;
  if (this->domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), static_cast<int>(this->domain().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.ActiveLaunchPlanListRequest.domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->domain(), target);
  }

  // uint32 limit = 3;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->limit(), target);
  }

  // string token = 4;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.ActiveLaunchPlanListRequest.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->token(), target);
  }

  // .flyteidl.admin.Sort sort_by = 5;
  if (this->has_sort_by()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::sort_by(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.ActiveLaunchPlanListRequest)
  return target;
}

size_t ActiveLaunchPlanListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.ActiveLaunchPlanListRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project());
  }

  // string domain = 2;
  if (this->domain().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->domain());
  }

  // string token = 4;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // .flyteidl.admin.Sort sort_by = 5;
  if (this->has_sort_by()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sort_by_);
  }

  // uint32 limit = 3;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->limit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActiveLaunchPlanListRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.ActiveLaunchPlanListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ActiveLaunchPlanListRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ActiveLaunchPlanListRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.ActiveLaunchPlanListRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.ActiveLaunchPlanListRequest)
    MergeFrom(*source);
  }
}

void ActiveLaunchPlanListRequest::MergeFrom(const ActiveLaunchPlanListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.ActiveLaunchPlanListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project().size() > 0) {

    project_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_);
  }
  if (from.domain().size() > 0) {

    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.has_sort_by()) {
    mutable_sort_by()->::flyteidl::admin::Sort::MergeFrom(from.sort_by());
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
}

void ActiveLaunchPlanListRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.ActiveLaunchPlanListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActiveLaunchPlanListRequest::CopyFrom(const ActiveLaunchPlanListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.ActiveLaunchPlanListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActiveLaunchPlanListRequest::IsInitialized() const {
  return true;
}

void ActiveLaunchPlanListRequest::Swap(ActiveLaunchPlanListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActiveLaunchPlanListRequest::InternalSwap(ActiveLaunchPlanListRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  project_.Swap(&other->project_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  domain_.Swap(&other->domain_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  token_.Swap(&other->token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sort_by_, other->sort_by_);
  swap(limit_, other->limit_);
}

::google::protobuf::Metadata ActiveLaunchPlanListRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2flaunch_5fplan_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2flaunch_5fplan_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace admin
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::flyteidl::admin::LaunchPlanCreateRequest* Arena::CreateMaybeMessage< ::flyteidl::admin::LaunchPlanCreateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::LaunchPlanCreateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::LaunchPlanCreateResponse* Arena::CreateMaybeMessage< ::flyteidl::admin::LaunchPlanCreateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::LaunchPlanCreateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::LaunchPlan* Arena::CreateMaybeMessage< ::flyteidl::admin::LaunchPlan >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::LaunchPlan >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::LaunchPlanList* Arena::CreateMaybeMessage< ::flyteidl::admin::LaunchPlanList >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::LaunchPlanList >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::Auth* Arena::CreateMaybeMessage< ::flyteidl::admin::Auth >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::Auth >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::LaunchPlanSpec* Arena::CreateMaybeMessage< ::flyteidl::admin::LaunchPlanSpec >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::LaunchPlanSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::LaunchPlanClosure* Arena::CreateMaybeMessage< ::flyteidl::admin::LaunchPlanClosure >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::LaunchPlanClosure >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::LaunchPlanMetadata* Arena::CreateMaybeMessage< ::flyteidl::admin::LaunchPlanMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::LaunchPlanMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::LaunchPlanUpdateRequest* Arena::CreateMaybeMessage< ::flyteidl::admin::LaunchPlanUpdateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::LaunchPlanUpdateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::LaunchPlanUpdateResponse* Arena::CreateMaybeMessage< ::flyteidl::admin::LaunchPlanUpdateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::LaunchPlanUpdateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::ActiveLaunchPlanRequest* Arena::CreateMaybeMessage< ::flyteidl::admin::ActiveLaunchPlanRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::ActiveLaunchPlanRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::ActiveLaunchPlanListRequest* Arena::CreateMaybeMessage< ::flyteidl::admin::ActiveLaunchPlanListRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::ActiveLaunchPlanListRequest >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
