// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/common.proto

#ifndef PROTOBUF_INCLUDED_flyteidl_2fadmin_2fcommon_2eproto
#define PROTOBUF_INCLUDED_flyteidl_2fadmin_2fcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "flyteidl/core/execution.pb.h"
#include "flyteidl/core/identifier.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fcommon_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fadmin_2fcommon_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[23]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_flyteidl_2fadmin_2fcommon_2eproto();
namespace flyteidl {
namespace admin {
class Annotations;
class AnnotationsDefaultTypeInternal;
extern AnnotationsDefaultTypeInternal _Annotations_default_instance_;
class Annotations_ValuesEntry_DoNotUse;
class Annotations_ValuesEntry_DoNotUseDefaultTypeInternal;
extern Annotations_ValuesEntry_DoNotUseDefaultTypeInternal _Annotations_ValuesEntry_DoNotUse_default_instance_;
class AuthRole;
class AuthRoleDefaultTypeInternal;
extern AuthRoleDefaultTypeInternal _AuthRole_default_instance_;
class EmailNotification;
class EmailNotificationDefaultTypeInternal;
extern EmailNotificationDefaultTypeInternal _EmailNotification_default_instance_;
class Labels;
class LabelsDefaultTypeInternal;
extern LabelsDefaultTypeInternal _Labels_default_instance_;
class Labels_ValuesEntry_DoNotUse;
class Labels_ValuesEntry_DoNotUseDefaultTypeInternal;
extern Labels_ValuesEntry_DoNotUseDefaultTypeInternal _Labels_ValuesEntry_DoNotUse_default_instance_;
class NamedEntity;
class NamedEntityDefaultTypeInternal;
extern NamedEntityDefaultTypeInternal _NamedEntity_default_instance_;
class NamedEntityGetRequest;
class NamedEntityGetRequestDefaultTypeInternal;
extern NamedEntityGetRequestDefaultTypeInternal _NamedEntityGetRequest_default_instance_;
class NamedEntityIdentifier;
class NamedEntityIdentifierDefaultTypeInternal;
extern NamedEntityIdentifierDefaultTypeInternal _NamedEntityIdentifier_default_instance_;
class NamedEntityIdentifierList;
class NamedEntityIdentifierListDefaultTypeInternal;
extern NamedEntityIdentifierListDefaultTypeInternal _NamedEntityIdentifierList_default_instance_;
class NamedEntityIdentifierListRequest;
class NamedEntityIdentifierListRequestDefaultTypeInternal;
extern NamedEntityIdentifierListRequestDefaultTypeInternal _NamedEntityIdentifierListRequest_default_instance_;
class NamedEntityList;
class NamedEntityListDefaultTypeInternal;
extern NamedEntityListDefaultTypeInternal _NamedEntityList_default_instance_;
class NamedEntityListRequest;
class NamedEntityListRequestDefaultTypeInternal;
extern NamedEntityListRequestDefaultTypeInternal _NamedEntityListRequest_default_instance_;
class NamedEntityMetadata;
class NamedEntityMetadataDefaultTypeInternal;
extern NamedEntityMetadataDefaultTypeInternal _NamedEntityMetadata_default_instance_;
class NamedEntityUpdateRequest;
class NamedEntityUpdateRequestDefaultTypeInternal;
extern NamedEntityUpdateRequestDefaultTypeInternal _NamedEntityUpdateRequest_default_instance_;
class NamedEntityUpdateResponse;
class NamedEntityUpdateResponseDefaultTypeInternal;
extern NamedEntityUpdateResponseDefaultTypeInternal _NamedEntityUpdateResponse_default_instance_;
class Notification;
class NotificationDefaultTypeInternal;
extern NotificationDefaultTypeInternal _Notification_default_instance_;
class ObjectGetRequest;
class ObjectGetRequestDefaultTypeInternal;
extern ObjectGetRequestDefaultTypeInternal _ObjectGetRequest_default_instance_;
class PagerDutyNotification;
class PagerDutyNotificationDefaultTypeInternal;
extern PagerDutyNotificationDefaultTypeInternal _PagerDutyNotification_default_instance_;
class ResourceListRequest;
class ResourceListRequestDefaultTypeInternal;
extern ResourceListRequestDefaultTypeInternal _ResourceListRequest_default_instance_;
class SlackNotification;
class SlackNotificationDefaultTypeInternal;
extern SlackNotificationDefaultTypeInternal _SlackNotification_default_instance_;
class Sort;
class SortDefaultTypeInternal;
extern SortDefaultTypeInternal _Sort_default_instance_;
class UrlBlob;
class UrlBlobDefaultTypeInternal;
extern UrlBlobDefaultTypeInternal _UrlBlob_default_instance_;
}  // namespace admin
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> ::flyteidl::admin::Annotations* Arena::CreateMaybeMessage<::flyteidl::admin::Annotations>(Arena*);
template<> ::flyteidl::admin::Annotations_ValuesEntry_DoNotUse* Arena::CreateMaybeMessage<::flyteidl::admin::Annotations_ValuesEntry_DoNotUse>(Arena*);
template<> ::flyteidl::admin::AuthRole* Arena::CreateMaybeMessage<::flyteidl::admin::AuthRole>(Arena*);
template<> ::flyteidl::admin::EmailNotification* Arena::CreateMaybeMessage<::flyteidl::admin::EmailNotification>(Arena*);
template<> ::flyteidl::admin::Labels* Arena::CreateMaybeMessage<::flyteidl::admin::Labels>(Arena*);
template<> ::flyteidl::admin::Labels_ValuesEntry_DoNotUse* Arena::CreateMaybeMessage<::flyteidl::admin::Labels_ValuesEntry_DoNotUse>(Arena*);
template<> ::flyteidl::admin::NamedEntity* Arena::CreateMaybeMessage<::flyteidl::admin::NamedEntity>(Arena*);
template<> ::flyteidl::admin::NamedEntityGetRequest* Arena::CreateMaybeMessage<::flyteidl::admin::NamedEntityGetRequest>(Arena*);
template<> ::flyteidl::admin::NamedEntityIdentifier* Arena::CreateMaybeMessage<::flyteidl::admin::NamedEntityIdentifier>(Arena*);
template<> ::flyteidl::admin::NamedEntityIdentifierList* Arena::CreateMaybeMessage<::flyteidl::admin::NamedEntityIdentifierList>(Arena*);
template<> ::flyteidl::admin::NamedEntityIdentifierListRequest* Arena::CreateMaybeMessage<::flyteidl::admin::NamedEntityIdentifierListRequest>(Arena*);
template<> ::flyteidl::admin::NamedEntityList* Arena::CreateMaybeMessage<::flyteidl::admin::NamedEntityList>(Arena*);
template<> ::flyteidl::admin::NamedEntityListRequest* Arena::CreateMaybeMessage<::flyteidl::admin::NamedEntityListRequest>(Arena*);
template<> ::flyteidl::admin::NamedEntityMetadata* Arena::CreateMaybeMessage<::flyteidl::admin::NamedEntityMetadata>(Arena*);
template<> ::flyteidl::admin::NamedEntityUpdateRequest* Arena::CreateMaybeMessage<::flyteidl::admin::NamedEntityUpdateRequest>(Arena*);
template<> ::flyteidl::admin::NamedEntityUpdateResponse* Arena::CreateMaybeMessage<::flyteidl::admin::NamedEntityUpdateResponse>(Arena*);
template<> ::flyteidl::admin::Notification* Arena::CreateMaybeMessage<::flyteidl::admin::Notification>(Arena*);
template<> ::flyteidl::admin::ObjectGetRequest* Arena::CreateMaybeMessage<::flyteidl::admin::ObjectGetRequest>(Arena*);
template<> ::flyteidl::admin::PagerDutyNotification* Arena::CreateMaybeMessage<::flyteidl::admin::PagerDutyNotification>(Arena*);
template<> ::flyteidl::admin::ResourceListRequest* Arena::CreateMaybeMessage<::flyteidl::admin::ResourceListRequest>(Arena*);
template<> ::flyteidl::admin::SlackNotification* Arena::CreateMaybeMessage<::flyteidl::admin::SlackNotification>(Arena*);
template<> ::flyteidl::admin::Sort* Arena::CreateMaybeMessage<::flyteidl::admin::Sort>(Arena*);
template<> ::flyteidl::admin::UrlBlob* Arena::CreateMaybeMessage<::flyteidl::admin::UrlBlob>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace flyteidl {
namespace admin {

enum Sort_Direction {
  Sort_Direction_DESCENDING = 0,
  Sort_Direction_ASCENDING = 1,
  Sort_Direction_Sort_Direction_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  Sort_Direction_Sort_Direction_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool Sort_Direction_IsValid(int value);
const Sort_Direction Sort_Direction_Direction_MIN = Sort_Direction_DESCENDING;
const Sort_Direction Sort_Direction_Direction_MAX = Sort_Direction_ASCENDING;
const int Sort_Direction_Direction_ARRAYSIZE = Sort_Direction_Direction_MAX + 1;

const ::google::protobuf::EnumDescriptor* Sort_Direction_descriptor();
inline const ::std::string& Sort_Direction_Name(Sort_Direction value) {
  return ::google::protobuf::internal::NameOfEnum(
    Sort_Direction_descriptor(), value);
}
inline bool Sort_Direction_Parse(
    const ::std::string& name, Sort_Direction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Sort_Direction>(
    Sort_Direction_descriptor(), name, value);
}
enum NamedEntityState {
  NAMED_ENTITY_ACTIVE = 0,
  NAMED_ENTITY_ARCHIVED = 1,
  SYSTEM_GENERATED = 2,
  NamedEntityState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  NamedEntityState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool NamedEntityState_IsValid(int value);
const NamedEntityState NamedEntityState_MIN = NAMED_ENTITY_ACTIVE;
const NamedEntityState NamedEntityState_MAX = SYSTEM_GENERATED;
const int NamedEntityState_ARRAYSIZE = NamedEntityState_MAX + 1;

const ::google::protobuf::EnumDescriptor* NamedEntityState_descriptor();
inline const ::std::string& NamedEntityState_Name(NamedEntityState value) {
  return ::google::protobuf::internal::NameOfEnum(
    NamedEntityState_descriptor(), value);
}
inline bool NamedEntityState_Parse(
    const ::std::string& name, NamedEntityState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NamedEntityState>(
    NamedEntityState_descriptor(), name, value);
}
// ===================================================================

class NamedEntityIdentifier final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.NamedEntityIdentifier) */ {
 public:
  NamedEntityIdentifier();
  virtual ~NamedEntityIdentifier();

  NamedEntityIdentifier(const NamedEntityIdentifier& from);

  inline NamedEntityIdentifier& operator=(const NamedEntityIdentifier& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NamedEntityIdentifier(NamedEntityIdentifier&& from) noexcept
    : NamedEntityIdentifier() {
    *this = ::std::move(from);
  }

  inline NamedEntityIdentifier& operator=(NamedEntityIdentifier&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NamedEntityIdentifier& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NamedEntityIdentifier* internal_default_instance() {
    return reinterpret_cast<const NamedEntityIdentifier*>(
               &_NamedEntityIdentifier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(NamedEntityIdentifier* other);
  friend void swap(NamedEntityIdentifier& a, NamedEntityIdentifier& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NamedEntityIdentifier* New() const final {
    return CreateMaybeMessage<NamedEntityIdentifier>(nullptr);
  }

  NamedEntityIdentifier* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NamedEntityIdentifier>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NamedEntityIdentifier& from);
  void MergeFrom(const NamedEntityIdentifier& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NamedEntityIdentifier* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project = 1;
  void clear_project();
  static const int kProjectFieldNumber = 1;
  const ::std::string& project() const;
  void set_project(const ::std::string& value);
  #if LANG_CXX11
  void set_project(::std::string&& value);
  #endif
  void set_project(const char* value);
  void set_project(const char* value, size_t size);
  ::std::string* mutable_project();
  ::std::string* release_project();
  void set_allocated_project(::std::string* project);

  // string domain = 2;
  void clear_domain();
  static const int kDomainFieldNumber = 2;
  const ::std::string& domain() const;
  void set_domain(const ::std::string& value);
  #if LANG_CXX11
  void set_domain(::std::string&& value);
  #endif
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  ::std::string* mutable_domain();
  ::std::string* release_domain();
  void set_allocated_domain(::std::string* domain);

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.NamedEntityIdentifier)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_;
  ::google::protobuf::internal::ArenaStringPtr domain_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class NamedEntityMetadata final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.NamedEntityMetadata) */ {
 public:
  NamedEntityMetadata();
  virtual ~NamedEntityMetadata();

  NamedEntityMetadata(const NamedEntityMetadata& from);

  inline NamedEntityMetadata& operator=(const NamedEntityMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NamedEntityMetadata(NamedEntityMetadata&& from) noexcept
    : NamedEntityMetadata() {
    *this = ::std::move(from);
  }

  inline NamedEntityMetadata& operator=(NamedEntityMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NamedEntityMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NamedEntityMetadata* internal_default_instance() {
    return reinterpret_cast<const NamedEntityMetadata*>(
               &_NamedEntityMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(NamedEntityMetadata* other);
  friend void swap(NamedEntityMetadata& a, NamedEntityMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NamedEntityMetadata* New() const final {
    return CreateMaybeMessage<NamedEntityMetadata>(nullptr);
  }

  NamedEntityMetadata* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NamedEntityMetadata>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NamedEntityMetadata& from);
  void MergeFrom(const NamedEntityMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NamedEntityMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string description = 1;
  void clear_description();
  static const int kDescriptionFieldNumber = 1;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // .flyteidl.admin.NamedEntityState state = 2;
  void clear_state();
  static const int kStateFieldNumber = 2;
  ::flyteidl::admin::NamedEntityState state() const;
  void set_state(::flyteidl::admin::NamedEntityState value);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.NamedEntityMetadata)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  int state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class NamedEntity final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.NamedEntity) */ {
 public:
  NamedEntity();
  virtual ~NamedEntity();

  NamedEntity(const NamedEntity& from);

  inline NamedEntity& operator=(const NamedEntity& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NamedEntity(NamedEntity&& from) noexcept
    : NamedEntity() {
    *this = ::std::move(from);
  }

  inline NamedEntity& operator=(NamedEntity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NamedEntity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NamedEntity* internal_default_instance() {
    return reinterpret_cast<const NamedEntity*>(
               &_NamedEntity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(NamedEntity* other);
  friend void swap(NamedEntity& a, NamedEntity& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NamedEntity* New() const final {
    return CreateMaybeMessage<NamedEntity>(nullptr);
  }

  NamedEntity* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NamedEntity>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NamedEntity& from);
  void MergeFrom(const NamedEntity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NamedEntity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.admin.NamedEntityIdentifier id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  const ::flyteidl::admin::NamedEntityIdentifier& id() const;
  ::flyteidl::admin::NamedEntityIdentifier* release_id();
  ::flyteidl::admin::NamedEntityIdentifier* mutable_id();
  void set_allocated_id(::flyteidl::admin::NamedEntityIdentifier* id);

  // .flyteidl.admin.NamedEntityMetadata metadata = 3;
  bool has_metadata() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 3;
  const ::flyteidl::admin::NamedEntityMetadata& metadata() const;
  ::flyteidl::admin::NamedEntityMetadata* release_metadata();
  ::flyteidl::admin::NamedEntityMetadata* mutable_metadata();
  void set_allocated_metadata(::flyteidl::admin::NamedEntityMetadata* metadata);

  // .flyteidl.core.ResourceType resource_type = 1;
  void clear_resource_type();
  static const int kResourceTypeFieldNumber = 1;
  ::flyteidl::core::ResourceType resource_type() const;
  void set_resource_type(::flyteidl::core::ResourceType value);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.NamedEntity)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::admin::NamedEntityIdentifier* id_;
  ::flyteidl::admin::NamedEntityMetadata* metadata_;
  int resource_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class Sort final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.Sort) */ {
 public:
  Sort();
  virtual ~Sort();

  Sort(const Sort& from);

  inline Sort& operator=(const Sort& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Sort(Sort&& from) noexcept
    : Sort() {
    *this = ::std::move(from);
  }

  inline Sort& operator=(Sort&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Sort& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Sort* internal_default_instance() {
    return reinterpret_cast<const Sort*>(
               &_Sort_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Sort* other);
  friend void swap(Sort& a, Sort& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Sort* New() const final {
    return CreateMaybeMessage<Sort>(nullptr);
  }

  Sort* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Sort>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Sort& from);
  void MergeFrom(const Sort& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sort* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Sort_Direction Direction;
  static const Direction DESCENDING =
    Sort_Direction_DESCENDING;
  static const Direction ASCENDING =
    Sort_Direction_ASCENDING;
  static inline bool Direction_IsValid(int value) {
    return Sort_Direction_IsValid(value);
  }
  static const Direction Direction_MIN =
    Sort_Direction_Direction_MIN;
  static const Direction Direction_MAX =
    Sort_Direction_Direction_MAX;
  static const int Direction_ARRAYSIZE =
    Sort_Direction_Direction_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Direction_descriptor() {
    return Sort_Direction_descriptor();
  }
  static inline const ::std::string& Direction_Name(Direction value) {
    return Sort_Direction_Name(value);
  }
  static inline bool Direction_Parse(const ::std::string& name,
      Direction* value) {
    return Sort_Direction_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // .flyteidl.admin.Sort.Direction direction = 2;
  void clear_direction();
  static const int kDirectionFieldNumber = 2;
  ::flyteidl::admin::Sort_Direction direction() const;
  void set_direction(::flyteidl::admin::Sort_Direction value);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.Sort)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  int direction_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class NamedEntityIdentifierListRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.NamedEntityIdentifierListRequest) */ {
 public:
  NamedEntityIdentifierListRequest();
  virtual ~NamedEntityIdentifierListRequest();

  NamedEntityIdentifierListRequest(const NamedEntityIdentifierListRequest& from);

  inline NamedEntityIdentifierListRequest& operator=(const NamedEntityIdentifierListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NamedEntityIdentifierListRequest(NamedEntityIdentifierListRequest&& from) noexcept
    : NamedEntityIdentifierListRequest() {
    *this = ::std::move(from);
  }

  inline NamedEntityIdentifierListRequest& operator=(NamedEntityIdentifierListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NamedEntityIdentifierListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NamedEntityIdentifierListRequest* internal_default_instance() {
    return reinterpret_cast<const NamedEntityIdentifierListRequest*>(
               &_NamedEntityIdentifierListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(NamedEntityIdentifierListRequest* other);
  friend void swap(NamedEntityIdentifierListRequest& a, NamedEntityIdentifierListRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NamedEntityIdentifierListRequest* New() const final {
    return CreateMaybeMessage<NamedEntityIdentifierListRequest>(nullptr);
  }

  NamedEntityIdentifierListRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NamedEntityIdentifierListRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NamedEntityIdentifierListRequest& from);
  void MergeFrom(const NamedEntityIdentifierListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NamedEntityIdentifierListRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project = 1;
  void clear_project();
  static const int kProjectFieldNumber = 1;
  const ::std::string& project() const;
  void set_project(const ::std::string& value);
  #if LANG_CXX11
  void set_project(::std::string&& value);
  #endif
  void set_project(const char* value);
  void set_project(const char* value, size_t size);
  ::std::string* mutable_project();
  ::std::string* release_project();
  void set_allocated_project(::std::string* project);

  // string domain = 2;
  void clear_domain();
  static const int kDomainFieldNumber = 2;
  const ::std::string& domain() const;
  void set_domain(const ::std::string& value);
  #if LANG_CXX11
  void set_domain(::std::string&& value);
  #endif
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  ::std::string* mutable_domain();
  ::std::string* release_domain();
  void set_allocated_domain(::std::string* domain);

  // string token = 4;
  void clear_token();
  static const int kTokenFieldNumber = 4;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // string filters = 6;
  void clear_filters();
  static const int kFiltersFieldNumber = 6;
  const ::std::string& filters() const;
  void set_filters(const ::std::string& value);
  #if LANG_CXX11
  void set_filters(::std::string&& value);
  #endif
  void set_filters(const char* value);
  void set_filters(const char* value, size_t size);
  ::std::string* mutable_filters();
  ::std::string* release_filters();
  void set_allocated_filters(::std::string* filters);

  // .flyteidl.admin.Sort sort_by = 5;
  bool has_sort_by() const;
  void clear_sort_by();
  static const int kSortByFieldNumber = 5;
  const ::flyteidl::admin::Sort& sort_by() const;
  ::flyteidl::admin::Sort* release_sort_by();
  ::flyteidl::admin::Sort* mutable_sort_by();
  void set_allocated_sort_by(::flyteidl::admin::Sort* sort_by);

  // uint32 limit = 3;
  void clear_limit();
  static const int kLimitFieldNumber = 3;
  ::google::protobuf::uint32 limit() const;
  void set_limit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.NamedEntityIdentifierListRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_;
  ::google::protobuf::internal::ArenaStringPtr domain_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::internal::ArenaStringPtr filters_;
  ::flyteidl::admin::Sort* sort_by_;
  ::google::protobuf::uint32 limit_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class NamedEntityListRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.NamedEntityListRequest) */ {
 public:
  NamedEntityListRequest();
  virtual ~NamedEntityListRequest();

  NamedEntityListRequest(const NamedEntityListRequest& from);

  inline NamedEntityListRequest& operator=(const NamedEntityListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NamedEntityListRequest(NamedEntityListRequest&& from) noexcept
    : NamedEntityListRequest() {
    *this = ::std::move(from);
  }

  inline NamedEntityListRequest& operator=(NamedEntityListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NamedEntityListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NamedEntityListRequest* internal_default_instance() {
    return reinterpret_cast<const NamedEntityListRequest*>(
               &_NamedEntityListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(NamedEntityListRequest* other);
  friend void swap(NamedEntityListRequest& a, NamedEntityListRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NamedEntityListRequest* New() const final {
    return CreateMaybeMessage<NamedEntityListRequest>(nullptr);
  }

  NamedEntityListRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NamedEntityListRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NamedEntityListRequest& from);
  void MergeFrom(const NamedEntityListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NamedEntityListRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project = 2;
  void clear_project();
  static const int kProjectFieldNumber = 2;
  const ::std::string& project() const;
  void set_project(const ::std::string& value);
  #if LANG_CXX11
  void set_project(::std::string&& value);
  #endif
  void set_project(const char* value);
  void set_project(const char* value, size_t size);
  ::std::string* mutable_project();
  ::std::string* release_project();
  void set_allocated_project(::std::string* project);

  // string domain = 3;
  void clear_domain();
  static const int kDomainFieldNumber = 3;
  const ::std::string& domain() const;
  void set_domain(const ::std::string& value);
  #if LANG_CXX11
  void set_domain(::std::string&& value);
  #endif
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  ::std::string* mutable_domain();
  ::std::string* release_domain();
  void set_allocated_domain(::std::string* domain);

  // string token = 5;
  void clear_token();
  static const int kTokenFieldNumber = 5;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // string filters = 7;
  void clear_filters();
  static const int kFiltersFieldNumber = 7;
  const ::std::string& filters() const;
  void set_filters(const ::std::string& value);
  #if LANG_CXX11
  void set_filters(::std::string&& value);
  #endif
  void set_filters(const char* value);
  void set_filters(const char* value, size_t size);
  ::std::string* mutable_filters();
  ::std::string* release_filters();
  void set_allocated_filters(::std::string* filters);

  // .flyteidl.admin.Sort sort_by = 6;
  bool has_sort_by() const;
  void clear_sort_by();
  static const int kSortByFieldNumber = 6;
  const ::flyteidl::admin::Sort& sort_by() const;
  ::flyteidl::admin::Sort* release_sort_by();
  ::flyteidl::admin::Sort* mutable_sort_by();
  void set_allocated_sort_by(::flyteidl::admin::Sort* sort_by);

  // .flyteidl.core.ResourceType resource_type = 1;
  void clear_resource_type();
  static const int kResourceTypeFieldNumber = 1;
  ::flyteidl::core::ResourceType resource_type() const;
  void set_resource_type(::flyteidl::core::ResourceType value);

  // uint32 limit = 4;
  void clear_limit();
  static const int kLimitFieldNumber = 4;
  ::google::protobuf::uint32 limit() const;
  void set_limit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.NamedEntityListRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_;
  ::google::protobuf::internal::ArenaStringPtr domain_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::internal::ArenaStringPtr filters_;
  ::flyteidl::admin::Sort* sort_by_;
  int resource_type_;
  ::google::protobuf::uint32 limit_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class NamedEntityIdentifierList final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.NamedEntityIdentifierList) */ {
 public:
  NamedEntityIdentifierList();
  virtual ~NamedEntityIdentifierList();

  NamedEntityIdentifierList(const NamedEntityIdentifierList& from);

  inline NamedEntityIdentifierList& operator=(const NamedEntityIdentifierList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NamedEntityIdentifierList(NamedEntityIdentifierList&& from) noexcept
    : NamedEntityIdentifierList() {
    *this = ::std::move(from);
  }

  inline NamedEntityIdentifierList& operator=(NamedEntityIdentifierList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NamedEntityIdentifierList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NamedEntityIdentifierList* internal_default_instance() {
    return reinterpret_cast<const NamedEntityIdentifierList*>(
               &_NamedEntityIdentifierList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(NamedEntityIdentifierList* other);
  friend void swap(NamedEntityIdentifierList& a, NamedEntityIdentifierList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NamedEntityIdentifierList* New() const final {
    return CreateMaybeMessage<NamedEntityIdentifierList>(nullptr);
  }

  NamedEntityIdentifierList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NamedEntityIdentifierList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NamedEntityIdentifierList& from);
  void MergeFrom(const NamedEntityIdentifierList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NamedEntityIdentifierList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .flyteidl.admin.NamedEntityIdentifier entities = 1;
  int entities_size() const;
  void clear_entities();
  static const int kEntitiesFieldNumber = 1;
  ::flyteidl::admin::NamedEntityIdentifier* mutable_entities(int index);
  ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::NamedEntityIdentifier >*
      mutable_entities();
  const ::flyteidl::admin::NamedEntityIdentifier& entities(int index) const;
  ::flyteidl::admin::NamedEntityIdentifier* add_entities();
  const ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::NamedEntityIdentifier >&
      entities() const;

  // string token = 2;
  void clear_token();
  static const int kTokenFieldNumber = 2;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.NamedEntityIdentifierList)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::NamedEntityIdentifier > entities_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class NamedEntityList final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.NamedEntityList) */ {
 public:
  NamedEntityList();
  virtual ~NamedEntityList();

  NamedEntityList(const NamedEntityList& from);

  inline NamedEntityList& operator=(const NamedEntityList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NamedEntityList(NamedEntityList&& from) noexcept
    : NamedEntityList() {
    *this = ::std::move(from);
  }

  inline NamedEntityList& operator=(NamedEntityList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NamedEntityList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NamedEntityList* internal_default_instance() {
    return reinterpret_cast<const NamedEntityList*>(
               &_NamedEntityList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(NamedEntityList* other);
  friend void swap(NamedEntityList& a, NamedEntityList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NamedEntityList* New() const final {
    return CreateMaybeMessage<NamedEntityList>(nullptr);
  }

  NamedEntityList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NamedEntityList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NamedEntityList& from);
  void MergeFrom(const NamedEntityList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NamedEntityList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .flyteidl.admin.NamedEntity entities = 1;
  int entities_size() const;
  void clear_entities();
  static const int kEntitiesFieldNumber = 1;
  ::flyteidl::admin::NamedEntity* mutable_entities(int index);
  ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::NamedEntity >*
      mutable_entities();
  const ::flyteidl::admin::NamedEntity& entities(int index) const;
  ::flyteidl::admin::NamedEntity* add_entities();
  const ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::NamedEntity >&
      entities() const;

  // string token = 2;
  void clear_token();
  static const int kTokenFieldNumber = 2;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.NamedEntityList)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::NamedEntity > entities_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class NamedEntityGetRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.NamedEntityGetRequest) */ {
 public:
  NamedEntityGetRequest();
  virtual ~NamedEntityGetRequest();

  NamedEntityGetRequest(const NamedEntityGetRequest& from);

  inline NamedEntityGetRequest& operator=(const NamedEntityGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NamedEntityGetRequest(NamedEntityGetRequest&& from) noexcept
    : NamedEntityGetRequest() {
    *this = ::std::move(from);
  }

  inline NamedEntityGetRequest& operator=(NamedEntityGetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NamedEntityGetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NamedEntityGetRequest* internal_default_instance() {
    return reinterpret_cast<const NamedEntityGetRequest*>(
               &_NamedEntityGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(NamedEntityGetRequest* other);
  friend void swap(NamedEntityGetRequest& a, NamedEntityGetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NamedEntityGetRequest* New() const final {
    return CreateMaybeMessage<NamedEntityGetRequest>(nullptr);
  }

  NamedEntityGetRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NamedEntityGetRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NamedEntityGetRequest& from);
  void MergeFrom(const NamedEntityGetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NamedEntityGetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.admin.NamedEntityIdentifier id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  const ::flyteidl::admin::NamedEntityIdentifier& id() const;
  ::flyteidl::admin::NamedEntityIdentifier* release_id();
  ::flyteidl::admin::NamedEntityIdentifier* mutable_id();
  void set_allocated_id(::flyteidl::admin::NamedEntityIdentifier* id);

  // .flyteidl.core.ResourceType resource_type = 1;
  void clear_resource_type();
  static const int kResourceTypeFieldNumber = 1;
  ::flyteidl::core::ResourceType resource_type() const;
  void set_resource_type(::flyteidl::core::ResourceType value);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.NamedEntityGetRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::admin::NamedEntityIdentifier* id_;
  int resource_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class NamedEntityUpdateRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.NamedEntityUpdateRequest) */ {
 public:
  NamedEntityUpdateRequest();
  virtual ~NamedEntityUpdateRequest();

  NamedEntityUpdateRequest(const NamedEntityUpdateRequest& from);

  inline NamedEntityUpdateRequest& operator=(const NamedEntityUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NamedEntityUpdateRequest(NamedEntityUpdateRequest&& from) noexcept
    : NamedEntityUpdateRequest() {
    *this = ::std::move(from);
  }

  inline NamedEntityUpdateRequest& operator=(NamedEntityUpdateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NamedEntityUpdateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NamedEntityUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const NamedEntityUpdateRequest*>(
               &_NamedEntityUpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(NamedEntityUpdateRequest* other);
  friend void swap(NamedEntityUpdateRequest& a, NamedEntityUpdateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NamedEntityUpdateRequest* New() const final {
    return CreateMaybeMessage<NamedEntityUpdateRequest>(nullptr);
  }

  NamedEntityUpdateRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NamedEntityUpdateRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NamedEntityUpdateRequest& from);
  void MergeFrom(const NamedEntityUpdateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NamedEntityUpdateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.admin.NamedEntityIdentifier id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  const ::flyteidl::admin::NamedEntityIdentifier& id() const;
  ::flyteidl::admin::NamedEntityIdentifier* release_id();
  ::flyteidl::admin::NamedEntityIdentifier* mutable_id();
  void set_allocated_id(::flyteidl::admin::NamedEntityIdentifier* id);

  // .flyteidl.admin.NamedEntityMetadata metadata = 3;
  bool has_metadata() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 3;
  const ::flyteidl::admin::NamedEntityMetadata& metadata() const;
  ::flyteidl::admin::NamedEntityMetadata* release_metadata();
  ::flyteidl::admin::NamedEntityMetadata* mutable_metadata();
  void set_allocated_metadata(::flyteidl::admin::NamedEntityMetadata* metadata);

  // .flyteidl.core.ResourceType resource_type = 1;
  void clear_resource_type();
  static const int kResourceTypeFieldNumber = 1;
  ::flyteidl::core::ResourceType resource_type() const;
  void set_resource_type(::flyteidl::core::ResourceType value);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.NamedEntityUpdateRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::admin::NamedEntityIdentifier* id_;
  ::flyteidl::admin::NamedEntityMetadata* metadata_;
  int resource_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class NamedEntityUpdateResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.NamedEntityUpdateResponse) */ {
 public:
  NamedEntityUpdateResponse();
  virtual ~NamedEntityUpdateResponse();

  NamedEntityUpdateResponse(const NamedEntityUpdateResponse& from);

  inline NamedEntityUpdateResponse& operator=(const NamedEntityUpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NamedEntityUpdateResponse(NamedEntityUpdateResponse&& from) noexcept
    : NamedEntityUpdateResponse() {
    *this = ::std::move(from);
  }

  inline NamedEntityUpdateResponse& operator=(NamedEntityUpdateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NamedEntityUpdateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NamedEntityUpdateResponse* internal_default_instance() {
    return reinterpret_cast<const NamedEntityUpdateResponse*>(
               &_NamedEntityUpdateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(NamedEntityUpdateResponse* other);
  friend void swap(NamedEntityUpdateResponse& a, NamedEntityUpdateResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NamedEntityUpdateResponse* New() const final {
    return CreateMaybeMessage<NamedEntityUpdateResponse>(nullptr);
  }

  NamedEntityUpdateResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NamedEntityUpdateResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NamedEntityUpdateResponse& from);
  void MergeFrom(const NamedEntityUpdateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NamedEntityUpdateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyteidl.admin.NamedEntityUpdateResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class ObjectGetRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.ObjectGetRequest) */ {
 public:
  ObjectGetRequest();
  virtual ~ObjectGetRequest();

  ObjectGetRequest(const ObjectGetRequest& from);

  inline ObjectGetRequest& operator=(const ObjectGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObjectGetRequest(ObjectGetRequest&& from) noexcept
    : ObjectGetRequest() {
    *this = ::std::move(from);
  }

  inline ObjectGetRequest& operator=(ObjectGetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ObjectGetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectGetRequest* internal_default_instance() {
    return reinterpret_cast<const ObjectGetRequest*>(
               &_ObjectGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(ObjectGetRequest* other);
  friend void swap(ObjectGetRequest& a, ObjectGetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObjectGetRequest* New() const final {
    return CreateMaybeMessage<ObjectGetRequest>(nullptr);
  }

  ObjectGetRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObjectGetRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObjectGetRequest& from);
  void MergeFrom(const ObjectGetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectGetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.core.Identifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::flyteidl::core::Identifier& id() const;
  ::flyteidl::core::Identifier* release_id();
  ::flyteidl::core::Identifier* mutable_id();
  void set_allocated_id(::flyteidl::core::Identifier* id);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.ObjectGetRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::core::Identifier* id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class ResourceListRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.ResourceListRequest) */ {
 public:
  ResourceListRequest();
  virtual ~ResourceListRequest();

  ResourceListRequest(const ResourceListRequest& from);

  inline ResourceListRequest& operator=(const ResourceListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResourceListRequest(ResourceListRequest&& from) noexcept
    : ResourceListRequest() {
    *this = ::std::move(from);
  }

  inline ResourceListRequest& operator=(ResourceListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ResourceListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResourceListRequest* internal_default_instance() {
    return reinterpret_cast<const ResourceListRequest*>(
               &_ResourceListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(ResourceListRequest* other);
  friend void swap(ResourceListRequest& a, ResourceListRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResourceListRequest* New() const final {
    return CreateMaybeMessage<ResourceListRequest>(nullptr);
  }

  ResourceListRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResourceListRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ResourceListRequest& from);
  void MergeFrom(const ResourceListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceListRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string token = 3;
  void clear_token();
  static const int kTokenFieldNumber = 3;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // string filters = 4;
  void clear_filters();
  static const int kFiltersFieldNumber = 4;
  const ::std::string& filters() const;
  void set_filters(const ::std::string& value);
  #if LANG_CXX11
  void set_filters(::std::string&& value);
  #endif
  void set_filters(const char* value);
  void set_filters(const char* value, size_t size);
  ::std::string* mutable_filters();
  ::std::string* release_filters();
  void set_allocated_filters(::std::string* filters);

  // .flyteidl.admin.NamedEntityIdentifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::flyteidl::admin::NamedEntityIdentifier& id() const;
  ::flyteidl::admin::NamedEntityIdentifier* release_id();
  ::flyteidl::admin::NamedEntityIdentifier* mutable_id();
  void set_allocated_id(::flyteidl::admin::NamedEntityIdentifier* id);

  // .flyteidl.admin.Sort sort_by = 5;
  bool has_sort_by() const;
  void clear_sort_by();
  static const int kSortByFieldNumber = 5;
  const ::flyteidl::admin::Sort& sort_by() const;
  ::flyteidl::admin::Sort* release_sort_by();
  ::flyteidl::admin::Sort* mutable_sort_by();
  void set_allocated_sort_by(::flyteidl::admin::Sort* sort_by);

  // uint32 limit = 2;
  void clear_limit();
  static const int kLimitFieldNumber = 2;
  ::google::protobuf::uint32 limit() const;
  void set_limit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.ResourceListRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::internal::ArenaStringPtr filters_;
  ::flyteidl::admin::NamedEntityIdentifier* id_;
  ::flyteidl::admin::Sort* sort_by_;
  ::google::protobuf::uint32 limit_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class EmailNotification final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.EmailNotification) */ {
 public:
  EmailNotification();
  virtual ~EmailNotification();

  EmailNotification(const EmailNotification& from);

  inline EmailNotification& operator=(const EmailNotification& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EmailNotification(EmailNotification&& from) noexcept
    : EmailNotification() {
    *this = ::std::move(from);
  }

  inline EmailNotification& operator=(EmailNotification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const EmailNotification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EmailNotification* internal_default_instance() {
    return reinterpret_cast<const EmailNotification*>(
               &_EmailNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(EmailNotification* other);
  friend void swap(EmailNotification& a, EmailNotification& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EmailNotification* New() const final {
    return CreateMaybeMessage<EmailNotification>(nullptr);
  }

  EmailNotification* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EmailNotification>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EmailNotification& from);
  void MergeFrom(const EmailNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmailNotification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string recipients_email = 1;
  int recipients_email_size() const;
  void clear_recipients_email();
  static const int kRecipientsEmailFieldNumber = 1;
  const ::std::string& recipients_email(int index) const;
  ::std::string* mutable_recipients_email(int index);
  void set_recipients_email(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_recipients_email(int index, ::std::string&& value);
  #endif
  void set_recipients_email(int index, const char* value);
  void set_recipients_email(int index, const char* value, size_t size);
  ::std::string* add_recipients_email();
  void add_recipients_email(const ::std::string& value);
  #if LANG_CXX11
  void add_recipients_email(::std::string&& value);
  #endif
  void add_recipients_email(const char* value);
  void add_recipients_email(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& recipients_email() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_recipients_email();

  // @@protoc_insertion_point(class_scope:flyteidl.admin.EmailNotification)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> recipients_email_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class PagerDutyNotification final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.PagerDutyNotification) */ {
 public:
  PagerDutyNotification();
  virtual ~PagerDutyNotification();

  PagerDutyNotification(const PagerDutyNotification& from);

  inline PagerDutyNotification& operator=(const PagerDutyNotification& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PagerDutyNotification(PagerDutyNotification&& from) noexcept
    : PagerDutyNotification() {
    *this = ::std::move(from);
  }

  inline PagerDutyNotification& operator=(PagerDutyNotification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PagerDutyNotification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PagerDutyNotification* internal_default_instance() {
    return reinterpret_cast<const PagerDutyNotification*>(
               &_PagerDutyNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(PagerDutyNotification* other);
  friend void swap(PagerDutyNotification& a, PagerDutyNotification& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PagerDutyNotification* New() const final {
    return CreateMaybeMessage<PagerDutyNotification>(nullptr);
  }

  PagerDutyNotification* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PagerDutyNotification>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PagerDutyNotification& from);
  void MergeFrom(const PagerDutyNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PagerDutyNotification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string recipients_email = 1;
  int recipients_email_size() const;
  void clear_recipients_email();
  static const int kRecipientsEmailFieldNumber = 1;
  const ::std::string& recipients_email(int index) const;
  ::std::string* mutable_recipients_email(int index);
  void set_recipients_email(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_recipients_email(int index, ::std::string&& value);
  #endif
  void set_recipients_email(int index, const char* value);
  void set_recipients_email(int index, const char* value, size_t size);
  ::std::string* add_recipients_email();
  void add_recipients_email(const ::std::string& value);
  #if LANG_CXX11
  void add_recipients_email(::std::string&& value);
  #endif
  void add_recipients_email(const char* value);
  void add_recipients_email(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& recipients_email() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_recipients_email();

  // @@protoc_insertion_point(class_scope:flyteidl.admin.PagerDutyNotification)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> recipients_email_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class SlackNotification final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.SlackNotification) */ {
 public:
  SlackNotification();
  virtual ~SlackNotification();

  SlackNotification(const SlackNotification& from);

  inline SlackNotification& operator=(const SlackNotification& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SlackNotification(SlackNotification&& from) noexcept
    : SlackNotification() {
    *this = ::std::move(from);
  }

  inline SlackNotification& operator=(SlackNotification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SlackNotification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SlackNotification* internal_default_instance() {
    return reinterpret_cast<const SlackNotification*>(
               &_SlackNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(SlackNotification* other);
  friend void swap(SlackNotification& a, SlackNotification& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SlackNotification* New() const final {
    return CreateMaybeMessage<SlackNotification>(nullptr);
  }

  SlackNotification* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SlackNotification>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SlackNotification& from);
  void MergeFrom(const SlackNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SlackNotification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string recipients_email = 1;
  int recipients_email_size() const;
  void clear_recipients_email();
  static const int kRecipientsEmailFieldNumber = 1;
  const ::std::string& recipients_email(int index) const;
  ::std::string* mutable_recipients_email(int index);
  void set_recipients_email(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_recipients_email(int index, ::std::string&& value);
  #endif
  void set_recipients_email(int index, const char* value);
  void set_recipients_email(int index, const char* value, size_t size);
  ::std::string* add_recipients_email();
  void add_recipients_email(const ::std::string& value);
  #if LANG_CXX11
  void add_recipients_email(::std::string&& value);
  #endif
  void add_recipients_email(const char* value);
  void add_recipients_email(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& recipients_email() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_recipients_email();

  // @@protoc_insertion_point(class_scope:flyteidl.admin.SlackNotification)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> recipients_email_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class Notification final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.Notification) */ {
 public:
  Notification();
  virtual ~Notification();

  Notification(const Notification& from);

  inline Notification& operator=(const Notification& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Notification(Notification&& from) noexcept
    : Notification() {
    *this = ::std::move(from);
  }

  inline Notification& operator=(Notification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Notification& default_instance();

  enum TypeCase {
    kEmail = 2,
    kPagerDuty = 3,
    kSlack = 4,
    TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Notification* internal_default_instance() {
    return reinterpret_cast<const Notification*>(
               &_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(Notification* other);
  friend void swap(Notification& a, Notification& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Notification* New() const final {
    return CreateMaybeMessage<Notification>(nullptr);
  }

  Notification* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Notification>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Notification& from);
  void MergeFrom(const Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Notification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .flyteidl.core.WorkflowExecution.Phase phases = 1;
  int phases_size() const;
  void clear_phases();
  static const int kPhasesFieldNumber = 1;
  ::flyteidl::core::WorkflowExecution_Phase phases(int index) const;
  void set_phases(int index, ::flyteidl::core::WorkflowExecution_Phase value);
  void add_phases(::flyteidl::core::WorkflowExecution_Phase value);
  const ::google::protobuf::RepeatedField<int>& phases() const;
  ::google::protobuf::RepeatedField<int>* mutable_phases();

  // .flyteidl.admin.EmailNotification email = 2;
  bool has_email() const;
  void clear_email();
  static const int kEmailFieldNumber = 2;
  const ::flyteidl::admin::EmailNotification& email() const;
  ::flyteidl::admin::EmailNotification* release_email();
  ::flyteidl::admin::EmailNotification* mutable_email();
  void set_allocated_email(::flyteidl::admin::EmailNotification* email);

  // .flyteidl.admin.PagerDutyNotification pager_duty = 3;
  bool has_pager_duty() const;
  void clear_pager_duty();
  static const int kPagerDutyFieldNumber = 3;
  const ::flyteidl::admin::PagerDutyNotification& pager_duty() const;
  ::flyteidl::admin::PagerDutyNotification* release_pager_duty();
  ::flyteidl::admin::PagerDutyNotification* mutable_pager_duty();
  void set_allocated_pager_duty(::flyteidl::admin::PagerDutyNotification* pager_duty);

  // .flyteidl.admin.SlackNotification slack = 4;
  bool has_slack() const;
  void clear_slack();
  static const int kSlackFieldNumber = 4;
  const ::flyteidl::admin::SlackNotification& slack() const;
  ::flyteidl::admin::SlackNotification* release_slack();
  ::flyteidl::admin::SlackNotification* mutable_slack();
  void set_allocated_slack(::flyteidl::admin::SlackNotification* slack);

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.admin.Notification)
 private:
  class HasBitSetters;
  void set_has_email();
  void set_has_pager_duty();
  void set_has_slack();

  inline bool has_type() const;
  inline void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField<int> phases_;
  mutable std::atomic<int> _phases_cached_byte_size_;
  union TypeUnion {
    TypeUnion() {}
    ::flyteidl::admin::EmailNotification* email_;
    ::flyteidl::admin::PagerDutyNotification* pager_duty_;
    ::flyteidl::admin::SlackNotification* slack_;
  } type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_flyteidl_2fadmin_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class UrlBlob final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.UrlBlob) */ {
 public:
  UrlBlob();
  virtual ~UrlBlob();

  UrlBlob(const UrlBlob& from);

  inline UrlBlob& operator=(const UrlBlob& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UrlBlob(UrlBlob&& from) noexcept
    : UrlBlob() {
    *this = ::std::move(from);
  }

  inline UrlBlob& operator=(UrlBlob&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UrlBlob& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UrlBlob* internal_default_instance() {
    return reinterpret_cast<const UrlBlob*>(
               &_UrlBlob_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(UrlBlob* other);
  friend void swap(UrlBlob& a, UrlBlob& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UrlBlob* New() const final {
    return CreateMaybeMessage<UrlBlob>(nullptr);
  }

  UrlBlob* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UrlBlob>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UrlBlob& from);
  void MergeFrom(const UrlBlob& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UrlBlob* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string url = 1;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // int64 bytes = 2;
  void clear_bytes();
  static const int kBytesFieldNumber = 2;
  ::google::protobuf::int64 bytes() const;
  void set_bytes(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:flyteidl.admin.UrlBlob)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::int64 bytes_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class Labels_ValuesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Labels_ValuesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<Labels_ValuesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Labels_ValuesEntry_DoNotUse();
  Labels_ValuesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Labels_ValuesEntry_DoNotUse& other);
  static const Labels_ValuesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Labels_ValuesEntry_DoNotUse*>(&_Labels_ValuesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Labels final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.Labels) */ {
 public:
  Labels();
  virtual ~Labels();

  Labels(const Labels& from);

  inline Labels& operator=(const Labels& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Labels(Labels&& from) noexcept
    : Labels() {
    *this = ::std::move(from);
  }

  inline Labels& operator=(Labels&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Labels& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Labels* internal_default_instance() {
    return reinterpret_cast<const Labels*>(
               &_Labels_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(Labels* other);
  friend void swap(Labels& a, Labels& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Labels* New() const final {
    return CreateMaybeMessage<Labels>(nullptr);
  }

  Labels* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Labels>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Labels& from);
  void MergeFrom(const Labels& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Labels* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> values = 1;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      values() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:flyteidl.admin.Labels)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      Labels_ValuesEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > values_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class Annotations_ValuesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Annotations_ValuesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<Annotations_ValuesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Annotations_ValuesEntry_DoNotUse();
  Annotations_ValuesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Annotations_ValuesEntry_DoNotUse& other);
  static const Annotations_ValuesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Annotations_ValuesEntry_DoNotUse*>(&_Annotations_ValuesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Annotations final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.Annotations) */ {
 public:
  Annotations();
  virtual ~Annotations();

  Annotations(const Annotations& from);

  inline Annotations& operator=(const Annotations& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Annotations(Annotations&& from) noexcept
    : Annotations() {
    *this = ::std::move(from);
  }

  inline Annotations& operator=(Annotations&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Annotations& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Annotations* internal_default_instance() {
    return reinterpret_cast<const Annotations*>(
               &_Annotations_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(Annotations* other);
  friend void swap(Annotations& a, Annotations& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Annotations* New() const final {
    return CreateMaybeMessage<Annotations>(nullptr);
  }

  Annotations* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Annotations>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Annotations& from);
  void MergeFrom(const Annotations& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Annotations* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> values = 1;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      values() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:flyteidl.admin.Annotations)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      Annotations_ValuesEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > values_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class AuthRole final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.AuthRole) */ {
 public:
  AuthRole();
  virtual ~AuthRole();

  AuthRole(const AuthRole& from);

  inline AuthRole& operator=(const AuthRole& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuthRole(AuthRole&& from) noexcept
    : AuthRole() {
    *this = ::std::move(from);
  }

  inline AuthRole& operator=(AuthRole&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AuthRole& default_instance();

  enum MethodCase {
    kAssumableIamRole = 1,
    kKubernetesServiceAccount = 2,
    METHOD_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthRole* internal_default_instance() {
    return reinterpret_cast<const AuthRole*>(
               &_AuthRole_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(AuthRole* other);
  friend void swap(AuthRole& a, AuthRole& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuthRole* New() const final {
    return CreateMaybeMessage<AuthRole>(nullptr);
  }

  AuthRole* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AuthRole>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AuthRole& from);
  void MergeFrom(const AuthRole& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthRole* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string assumable_iam_role = 1;
  private:
  bool has_assumable_iam_role() const;
  public:
  void clear_assumable_iam_role();
  static const int kAssumableIamRoleFieldNumber = 1;
  const ::std::string& assumable_iam_role() const;
  void set_assumable_iam_role(const ::std::string& value);
  #if LANG_CXX11
  void set_assumable_iam_role(::std::string&& value);
  #endif
  void set_assumable_iam_role(const char* value);
  void set_assumable_iam_role(const char* value, size_t size);
  ::std::string* mutable_assumable_iam_role();
  ::std::string* release_assumable_iam_role();
  void set_allocated_assumable_iam_role(::std::string* assumable_iam_role);

  // string kubernetes_service_account = 2;
  private:
  bool has_kubernetes_service_account() const;
  public:
  void clear_kubernetes_service_account();
  static const int kKubernetesServiceAccountFieldNumber = 2;
  const ::std::string& kubernetes_service_account() const;
  void set_kubernetes_service_account(const ::std::string& value);
  #if LANG_CXX11
  void set_kubernetes_service_account(::std::string&& value);
  #endif
  void set_kubernetes_service_account(const char* value);
  void set_kubernetes_service_account(const char* value, size_t size);
  ::std::string* mutable_kubernetes_service_account();
  ::std::string* release_kubernetes_service_account();
  void set_allocated_kubernetes_service_account(::std::string* kubernetes_service_account);

  void clear_method();
  MethodCase method_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.admin.AuthRole)
 private:
  class HasBitSetters;
  void set_has_assumable_iam_role();
  void set_has_kubernetes_service_account();

  inline bool has_method() const;
  inline void clear_has_method();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union MethodUnion {
    MethodUnion() {}
    ::google::protobuf::internal::ArenaStringPtr assumable_iam_role_;
    ::google::protobuf::internal::ArenaStringPtr kubernetes_service_account_;
  } method_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_flyteidl_2fadmin_2fcommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NamedEntityIdentifier

// string project = 1;
inline void NamedEntityIdentifier::clear_project() {
  project_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NamedEntityIdentifier::project() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.NamedEntityIdentifier.project)
  return project_.GetNoArena();
}
inline void NamedEntityIdentifier::set_project(const ::std::string& value) {
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.NamedEntityIdentifier.project)
}
#if LANG_CXX11
inline void NamedEntityIdentifier::set_project(::std::string&& value) {
  
  project_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.NamedEntityIdentifier.project)
}
#endif
inline void NamedEntityIdentifier::set_project(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.NamedEntityIdentifier.project)
}
inline void NamedEntityIdentifier::set_project(const char* value, size_t size) {
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.NamedEntityIdentifier.project)
}
inline ::std::string* NamedEntityIdentifier::mutable_project() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.NamedEntityIdentifier.project)
  return project_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NamedEntityIdentifier::release_project() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.NamedEntityIdentifier.project)
  
  return project_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NamedEntityIdentifier::set_allocated_project(::std::string* project) {
  if (project != nullptr) {
    
  } else {
    
  }
  project_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.NamedEntityIdentifier.project)
}

// string domain = 2;
inline void NamedEntityIdentifier::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NamedEntityIdentifier::domain() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.NamedEntityIdentifier.domain)
  return domain_.GetNoArena();
}
inline void NamedEntityIdentifier::set_domain(const ::std::string& value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.NamedEntityIdentifier.domain)
}
#if LANG_CXX11
inline void NamedEntityIdentifier::set_domain(::std::string&& value) {
  
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.NamedEntityIdentifier.domain)
}
#endif
inline void NamedEntityIdentifier::set_domain(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.NamedEntityIdentifier.domain)
}
inline void NamedEntityIdentifier::set_domain(const char* value, size_t size) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.NamedEntityIdentifier.domain)
}
inline ::std::string* NamedEntityIdentifier::mutable_domain() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.NamedEntityIdentifier.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NamedEntityIdentifier::release_domain() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.NamedEntityIdentifier.domain)
  
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NamedEntityIdentifier::set_allocated_domain(::std::string* domain) {
  if (domain != nullptr) {
    
  } else {
    
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.NamedEntityIdentifier.domain)
}

// string name = 3;
inline void NamedEntityIdentifier::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NamedEntityIdentifier::name() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.NamedEntityIdentifier.name)
  return name_.GetNoArena();
}
inline void NamedEntityIdentifier::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.NamedEntityIdentifier.name)
}
#if LANG_CXX11
inline void NamedEntityIdentifier::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.NamedEntityIdentifier.name)
}
#endif
inline void NamedEntityIdentifier::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.NamedEntityIdentifier.name)
}
inline void NamedEntityIdentifier::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.NamedEntityIdentifier.name)
}
inline ::std::string* NamedEntityIdentifier::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.NamedEntityIdentifier.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NamedEntityIdentifier::release_name() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.NamedEntityIdentifier.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NamedEntityIdentifier::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.NamedEntityIdentifier.name)
}

// -------------------------------------------------------------------

// NamedEntityMetadata

// string description = 1;
inline void NamedEntityMetadata::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NamedEntityMetadata::description() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.NamedEntityMetadata.description)
  return description_.GetNoArena();
}
inline void NamedEntityMetadata::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.NamedEntityMetadata.description)
}
#if LANG_CXX11
inline void NamedEntityMetadata::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.NamedEntityMetadata.description)
}
#endif
inline void NamedEntityMetadata::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.NamedEntityMetadata.description)
}
inline void NamedEntityMetadata::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.NamedEntityMetadata.description)
}
inline ::std::string* NamedEntityMetadata::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.NamedEntityMetadata.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NamedEntityMetadata::release_description() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.NamedEntityMetadata.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NamedEntityMetadata::set_allocated_description(::std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.NamedEntityMetadata.description)
}

// .flyteidl.admin.NamedEntityState state = 2;
inline void NamedEntityMetadata::clear_state() {
  state_ = 0;
}
inline ::flyteidl::admin::NamedEntityState NamedEntityMetadata::state() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.NamedEntityMetadata.state)
  return static_cast< ::flyteidl::admin::NamedEntityState >(state_);
}
inline void NamedEntityMetadata::set_state(::flyteidl::admin::NamedEntityState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.admin.NamedEntityMetadata.state)
}

// -------------------------------------------------------------------

// NamedEntity

// .flyteidl.core.ResourceType resource_type = 1;
inline void NamedEntity::clear_resource_type() {
  resource_type_ = 0;
}
inline ::flyteidl::core::ResourceType NamedEntity::resource_type() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.NamedEntity.resource_type)
  return static_cast< ::flyteidl::core::ResourceType >(resource_type_);
}
inline void NamedEntity::set_resource_type(::flyteidl::core::ResourceType value) {
  
  resource_type_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.admin.NamedEntity.resource_type)
}

// .flyteidl.admin.NamedEntityIdentifier id = 2;
inline bool NamedEntity::has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline void NamedEntity::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
inline const ::flyteidl::admin::NamedEntityIdentifier& NamedEntity::id() const {
  const ::flyteidl::admin::NamedEntityIdentifier* p = id_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.NamedEntity.id)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::NamedEntityIdentifier*>(
      &::flyteidl::admin::_NamedEntityIdentifier_default_instance_);
}
inline ::flyteidl::admin::NamedEntityIdentifier* NamedEntity::release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.NamedEntity.id)
  
  ::flyteidl::admin::NamedEntityIdentifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::NamedEntityIdentifier* NamedEntity::mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::NamedEntityIdentifier>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.NamedEntity.id)
  return id_;
}
inline void NamedEntity::set_allocated_id(::flyteidl::admin::NamedEntityIdentifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.NamedEntity.id)
}

// .flyteidl.admin.NamedEntityMetadata metadata = 3;
inline bool NamedEntity::has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline void NamedEntity::clear_metadata() {
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::flyteidl::admin::NamedEntityMetadata& NamedEntity::metadata() const {
  const ::flyteidl::admin::NamedEntityMetadata* p = metadata_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.NamedEntity.metadata)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::NamedEntityMetadata*>(
      &::flyteidl::admin::_NamedEntityMetadata_default_instance_);
}
inline ::flyteidl::admin::NamedEntityMetadata* NamedEntity::release_metadata() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.NamedEntity.metadata)
  
  ::flyteidl::admin::NamedEntityMetadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::NamedEntityMetadata* NamedEntity::mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::NamedEntityMetadata>(GetArenaNoVirtual());
    metadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.NamedEntity.metadata)
  return metadata_;
}
inline void NamedEntity::set_allocated_metadata(::flyteidl::admin::NamedEntityMetadata* metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      metadata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.NamedEntity.metadata)
}

// -------------------------------------------------------------------

// Sort

// string key = 1;
inline void Sort::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Sort::key() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Sort.key)
  return key_.GetNoArena();
}
inline void Sort::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.Sort.key)
}
#if LANG_CXX11
inline void Sort::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.Sort.key)
}
#endif
inline void Sort::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.Sort.key)
}
inline void Sort::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.Sort.key)
}
inline ::std::string* Sort::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Sort.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Sort::release_key() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Sort.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Sort::set_allocated_key(::std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Sort.key)
}

// .flyteidl.admin.Sort.Direction direction = 2;
inline void Sort::clear_direction() {
  direction_ = 0;
}
inline ::flyteidl::admin::Sort_Direction Sort::direction() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Sort.direction)
  return static_cast< ::flyteidl::admin::Sort_Direction >(direction_);
}
inline void Sort::set_direction(::flyteidl::admin::Sort_Direction value) {
  
  direction_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.admin.Sort.direction)
}

// -------------------------------------------------------------------

// NamedEntityIdentifierListRequest

// string project = 1;
inline void NamedEntityIdentifierListRequest::clear_project() {
  project_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NamedEntityIdentifierListRequest::project() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.NamedEntityIdentifierListRequest.project)
  return project_.GetNoArena();
}
inline void NamedEntityIdentifierListRequest::set_project(const ::std::string& value) {
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.NamedEntityIdentifierListRequest.project)
}
#if LANG_CXX11
inline void NamedEntityIdentifierListRequest::set_project(::std::string&& value) {
  
  project_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.NamedEntityIdentifierListRequest.project)
}
#endif
inline void NamedEntityIdentifierListRequest::set_project(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.NamedEntityIdentifierListRequest.project)
}
inline void NamedEntityIdentifierListRequest::set_project(const char* value, size_t size) {
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.NamedEntityIdentifierListRequest.project)
}
inline ::std::string* NamedEntityIdentifierListRequest::mutable_project() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.NamedEntityIdentifierListRequest.project)
  return project_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NamedEntityIdentifierListRequest::release_project() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.NamedEntityIdentifierListRequest.project)
  
  return project_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NamedEntityIdentifierListRequest::set_allocated_project(::std::string* project) {
  if (project != nullptr) {
    
  } else {
    
  }
  project_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.NamedEntityIdentifierListRequest.project)
}

// string domain = 2;
inline void NamedEntityIdentifierListRequest::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NamedEntityIdentifierListRequest::domain() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.NamedEntityIdentifierListRequest.domain)
  return domain_.GetNoArena();
}
inline void NamedEntityIdentifierListRequest::set_domain(const ::std::string& value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.NamedEntityIdentifierListRequest.domain)
}
#if LANG_CXX11
inline void NamedEntityIdentifierListRequest::set_domain(::std::string&& value) {
  
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.NamedEntityIdentifierListRequest.domain)
}
#endif
inline void NamedEntityIdentifierListRequest::set_domain(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.NamedEntityIdentifierListRequest.domain)
}
inline void NamedEntityIdentifierListRequest::set_domain(const char* value, size_t size) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.NamedEntityIdentifierListRequest.domain)
}
inline ::std::string* NamedEntityIdentifierListRequest::mutable_domain() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.NamedEntityIdentifierListRequest.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NamedEntityIdentifierListRequest::release_domain() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.NamedEntityIdentifierListRequest.domain)
  
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NamedEntityIdentifierListRequest::set_allocated_domain(::std::string* domain) {
  if (domain != nullptr) {
    
  } else {
    
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.NamedEntityIdentifierListRequest.domain)
}

// uint32 limit = 3;
inline void NamedEntityIdentifierListRequest::clear_limit() {
  limit_ = 0u;
}
inline ::google::protobuf::uint32 NamedEntityIdentifierListRequest::limit() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.NamedEntityIdentifierListRequest.limit)
  return limit_;
}
inline void NamedEntityIdentifierListRequest::set_limit(::google::protobuf::uint32 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.admin.NamedEntityIdentifierListRequest.limit)
}

// string token = 4;
inline void NamedEntityIdentifierListRequest::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NamedEntityIdentifierListRequest::token() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.NamedEntityIdentifierListRequest.token)
  return token_.GetNoArena();
}
inline void NamedEntityIdentifierListRequest::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.NamedEntityIdentifierListRequest.token)
}
#if LANG_CXX11
inline void NamedEntityIdentifierListRequest::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.NamedEntityIdentifierListRequest.token)
}
#endif
inline void NamedEntityIdentifierListRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.NamedEntityIdentifierListRequest.token)
}
inline void NamedEntityIdentifierListRequest::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.NamedEntityIdentifierListRequest.token)
}
inline ::std::string* NamedEntityIdentifierListRequest::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.NamedEntityIdentifierListRequest.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NamedEntityIdentifierListRequest::release_token() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.NamedEntityIdentifierListRequest.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NamedEntityIdentifierListRequest::set_allocated_token(::std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.NamedEntityIdentifierListRequest.token)
}

// .flyteidl.admin.Sort sort_by = 5;
inline bool NamedEntityIdentifierListRequest::has_sort_by() const {
  return this != internal_default_instance() && sort_by_ != nullptr;
}
inline void NamedEntityIdentifierListRequest::clear_sort_by() {
  if (GetArenaNoVirtual() == nullptr && sort_by_ != nullptr) {
    delete sort_by_;
  }
  sort_by_ = nullptr;
}
inline const ::flyteidl::admin::Sort& NamedEntityIdentifierListRequest::sort_by() const {
  const ::flyteidl::admin::Sort* p = sort_by_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.NamedEntityIdentifierListRequest.sort_by)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::Sort*>(
      &::flyteidl::admin::_Sort_default_instance_);
}
inline ::flyteidl::admin::Sort* NamedEntityIdentifierListRequest::release_sort_by() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.NamedEntityIdentifierListRequest.sort_by)
  
  ::flyteidl::admin::Sort* temp = sort_by_;
  sort_by_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::Sort* NamedEntityIdentifierListRequest::mutable_sort_by() {
  
  if (sort_by_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::Sort>(GetArenaNoVirtual());
    sort_by_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.NamedEntityIdentifierListRequest.sort_by)
  return sort_by_;
}
inline void NamedEntityIdentifierListRequest::set_allocated_sort_by(::flyteidl::admin::Sort* sort_by) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sort_by_;
  }
  if (sort_by) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sort_by = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sort_by, submessage_arena);
    }
    
  } else {
    
  }
  sort_by_ = sort_by;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.NamedEntityIdentifierListRequest.sort_by)
}

// string filters = 6;
inline void NamedEntityIdentifierListRequest::clear_filters() {
  filters_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NamedEntityIdentifierListRequest::filters() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.NamedEntityIdentifierListRequest.filters)
  return filters_.GetNoArena();
}
inline void NamedEntityIdentifierListRequest::set_filters(const ::std::string& value) {
  
  filters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.NamedEntityIdentifierListRequest.filters)
}
#if LANG_CXX11
inline void NamedEntityIdentifierListRequest::set_filters(::std::string&& value) {
  
  filters_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.NamedEntityIdentifierListRequest.filters)
}
#endif
inline void NamedEntityIdentifierListRequest::set_filters(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.NamedEntityIdentifierListRequest.filters)
}
inline void NamedEntityIdentifierListRequest::set_filters(const char* value, size_t size) {
  
  filters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.NamedEntityIdentifierListRequest.filters)
}
inline ::std::string* NamedEntityIdentifierListRequest::mutable_filters() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.NamedEntityIdentifierListRequest.filters)
  return filters_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NamedEntityIdentifierListRequest::release_filters() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.NamedEntityIdentifierListRequest.filters)
  
  return filters_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NamedEntityIdentifierListRequest::set_allocated_filters(::std::string* filters) {
  if (filters != nullptr) {
    
  } else {
    
  }
  filters_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filters);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.NamedEntityIdentifierListRequest.filters)
}

// -------------------------------------------------------------------

// NamedEntityListRequest

// .flyteidl.core.ResourceType resource_type = 1;
inline void NamedEntityListRequest::clear_resource_type() {
  resource_type_ = 0;
}
inline ::flyteidl::core::ResourceType NamedEntityListRequest::resource_type() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.NamedEntityListRequest.resource_type)
  return static_cast< ::flyteidl::core::ResourceType >(resource_type_);
}
inline void NamedEntityListRequest::set_resource_type(::flyteidl::core::ResourceType value) {
  
  resource_type_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.admin.NamedEntityListRequest.resource_type)
}

// string project = 2;
inline void NamedEntityListRequest::clear_project() {
  project_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NamedEntityListRequest::project() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.NamedEntityListRequest.project)
  return project_.GetNoArena();
}
inline void NamedEntityListRequest::set_project(const ::std::string& value) {
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.NamedEntityListRequest.project)
}
#if LANG_CXX11
inline void NamedEntityListRequest::set_project(::std::string&& value) {
  
  project_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.NamedEntityListRequest.project)
}
#endif
inline void NamedEntityListRequest::set_project(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.NamedEntityListRequest.project)
}
inline void NamedEntityListRequest::set_project(const char* value, size_t size) {
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.NamedEntityListRequest.project)
}
inline ::std::string* NamedEntityListRequest::mutable_project() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.NamedEntityListRequest.project)
  return project_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NamedEntityListRequest::release_project() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.NamedEntityListRequest.project)
  
  return project_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NamedEntityListRequest::set_allocated_project(::std::string* project) {
  if (project != nullptr) {
    
  } else {
    
  }
  project_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.NamedEntityListRequest.project)
}

// string domain = 3;
inline void NamedEntityListRequest::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NamedEntityListRequest::domain() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.NamedEntityListRequest.domain)
  return domain_.GetNoArena();
}
inline void NamedEntityListRequest::set_domain(const ::std::string& value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.NamedEntityListRequest.domain)
}
#if LANG_CXX11
inline void NamedEntityListRequest::set_domain(::std::string&& value) {
  
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.NamedEntityListRequest.domain)
}
#endif
inline void NamedEntityListRequest::set_domain(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.NamedEntityListRequest.domain)
}
inline void NamedEntityListRequest::set_domain(const char* value, size_t size) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.NamedEntityListRequest.domain)
}
inline ::std::string* NamedEntityListRequest::mutable_domain() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.NamedEntityListRequest.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NamedEntityListRequest::release_domain() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.NamedEntityListRequest.domain)
  
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NamedEntityListRequest::set_allocated_domain(::std::string* domain) {
  if (domain != nullptr) {
    
  } else {
    
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.NamedEntityListRequest.domain)
}

// uint32 limit = 4;
inline void NamedEntityListRequest::clear_limit() {
  limit_ = 0u;
}
inline ::google::protobuf::uint32 NamedEntityListRequest::limit() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.NamedEntityListRequest.limit)
  return limit_;
}
inline void NamedEntityListRequest::set_limit(::google::protobuf::uint32 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.admin.NamedEntityListRequest.limit)
}

// string token = 5;
inline void NamedEntityListRequest::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NamedEntityListRequest::token() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.NamedEntityListRequest.token)
  return token_.GetNoArena();
}
inline void NamedEntityListRequest::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.NamedEntityListRequest.token)
}
#if LANG_CXX11
inline void NamedEntityListRequest::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.NamedEntityListRequest.token)
}
#endif
inline void NamedEntityListRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.NamedEntityListRequest.token)
}
inline void NamedEntityListRequest::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.NamedEntityListRequest.token)
}
inline ::std::string* NamedEntityListRequest::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.NamedEntityListRequest.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NamedEntityListRequest::release_token() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.NamedEntityListRequest.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NamedEntityListRequest::set_allocated_token(::std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.NamedEntityListRequest.token)
}

// .flyteidl.admin.Sort sort_by = 6;
inline bool NamedEntityListRequest::has_sort_by() const {
  return this != internal_default_instance() && sort_by_ != nullptr;
}
inline void NamedEntityListRequest::clear_sort_by() {
  if (GetArenaNoVirtual() == nullptr && sort_by_ != nullptr) {
    delete sort_by_;
  }
  sort_by_ = nullptr;
}
inline const ::flyteidl::admin::Sort& NamedEntityListRequest::sort_by() const {
  const ::flyteidl::admin::Sort* p = sort_by_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.NamedEntityListRequest.sort_by)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::Sort*>(
      &::flyteidl::admin::_Sort_default_instance_);
}
inline ::flyteidl::admin::Sort* NamedEntityListRequest::release_sort_by() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.NamedEntityListRequest.sort_by)
  
  ::flyteidl::admin::Sort* temp = sort_by_;
  sort_by_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::Sort* NamedEntityListRequest::mutable_sort_by() {
  
  if (sort_by_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::Sort>(GetArenaNoVirtual());
    sort_by_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.NamedEntityListRequest.sort_by)
  return sort_by_;
}
inline void NamedEntityListRequest::set_allocated_sort_by(::flyteidl::admin::Sort* sort_by) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sort_by_;
  }
  if (sort_by) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sort_by = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sort_by, submessage_arena);
    }
    
  } else {
    
  }
  sort_by_ = sort_by;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.NamedEntityListRequest.sort_by)
}

// string filters = 7;
inline void NamedEntityListRequest::clear_filters() {
  filters_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NamedEntityListRequest::filters() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.NamedEntityListRequest.filters)
  return filters_.GetNoArena();
}
inline void NamedEntityListRequest::set_filters(const ::std::string& value) {
  
  filters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.NamedEntityListRequest.filters)
}
#if LANG_CXX11
inline void NamedEntityListRequest::set_filters(::std::string&& value) {
  
  filters_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.NamedEntityListRequest.filters)
}
#endif
inline void NamedEntityListRequest::set_filters(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.NamedEntityListRequest.filters)
}
inline void NamedEntityListRequest::set_filters(const char* value, size_t size) {
  
  filters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.NamedEntityListRequest.filters)
}
inline ::std::string* NamedEntityListRequest::mutable_filters() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.NamedEntityListRequest.filters)
  return filters_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NamedEntityListRequest::release_filters() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.NamedEntityListRequest.filters)
  
  return filters_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NamedEntityListRequest::set_allocated_filters(::std::string* filters) {
  if (filters != nullptr) {
    
  } else {
    
  }
  filters_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filters);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.NamedEntityListRequest.filters)
}

// -------------------------------------------------------------------

// NamedEntityIdentifierList

// repeated .flyteidl.admin.NamedEntityIdentifier entities = 1;
inline int NamedEntityIdentifierList::entities_size() const {
  return entities_.size();
}
inline void NamedEntityIdentifierList::clear_entities() {
  entities_.Clear();
}
inline ::flyteidl::admin::NamedEntityIdentifier* NamedEntityIdentifierList::mutable_entities(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.NamedEntityIdentifierList.entities)
  return entities_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::NamedEntityIdentifier >*
NamedEntityIdentifierList::mutable_entities() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.admin.NamedEntityIdentifierList.entities)
  return &entities_;
}
inline const ::flyteidl::admin::NamedEntityIdentifier& NamedEntityIdentifierList::entities(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.NamedEntityIdentifierList.entities)
  return entities_.Get(index);
}
inline ::flyteidl::admin::NamedEntityIdentifier* NamedEntityIdentifierList::add_entities() {
  // @@protoc_insertion_point(field_add:flyteidl.admin.NamedEntityIdentifierList.entities)
  return entities_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::NamedEntityIdentifier >&
NamedEntityIdentifierList::entities() const {
  // @@protoc_insertion_point(field_list:flyteidl.admin.NamedEntityIdentifierList.entities)
  return entities_;
}

// string token = 2;
inline void NamedEntityIdentifierList::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NamedEntityIdentifierList::token() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.NamedEntityIdentifierList.token)
  return token_.GetNoArena();
}
inline void NamedEntityIdentifierList::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.NamedEntityIdentifierList.token)
}
#if LANG_CXX11
inline void NamedEntityIdentifierList::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.NamedEntityIdentifierList.token)
}
#endif
inline void NamedEntityIdentifierList::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.NamedEntityIdentifierList.token)
}
inline void NamedEntityIdentifierList::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.NamedEntityIdentifierList.token)
}
inline ::std::string* NamedEntityIdentifierList::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.NamedEntityIdentifierList.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NamedEntityIdentifierList::release_token() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.NamedEntityIdentifierList.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NamedEntityIdentifierList::set_allocated_token(::std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.NamedEntityIdentifierList.token)
}

// -------------------------------------------------------------------

// NamedEntityList

// repeated .flyteidl.admin.NamedEntity entities = 1;
inline int NamedEntityList::entities_size() const {
  return entities_.size();
}
inline void NamedEntityList::clear_entities() {
  entities_.Clear();
}
inline ::flyteidl::admin::NamedEntity* NamedEntityList::mutable_entities(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.NamedEntityList.entities)
  return entities_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::NamedEntity >*
NamedEntityList::mutable_entities() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.admin.NamedEntityList.entities)
  return &entities_;
}
inline const ::flyteidl::admin::NamedEntity& NamedEntityList::entities(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.NamedEntityList.entities)
  return entities_.Get(index);
}
inline ::flyteidl::admin::NamedEntity* NamedEntityList::add_entities() {
  // @@protoc_insertion_point(field_add:flyteidl.admin.NamedEntityList.entities)
  return entities_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::flyteidl::admin::NamedEntity >&
NamedEntityList::entities() const {
  // @@protoc_insertion_point(field_list:flyteidl.admin.NamedEntityList.entities)
  return entities_;
}

// string token = 2;
inline void NamedEntityList::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NamedEntityList::token() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.NamedEntityList.token)
  return token_.GetNoArena();
}
inline void NamedEntityList::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.NamedEntityList.token)
}
#if LANG_CXX11
inline void NamedEntityList::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.NamedEntityList.token)
}
#endif
inline void NamedEntityList::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.NamedEntityList.token)
}
inline void NamedEntityList::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.NamedEntityList.token)
}
inline ::std::string* NamedEntityList::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.NamedEntityList.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NamedEntityList::release_token() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.NamedEntityList.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NamedEntityList::set_allocated_token(::std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.NamedEntityList.token)
}

// -------------------------------------------------------------------

// NamedEntityGetRequest

// .flyteidl.core.ResourceType resource_type = 1;
inline void NamedEntityGetRequest::clear_resource_type() {
  resource_type_ = 0;
}
inline ::flyteidl::core::ResourceType NamedEntityGetRequest::resource_type() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.NamedEntityGetRequest.resource_type)
  return static_cast< ::flyteidl::core::ResourceType >(resource_type_);
}
inline void NamedEntityGetRequest::set_resource_type(::flyteidl::core::ResourceType value) {
  
  resource_type_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.admin.NamedEntityGetRequest.resource_type)
}

// .flyteidl.admin.NamedEntityIdentifier id = 2;
inline bool NamedEntityGetRequest::has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline void NamedEntityGetRequest::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
inline const ::flyteidl::admin::NamedEntityIdentifier& NamedEntityGetRequest::id() const {
  const ::flyteidl::admin::NamedEntityIdentifier* p = id_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.NamedEntityGetRequest.id)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::NamedEntityIdentifier*>(
      &::flyteidl::admin::_NamedEntityIdentifier_default_instance_);
}
inline ::flyteidl::admin::NamedEntityIdentifier* NamedEntityGetRequest::release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.NamedEntityGetRequest.id)
  
  ::flyteidl::admin::NamedEntityIdentifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::NamedEntityIdentifier* NamedEntityGetRequest::mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::NamedEntityIdentifier>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.NamedEntityGetRequest.id)
  return id_;
}
inline void NamedEntityGetRequest::set_allocated_id(::flyteidl::admin::NamedEntityIdentifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.NamedEntityGetRequest.id)
}

// -------------------------------------------------------------------

// NamedEntityUpdateRequest

// .flyteidl.core.ResourceType resource_type = 1;
inline void NamedEntityUpdateRequest::clear_resource_type() {
  resource_type_ = 0;
}
inline ::flyteidl::core::ResourceType NamedEntityUpdateRequest::resource_type() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.NamedEntityUpdateRequest.resource_type)
  return static_cast< ::flyteidl::core::ResourceType >(resource_type_);
}
inline void NamedEntityUpdateRequest::set_resource_type(::flyteidl::core::ResourceType value) {
  
  resource_type_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.admin.NamedEntityUpdateRequest.resource_type)
}

// .flyteidl.admin.NamedEntityIdentifier id = 2;
inline bool NamedEntityUpdateRequest::has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline void NamedEntityUpdateRequest::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
inline const ::flyteidl::admin::NamedEntityIdentifier& NamedEntityUpdateRequest::id() const {
  const ::flyteidl::admin::NamedEntityIdentifier* p = id_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.NamedEntityUpdateRequest.id)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::NamedEntityIdentifier*>(
      &::flyteidl::admin::_NamedEntityIdentifier_default_instance_);
}
inline ::flyteidl::admin::NamedEntityIdentifier* NamedEntityUpdateRequest::release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.NamedEntityUpdateRequest.id)
  
  ::flyteidl::admin::NamedEntityIdentifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::NamedEntityIdentifier* NamedEntityUpdateRequest::mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::NamedEntityIdentifier>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.NamedEntityUpdateRequest.id)
  return id_;
}
inline void NamedEntityUpdateRequest::set_allocated_id(::flyteidl::admin::NamedEntityIdentifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.NamedEntityUpdateRequest.id)
}

// .flyteidl.admin.NamedEntityMetadata metadata = 3;
inline bool NamedEntityUpdateRequest::has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline void NamedEntityUpdateRequest::clear_metadata() {
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::flyteidl::admin::NamedEntityMetadata& NamedEntityUpdateRequest::metadata() const {
  const ::flyteidl::admin::NamedEntityMetadata* p = metadata_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.NamedEntityUpdateRequest.metadata)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::NamedEntityMetadata*>(
      &::flyteidl::admin::_NamedEntityMetadata_default_instance_);
}
inline ::flyteidl::admin::NamedEntityMetadata* NamedEntityUpdateRequest::release_metadata() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.NamedEntityUpdateRequest.metadata)
  
  ::flyteidl::admin::NamedEntityMetadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::NamedEntityMetadata* NamedEntityUpdateRequest::mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::NamedEntityMetadata>(GetArenaNoVirtual());
    metadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.NamedEntityUpdateRequest.metadata)
  return metadata_;
}
inline void NamedEntityUpdateRequest::set_allocated_metadata(::flyteidl::admin::NamedEntityMetadata* metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      metadata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.NamedEntityUpdateRequest.metadata)
}

// -------------------------------------------------------------------

// NamedEntityUpdateResponse

// -------------------------------------------------------------------

// ObjectGetRequest

// .flyteidl.core.Identifier id = 1;
inline bool ObjectGetRequest::has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline const ::flyteidl::core::Identifier& ObjectGetRequest::id() const {
  const ::flyteidl::core::Identifier* p = id_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.ObjectGetRequest.id)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::Identifier*>(
      &::flyteidl::core::_Identifier_default_instance_);
}
inline ::flyteidl::core::Identifier* ObjectGetRequest::release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ObjectGetRequest.id)
  
  ::flyteidl::core::Identifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::flyteidl::core::Identifier* ObjectGetRequest::mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::Identifier>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ObjectGetRequest.id)
  return id_;
}
inline void ObjectGetRequest::set_allocated_id(::flyteidl::core::Identifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ObjectGetRequest.id)
}

// -------------------------------------------------------------------

// ResourceListRequest

// .flyteidl.admin.NamedEntityIdentifier id = 1;
inline bool ResourceListRequest::has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline void ResourceListRequest::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
inline const ::flyteidl::admin::NamedEntityIdentifier& ResourceListRequest::id() const {
  const ::flyteidl::admin::NamedEntityIdentifier* p = id_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.ResourceListRequest.id)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::NamedEntityIdentifier*>(
      &::flyteidl::admin::_NamedEntityIdentifier_default_instance_);
}
inline ::flyteidl::admin::NamedEntityIdentifier* ResourceListRequest::release_id() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ResourceListRequest.id)
  
  ::flyteidl::admin::NamedEntityIdentifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::NamedEntityIdentifier* ResourceListRequest::mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::NamedEntityIdentifier>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ResourceListRequest.id)
  return id_;
}
inline void ResourceListRequest::set_allocated_id(::flyteidl::admin::NamedEntityIdentifier* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ResourceListRequest.id)
}

// uint32 limit = 2;
inline void ResourceListRequest::clear_limit() {
  limit_ = 0u;
}
inline ::google::protobuf::uint32 ResourceListRequest::limit() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ResourceListRequest.limit)
  return limit_;
}
inline void ResourceListRequest::set_limit(::google::protobuf::uint32 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.admin.ResourceListRequest.limit)
}

// string token = 3;
inline void ResourceListRequest::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResourceListRequest::token() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ResourceListRequest.token)
  return token_.GetNoArena();
}
inline void ResourceListRequest::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.ResourceListRequest.token)
}
#if LANG_CXX11
inline void ResourceListRequest::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.ResourceListRequest.token)
}
#endif
inline void ResourceListRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.ResourceListRequest.token)
}
inline void ResourceListRequest::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.ResourceListRequest.token)
}
inline ::std::string* ResourceListRequest::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ResourceListRequest.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResourceListRequest::release_token() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ResourceListRequest.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResourceListRequest::set_allocated_token(::std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ResourceListRequest.token)
}

// string filters = 4;
inline void ResourceListRequest::clear_filters() {
  filters_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResourceListRequest::filters() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.ResourceListRequest.filters)
  return filters_.GetNoArena();
}
inline void ResourceListRequest::set_filters(const ::std::string& value) {
  
  filters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.ResourceListRequest.filters)
}
#if LANG_CXX11
inline void ResourceListRequest::set_filters(::std::string&& value) {
  
  filters_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.ResourceListRequest.filters)
}
#endif
inline void ResourceListRequest::set_filters(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.ResourceListRequest.filters)
}
inline void ResourceListRequest::set_filters(const char* value, size_t size) {
  
  filters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.ResourceListRequest.filters)
}
inline ::std::string* ResourceListRequest::mutable_filters() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ResourceListRequest.filters)
  return filters_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResourceListRequest::release_filters() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ResourceListRequest.filters)
  
  return filters_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResourceListRequest::set_allocated_filters(::std::string* filters) {
  if (filters != nullptr) {
    
  } else {
    
  }
  filters_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filters);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ResourceListRequest.filters)
}

// .flyteidl.admin.Sort sort_by = 5;
inline bool ResourceListRequest::has_sort_by() const {
  return this != internal_default_instance() && sort_by_ != nullptr;
}
inline void ResourceListRequest::clear_sort_by() {
  if (GetArenaNoVirtual() == nullptr && sort_by_ != nullptr) {
    delete sort_by_;
  }
  sort_by_ = nullptr;
}
inline const ::flyteidl::admin::Sort& ResourceListRequest::sort_by() const {
  const ::flyteidl::admin::Sort* p = sort_by_;
  // @@protoc_insertion_point(field_get:flyteidl.admin.ResourceListRequest.sort_by)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::admin::Sort*>(
      &::flyteidl::admin::_Sort_default_instance_);
}
inline ::flyteidl::admin::Sort* ResourceListRequest::release_sort_by() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.ResourceListRequest.sort_by)
  
  ::flyteidl::admin::Sort* temp = sort_by_;
  sort_by_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::Sort* ResourceListRequest::mutable_sort_by() {
  
  if (sort_by_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::Sort>(GetArenaNoVirtual());
    sort_by_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.ResourceListRequest.sort_by)
  return sort_by_;
}
inline void ResourceListRequest::set_allocated_sort_by(::flyteidl::admin::Sort* sort_by) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sort_by_;
  }
  if (sort_by) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sort_by = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sort_by, submessage_arena);
    }
    
  } else {
    
  }
  sort_by_ = sort_by;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.ResourceListRequest.sort_by)
}

// -------------------------------------------------------------------

// EmailNotification

// repeated string recipients_email = 1;
inline int EmailNotification::recipients_email_size() const {
  return recipients_email_.size();
}
inline void EmailNotification::clear_recipients_email() {
  recipients_email_.Clear();
}
inline const ::std::string& EmailNotification::recipients_email(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.EmailNotification.recipients_email)
  return recipients_email_.Get(index);
}
inline ::std::string* EmailNotification::mutable_recipients_email(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.EmailNotification.recipients_email)
  return recipients_email_.Mutable(index);
}
inline void EmailNotification::set_recipients_email(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flyteidl.admin.EmailNotification.recipients_email)
  recipients_email_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void EmailNotification::set_recipients_email(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:flyteidl.admin.EmailNotification.recipients_email)
  recipients_email_.Mutable(index)->assign(std::move(value));
}
#endif
inline void EmailNotification::set_recipients_email(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  recipients_email_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.EmailNotification.recipients_email)
}
inline void EmailNotification::set_recipients_email(int index, const char* value, size_t size) {
  recipients_email_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.EmailNotification.recipients_email)
}
inline ::std::string* EmailNotification::add_recipients_email() {
  // @@protoc_insertion_point(field_add_mutable:flyteidl.admin.EmailNotification.recipients_email)
  return recipients_email_.Add();
}
inline void EmailNotification::add_recipients_email(const ::std::string& value) {
  recipients_email_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flyteidl.admin.EmailNotification.recipients_email)
}
#if LANG_CXX11
inline void EmailNotification::add_recipients_email(::std::string&& value) {
  recipients_email_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flyteidl.admin.EmailNotification.recipients_email)
}
#endif
inline void EmailNotification::add_recipients_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  recipients_email_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flyteidl.admin.EmailNotification.recipients_email)
}
inline void EmailNotification::add_recipients_email(const char* value, size_t size) {
  recipients_email_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flyteidl.admin.EmailNotification.recipients_email)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
EmailNotification::recipients_email() const {
  // @@protoc_insertion_point(field_list:flyteidl.admin.EmailNotification.recipients_email)
  return recipients_email_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
EmailNotification::mutable_recipients_email() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.admin.EmailNotification.recipients_email)
  return &recipients_email_;
}

// -------------------------------------------------------------------

// PagerDutyNotification

// repeated string recipients_email = 1;
inline int PagerDutyNotification::recipients_email_size() const {
  return recipients_email_.size();
}
inline void PagerDutyNotification::clear_recipients_email() {
  recipients_email_.Clear();
}
inline const ::std::string& PagerDutyNotification::recipients_email(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.PagerDutyNotification.recipients_email)
  return recipients_email_.Get(index);
}
inline ::std::string* PagerDutyNotification::mutable_recipients_email(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.PagerDutyNotification.recipients_email)
  return recipients_email_.Mutable(index);
}
inline void PagerDutyNotification::set_recipients_email(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flyteidl.admin.PagerDutyNotification.recipients_email)
  recipients_email_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PagerDutyNotification::set_recipients_email(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:flyteidl.admin.PagerDutyNotification.recipients_email)
  recipients_email_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PagerDutyNotification::set_recipients_email(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  recipients_email_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.PagerDutyNotification.recipients_email)
}
inline void PagerDutyNotification::set_recipients_email(int index, const char* value, size_t size) {
  recipients_email_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.PagerDutyNotification.recipients_email)
}
inline ::std::string* PagerDutyNotification::add_recipients_email() {
  // @@protoc_insertion_point(field_add_mutable:flyteidl.admin.PagerDutyNotification.recipients_email)
  return recipients_email_.Add();
}
inline void PagerDutyNotification::add_recipients_email(const ::std::string& value) {
  recipients_email_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flyteidl.admin.PagerDutyNotification.recipients_email)
}
#if LANG_CXX11
inline void PagerDutyNotification::add_recipients_email(::std::string&& value) {
  recipients_email_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flyteidl.admin.PagerDutyNotification.recipients_email)
}
#endif
inline void PagerDutyNotification::add_recipients_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  recipients_email_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flyteidl.admin.PagerDutyNotification.recipients_email)
}
inline void PagerDutyNotification::add_recipients_email(const char* value, size_t size) {
  recipients_email_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flyteidl.admin.PagerDutyNotification.recipients_email)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
PagerDutyNotification::recipients_email() const {
  // @@protoc_insertion_point(field_list:flyteidl.admin.PagerDutyNotification.recipients_email)
  return recipients_email_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
PagerDutyNotification::mutable_recipients_email() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.admin.PagerDutyNotification.recipients_email)
  return &recipients_email_;
}

// -------------------------------------------------------------------

// SlackNotification

// repeated string recipients_email = 1;
inline int SlackNotification::recipients_email_size() const {
  return recipients_email_.size();
}
inline void SlackNotification::clear_recipients_email() {
  recipients_email_.Clear();
}
inline const ::std::string& SlackNotification::recipients_email(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.SlackNotification.recipients_email)
  return recipients_email_.Get(index);
}
inline ::std::string* SlackNotification::mutable_recipients_email(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.SlackNotification.recipients_email)
  return recipients_email_.Mutable(index);
}
inline void SlackNotification::set_recipients_email(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flyteidl.admin.SlackNotification.recipients_email)
  recipients_email_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SlackNotification::set_recipients_email(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:flyteidl.admin.SlackNotification.recipients_email)
  recipients_email_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SlackNotification::set_recipients_email(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  recipients_email_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.SlackNotification.recipients_email)
}
inline void SlackNotification::set_recipients_email(int index, const char* value, size_t size) {
  recipients_email_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.SlackNotification.recipients_email)
}
inline ::std::string* SlackNotification::add_recipients_email() {
  // @@protoc_insertion_point(field_add_mutable:flyteidl.admin.SlackNotification.recipients_email)
  return recipients_email_.Add();
}
inline void SlackNotification::add_recipients_email(const ::std::string& value) {
  recipients_email_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flyteidl.admin.SlackNotification.recipients_email)
}
#if LANG_CXX11
inline void SlackNotification::add_recipients_email(::std::string&& value) {
  recipients_email_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flyteidl.admin.SlackNotification.recipients_email)
}
#endif
inline void SlackNotification::add_recipients_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  recipients_email_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flyteidl.admin.SlackNotification.recipients_email)
}
inline void SlackNotification::add_recipients_email(const char* value, size_t size) {
  recipients_email_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flyteidl.admin.SlackNotification.recipients_email)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
SlackNotification::recipients_email() const {
  // @@protoc_insertion_point(field_list:flyteidl.admin.SlackNotification.recipients_email)
  return recipients_email_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
SlackNotification::mutable_recipients_email() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.admin.SlackNotification.recipients_email)
  return &recipients_email_;
}

// -------------------------------------------------------------------

// Notification

// repeated .flyteidl.core.WorkflowExecution.Phase phases = 1;
inline int Notification::phases_size() const {
  return phases_.size();
}
inline void Notification::clear_phases() {
  phases_.Clear();
}
inline ::flyteidl::core::WorkflowExecution_Phase Notification::phases(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Notification.phases)
  return static_cast< ::flyteidl::core::WorkflowExecution_Phase >(phases_.Get(index));
}
inline void Notification::set_phases(int index, ::flyteidl::core::WorkflowExecution_Phase value) {
  phases_.Set(index, value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.Notification.phases)
}
inline void Notification::add_phases(::flyteidl::core::WorkflowExecution_Phase value) {
  phases_.Add(value);
  // @@protoc_insertion_point(field_add:flyteidl.admin.Notification.phases)
}
inline const ::google::protobuf::RepeatedField<int>&
Notification::phases() const {
  // @@protoc_insertion_point(field_list:flyteidl.admin.Notification.phases)
  return phases_;
}
inline ::google::protobuf::RepeatedField<int>*
Notification::mutable_phases() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.admin.Notification.phases)
  return &phases_;
}

// .flyteidl.admin.EmailNotification email = 2;
inline bool Notification::has_email() const {
  return type_case() == kEmail;
}
inline void Notification::set_has_email() {
  _oneof_case_[0] = kEmail;
}
inline void Notification::clear_email() {
  if (has_email()) {
    delete type_.email_;
    clear_has_type();
  }
}
inline ::flyteidl::admin::EmailNotification* Notification::release_email() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Notification.email)
  if (has_email()) {
    clear_has_type();
      ::flyteidl::admin::EmailNotification* temp = type_.email_;
    type_.email_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::admin::EmailNotification& Notification::email() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Notification.email)
  return has_email()
      ? *type_.email_
      : *reinterpret_cast< ::flyteidl::admin::EmailNotification*>(&::flyteidl::admin::_EmailNotification_default_instance_);
}
inline ::flyteidl::admin::EmailNotification* Notification::mutable_email() {
  if (!has_email()) {
    clear_type();
    set_has_email();
    type_.email_ = CreateMaybeMessage< ::flyteidl::admin::EmailNotification >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Notification.email)
  return type_.email_;
}

// .flyteidl.admin.PagerDutyNotification pager_duty = 3;
inline bool Notification::has_pager_duty() const {
  return type_case() == kPagerDuty;
}
inline void Notification::set_has_pager_duty() {
  _oneof_case_[0] = kPagerDuty;
}
inline void Notification::clear_pager_duty() {
  if (has_pager_duty()) {
    delete type_.pager_duty_;
    clear_has_type();
  }
}
inline ::flyteidl::admin::PagerDutyNotification* Notification::release_pager_duty() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Notification.pager_duty)
  if (has_pager_duty()) {
    clear_has_type();
      ::flyteidl::admin::PagerDutyNotification* temp = type_.pager_duty_;
    type_.pager_duty_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::admin::PagerDutyNotification& Notification::pager_duty() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Notification.pager_duty)
  return has_pager_duty()
      ? *type_.pager_duty_
      : *reinterpret_cast< ::flyteidl::admin::PagerDutyNotification*>(&::flyteidl::admin::_PagerDutyNotification_default_instance_);
}
inline ::flyteidl::admin::PagerDutyNotification* Notification::mutable_pager_duty() {
  if (!has_pager_duty()) {
    clear_type();
    set_has_pager_duty();
    type_.pager_duty_ = CreateMaybeMessage< ::flyteidl::admin::PagerDutyNotification >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Notification.pager_duty)
  return type_.pager_duty_;
}

// .flyteidl.admin.SlackNotification slack = 4;
inline bool Notification::has_slack() const {
  return type_case() == kSlack;
}
inline void Notification::set_has_slack() {
  _oneof_case_[0] = kSlack;
}
inline void Notification::clear_slack() {
  if (has_slack()) {
    delete type_.slack_;
    clear_has_type();
  }
}
inline ::flyteidl::admin::SlackNotification* Notification::release_slack() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Notification.slack)
  if (has_slack()) {
    clear_has_type();
      ::flyteidl::admin::SlackNotification* temp = type_.slack_;
    type_.slack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::admin::SlackNotification& Notification::slack() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Notification.slack)
  return has_slack()
      ? *type_.slack_
      : *reinterpret_cast< ::flyteidl::admin::SlackNotification*>(&::flyteidl::admin::_SlackNotification_default_instance_);
}
inline ::flyteidl::admin::SlackNotification* Notification::mutable_slack() {
  if (!has_slack()) {
    clear_type();
    set_has_slack();
    type_.slack_ = CreateMaybeMessage< ::flyteidl::admin::SlackNotification >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Notification.slack)
  return type_.slack_;
}

inline bool Notification::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void Notification::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline Notification::TypeCase Notification::type_case() const {
  return Notification::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// UrlBlob

// string url = 1;
inline void UrlBlob::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UrlBlob::url() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.UrlBlob.url)
  return url_.GetNoArena();
}
inline void UrlBlob::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.UrlBlob.url)
}
#if LANG_CXX11
inline void UrlBlob::set_url(::std::string&& value) {
  
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.UrlBlob.url)
}
#endif
inline void UrlBlob::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.UrlBlob.url)
}
inline void UrlBlob::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.UrlBlob.url)
}
inline ::std::string* UrlBlob::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.UrlBlob.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UrlBlob::release_url() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.UrlBlob.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UrlBlob::set_allocated_url(::std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.UrlBlob.url)
}

// int64 bytes = 2;
inline void UrlBlob::clear_bytes() {
  bytes_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 UrlBlob::bytes() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.UrlBlob.bytes)
  return bytes_;
}
inline void UrlBlob::set_bytes(::google::protobuf::int64 value) {
  
  bytes_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.admin.UrlBlob.bytes)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Labels

// map<string, string> values = 1;
inline int Labels::values_size() const {
  return values_.size();
}
inline void Labels::clear_values() {
  values_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Labels::values() const {
  // @@protoc_insertion_point(field_map:flyteidl.admin.Labels.values)
  return values_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Labels::mutable_values() {
  // @@protoc_insertion_point(field_mutable_map:flyteidl.admin.Labels.values)
  return values_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Annotations

// map<string, string> values = 1;
inline int Annotations::values_size() const {
  return values_.size();
}
inline void Annotations::clear_values() {
  values_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Annotations::values() const {
  // @@protoc_insertion_point(field_map:flyteidl.admin.Annotations.values)
  return values_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Annotations::mutable_values() {
  // @@protoc_insertion_point(field_mutable_map:flyteidl.admin.Annotations.values)
  return values_.MutableMap();
}

// -------------------------------------------------------------------

// AuthRole

// string assumable_iam_role = 1;
inline bool AuthRole::has_assumable_iam_role() const {
  return method_case() == kAssumableIamRole;
}
inline void AuthRole::set_has_assumable_iam_role() {
  _oneof_case_[0] = kAssumableIamRole;
}
inline void AuthRole::clear_assumable_iam_role() {
  if (has_assumable_iam_role()) {
    method_.assumable_iam_role_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_method();
  }
}
inline const ::std::string& AuthRole::assumable_iam_role() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.AuthRole.assumable_iam_role)
  if (has_assumable_iam_role()) {
    return method_.assumable_iam_role_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void AuthRole::set_assumable_iam_role(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flyteidl.admin.AuthRole.assumable_iam_role)
  if (!has_assumable_iam_role()) {
    clear_method();
    set_has_assumable_iam_role();
    method_.assumable_iam_role_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  method_.assumable_iam_role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.AuthRole.assumable_iam_role)
}
#if LANG_CXX11
inline void AuthRole::set_assumable_iam_role(::std::string&& value) {
  // @@protoc_insertion_point(field_set:flyteidl.admin.AuthRole.assumable_iam_role)
  if (!has_assumable_iam_role()) {
    clear_method();
    set_has_assumable_iam_role();
    method_.assumable_iam_role_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  method_.assumable_iam_role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.AuthRole.assumable_iam_role)
}
#endif
inline void AuthRole::set_assumable_iam_role(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_assumable_iam_role()) {
    clear_method();
    set_has_assumable_iam_role();
    method_.assumable_iam_role_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  method_.assumable_iam_role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.AuthRole.assumable_iam_role)
}
inline void AuthRole::set_assumable_iam_role(const char* value, size_t size) {
  if (!has_assumable_iam_role()) {
    clear_method();
    set_has_assumable_iam_role();
    method_.assumable_iam_role_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  method_.assumable_iam_role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.AuthRole.assumable_iam_role)
}
inline ::std::string* AuthRole::mutable_assumable_iam_role() {
  if (!has_assumable_iam_role()) {
    clear_method();
    set_has_assumable_iam_role();
    method_.assumable_iam_role_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.AuthRole.assumable_iam_role)
  return method_.assumable_iam_role_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthRole::release_assumable_iam_role() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.AuthRole.assumable_iam_role)
  if (has_assumable_iam_role()) {
    clear_has_method();
    return method_.assumable_iam_role_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void AuthRole::set_allocated_assumable_iam_role(::std::string* assumable_iam_role) {
  if (has_method()) {
    clear_method();
  }
  if (assumable_iam_role != nullptr) {
    set_has_assumable_iam_role();
    method_.assumable_iam_role_.UnsafeSetDefault(assumable_iam_role);
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.AuthRole.assumable_iam_role)
}

// string kubernetes_service_account = 2;
inline bool AuthRole::has_kubernetes_service_account() const {
  return method_case() == kKubernetesServiceAccount;
}
inline void AuthRole::set_has_kubernetes_service_account() {
  _oneof_case_[0] = kKubernetesServiceAccount;
}
inline void AuthRole::clear_kubernetes_service_account() {
  if (has_kubernetes_service_account()) {
    method_.kubernetes_service_account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_method();
  }
}
inline const ::std::string& AuthRole::kubernetes_service_account() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.AuthRole.kubernetes_service_account)
  if (has_kubernetes_service_account()) {
    return method_.kubernetes_service_account_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void AuthRole::set_kubernetes_service_account(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:flyteidl.admin.AuthRole.kubernetes_service_account)
  if (!has_kubernetes_service_account()) {
    clear_method();
    set_has_kubernetes_service_account();
    method_.kubernetes_service_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  method_.kubernetes_service_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.AuthRole.kubernetes_service_account)
}
#if LANG_CXX11
inline void AuthRole::set_kubernetes_service_account(::std::string&& value) {
  // @@protoc_insertion_point(field_set:flyteidl.admin.AuthRole.kubernetes_service_account)
  if (!has_kubernetes_service_account()) {
    clear_method();
    set_has_kubernetes_service_account();
    method_.kubernetes_service_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  method_.kubernetes_service_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.admin.AuthRole.kubernetes_service_account)
}
#endif
inline void AuthRole::set_kubernetes_service_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_kubernetes_service_account()) {
    clear_method();
    set_has_kubernetes_service_account();
    method_.kubernetes_service_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  method_.kubernetes_service_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.AuthRole.kubernetes_service_account)
}
inline void AuthRole::set_kubernetes_service_account(const char* value, size_t size) {
  if (!has_kubernetes_service_account()) {
    clear_method();
    set_has_kubernetes_service_account();
    method_.kubernetes_service_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  method_.kubernetes_service_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.AuthRole.kubernetes_service_account)
}
inline ::std::string* AuthRole::mutable_kubernetes_service_account() {
  if (!has_kubernetes_service_account()) {
    clear_method();
    set_has_kubernetes_service_account();
    method_.kubernetes_service_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.AuthRole.kubernetes_service_account)
  return method_.kubernetes_service_account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthRole::release_kubernetes_service_account() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.AuthRole.kubernetes_service_account)
  if (has_kubernetes_service_account()) {
    clear_has_method();
    return method_.kubernetes_service_account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void AuthRole::set_allocated_kubernetes_service_account(::std::string* kubernetes_service_account) {
  if (has_method()) {
    clear_method();
  }
  if (kubernetes_service_account != nullptr) {
    set_has_kubernetes_service_account();
    method_.kubernetes_service_account_.UnsafeSetDefault(kubernetes_service_account);
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.AuthRole.kubernetes_service_account)
}

inline bool AuthRole::has_method() const {
  return method_case() != METHOD_NOT_SET;
}
inline void AuthRole::clear_has_method() {
  _oneof_case_[0] = METHOD_NOT_SET;
}
inline AuthRole::MethodCase AuthRole::method_case() const {
  return AuthRole::MethodCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace admin
}  // namespace flyteidl

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::flyteidl::admin::Sort_Direction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flyteidl::admin::Sort_Direction>() {
  return ::flyteidl::admin::Sort_Direction_descriptor();
}
template <> struct is_proto_enum< ::flyteidl::admin::NamedEntityState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flyteidl::admin::NamedEntityState>() {
  return ::flyteidl::admin::NamedEntityState_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_flyteidl_2fadmin_2fcommon_2eproto
