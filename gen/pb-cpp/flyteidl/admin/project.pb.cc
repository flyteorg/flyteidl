// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/project.proto

#include "flyteidl/admin/project.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Sort_flyteidl_2fadmin_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Labels_flyteidl_2fadmin_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fproject_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Domain_flyteidl_2fadmin_2fproject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fproject_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Project_flyteidl_2fadmin_2fproject_2eproto;
namespace flyteidl {
namespace admin {
class DomainDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Domain> _instance;
} _Domain_default_instance_;
class ProjectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Project> _instance;
} _Project_default_instance_;
class ProjectsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Projects> _instance;
} _Projects_default_instance_;
class ProjectListRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProjectListRequest> _instance;
} _ProjectListRequest_default_instance_;
class ProjectRegisterRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProjectRegisterRequest> _instance;
} _ProjectRegisterRequest_default_instance_;
class ProjectRegisterResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProjectRegisterResponse> _instance;
} _ProjectRegisterResponse_default_instance_;
class ProjectUpdateResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProjectUpdateResponse> _instance;
} _ProjectUpdateResponse_default_instance_;
}  // namespace admin
}  // namespace flyteidl
static void InitDefaultsDomain_flyteidl_2fadmin_2fproject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_Domain_default_instance_;
    new (ptr) ::flyteidl::admin::Domain();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::Domain::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Domain_flyteidl_2fadmin_2fproject_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDomain_flyteidl_2fadmin_2fproject_2eproto}, {}};

static void InitDefaultsProject_flyteidl_2fadmin_2fproject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_Project_default_instance_;
    new (ptr) ::flyteidl::admin::Project();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::Project::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Project_flyteidl_2fadmin_2fproject_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsProject_flyteidl_2fadmin_2fproject_2eproto}, {
      &scc_info_Domain_flyteidl_2fadmin_2fproject_2eproto.base,
      &scc_info_Labels_flyteidl_2fadmin_2fcommon_2eproto.base,}};

static void InitDefaultsProjects_flyteidl_2fadmin_2fproject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_Projects_default_instance_;
    new (ptr) ::flyteidl::admin::Projects();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::Projects::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Projects_flyteidl_2fadmin_2fproject_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsProjects_flyteidl_2fadmin_2fproject_2eproto}, {
      &scc_info_Project_flyteidl_2fadmin_2fproject_2eproto.base,}};

static void InitDefaultsProjectListRequest_flyteidl_2fadmin_2fproject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_ProjectListRequest_default_instance_;
    new (ptr) ::flyteidl::admin::ProjectListRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::ProjectListRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ProjectListRequest_flyteidl_2fadmin_2fproject_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsProjectListRequest_flyteidl_2fadmin_2fproject_2eproto}, {
      &scc_info_Sort_flyteidl_2fadmin_2fcommon_2eproto.base,}};

static void InitDefaultsProjectRegisterRequest_flyteidl_2fadmin_2fproject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_ProjectRegisterRequest_default_instance_;
    new (ptr) ::flyteidl::admin::ProjectRegisterRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::ProjectRegisterRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ProjectRegisterRequest_flyteidl_2fadmin_2fproject_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsProjectRegisterRequest_flyteidl_2fadmin_2fproject_2eproto}, {
      &scc_info_Project_flyteidl_2fadmin_2fproject_2eproto.base,}};

static void InitDefaultsProjectRegisterResponse_flyteidl_2fadmin_2fproject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_ProjectRegisterResponse_default_instance_;
    new (ptr) ::flyteidl::admin::ProjectRegisterResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::ProjectRegisterResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ProjectRegisterResponse_flyteidl_2fadmin_2fproject_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProjectRegisterResponse_flyteidl_2fadmin_2fproject_2eproto}, {}};

static void InitDefaultsProjectUpdateResponse_flyteidl_2fadmin_2fproject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_ProjectUpdateResponse_default_instance_;
    new (ptr) ::flyteidl::admin::ProjectUpdateResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::ProjectUpdateResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ProjectUpdateResponse_flyteidl_2fadmin_2fproject_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsProjectUpdateResponse_flyteidl_2fadmin_2fproject_2eproto}, {}};

void InitDefaults_flyteidl_2fadmin_2fproject_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Domain_flyteidl_2fadmin_2fproject_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Project_flyteidl_2fadmin_2fproject_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Projects_flyteidl_2fadmin_2fproject_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ProjectListRequest_flyteidl_2fadmin_2fproject_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ProjectRegisterRequest_flyteidl_2fadmin_2fproject_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ProjectRegisterResponse_flyteidl_2fadmin_2fproject_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ProjectUpdateResponse_flyteidl_2fadmin_2fproject_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_flyteidl_2fadmin_2fproject_2eproto[7];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_flyteidl_2fadmin_2fproject_2eproto[1];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fadmin_2fproject_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_flyteidl_2fadmin_2fproject_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Domain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Domain, id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Domain, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Project, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Project, id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Project, name_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Project, domains_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Project, description_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Project, labels_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Project, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Projects, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Projects, projects_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Projects, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ProjectListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ProjectListRequest, limit_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ProjectListRequest, token_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ProjectListRequest, filters_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ProjectListRequest, sort_by_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ProjectRegisterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ProjectRegisterRequest, project_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ProjectRegisterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ProjectUpdateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::flyteidl::admin::Domain)},
  { 7, -1, sizeof(::flyteidl::admin::Project)},
  { 18, -1, sizeof(::flyteidl::admin::Projects)},
  { 25, -1, sizeof(::flyteidl::admin::ProjectListRequest)},
  { 34, -1, sizeof(::flyteidl::admin::ProjectRegisterRequest)},
  { 40, -1, sizeof(::flyteidl::admin::ProjectRegisterResponse)},
  { 45, -1, sizeof(::flyteidl::admin::ProjectUpdateResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_Domain_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_Project_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_Projects_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_ProjectListRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_ProjectRegisterRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_ProjectRegisterResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_ProjectUpdateResponse_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_flyteidl_2fadmin_2fproject_2eproto = {
  {}, AddDescriptors_flyteidl_2fadmin_2fproject_2eproto, "flyteidl/admin/project.proto", schemas,
  file_default_instances, TableStruct_flyteidl_2fadmin_2fproject_2eproto::offsets,
  file_level_metadata_flyteidl_2fadmin_2fproject_2eproto, 7, file_level_enum_descriptors_flyteidl_2fadmin_2fproject_2eproto, file_level_service_descriptors_flyteidl_2fadmin_2fproject_2eproto,
};

const char descriptor_table_protodef_flyteidl_2fadmin_2fproject_2eproto[] =
  "\n\034flyteidl/admin/project.proto\022\016flyteidl"
  ".admin\032\033flyteidl/admin/common.proto\"\"\n\006D"
  "omain\022\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\"\376\001\n\007Proj"
  "ect\022\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\'\n\007domains"
  "\030\003 \003(\0132\026.flyteidl.admin.Domain\022\023\n\013descri"
  "ption\030\004 \001(\t\022&\n\006labels\030\005 \001(\0132\026.flyteidl.a"
  "dmin.Labels\0223\n\005state\030\006 \001(\0162$.flyteidl.ad"
  "min.Project.ProjectState\">\n\014ProjectState"
  "\022\n\n\006ACTIVE\020\000\022\014\n\010ARCHIVED\020\001\022\024\n\020SYSTEM_GEN"
  "ERATED\020\002\"D\n\010Projects\022)\n\010projects\030\001 \003(\0132\027"
  ".flyteidl.admin.Project\022\r\n\005token\030\002 \001(\t\"j"
  "\n\022ProjectListRequest\022\r\n\005limit\030\001 \001(\r\022\r\n\005t"
  "oken\030\002 \001(\t\022\017\n\007filters\030\003 \001(\t\022%\n\007sort_by\030\004"
  " \001(\0132\024.flyteidl.admin.Sort\"B\n\026ProjectReg"
  "isterRequest\022(\n\007project\030\001 \001(\0132\027.flyteidl"
  ".admin.Project\"\031\n\027ProjectRegisterRespons"
  "e\"\027\n\025ProjectUpdateResponseB7Z5github.com"
  "/flyteorg/flyteidl/gen/pb-go/flyteidl/ad"
  "minb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_flyteidl_2fadmin_2fproject_2eproto = {
  false, InitDefaults_flyteidl_2fadmin_2fproject_2eproto, 
  descriptor_table_protodef_flyteidl_2fadmin_2fproject_2eproto,
  "flyteidl/admin/project.proto", &assign_descriptors_table_flyteidl_2fadmin_2fproject_2eproto, 731,
};

void AddDescriptors_flyteidl_2fadmin_2fproject_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_flyteidl_2fadmin_2fcommon_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_flyteidl_2fadmin_2fproject_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_flyteidl_2fadmin_2fproject_2eproto = []() { AddDescriptors_flyteidl_2fadmin_2fproject_2eproto(); return true; }();
namespace flyteidl {
namespace admin {
const ::google::protobuf::EnumDescriptor* Project_ProjectState_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_flyteidl_2fadmin_2fproject_2eproto);
  return file_level_enum_descriptors_flyteidl_2fadmin_2fproject_2eproto[0];
}
bool Project_ProjectState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Project_ProjectState Project::ACTIVE;
const Project_ProjectState Project::ARCHIVED;
const Project_ProjectState Project::SYSTEM_GENERATED;
const Project_ProjectState Project::ProjectState_MIN;
const Project_ProjectState Project::ProjectState_MAX;
const int Project::ProjectState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Domain::InitAsDefaultInstance() {
}
class Domain::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Domain::kIdFieldNumber;
const int Domain::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Domain::Domain()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.Domain)
}
Domain::Domain(const Domain& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.Domain)
}

void Domain::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Domain_flyteidl_2fadmin_2fproject_2eproto.base);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Domain::~Domain() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.Domain)
  SharedDtor();
}

void Domain::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Domain::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Domain& Domain::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Domain_flyteidl_2fadmin_2fproject_2eproto.base);
  return *internal_default_instance();
}


void Domain::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.Domain)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Domain::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Domain*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.Domain.id");
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.Domain.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Domain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.Domain)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.Domain.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.Domain.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.Domain)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.Domain)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Domain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.Domain)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.Domain.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.Domain.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.Domain)
}

::google::protobuf::uint8* Domain::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.Domain)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.Domain.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.Domain.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.Domain)
  return target;
}

size_t Domain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.Domain)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Domain::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.Domain)
  GOOGLE_DCHECK_NE(&from, this);
  const Domain* source =
      ::google::protobuf::DynamicCastToGenerated<Domain>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.Domain)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.Domain)
    MergeFrom(*source);
  }
}

void Domain::MergeFrom(const Domain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.Domain)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void Domain::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.Domain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Domain::CopyFrom(const Domain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.Domain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Domain::IsInitialized() const {
  return true;
}

void Domain::Swap(Domain* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Domain::InternalSwap(Domain* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata Domain::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fproject_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fproject_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Project::InitAsDefaultInstance() {
  ::flyteidl::admin::_Project_default_instance_._instance.get_mutable()->labels_ = const_cast< ::flyteidl::admin::Labels*>(
      ::flyteidl::admin::Labels::internal_default_instance());
}
class Project::HasBitSetters {
 public:
  static const ::flyteidl::admin::Labels& labels(const Project* msg);
};

const ::flyteidl::admin::Labels&
Project::HasBitSetters::labels(const Project* msg) {
  return *msg->labels_;
}
void Project::clear_labels() {
  if (GetArenaNoVirtual() == nullptr && labels_ != nullptr) {
    delete labels_;
  }
  labels_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Project::kIdFieldNumber;
const int Project::kNameFieldNumber;
const int Project::kDomainsFieldNumber;
const int Project::kDescriptionFieldNumber;
const int Project::kLabelsFieldNumber;
const int Project::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Project::Project()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.Project)
}
Project::Project(const Project& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      domains_(from.domains_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.has_labels()) {
    labels_ = new ::flyteidl::admin::Labels(*from.labels_);
  } else {
    labels_ = nullptr;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.Project)
}

void Project::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Project_flyteidl_2fadmin_2fproject_2eproto.base);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&labels_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&labels_)) + sizeof(state_));
}

Project::~Project() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.Project)
  SharedDtor();
}

void Project::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete labels_;
}

void Project::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Project& Project::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Project_flyteidl_2fadmin_2fproject_2eproto.base);
  return *internal_default_instance();
}


void Project::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.Project)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  domains_.Clear();
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && labels_ != nullptr) {
    delete labels_;
  }
  labels_ = nullptr;
  state_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Project::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Project*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.Project.id");
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.Project.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .flyteidl.admin.Domain domains = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::flyteidl::admin::Domain::_InternalParse;
          object = msg->add_domains();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // string description = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.Project.description");
        object = msg->mutable_description();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .flyteidl.admin.Labels labels = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::Labels::_InternalParse;
        object = msg->mutable_labels();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.Project.ProjectState state = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_state(static_cast<::flyteidl::admin::Project_ProjectState>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Project::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.Project)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.Project.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.Project.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .flyteidl.admin.Domain domains = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_domains()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.Project.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.Labels labels = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_labels()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.Project.ProjectState state = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::flyteidl::admin::Project_ProjectState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.Project)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.Project)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Project::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.Project)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.Project.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.Project.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // repeated .flyteidl.admin.Domain domains = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->domains_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->domains(static_cast<int>(i)),
      output);
  }

  // string description = 4;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.Project.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->description(), output);
  }

  // .flyteidl.admin.Labels labels = 5;
  if (this->has_labels()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::labels(this), output);
  }

  // .flyteidl.admin.Project.ProjectState state = 6;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.Project)
}

::google::protobuf::uint8* Project::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.Project)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.Project.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.Project.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated .flyteidl.admin.Domain domains = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->domains_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->domains(static_cast<int>(i)), target);
  }

  // string description = 4;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.Project.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->description(), target);
  }

  // .flyteidl.admin.Labels labels = 5;
  if (this->has_labels()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::labels(this), target);
  }

  // .flyteidl.admin.Project.ProjectState state = 6;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.Project)
  return target;
}

size_t Project::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.Project)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .flyteidl.admin.Domain domains = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->domains_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->domains(static_cast<int>(i)));
    }
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string description = 4;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // .flyteidl.admin.Labels labels = 5;
  if (this->has_labels()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *labels_);
  }

  // .flyteidl.admin.Project.ProjectState state = 6;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Project::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.Project)
  GOOGLE_DCHECK_NE(&from, this);
  const Project* source =
      ::google::protobuf::DynamicCastToGenerated<Project>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.Project)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.Project)
    MergeFrom(*source);
  }
}

void Project::MergeFrom(const Project& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.Project)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  domains_.MergeFrom(from.domains_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.has_labels()) {
    mutable_labels()->::flyteidl::admin::Labels::MergeFrom(from.labels());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void Project::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.Project)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Project::CopyFrom(const Project& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.Project)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Project::IsInitialized() const {
  return true;
}

void Project::Swap(Project* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Project::InternalSwap(Project* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&domains_)->InternalSwap(CastToBase(&other->domains_));
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(labels_, other->labels_);
  swap(state_, other->state_);
}

::google::protobuf::Metadata Project::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fproject_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fproject_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Projects::InitAsDefaultInstance() {
}
class Projects::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Projects::kProjectsFieldNumber;
const int Projects::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Projects::Projects()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.Projects)
}
Projects::Projects(const Projects& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      projects_(from.projects_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.Projects)
}

void Projects::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Projects_flyteidl_2fadmin_2fproject_2eproto.base);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Projects::~Projects() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.Projects)
  SharedDtor();
}

void Projects::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Projects::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Projects& Projects::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Projects_flyteidl_2fadmin_2fproject_2eproto.base);
  return *internal_default_instance();
}


void Projects::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.Projects)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  projects_.Clear();
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Projects::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Projects*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .flyteidl.admin.Project projects = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::flyteidl::admin::Project::_InternalParse;
          object = msg->add_projects();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // string token = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.Projects.token");
        object = msg->mutable_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Projects::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.Projects)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .flyteidl.admin.Project projects = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_projects()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.Projects.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.Projects)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.Projects)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Projects::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.Projects)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .flyteidl.admin.Project projects = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->projects_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->projects(static_cast<int>(i)),
      output);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.Projects.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.Projects)
}

::google::protobuf::uint8* Projects::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.Projects)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .flyteidl.admin.Project projects = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->projects_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->projects(static_cast<int>(i)), target);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.Projects.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.Projects)
  return target;
}

size_t Projects::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.Projects)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .flyteidl.admin.Project projects = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->projects_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->projects(static_cast<int>(i)));
    }
  }

  // string token = 2;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Projects::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.Projects)
  GOOGLE_DCHECK_NE(&from, this);
  const Projects* source =
      ::google::protobuf::DynamicCastToGenerated<Projects>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.Projects)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.Projects)
    MergeFrom(*source);
  }
}

void Projects::MergeFrom(const Projects& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.Projects)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  projects_.MergeFrom(from.projects_);
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
}

void Projects::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.Projects)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Projects::CopyFrom(const Projects& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.Projects)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Projects::IsInitialized() const {
  return true;
}

void Projects::Swap(Projects* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Projects::InternalSwap(Projects* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&projects_)->InternalSwap(CastToBase(&other->projects_));
  token_.Swap(&other->token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata Projects::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fproject_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fproject_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ProjectListRequest::InitAsDefaultInstance() {
  ::flyteidl::admin::_ProjectListRequest_default_instance_._instance.get_mutable()->sort_by_ = const_cast< ::flyteidl::admin::Sort*>(
      ::flyteidl::admin::Sort::internal_default_instance());
}
class ProjectListRequest::HasBitSetters {
 public:
  static const ::flyteidl::admin::Sort& sort_by(const ProjectListRequest* msg);
};

const ::flyteidl::admin::Sort&
ProjectListRequest::HasBitSetters::sort_by(const ProjectListRequest* msg) {
  return *msg->sort_by_;
}
void ProjectListRequest::clear_sort_by() {
  if (GetArenaNoVirtual() == nullptr && sort_by_ != nullptr) {
    delete sort_by_;
  }
  sort_by_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProjectListRequest::kLimitFieldNumber;
const int ProjectListRequest::kTokenFieldNumber;
const int ProjectListRequest::kFiltersFieldNumber;
const int ProjectListRequest::kSortByFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProjectListRequest::ProjectListRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.ProjectListRequest)
}
ProjectListRequest::ProjectListRequest(const ProjectListRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  filters_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filters().size() > 0) {
    filters_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filters_);
  }
  if (from.has_sort_by()) {
    sort_by_ = new ::flyteidl::admin::Sort(*from.sort_by_);
  } else {
    sort_by_ = nullptr;
  }
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.ProjectListRequest)
}

void ProjectListRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ProjectListRequest_flyteidl_2fadmin_2fproject_2eproto.base);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filters_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sort_by_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&sort_by_)) + sizeof(limit_));
}

ProjectListRequest::~ProjectListRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.ProjectListRequest)
  SharedDtor();
}

void ProjectListRequest::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filters_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sort_by_;
}

void ProjectListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProjectListRequest& ProjectListRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ProjectListRequest_flyteidl_2fadmin_2fproject_2eproto.base);
  return *internal_default_instance();
}


void ProjectListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.ProjectListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filters_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && sort_by_ != nullptr) {
    delete sort_by_;
  }
  sort_by_ = nullptr;
  limit_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProjectListRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ProjectListRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 limit = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_limit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string token = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.ProjectListRequest.token");
        object = msg->mutable_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string filters = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.ProjectListRequest.filters");
        object = msg->mutable_filters();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .flyteidl.admin.Sort sort_by = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::Sort::_InternalParse;
        object = msg->mutable_sort_by();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProjectListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.ProjectListRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 limit = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.ProjectListRequest.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filters = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filters()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filters().data(), static_cast<int>(this->filters().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.ProjectListRequest.filters"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.Sort sort_by = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sort_by()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.ProjectListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.ProjectListRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProjectListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.ProjectListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 limit = 1;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->limit(), output);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.ProjectListRequest.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  // string filters = 3;
  if (this->filters().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filters().data(), static_cast<int>(this->filters().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.ProjectListRequest.filters");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->filters(), output);
  }

  // .flyteidl.admin.Sort sort_by = 4;
  if (this->has_sort_by()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::sort_by(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.ProjectListRequest)
}

::google::protobuf::uint8* ProjectListRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.ProjectListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 limit = 1;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->limit(), target);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.ProjectListRequest.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // string filters = 3;
  if (this->filters().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filters().data(), static_cast<int>(this->filters().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.ProjectListRequest.filters");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->filters(), target);
  }

  // .flyteidl.admin.Sort sort_by = 4;
  if (this->has_sort_by()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::sort_by(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.ProjectListRequest)
  return target;
}

size_t ProjectListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.ProjectListRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 2;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // string filters = 3;
  if (this->filters().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filters());
  }

  // .flyteidl.admin.Sort sort_by = 4;
  if (this->has_sort_by()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sort_by_);
  }

  // uint32 limit = 1;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->limit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProjectListRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.ProjectListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ProjectListRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ProjectListRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.ProjectListRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.ProjectListRequest)
    MergeFrom(*source);
  }
}

void ProjectListRequest::MergeFrom(const ProjectListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.ProjectListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.filters().size() > 0) {

    filters_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filters_);
  }
  if (from.has_sort_by()) {
    mutable_sort_by()->::flyteidl::admin::Sort::MergeFrom(from.sort_by());
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
}

void ProjectListRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.ProjectListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProjectListRequest::CopyFrom(const ProjectListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.ProjectListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjectListRequest::IsInitialized() const {
  return true;
}

void ProjectListRequest::Swap(ProjectListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProjectListRequest::InternalSwap(ProjectListRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filters_.Swap(&other->filters_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sort_by_, other->sort_by_);
  swap(limit_, other->limit_);
}

::google::protobuf::Metadata ProjectListRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fproject_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fproject_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ProjectRegisterRequest::InitAsDefaultInstance() {
  ::flyteidl::admin::_ProjectRegisterRequest_default_instance_._instance.get_mutable()->project_ = const_cast< ::flyteidl::admin::Project*>(
      ::flyteidl::admin::Project::internal_default_instance());
}
class ProjectRegisterRequest::HasBitSetters {
 public:
  static const ::flyteidl::admin::Project& project(const ProjectRegisterRequest* msg);
};

const ::flyteidl::admin::Project&
ProjectRegisterRequest::HasBitSetters::project(const ProjectRegisterRequest* msg) {
  return *msg->project_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProjectRegisterRequest::kProjectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProjectRegisterRequest::ProjectRegisterRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.ProjectRegisterRequest)
}
ProjectRegisterRequest::ProjectRegisterRequest(const ProjectRegisterRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_project()) {
    project_ = new ::flyteidl::admin::Project(*from.project_);
  } else {
    project_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.ProjectRegisterRequest)
}

void ProjectRegisterRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ProjectRegisterRequest_flyteidl_2fadmin_2fproject_2eproto.base);
  project_ = nullptr;
}

ProjectRegisterRequest::~ProjectRegisterRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.ProjectRegisterRequest)
  SharedDtor();
}

void ProjectRegisterRequest::SharedDtor() {
  if (this != internal_default_instance()) delete project_;
}

void ProjectRegisterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProjectRegisterRequest& ProjectRegisterRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ProjectRegisterRequest_flyteidl_2fadmin_2fproject_2eproto.base);
  return *internal_default_instance();
}


void ProjectRegisterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.ProjectRegisterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && project_ != nullptr) {
    delete project_;
  }
  project_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProjectRegisterRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ProjectRegisterRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.admin.Project project = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::Project::_InternalParse;
        object = msg->mutable_project();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProjectRegisterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.ProjectRegisterRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.admin.Project project = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_project()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.ProjectRegisterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.ProjectRegisterRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProjectRegisterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.ProjectRegisterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.admin.Project project = 1;
  if (this->has_project()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::project(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.ProjectRegisterRequest)
}

::google::protobuf::uint8* ProjectRegisterRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.ProjectRegisterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.admin.Project project = 1;
  if (this->has_project()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::project(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.ProjectRegisterRequest)
  return target;
}

size_t ProjectRegisterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.ProjectRegisterRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.admin.Project project = 1;
  if (this->has_project()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *project_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProjectRegisterRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.ProjectRegisterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ProjectRegisterRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ProjectRegisterRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.ProjectRegisterRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.ProjectRegisterRequest)
    MergeFrom(*source);
  }
}

void ProjectRegisterRequest::MergeFrom(const ProjectRegisterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.ProjectRegisterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_project()) {
    mutable_project()->::flyteidl::admin::Project::MergeFrom(from.project());
  }
}

void ProjectRegisterRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.ProjectRegisterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProjectRegisterRequest::CopyFrom(const ProjectRegisterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.ProjectRegisterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjectRegisterRequest::IsInitialized() const {
  return true;
}

void ProjectRegisterRequest::Swap(ProjectRegisterRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProjectRegisterRequest::InternalSwap(ProjectRegisterRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(project_, other->project_);
}

::google::protobuf::Metadata ProjectRegisterRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fproject_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fproject_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ProjectRegisterResponse::InitAsDefaultInstance() {
}
class ProjectRegisterResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProjectRegisterResponse::ProjectRegisterResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.ProjectRegisterResponse)
}
ProjectRegisterResponse::ProjectRegisterResponse(const ProjectRegisterResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.ProjectRegisterResponse)
}

void ProjectRegisterResponse::SharedCtor() {
}

ProjectRegisterResponse::~ProjectRegisterResponse() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.ProjectRegisterResponse)
  SharedDtor();
}

void ProjectRegisterResponse::SharedDtor() {
}

void ProjectRegisterResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProjectRegisterResponse& ProjectRegisterResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ProjectRegisterResponse_flyteidl_2fadmin_2fproject_2eproto.base);
  return *internal_default_instance();
}


void ProjectRegisterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.ProjectRegisterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProjectRegisterResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ProjectRegisterResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProjectRegisterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.ProjectRegisterResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.ProjectRegisterResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.ProjectRegisterResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProjectRegisterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.ProjectRegisterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.ProjectRegisterResponse)
}

::google::protobuf::uint8* ProjectRegisterResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.ProjectRegisterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.ProjectRegisterResponse)
  return target;
}

size_t ProjectRegisterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.ProjectRegisterResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProjectRegisterResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.ProjectRegisterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ProjectRegisterResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ProjectRegisterResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.ProjectRegisterResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.ProjectRegisterResponse)
    MergeFrom(*source);
  }
}

void ProjectRegisterResponse::MergeFrom(const ProjectRegisterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.ProjectRegisterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ProjectRegisterResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.ProjectRegisterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProjectRegisterResponse::CopyFrom(const ProjectRegisterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.ProjectRegisterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjectRegisterResponse::IsInitialized() const {
  return true;
}

void ProjectRegisterResponse::Swap(ProjectRegisterResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProjectRegisterResponse::InternalSwap(ProjectRegisterResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ProjectRegisterResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fproject_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fproject_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ProjectUpdateResponse::InitAsDefaultInstance() {
}
class ProjectUpdateResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProjectUpdateResponse::ProjectUpdateResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.ProjectUpdateResponse)
}
ProjectUpdateResponse::ProjectUpdateResponse(const ProjectUpdateResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.ProjectUpdateResponse)
}

void ProjectUpdateResponse::SharedCtor() {
}

ProjectUpdateResponse::~ProjectUpdateResponse() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.ProjectUpdateResponse)
  SharedDtor();
}

void ProjectUpdateResponse::SharedDtor() {
}

void ProjectUpdateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProjectUpdateResponse& ProjectUpdateResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ProjectUpdateResponse_flyteidl_2fadmin_2fproject_2eproto.base);
  return *internal_default_instance();
}


void ProjectUpdateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.ProjectUpdateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProjectUpdateResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ProjectUpdateResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProjectUpdateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.ProjectUpdateResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.ProjectUpdateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.ProjectUpdateResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProjectUpdateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.ProjectUpdateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.ProjectUpdateResponse)
}

::google::protobuf::uint8* ProjectUpdateResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.ProjectUpdateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.ProjectUpdateResponse)
  return target;
}

size_t ProjectUpdateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.ProjectUpdateResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProjectUpdateResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.ProjectUpdateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ProjectUpdateResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ProjectUpdateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.ProjectUpdateResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.ProjectUpdateResponse)
    MergeFrom(*source);
  }
}

void ProjectUpdateResponse::MergeFrom(const ProjectUpdateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.ProjectUpdateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ProjectUpdateResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.ProjectUpdateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProjectUpdateResponse::CopyFrom(const ProjectUpdateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.ProjectUpdateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjectUpdateResponse::IsInitialized() const {
  return true;
}

void ProjectUpdateResponse::Swap(ProjectUpdateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProjectUpdateResponse::InternalSwap(ProjectUpdateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ProjectUpdateResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fproject_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fproject_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace admin
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::flyteidl::admin::Domain* Arena::CreateMaybeMessage< ::flyteidl::admin::Domain >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::Domain >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::Project* Arena::CreateMaybeMessage< ::flyteidl::admin::Project >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::Project >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::Projects* Arena::CreateMaybeMessage< ::flyteidl::admin::Projects >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::Projects >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::ProjectListRequest* Arena::CreateMaybeMessage< ::flyteidl::admin::ProjectListRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::ProjectListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::ProjectRegisterRequest* Arena::CreateMaybeMessage< ::flyteidl::admin::ProjectRegisterRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::ProjectRegisterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::ProjectRegisterResponse* Arena::CreateMaybeMessage< ::flyteidl::admin::ProjectRegisterResponse >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::ProjectRegisterResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::ProjectUpdateResponse* Arena::CreateMaybeMessage< ::flyteidl::admin::ProjectUpdateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::ProjectUpdateResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
