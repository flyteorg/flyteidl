# coding: utf-8

"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from flyteadmin.models.core_cluster_spec import CoreClusterSpec  # noqa: F401,E501
from flyteadmin.models.ray_cluster_environment import RayClusterEnvironment  # noqa: F401,E501


class CoreRayCluster(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'namespace': 'str',
        'user': 'str',
        'version': 'str',
        'environment': 'RayClusterEnvironment',
        'cluster_spec': 'CoreClusterSpec',
        'created_at': 'datetime',
        'deleted_at': 'datetime',
        'cluster_state': 'str'
    }

    attribute_map = {
        'name': 'name',
        'namespace': 'namespace',
        'user': 'user',
        'version': 'version',
        'environment': 'environment',
        'cluster_spec': 'cluster_spec',
        'created_at': 'created_at',
        'deleted_at': 'deleted_at',
        'cluster_state': 'cluster_state'
    }

    def __init__(self, name=None, namespace=None, user=None, version=None, environment=None, cluster_spec=None, created_at=None, deleted_at=None, cluster_state=None):  # noqa: E501
        """CoreRayCluster - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._namespace = None
        self._user = None
        self._version = None
        self._environment = None
        self._cluster_spec = None
        self._created_at = None
        self._deleted_at = None
        self._cluster_state = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if namespace is not None:
            self.namespace = namespace
        if user is not None:
            self.user = user
        if version is not None:
            self.version = version
        if environment is not None:
            self.environment = environment
        if cluster_spec is not None:
            self.cluster_spec = cluster_spec
        if created_at is not None:
            self.created_at = created_at
        if deleted_at is not None:
            self.deleted_at = deleted_at
        if cluster_state is not None:
            self.cluster_state = cluster_state

    @property
    def name(self):
        """Gets the name of this CoreRayCluster.  # noqa: E501

        Required input field. Unique cluster name provided by user.  # noqa: E501

        :return: The name of this CoreRayCluster.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CoreRayCluster.

        Required input field. Unique cluster name provided by user.  # noqa: E501

        :param name: The name of this CoreRayCluster.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def namespace(self):
        """Gets the namespace of this CoreRayCluster.  # noqa: E501


        :return: The namespace of this CoreRayCluster.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this CoreRayCluster.


        :param namespace: The namespace of this CoreRayCluster.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def user(self):
        """Gets the user of this CoreRayCluster.  # noqa: E501

        Required field. This field indicates the user who owns the cluster.  # noqa: E501

        :return: The user of this CoreRayCluster.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this CoreRayCluster.

        Required field. This field indicates the user who owns the cluster.  # noqa: E501

        :param user: The user of this CoreRayCluster.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def version(self):
        """Gets the version of this CoreRayCluster.  # noqa: E501


        :return: The version of this CoreRayCluster.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this CoreRayCluster.


        :param version: The version of this CoreRayCluster.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def environment(self):
        """Gets the environment of this CoreRayCluster.  # noqa: E501


        :return: The environment of this CoreRayCluster.  # noqa: E501
        :rtype: RayClusterEnvironment
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this CoreRayCluster.


        :param environment: The environment of this CoreRayCluster.  # noqa: E501
        :type: RayClusterEnvironment
        """

        self._environment = environment

    @property
    def cluster_spec(self):
        """Gets the cluster_spec of this CoreRayCluster.  # noqa: E501


        :return: The cluster_spec of this CoreRayCluster.  # noqa: E501
        :rtype: CoreClusterSpec
        """
        return self._cluster_spec

    @cluster_spec.setter
    def cluster_spec(self, cluster_spec):
        """Sets the cluster_spec of this CoreRayCluster.


        :param cluster_spec: The cluster_spec of this CoreRayCluster.  # noqa: E501
        :type: CoreClusterSpec
        """

        self._cluster_spec = cluster_spec

    @property
    def created_at(self):
        """Gets the created_at of this CoreRayCluster.  # noqa: E501

        Output. The time that the cluster created.  # noqa: E501

        :return: The created_at of this CoreRayCluster.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CoreRayCluster.

        Output. The time that the cluster created.  # noqa: E501

        :param created_at: The created_at of this CoreRayCluster.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def deleted_at(self):
        """Gets the deleted_at of this CoreRayCluster.  # noqa: E501

        Output. The time that the cluster deleted.  # noqa: E501

        :return: The deleted_at of this CoreRayCluster.  # noqa: E501
        :rtype: datetime
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """Sets the deleted_at of this CoreRayCluster.

        Output. The time that the cluster deleted.  # noqa: E501

        :param deleted_at: The deleted_at of this CoreRayCluster.  # noqa: E501
        :type: datetime
        """

        self._deleted_at = deleted_at

    @property
    def cluster_state(self):
        """Gets the cluster_state of this CoreRayCluster.  # noqa: E501


        :return: The cluster_state of this CoreRayCluster.  # noqa: E501
        :rtype: str
        """
        return self._cluster_state

    @cluster_state.setter
    def cluster_state(self, cluster_state):
        """Sets the cluster_state of this CoreRayCluster.


        :param cluster_state: The cluster_state of this CoreRayCluster.  # noqa: E501
        :type: str
        """

        self._cluster_state = cluster_state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CoreRayCluster, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CoreRayCluster):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
