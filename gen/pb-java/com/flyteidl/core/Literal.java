// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/literals.proto

package com.flyteidl.core;

/**
 * <pre>
 * A simple value. This supports any level of nesting (e.g. array of array of array of Blobs) as well as simple primitives.
 * </pre>
 *
 * Protobuf type {@code flyteidl.core.Literal}
 */
public final class Literal extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:flyteidl.core.Literal)
    LiteralOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Literal.newBuilder() to construct.
  private Literal(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Literal() {
    hash_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Literal();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private Literal(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            com.flyteidl.core.Scalar.Builder subBuilder = null;
            if (valueCase_ == 1) {
              subBuilder = ((com.flyteidl.core.Scalar) value_).toBuilder();
            }
            value_ =
                input.readMessage(com.flyteidl.core.Scalar.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.flyteidl.core.Scalar) value_);
              value_ = subBuilder.buildPartial();
            }
            valueCase_ = 1;
            break;
          }
          case 18: {
            com.flyteidl.core.LiteralCollection.Builder subBuilder = null;
            if (valueCase_ == 2) {
              subBuilder = ((com.flyteidl.core.LiteralCollection) value_).toBuilder();
            }
            value_ =
                input.readMessage(com.flyteidl.core.LiteralCollection.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.flyteidl.core.LiteralCollection) value_);
              value_ = subBuilder.buildPartial();
            }
            valueCase_ = 2;
            break;
          }
          case 26: {
            com.flyteidl.core.LiteralMap.Builder subBuilder = null;
            if (valueCase_ == 3) {
              subBuilder = ((com.flyteidl.core.LiteralMap) value_).toBuilder();
            }
            value_ =
                input.readMessage(com.flyteidl.core.LiteralMap.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.flyteidl.core.LiteralMap) value_);
              value_ = subBuilder.buildPartial();
            }
            valueCase_ = 3;
            break;
          }
          case 34: {
            java.lang.String s = input.readStringRequireUtf8();

            hash_ = s;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.flyteidl.core.LiteralsProto.internal_static_flyteidl_core_Literal_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.flyteidl.core.LiteralsProto.internal_static_flyteidl_core_Literal_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.flyteidl.core.Literal.class, com.flyteidl.core.Literal.Builder.class);
  }

  private int valueCase_ = 0;
  private java.lang.Object value_;
  public enum ValueCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    SCALAR(1),
    COLLECTION(2),
    MAP(3),
    VALUE_NOT_SET(0);
    private final int value;
    private ValueCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ValueCase valueOf(int value) {
      return forNumber(value);
    }

    public static ValueCase forNumber(int value) {
      switch (value) {
        case 1: return SCALAR;
        case 2: return COLLECTION;
        case 3: return MAP;
        case 0: return VALUE_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public ValueCase
  getValueCase() {
    return ValueCase.forNumber(
        valueCase_);
  }

  public static final int SCALAR_FIELD_NUMBER = 1;
  /**
   * <pre>
   * A simple value.
   * </pre>
   *
   * <code>.flyteidl.core.Scalar scalar = 1 [json_name = "scalar"];</code>
   * @return Whether the scalar field is set.
   */
  @java.lang.Override
  public boolean hasScalar() {
    return valueCase_ == 1;
  }
  /**
   * <pre>
   * A simple value.
   * </pre>
   *
   * <code>.flyteidl.core.Scalar scalar = 1 [json_name = "scalar"];</code>
   * @return The scalar.
   */
  @java.lang.Override
  public com.flyteidl.core.Scalar getScalar() {
    if (valueCase_ == 1) {
       return (com.flyteidl.core.Scalar) value_;
    }
    return com.flyteidl.core.Scalar.getDefaultInstance();
  }
  /**
   * <pre>
   * A simple value.
   * </pre>
   *
   * <code>.flyteidl.core.Scalar scalar = 1 [json_name = "scalar"];</code>
   */
  @java.lang.Override
  public com.flyteidl.core.ScalarOrBuilder getScalarOrBuilder() {
    if (valueCase_ == 1) {
       return (com.flyteidl.core.Scalar) value_;
    }
    return com.flyteidl.core.Scalar.getDefaultInstance();
  }

  public static final int COLLECTION_FIELD_NUMBER = 2;
  /**
   * <pre>
   * A collection of literals to allow nesting.
   * </pre>
   *
   * <code>.flyteidl.core.LiteralCollection collection = 2 [json_name = "collection"];</code>
   * @return Whether the collection field is set.
   */
  @java.lang.Override
  public boolean hasCollection() {
    return valueCase_ == 2;
  }
  /**
   * <pre>
   * A collection of literals to allow nesting.
   * </pre>
   *
   * <code>.flyteidl.core.LiteralCollection collection = 2 [json_name = "collection"];</code>
   * @return The collection.
   */
  @java.lang.Override
  public com.flyteidl.core.LiteralCollection getCollection() {
    if (valueCase_ == 2) {
       return (com.flyteidl.core.LiteralCollection) value_;
    }
    return com.flyteidl.core.LiteralCollection.getDefaultInstance();
  }
  /**
   * <pre>
   * A collection of literals to allow nesting.
   * </pre>
   *
   * <code>.flyteidl.core.LiteralCollection collection = 2 [json_name = "collection"];</code>
   */
  @java.lang.Override
  public com.flyteidl.core.LiteralCollectionOrBuilder getCollectionOrBuilder() {
    if (valueCase_ == 2) {
       return (com.flyteidl.core.LiteralCollection) value_;
    }
    return com.flyteidl.core.LiteralCollection.getDefaultInstance();
  }

  public static final int MAP_FIELD_NUMBER = 3;
  /**
   * <pre>
   * A map of strings to literals.
   * </pre>
   *
   * <code>.flyteidl.core.LiteralMap map = 3 [json_name = "map"];</code>
   * @return Whether the map field is set.
   */
  @java.lang.Override
  public boolean hasMap() {
    return valueCase_ == 3;
  }
  /**
   * <pre>
   * A map of strings to literals.
   * </pre>
   *
   * <code>.flyteidl.core.LiteralMap map = 3 [json_name = "map"];</code>
   * @return The map.
   */
  @java.lang.Override
  public com.flyteidl.core.LiteralMap getMap() {
    if (valueCase_ == 3) {
       return (com.flyteidl.core.LiteralMap) value_;
    }
    return com.flyteidl.core.LiteralMap.getDefaultInstance();
  }
  /**
   * <pre>
   * A map of strings to literals.
   * </pre>
   *
   * <code>.flyteidl.core.LiteralMap map = 3 [json_name = "map"];</code>
   */
  @java.lang.Override
  public com.flyteidl.core.LiteralMapOrBuilder getMapOrBuilder() {
    if (valueCase_ == 3) {
       return (com.flyteidl.core.LiteralMap) value_;
    }
    return com.flyteidl.core.LiteralMap.getDefaultInstance();
  }

  public static final int HASH_FIELD_NUMBER = 4;
  private volatile java.lang.Object hash_;
  /**
   * <pre>
   * A hash representing this literal.
   * This is used for caching purposes. For more details refer to RFC 1893
   * (https://github.com/flyteorg/flyte/blob/master/rfc/system/1893-caching-of-offloaded-objects.md)
   * </pre>
   *
   * <code>string hash = 4 [json_name = "hash"];</code>
   * @return The hash.
   */
  @java.lang.Override
  public java.lang.String getHash() {
    java.lang.Object ref = hash_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      hash_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * A hash representing this literal.
   * This is used for caching purposes. For more details refer to RFC 1893
   * (https://github.com/flyteorg/flyte/blob/master/rfc/system/1893-caching-of-offloaded-objects.md)
   * </pre>
   *
   * <code>string hash = 4 [json_name = "hash"];</code>
   * @return The bytes for hash.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getHashBytes() {
    java.lang.Object ref = hash_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      hash_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (valueCase_ == 1) {
      output.writeMessage(1, (com.flyteidl.core.Scalar) value_);
    }
    if (valueCase_ == 2) {
      output.writeMessage(2, (com.flyteidl.core.LiteralCollection) value_);
    }
    if (valueCase_ == 3) {
      output.writeMessage(3, (com.flyteidl.core.LiteralMap) value_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(hash_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, hash_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (valueCase_ == 1) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, (com.flyteidl.core.Scalar) value_);
    }
    if (valueCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, (com.flyteidl.core.LiteralCollection) value_);
    }
    if (valueCase_ == 3) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, (com.flyteidl.core.LiteralMap) value_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(hash_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, hash_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.flyteidl.core.Literal)) {
      return super.equals(obj);
    }
    com.flyteidl.core.Literal other = (com.flyteidl.core.Literal) obj;

    if (!getHash()
        .equals(other.getHash())) return false;
    if (!getValueCase().equals(other.getValueCase())) return false;
    switch (valueCase_) {
      case 1:
        if (!getScalar()
            .equals(other.getScalar())) return false;
        break;
      case 2:
        if (!getCollection()
            .equals(other.getCollection())) return false;
        break;
      case 3:
        if (!getMap()
            .equals(other.getMap())) return false;
        break;
      case 0:
      default:
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + HASH_FIELD_NUMBER;
    hash = (53 * hash) + getHash().hashCode();
    switch (valueCase_) {
      case 1:
        hash = (37 * hash) + SCALAR_FIELD_NUMBER;
        hash = (53 * hash) + getScalar().hashCode();
        break;
      case 2:
        hash = (37 * hash) + COLLECTION_FIELD_NUMBER;
        hash = (53 * hash) + getCollection().hashCode();
        break;
      case 3:
        hash = (37 * hash) + MAP_FIELD_NUMBER;
        hash = (53 * hash) + getMap().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.flyteidl.core.Literal parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.flyteidl.core.Literal parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.flyteidl.core.Literal parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.flyteidl.core.Literal parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.flyteidl.core.Literal parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.flyteidl.core.Literal parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.flyteidl.core.Literal parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.flyteidl.core.Literal parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.flyteidl.core.Literal parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.flyteidl.core.Literal parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.flyteidl.core.Literal parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.flyteidl.core.Literal parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.flyteidl.core.Literal prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * A simple value. This supports any level of nesting (e.g. array of array of array of Blobs) as well as simple primitives.
   * </pre>
   *
   * Protobuf type {@code flyteidl.core.Literal}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:flyteidl.core.Literal)
      com.flyteidl.core.LiteralOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.flyteidl.core.LiteralsProto.internal_static_flyteidl_core_Literal_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.flyteidl.core.LiteralsProto.internal_static_flyteidl_core_Literal_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.flyteidl.core.Literal.class, com.flyteidl.core.Literal.Builder.class);
    }

    // Construct using com.flyteidl.core.Literal.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      hash_ = "";

      valueCase_ = 0;
      value_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.flyteidl.core.LiteralsProto.internal_static_flyteidl_core_Literal_descriptor;
    }

    @java.lang.Override
    public com.flyteidl.core.Literal getDefaultInstanceForType() {
      return com.flyteidl.core.Literal.getDefaultInstance();
    }

    @java.lang.Override
    public com.flyteidl.core.Literal build() {
      com.flyteidl.core.Literal result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.flyteidl.core.Literal buildPartial() {
      com.flyteidl.core.Literal result = new com.flyteidl.core.Literal(this);
      if (valueCase_ == 1) {
        if (scalarBuilder_ == null) {
          result.value_ = value_;
        } else {
          result.value_ = scalarBuilder_.build();
        }
      }
      if (valueCase_ == 2) {
        if (collectionBuilder_ == null) {
          result.value_ = value_;
        } else {
          result.value_ = collectionBuilder_.build();
        }
      }
      if (valueCase_ == 3) {
        if (mapBuilder_ == null) {
          result.value_ = value_;
        } else {
          result.value_ = mapBuilder_.build();
        }
      }
      result.hash_ = hash_;
      result.valueCase_ = valueCase_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.flyteidl.core.Literal) {
        return mergeFrom((com.flyteidl.core.Literal)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.flyteidl.core.Literal other) {
      if (other == com.flyteidl.core.Literal.getDefaultInstance()) return this;
      if (!other.getHash().isEmpty()) {
        hash_ = other.hash_;
        onChanged();
      }
      switch (other.getValueCase()) {
        case SCALAR: {
          mergeScalar(other.getScalar());
          break;
        }
        case COLLECTION: {
          mergeCollection(other.getCollection());
          break;
        }
        case MAP: {
          mergeMap(other.getMap());
          break;
        }
        case VALUE_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.flyteidl.core.Literal parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.flyteidl.core.Literal) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int valueCase_ = 0;
    private java.lang.Object value_;
    public ValueCase
        getValueCase() {
      return ValueCase.forNumber(
          valueCase_);
    }

    public Builder clearValue() {
      valueCase_ = 0;
      value_ = null;
      onChanged();
      return this;
    }


    private com.google.protobuf.SingleFieldBuilderV3<
        com.flyteidl.core.Scalar, com.flyteidl.core.Scalar.Builder, com.flyteidl.core.ScalarOrBuilder> scalarBuilder_;
    /**
     * <pre>
     * A simple value.
     * </pre>
     *
     * <code>.flyteidl.core.Scalar scalar = 1 [json_name = "scalar"];</code>
     * @return Whether the scalar field is set.
     */
    @java.lang.Override
    public boolean hasScalar() {
      return valueCase_ == 1;
    }
    /**
     * <pre>
     * A simple value.
     * </pre>
     *
     * <code>.flyteidl.core.Scalar scalar = 1 [json_name = "scalar"];</code>
     * @return The scalar.
     */
    @java.lang.Override
    public com.flyteidl.core.Scalar getScalar() {
      if (scalarBuilder_ == null) {
        if (valueCase_ == 1) {
          return (com.flyteidl.core.Scalar) value_;
        }
        return com.flyteidl.core.Scalar.getDefaultInstance();
      } else {
        if (valueCase_ == 1) {
          return scalarBuilder_.getMessage();
        }
        return com.flyteidl.core.Scalar.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * A simple value.
     * </pre>
     *
     * <code>.flyteidl.core.Scalar scalar = 1 [json_name = "scalar"];</code>
     */
    public Builder setScalar(com.flyteidl.core.Scalar value) {
      if (scalarBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        value_ = value;
        onChanged();
      } else {
        scalarBuilder_.setMessage(value);
      }
      valueCase_ = 1;
      return this;
    }
    /**
     * <pre>
     * A simple value.
     * </pre>
     *
     * <code>.flyteidl.core.Scalar scalar = 1 [json_name = "scalar"];</code>
     */
    public Builder setScalar(
        com.flyteidl.core.Scalar.Builder builderForValue) {
      if (scalarBuilder_ == null) {
        value_ = builderForValue.build();
        onChanged();
      } else {
        scalarBuilder_.setMessage(builderForValue.build());
      }
      valueCase_ = 1;
      return this;
    }
    /**
     * <pre>
     * A simple value.
     * </pre>
     *
     * <code>.flyteidl.core.Scalar scalar = 1 [json_name = "scalar"];</code>
     */
    public Builder mergeScalar(com.flyteidl.core.Scalar value) {
      if (scalarBuilder_ == null) {
        if (valueCase_ == 1 &&
            value_ != com.flyteidl.core.Scalar.getDefaultInstance()) {
          value_ = com.flyteidl.core.Scalar.newBuilder((com.flyteidl.core.Scalar) value_)
              .mergeFrom(value).buildPartial();
        } else {
          value_ = value;
        }
        onChanged();
      } else {
        if (valueCase_ == 1) {
          scalarBuilder_.mergeFrom(value);
        }
        scalarBuilder_.setMessage(value);
      }
      valueCase_ = 1;
      return this;
    }
    /**
     * <pre>
     * A simple value.
     * </pre>
     *
     * <code>.flyteidl.core.Scalar scalar = 1 [json_name = "scalar"];</code>
     */
    public Builder clearScalar() {
      if (scalarBuilder_ == null) {
        if (valueCase_ == 1) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
      } else {
        if (valueCase_ == 1) {
          valueCase_ = 0;
          value_ = null;
        }
        scalarBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * A simple value.
     * </pre>
     *
     * <code>.flyteidl.core.Scalar scalar = 1 [json_name = "scalar"];</code>
     */
    public com.flyteidl.core.Scalar.Builder getScalarBuilder() {
      return getScalarFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * A simple value.
     * </pre>
     *
     * <code>.flyteidl.core.Scalar scalar = 1 [json_name = "scalar"];</code>
     */
    @java.lang.Override
    public com.flyteidl.core.ScalarOrBuilder getScalarOrBuilder() {
      if ((valueCase_ == 1) && (scalarBuilder_ != null)) {
        return scalarBuilder_.getMessageOrBuilder();
      } else {
        if (valueCase_ == 1) {
          return (com.flyteidl.core.Scalar) value_;
        }
        return com.flyteidl.core.Scalar.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * A simple value.
     * </pre>
     *
     * <code>.flyteidl.core.Scalar scalar = 1 [json_name = "scalar"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.flyteidl.core.Scalar, com.flyteidl.core.Scalar.Builder, com.flyteidl.core.ScalarOrBuilder> 
        getScalarFieldBuilder() {
      if (scalarBuilder_ == null) {
        if (!(valueCase_ == 1)) {
          value_ = com.flyteidl.core.Scalar.getDefaultInstance();
        }
        scalarBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.flyteidl.core.Scalar, com.flyteidl.core.Scalar.Builder, com.flyteidl.core.ScalarOrBuilder>(
                (com.flyteidl.core.Scalar) value_,
                getParentForChildren(),
                isClean());
        value_ = null;
      }
      valueCase_ = 1;
      onChanged();;
      return scalarBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.flyteidl.core.LiteralCollection, com.flyteidl.core.LiteralCollection.Builder, com.flyteidl.core.LiteralCollectionOrBuilder> collectionBuilder_;
    /**
     * <pre>
     * A collection of literals to allow nesting.
     * </pre>
     *
     * <code>.flyteidl.core.LiteralCollection collection = 2 [json_name = "collection"];</code>
     * @return Whether the collection field is set.
     */
    @java.lang.Override
    public boolean hasCollection() {
      return valueCase_ == 2;
    }
    /**
     * <pre>
     * A collection of literals to allow nesting.
     * </pre>
     *
     * <code>.flyteidl.core.LiteralCollection collection = 2 [json_name = "collection"];</code>
     * @return The collection.
     */
    @java.lang.Override
    public com.flyteidl.core.LiteralCollection getCollection() {
      if (collectionBuilder_ == null) {
        if (valueCase_ == 2) {
          return (com.flyteidl.core.LiteralCollection) value_;
        }
        return com.flyteidl.core.LiteralCollection.getDefaultInstance();
      } else {
        if (valueCase_ == 2) {
          return collectionBuilder_.getMessage();
        }
        return com.flyteidl.core.LiteralCollection.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * A collection of literals to allow nesting.
     * </pre>
     *
     * <code>.flyteidl.core.LiteralCollection collection = 2 [json_name = "collection"];</code>
     */
    public Builder setCollection(com.flyteidl.core.LiteralCollection value) {
      if (collectionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        value_ = value;
        onChanged();
      } else {
        collectionBuilder_.setMessage(value);
      }
      valueCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * A collection of literals to allow nesting.
     * </pre>
     *
     * <code>.flyteidl.core.LiteralCollection collection = 2 [json_name = "collection"];</code>
     */
    public Builder setCollection(
        com.flyteidl.core.LiteralCollection.Builder builderForValue) {
      if (collectionBuilder_ == null) {
        value_ = builderForValue.build();
        onChanged();
      } else {
        collectionBuilder_.setMessage(builderForValue.build());
      }
      valueCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * A collection of literals to allow nesting.
     * </pre>
     *
     * <code>.flyteidl.core.LiteralCollection collection = 2 [json_name = "collection"];</code>
     */
    public Builder mergeCollection(com.flyteidl.core.LiteralCollection value) {
      if (collectionBuilder_ == null) {
        if (valueCase_ == 2 &&
            value_ != com.flyteidl.core.LiteralCollection.getDefaultInstance()) {
          value_ = com.flyteidl.core.LiteralCollection.newBuilder((com.flyteidl.core.LiteralCollection) value_)
              .mergeFrom(value).buildPartial();
        } else {
          value_ = value;
        }
        onChanged();
      } else {
        if (valueCase_ == 2) {
          collectionBuilder_.mergeFrom(value);
        }
        collectionBuilder_.setMessage(value);
      }
      valueCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * A collection of literals to allow nesting.
     * </pre>
     *
     * <code>.flyteidl.core.LiteralCollection collection = 2 [json_name = "collection"];</code>
     */
    public Builder clearCollection() {
      if (collectionBuilder_ == null) {
        if (valueCase_ == 2) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
      } else {
        if (valueCase_ == 2) {
          valueCase_ = 0;
          value_ = null;
        }
        collectionBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * A collection of literals to allow nesting.
     * </pre>
     *
     * <code>.flyteidl.core.LiteralCollection collection = 2 [json_name = "collection"];</code>
     */
    public com.flyteidl.core.LiteralCollection.Builder getCollectionBuilder() {
      return getCollectionFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * A collection of literals to allow nesting.
     * </pre>
     *
     * <code>.flyteidl.core.LiteralCollection collection = 2 [json_name = "collection"];</code>
     */
    @java.lang.Override
    public com.flyteidl.core.LiteralCollectionOrBuilder getCollectionOrBuilder() {
      if ((valueCase_ == 2) && (collectionBuilder_ != null)) {
        return collectionBuilder_.getMessageOrBuilder();
      } else {
        if (valueCase_ == 2) {
          return (com.flyteidl.core.LiteralCollection) value_;
        }
        return com.flyteidl.core.LiteralCollection.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * A collection of literals to allow nesting.
     * </pre>
     *
     * <code>.flyteidl.core.LiteralCollection collection = 2 [json_name = "collection"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.flyteidl.core.LiteralCollection, com.flyteidl.core.LiteralCollection.Builder, com.flyteidl.core.LiteralCollectionOrBuilder> 
        getCollectionFieldBuilder() {
      if (collectionBuilder_ == null) {
        if (!(valueCase_ == 2)) {
          value_ = com.flyteidl.core.LiteralCollection.getDefaultInstance();
        }
        collectionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.flyteidl.core.LiteralCollection, com.flyteidl.core.LiteralCollection.Builder, com.flyteidl.core.LiteralCollectionOrBuilder>(
                (com.flyteidl.core.LiteralCollection) value_,
                getParentForChildren(),
                isClean());
        value_ = null;
      }
      valueCase_ = 2;
      onChanged();;
      return collectionBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.flyteidl.core.LiteralMap, com.flyteidl.core.LiteralMap.Builder, com.flyteidl.core.LiteralMapOrBuilder> mapBuilder_;
    /**
     * <pre>
     * A map of strings to literals.
     * </pre>
     *
     * <code>.flyteidl.core.LiteralMap map = 3 [json_name = "map"];</code>
     * @return Whether the map field is set.
     */
    @java.lang.Override
    public boolean hasMap() {
      return valueCase_ == 3;
    }
    /**
     * <pre>
     * A map of strings to literals.
     * </pre>
     *
     * <code>.flyteidl.core.LiteralMap map = 3 [json_name = "map"];</code>
     * @return The map.
     */
    @java.lang.Override
    public com.flyteidl.core.LiteralMap getMap() {
      if (mapBuilder_ == null) {
        if (valueCase_ == 3) {
          return (com.flyteidl.core.LiteralMap) value_;
        }
        return com.flyteidl.core.LiteralMap.getDefaultInstance();
      } else {
        if (valueCase_ == 3) {
          return mapBuilder_.getMessage();
        }
        return com.flyteidl.core.LiteralMap.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * A map of strings to literals.
     * </pre>
     *
     * <code>.flyteidl.core.LiteralMap map = 3 [json_name = "map"];</code>
     */
    public Builder setMap(com.flyteidl.core.LiteralMap value) {
      if (mapBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        value_ = value;
        onChanged();
      } else {
        mapBuilder_.setMessage(value);
      }
      valueCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * A map of strings to literals.
     * </pre>
     *
     * <code>.flyteidl.core.LiteralMap map = 3 [json_name = "map"];</code>
     */
    public Builder setMap(
        com.flyteidl.core.LiteralMap.Builder builderForValue) {
      if (mapBuilder_ == null) {
        value_ = builderForValue.build();
        onChanged();
      } else {
        mapBuilder_.setMessage(builderForValue.build());
      }
      valueCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * A map of strings to literals.
     * </pre>
     *
     * <code>.flyteidl.core.LiteralMap map = 3 [json_name = "map"];</code>
     */
    public Builder mergeMap(com.flyteidl.core.LiteralMap value) {
      if (mapBuilder_ == null) {
        if (valueCase_ == 3 &&
            value_ != com.flyteidl.core.LiteralMap.getDefaultInstance()) {
          value_ = com.flyteidl.core.LiteralMap.newBuilder((com.flyteidl.core.LiteralMap) value_)
              .mergeFrom(value).buildPartial();
        } else {
          value_ = value;
        }
        onChanged();
      } else {
        if (valueCase_ == 3) {
          mapBuilder_.mergeFrom(value);
        }
        mapBuilder_.setMessage(value);
      }
      valueCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * A map of strings to literals.
     * </pre>
     *
     * <code>.flyteidl.core.LiteralMap map = 3 [json_name = "map"];</code>
     */
    public Builder clearMap() {
      if (mapBuilder_ == null) {
        if (valueCase_ == 3) {
          valueCase_ = 0;
          value_ = null;
          onChanged();
        }
      } else {
        if (valueCase_ == 3) {
          valueCase_ = 0;
          value_ = null;
        }
        mapBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * A map of strings to literals.
     * </pre>
     *
     * <code>.flyteidl.core.LiteralMap map = 3 [json_name = "map"];</code>
     */
    public com.flyteidl.core.LiteralMap.Builder getMapBuilder() {
      return getMapFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * A map of strings to literals.
     * </pre>
     *
     * <code>.flyteidl.core.LiteralMap map = 3 [json_name = "map"];</code>
     */
    @java.lang.Override
    public com.flyteidl.core.LiteralMapOrBuilder getMapOrBuilder() {
      if ((valueCase_ == 3) && (mapBuilder_ != null)) {
        return mapBuilder_.getMessageOrBuilder();
      } else {
        if (valueCase_ == 3) {
          return (com.flyteidl.core.LiteralMap) value_;
        }
        return com.flyteidl.core.LiteralMap.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * A map of strings to literals.
     * </pre>
     *
     * <code>.flyteidl.core.LiteralMap map = 3 [json_name = "map"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.flyteidl.core.LiteralMap, com.flyteidl.core.LiteralMap.Builder, com.flyteidl.core.LiteralMapOrBuilder> 
        getMapFieldBuilder() {
      if (mapBuilder_ == null) {
        if (!(valueCase_ == 3)) {
          value_ = com.flyteidl.core.LiteralMap.getDefaultInstance();
        }
        mapBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.flyteidl.core.LiteralMap, com.flyteidl.core.LiteralMap.Builder, com.flyteidl.core.LiteralMapOrBuilder>(
                (com.flyteidl.core.LiteralMap) value_,
                getParentForChildren(),
                isClean());
        value_ = null;
      }
      valueCase_ = 3;
      onChanged();;
      return mapBuilder_;
    }

    private java.lang.Object hash_ = "";
    /**
     * <pre>
     * A hash representing this literal.
     * This is used for caching purposes. For more details refer to RFC 1893
     * (https://github.com/flyteorg/flyte/blob/master/rfc/system/1893-caching-of-offloaded-objects.md)
     * </pre>
     *
     * <code>string hash = 4 [json_name = "hash"];</code>
     * @return The hash.
     */
    public java.lang.String getHash() {
      java.lang.Object ref = hash_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        hash_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * A hash representing this literal.
     * This is used for caching purposes. For more details refer to RFC 1893
     * (https://github.com/flyteorg/flyte/blob/master/rfc/system/1893-caching-of-offloaded-objects.md)
     * </pre>
     *
     * <code>string hash = 4 [json_name = "hash"];</code>
     * @return The bytes for hash.
     */
    public com.google.protobuf.ByteString
        getHashBytes() {
      java.lang.Object ref = hash_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        hash_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * A hash representing this literal.
     * This is used for caching purposes. For more details refer to RFC 1893
     * (https://github.com/flyteorg/flyte/blob/master/rfc/system/1893-caching-of-offloaded-objects.md)
     * </pre>
     *
     * <code>string hash = 4 [json_name = "hash"];</code>
     * @param value The hash to set.
     * @return This builder for chaining.
     */
    public Builder setHash(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      hash_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A hash representing this literal.
     * This is used for caching purposes. For more details refer to RFC 1893
     * (https://github.com/flyteorg/flyte/blob/master/rfc/system/1893-caching-of-offloaded-objects.md)
     * </pre>
     *
     * <code>string hash = 4 [json_name = "hash"];</code>
     * @return This builder for chaining.
     */
    public Builder clearHash() {
      
      hash_ = getDefaultInstance().getHash();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A hash representing this literal.
     * This is used for caching purposes. For more details refer to RFC 1893
     * (https://github.com/flyteorg/flyte/blob/master/rfc/system/1893-caching-of-offloaded-objects.md)
     * </pre>
     *
     * <code>string hash = 4 [json_name = "hash"];</code>
     * @param value The bytes for hash to set.
     * @return This builder for chaining.
     */
    public Builder setHashBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      hash_ = value;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:flyteidl.core.Literal)
  }

  // @@protoc_insertion_point(class_scope:flyteidl.core.Literal)
  private static final com.flyteidl.core.Literal DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.flyteidl.core.Literal();
  }

  public static com.flyteidl.core.Literal getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Literal>
      PARSER = new com.google.protobuf.AbstractParser<Literal>() {
    @java.lang.Override
    public Literal parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new Literal(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Literal> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Literal> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.flyteidl.core.Literal getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

