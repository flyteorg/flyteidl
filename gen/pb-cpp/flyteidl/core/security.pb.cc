// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/security.proto

#include "flyteidl/core/security.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace flyteidl {
namespace core {
constexpr Secret::Secret(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : group_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , group_version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mount_requirement_(0)
{}
struct SecretDefaultTypeInternal {
  constexpr SecretDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SecretDefaultTypeInternal() {}
  union {
    Secret _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SecretDefaultTypeInternal _Secret_default_instance_;
constexpr OAuth2Client::OAuth2Client(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : client_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , client_secret_(nullptr){}
struct OAuth2ClientDefaultTypeInternal {
  constexpr OAuth2ClientDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OAuth2ClientDefaultTypeInternal() {}
  union {
    OAuth2Client _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OAuth2ClientDefaultTypeInternal _OAuth2Client_default_instance_;
constexpr Identity::Identity(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : iam_role_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , k8s_service_account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , oauth2_client_(nullptr){}
struct IdentityDefaultTypeInternal {
  constexpr IdentityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IdentityDefaultTypeInternal() {}
  union {
    Identity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IdentityDefaultTypeInternal _Identity_default_instance_;
constexpr OAuth2TokenRequest::OAuth2TokenRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , idp_discovery_endpoint_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , token_endpoint_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , client_(nullptr)
  , type_(0)
{}
struct OAuth2TokenRequestDefaultTypeInternal {
  constexpr OAuth2TokenRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OAuth2TokenRequestDefaultTypeInternal() {}
  union {
    OAuth2TokenRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OAuth2TokenRequestDefaultTypeInternal _OAuth2TokenRequest_default_instance_;
constexpr SecurityContext::SecurityContext(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : secrets_()
  , tokens_()
  , run_as_(nullptr){}
struct SecurityContextDefaultTypeInternal {
  constexpr SecurityContextDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SecurityContextDefaultTypeInternal() {}
  union {
    SecurityContext _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SecurityContextDefaultTypeInternal _SecurityContext_default_instance_;
}  // namespace core
}  // namespace flyteidl
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_flyteidl_2fcore_2fsecurity_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_flyteidl_2fcore_2fsecurity_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fcore_2fsecurity_2eproto = nullptr;

const uint32_t TableStruct_flyteidl_2fcore_2fsecurity_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Secret, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Secret, group_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Secret, group_version_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Secret, key_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Secret, mount_requirement_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::OAuth2Client, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::OAuth2Client, client_id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::OAuth2Client, client_secret_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Identity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Identity, iam_role_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Identity, k8s_service_account_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::Identity, oauth2_client_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::OAuth2TokenRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::OAuth2TokenRequest, name_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::OAuth2TokenRequest, type_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::OAuth2TokenRequest, client_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::OAuth2TokenRequest, idp_discovery_endpoint_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::OAuth2TokenRequest, token_endpoint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::SecurityContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::SecurityContext, run_as_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::SecurityContext, secrets_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::core::SecurityContext, tokens_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::flyteidl::core::Secret)},
  { 10, -1, -1, sizeof(::flyteidl::core::OAuth2Client)},
  { 18, -1, -1, sizeof(::flyteidl::core::Identity)},
  { 27, -1, -1, sizeof(::flyteidl::core::OAuth2TokenRequest)},
  { 38, -1, -1, sizeof(::flyteidl::core::SecurityContext)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_Secret_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_OAuth2Client_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_Identity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_OAuth2TokenRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::core::_SecurityContext_default_instance_),
};

const char descriptor_table_protodef_flyteidl_2fcore_2fsecurity_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034flyteidl/core/security.proto\022\rflyteidl"
  ".core\"\320\001\n\006Secret\022\024\n\005group\030\001 \001(\tR\005group\022#"
  "\n\rgroup_version\030\002 \001(\tR\014groupVersion\022\020\n\003k"
  "ey\030\003 \001(\tR\003key\022L\n\021mount_requirement\030\004 \001(\016"
  "2\037.flyteidl.core.Secret.MountTypeR\020mount"
  "Requirement\"+\n\tMountType\022\007\n\003ANY\020\000\022\013\n\007ENV"
  "_VAR\020\001\022\010\n\004FILE\020\002\"g\n\014OAuth2Client\022\033\n\tclie"
  "nt_id\030\001 \001(\tR\010clientId\022:\n\rclient_secret\030\002"
  " \001(\0132\025.flyteidl.core.SecretR\014clientSecre"
  "t\"\227\001\n\010Identity\022\031\n\010iam_role\030\001 \001(\tR\007iamRol"
  "e\022.\n\023k8s_service_account\030\002 \001(\tR\021k8sServi"
  "ceAccount\022@\n\roauth2_client\030\003 \001(\0132\033.flyte"
  "idl.core.OAuth2ClientR\014oauth2Client\"\226\002\n\022"
  "OAuth2TokenRequest\022\022\n\004name\030\001 \001(\tR\004name\022:"
  "\n\004type\030\002 \001(\0162&.flyteidl.core.OAuth2Token"
  "Request.TypeR\004type\0223\n\006client\030\003 \001(\0132\033.fly"
  "teidl.core.OAuth2ClientR\006client\0224\n\026idp_d"
  "iscovery_endpoint\030\004 \001(\tR\024idpDiscoveryEnd"
  "point\022%\n\016token_endpoint\030\005 \001(\tR\rtokenEndp"
  "oint\"\036\n\004Type\022\026\n\022CLIENT_CREDENTIALS\020\000\"\255\001\n"
  "\017SecurityContext\022.\n\006run_as\030\001 \001(\0132\027.flyte"
  "idl.core.IdentityR\005runAs\022/\n\007secrets\030\002 \003("
  "\0132\025.flyteidl.core.SecretR\007secrets\0229\n\006tok"
  "ens\030\003 \003(\0132!.flyteidl.core.OAuth2TokenReq"
  "uestR\006tokensB\260\001\n\021com.flyteidl.coreB\rSecu"
  "rityProtoH\002Z4github.com/flyteorg/flyteid"
  "l/gen/pb-go/flyteidl/core\370\001\000\242\002\003FCX\252\002\rFly"
  "teidl.Core\312\002\rFlyteidl\\Core\342\002\031Flyteidl\\Co"
  "re\\GPBMetadata\352\002\016Flyteidl::Coreb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_flyteidl_2fcore_2fsecurity_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fcore_2fsecurity_2eproto = {
  false, false, 1159, descriptor_table_protodef_flyteidl_2fcore_2fsecurity_2eproto, "flyteidl/core/security.proto", 
  &descriptor_table_flyteidl_2fcore_2fsecurity_2eproto_once, nullptr, 0, 5,
  schemas, file_default_instances, TableStruct_flyteidl_2fcore_2fsecurity_2eproto::offsets,
  file_level_metadata_flyteidl_2fcore_2fsecurity_2eproto, file_level_enum_descriptors_flyteidl_2fcore_2fsecurity_2eproto, file_level_service_descriptors_flyteidl_2fcore_2fsecurity_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_flyteidl_2fcore_2fsecurity_2eproto_getter() {
  return &descriptor_table_flyteidl_2fcore_2fsecurity_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_flyteidl_2fcore_2fsecurity_2eproto(&descriptor_table_flyteidl_2fcore_2fsecurity_2eproto);
namespace flyteidl {
namespace core {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Secret_MountType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_flyteidl_2fcore_2fsecurity_2eproto);
  return file_level_enum_descriptors_flyteidl_2fcore_2fsecurity_2eproto[0];
}
bool Secret_MountType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Secret_MountType Secret::ANY;
constexpr Secret_MountType Secret::ENV_VAR;
constexpr Secret_MountType Secret::FILE;
constexpr Secret_MountType Secret::MountType_MIN;
constexpr Secret_MountType Secret::MountType_MAX;
constexpr int Secret::MountType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OAuth2TokenRequest_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_flyteidl_2fcore_2fsecurity_2eproto);
  return file_level_enum_descriptors_flyteidl_2fcore_2fsecurity_2eproto[1];
}
bool OAuth2TokenRequest_Type_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr OAuth2TokenRequest_Type OAuth2TokenRequest::CLIENT_CREDENTIALS;
constexpr OAuth2TokenRequest_Type OAuth2TokenRequest::Type_MIN;
constexpr OAuth2TokenRequest_Type OAuth2TokenRequest::Type_MAX;
constexpr int OAuth2TokenRequest::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Secret::_Internal {
 public:
};

Secret::Secret(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.Secret)
}
Secret::Secret(const Secret& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_group().empty()) {
    group_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_group(), 
      GetArenaForAllocation());
  }
  group_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    group_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_group_version().empty()) {
    group_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_group_version(), 
      GetArenaForAllocation());
  }
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  mount_requirement_ = from.mount_requirement_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.Secret)
}

inline void Secret::SharedCtor() {
group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
group_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  group_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
mount_requirement_ = 0;
}

Secret::~Secret() {
  // @@protoc_insertion_point(destructor:flyteidl.core.Secret)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Secret::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  group_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  group_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Secret::ArenaDtor(void* object) {
  Secret* _this = reinterpret_cast< Secret* >(object);
  (void)_this;
}
void Secret::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Secret::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Secret::InternalSwap(Secret* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata Secret::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2fsecurity_2eproto_getter, &descriptor_table_flyteidl_2fcore_2fsecurity_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2fsecurity_2eproto[0]);
}

// ===================================================================

class OAuth2Client::_Internal {
 public:
  static const ::flyteidl::core::Secret& client_secret(const OAuth2Client* msg);
};

const ::flyteidl::core::Secret&
OAuth2Client::_Internal::client_secret(const OAuth2Client* msg) {
  return *msg->client_secret_;
}
OAuth2Client::OAuth2Client(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.OAuth2Client)
}
OAuth2Client::OAuth2Client(const OAuth2Client& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    client_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_id().empty()) {
    client_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_client_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_client_secret()) {
    client_secret_ = new ::flyteidl::core::Secret(*from.client_secret_);
  } else {
    client_secret_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.OAuth2Client)
}

inline void OAuth2Client::SharedCtor() {
client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  client_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
client_secret_ = nullptr;
}

OAuth2Client::~OAuth2Client() {
  // @@protoc_insertion_point(destructor:flyteidl.core.OAuth2Client)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OAuth2Client::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  client_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete client_secret_;
}

void OAuth2Client::ArenaDtor(void* object) {
  OAuth2Client* _this = reinterpret_cast< OAuth2Client* >(object);
  (void)_this;
}
void OAuth2Client::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OAuth2Client::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OAuth2Client::InternalSwap(OAuth2Client* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata OAuth2Client::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2fsecurity_2eproto_getter, &descriptor_table_flyteidl_2fcore_2fsecurity_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2fsecurity_2eproto[1]);
}

// ===================================================================

class Identity::_Internal {
 public:
  static const ::flyteidl::core::OAuth2Client& oauth2_client(const Identity* msg);
};

const ::flyteidl::core::OAuth2Client&
Identity::_Internal::oauth2_client(const Identity* msg) {
  return *msg->oauth2_client_;
}
Identity::Identity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.Identity)
}
Identity::Identity(const Identity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  iam_role_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    iam_role_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_iam_role().empty()) {
    iam_role_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_iam_role(), 
      GetArenaForAllocation());
  }
  k8s_service_account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    k8s_service_account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_k8s_service_account().empty()) {
    k8s_service_account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_k8s_service_account(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_oauth2_client()) {
    oauth2_client_ = new ::flyteidl::core::OAuth2Client(*from.oauth2_client_);
  } else {
    oauth2_client_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.Identity)
}

inline void Identity::SharedCtor() {
iam_role_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  iam_role_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
k8s_service_account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  k8s_service_account_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
oauth2_client_ = nullptr;
}

Identity::~Identity() {
  // @@protoc_insertion_point(destructor:flyteidl.core.Identity)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Identity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  iam_role_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  k8s_service_account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete oauth2_client_;
}

void Identity::ArenaDtor(void* object) {
  Identity* _this = reinterpret_cast< Identity* >(object);
  (void)_this;
}
void Identity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Identity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Identity::InternalSwap(Identity* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata Identity::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2fsecurity_2eproto_getter, &descriptor_table_flyteidl_2fcore_2fsecurity_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2fsecurity_2eproto[2]);
}

// ===================================================================

class OAuth2TokenRequest::_Internal {
 public:
  static const ::flyteidl::core::OAuth2Client& client(const OAuth2TokenRequest* msg);
};

const ::flyteidl::core::OAuth2Client&
OAuth2TokenRequest::_Internal::client(const OAuth2TokenRequest* msg) {
  return *msg->client_;
}
OAuth2TokenRequest::OAuth2TokenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.OAuth2TokenRequest)
}
OAuth2TokenRequest::OAuth2TokenRequest(const OAuth2TokenRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  idp_discovery_endpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    idp_discovery_endpoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_idp_discovery_endpoint().empty()) {
    idp_discovery_endpoint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_idp_discovery_endpoint(), 
      GetArenaForAllocation());
  }
  token_endpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    token_endpoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token_endpoint().empty()) {
    token_endpoint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token_endpoint(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_client()) {
    client_ = new ::flyteidl::core::OAuth2Client(*from.client_);
  } else {
    client_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.OAuth2TokenRequest)
}

inline void OAuth2TokenRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
idp_discovery_endpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  idp_discovery_endpoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
token_endpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  token_endpoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&client_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&client_)) + sizeof(type_));
}

OAuth2TokenRequest::~OAuth2TokenRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.core.OAuth2TokenRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OAuth2TokenRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  idp_discovery_endpoint_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_endpoint_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete client_;
}

void OAuth2TokenRequest::ArenaDtor(void* object) {
  OAuth2TokenRequest* _this = reinterpret_cast< OAuth2TokenRequest* >(object);
  (void)_this;
}
void OAuth2TokenRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OAuth2TokenRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OAuth2TokenRequest::InternalSwap(OAuth2TokenRequest* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata OAuth2TokenRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2fsecurity_2eproto_getter, &descriptor_table_flyteidl_2fcore_2fsecurity_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2fsecurity_2eproto[3]);
}

// ===================================================================

class SecurityContext::_Internal {
 public:
  static const ::flyteidl::core::Identity& run_as(const SecurityContext* msg);
};

const ::flyteidl::core::Identity&
SecurityContext::_Internal::run_as(const SecurityContext* msg) {
  return *msg->run_as_;
}
SecurityContext::SecurityContext(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  secrets_(arena),
  tokens_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.core.SecurityContext)
}
SecurityContext::SecurityContext(const SecurityContext& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      secrets_(from.secrets_),
      tokens_(from.tokens_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_run_as()) {
    run_as_ = new ::flyteidl::core::Identity(*from.run_as_);
  } else {
    run_as_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.core.SecurityContext)
}

inline void SecurityContext::SharedCtor() {
run_as_ = nullptr;
}

SecurityContext::~SecurityContext() {
  // @@protoc_insertion_point(destructor:flyteidl.core.SecurityContext)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SecurityContext::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete run_as_;
}

void SecurityContext::ArenaDtor(void* object) {
  SecurityContext* _this = reinterpret_cast< SecurityContext* >(object);
  (void)_this;
}
void SecurityContext::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SecurityContext::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SecurityContext::InternalSwap(SecurityContext* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata SecurityContext::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fcore_2fsecurity_2eproto_getter, &descriptor_table_flyteidl_2fcore_2fsecurity_2eproto_once,
      file_level_metadata_flyteidl_2fcore_2fsecurity_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace core
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::flyteidl::core::Secret* Arena::CreateMaybeMessage< ::flyteidl::core::Secret >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::Secret >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::OAuth2Client* Arena::CreateMaybeMessage< ::flyteidl::core::OAuth2Client >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::OAuth2Client >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::Identity* Arena::CreateMaybeMessage< ::flyteidl::core::Identity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::Identity >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::OAuth2TokenRequest* Arena::CreateMaybeMessage< ::flyteidl::core::OAuth2TokenRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::OAuth2TokenRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::core::SecurityContext* Arena::CreateMaybeMessage< ::flyteidl::core::SecurityContext >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::core::SecurityContext >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
