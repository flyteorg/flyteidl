// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/notification.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fadmin_2fnotification_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fadmin_2fnotification_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fnotification_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fadmin_2fnotification_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fadmin_2fnotification_2eproto;
namespace flyteidl {
namespace admin {
class EmailMessage;
struct EmailMessageDefaultTypeInternal;
extern EmailMessageDefaultTypeInternal _EmailMessage_default_instance_;
}  // namespace admin
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> ::flyteidl::admin::EmailMessage* Arena::CreateMaybeMessage<::flyteidl::admin::EmailMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace flyteidl {
namespace admin {

// ===================================================================

class EmailMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.EmailMessage) */ {
 public:
  inline EmailMessage() : EmailMessage(nullptr) {}
  ~EmailMessage() override;
  explicit constexpr EmailMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EmailMessage(const EmailMessage& from);
  EmailMessage(EmailMessage&& from) noexcept
    : EmailMessage() {
    *this = ::std::move(from);
  }

  inline EmailMessage& operator=(const EmailMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmailMessage& operator=(EmailMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EmailMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmailMessage* internal_default_instance() {
    return reinterpret_cast<const EmailMessage*>(
               &_EmailMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EmailMessage& a, EmailMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(EmailMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmailMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EmailMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EmailMessage>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmailMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.EmailMessage";
  }
  protected:
  explicit EmailMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecipientsEmailFieldNumber = 1,
    kSenderEmailFieldNumber = 2,
    kSubjectLineFieldNumber = 3,
    kBodyFieldNumber = 4,
  };
  // repeated string recipients_email = 1 [json_name = "recipientsEmail"];
  int recipients_email_size() const;
  private:
  int _internal_recipients_email_size() const;
  public:
  void clear_recipients_email();
  const std::string& recipients_email(int index) const;
  std::string* mutable_recipients_email(int index);
  void set_recipients_email(int index, const std::string& value);
  void set_recipients_email(int index, std::string&& value);
  void set_recipients_email(int index, const char* value);
  void set_recipients_email(int index, const char* value, size_t size);
  std::string* add_recipients_email();
  void add_recipients_email(const std::string& value);
  void add_recipients_email(std::string&& value);
  void add_recipients_email(const char* value);
  void add_recipients_email(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& recipients_email() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_recipients_email();
  private:
  const std::string& _internal_recipients_email(int index) const;
  std::string* _internal_add_recipients_email();
  public:

  // string sender_email = 2 [json_name = "senderEmail"];
  void clear_sender_email();
  const std::string& sender_email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sender_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sender_email();
  PROTOBUF_NODISCARD std::string* release_sender_email();
  void set_allocated_sender_email(std::string* sender_email);
  private:
  const std::string& _internal_sender_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender_email(const std::string& value);
  std::string* _internal_mutable_sender_email();
  public:

  // string subject_line = 3 [json_name = "subjectLine"];
  void clear_subject_line();
  const std::string& subject_line() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subject_line(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subject_line();
  PROTOBUF_NODISCARD std::string* release_subject_line();
  void set_allocated_subject_line(std::string* subject_line);
  private:
  const std::string& _internal_subject_line() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subject_line(const std::string& value);
  std::string* _internal_mutable_subject_line();
  public:

  // string body = 4 [json_name = "body"];
  void clear_body();
  const std::string& body() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_body(ArgT0&& arg0, ArgT... args);
  std::string* mutable_body();
  PROTOBUF_NODISCARD std::string* release_body();
  void set_allocated_body(std::string* body);
  private:
  const std::string& _internal_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.admin.EmailMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> recipients_email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subject_line_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fnotification_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EmailMessage

// repeated string recipients_email = 1 [json_name = "recipientsEmail"];
inline int EmailMessage::_internal_recipients_email_size() const {
  return recipients_email_.size();
}
inline int EmailMessage::recipients_email_size() const {
  return _internal_recipients_email_size();
}
inline void EmailMessage::clear_recipients_email() {
  recipients_email_.Clear();
}
inline std::string* EmailMessage::add_recipients_email() {
  std::string* _s = _internal_add_recipients_email();
  // @@protoc_insertion_point(field_add_mutable:flyteidl.admin.EmailMessage.recipients_email)
  return _s;
}
inline const std::string& EmailMessage::_internal_recipients_email(int index) const {
  return recipients_email_.Get(index);
}
inline const std::string& EmailMessage::recipients_email(int index) const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.EmailMessage.recipients_email)
  return _internal_recipients_email(index);
}
inline std::string* EmailMessage::mutable_recipients_email(int index) {
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.EmailMessage.recipients_email)
  return recipients_email_.Mutable(index);
}
inline void EmailMessage::set_recipients_email(int index, const std::string& value) {
  recipients_email_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.EmailMessage.recipients_email)
}
inline void EmailMessage::set_recipients_email(int index, std::string&& value) {
  recipients_email_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:flyteidl.admin.EmailMessage.recipients_email)
}
inline void EmailMessage::set_recipients_email(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  recipients_email_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:flyteidl.admin.EmailMessage.recipients_email)
}
inline void EmailMessage::set_recipients_email(int index, const char* value, size_t size) {
  recipients_email_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:flyteidl.admin.EmailMessage.recipients_email)
}
inline std::string* EmailMessage::_internal_add_recipients_email() {
  return recipients_email_.Add();
}
inline void EmailMessage::add_recipients_email(const std::string& value) {
  recipients_email_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:flyteidl.admin.EmailMessage.recipients_email)
}
inline void EmailMessage::add_recipients_email(std::string&& value) {
  recipients_email_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:flyteidl.admin.EmailMessage.recipients_email)
}
inline void EmailMessage::add_recipients_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  recipients_email_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:flyteidl.admin.EmailMessage.recipients_email)
}
inline void EmailMessage::add_recipients_email(const char* value, size_t size) {
  recipients_email_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:flyteidl.admin.EmailMessage.recipients_email)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
EmailMessage::recipients_email() const {
  // @@protoc_insertion_point(field_list:flyteidl.admin.EmailMessage.recipients_email)
  return recipients_email_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
EmailMessage::mutable_recipients_email() {
  // @@protoc_insertion_point(field_mutable_list:flyteidl.admin.EmailMessage.recipients_email)
  return &recipients_email_;
}

// string sender_email = 2 [json_name = "senderEmail"];
inline void EmailMessage::clear_sender_email() {
  sender_email_.ClearToEmpty();
}
inline const std::string& EmailMessage::sender_email() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.EmailMessage.sender_email)
  return _internal_sender_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EmailMessage::set_sender_email(ArgT0&& arg0, ArgT... args) {
 
 sender_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.EmailMessage.sender_email)
}
inline std::string* EmailMessage::mutable_sender_email() {
  std::string* _s = _internal_mutable_sender_email();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.EmailMessage.sender_email)
  return _s;
}
inline const std::string& EmailMessage::_internal_sender_email() const {
  return sender_email_.Get();
}
inline void EmailMessage::_internal_set_sender_email(const std::string& value) {
  
  sender_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EmailMessage::_internal_mutable_sender_email() {
  
  return sender_email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EmailMessage::release_sender_email() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.EmailMessage.sender_email)
  return sender_email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EmailMessage::set_allocated_sender_email(std::string* sender_email) {
  if (sender_email != nullptr) {
    
  } else {
    
  }
  sender_email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender_email,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sender_email_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sender_email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.EmailMessage.sender_email)
}

// string subject_line = 3 [json_name = "subjectLine"];
inline void EmailMessage::clear_subject_line() {
  subject_line_.ClearToEmpty();
}
inline const std::string& EmailMessage::subject_line() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.EmailMessage.subject_line)
  return _internal_subject_line();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EmailMessage::set_subject_line(ArgT0&& arg0, ArgT... args) {
 
 subject_line_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.EmailMessage.subject_line)
}
inline std::string* EmailMessage::mutable_subject_line() {
  std::string* _s = _internal_mutable_subject_line();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.EmailMessage.subject_line)
  return _s;
}
inline const std::string& EmailMessage::_internal_subject_line() const {
  return subject_line_.Get();
}
inline void EmailMessage::_internal_set_subject_line(const std::string& value) {
  
  subject_line_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EmailMessage::_internal_mutable_subject_line() {
  
  return subject_line_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EmailMessage::release_subject_line() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.EmailMessage.subject_line)
  return subject_line_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EmailMessage::set_allocated_subject_line(std::string* subject_line) {
  if (subject_line != nullptr) {
    
  } else {
    
  }
  subject_line_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subject_line,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (subject_line_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    subject_line_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.EmailMessage.subject_line)
}

// string body = 4 [json_name = "body"];
inline void EmailMessage::clear_body() {
  body_.ClearToEmpty();
}
inline const std::string& EmailMessage::body() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.EmailMessage.body)
  return _internal_body();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EmailMessage::set_body(ArgT0&& arg0, ArgT... args) {
 
 body_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.EmailMessage.body)
}
inline std::string* EmailMessage::mutable_body() {
  std::string* _s = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.EmailMessage.body)
  return _s;
}
inline const std::string& EmailMessage::_internal_body() const {
  return body_.Get();
}
inline void EmailMessage::_internal_set_body(const std::string& value) {
  
  body_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EmailMessage::_internal_mutable_body() {
  
  return body_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EmailMessage::release_body() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.EmailMessage.body)
  return body_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EmailMessage::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    
  } else {
    
  }
  body_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), body,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (body_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.EmailMessage.body)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace admin
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fadmin_2fnotification_2eproto
