// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/schedule.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fadmin_2fschedule_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fadmin_2fschedule_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fschedule_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fadmin_2fschedule_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fadmin_2fschedule_2eproto;
namespace flyteidl {
namespace admin {
class CronSchedule;
struct CronScheduleDefaultTypeInternal;
extern CronScheduleDefaultTypeInternal _CronSchedule_default_instance_;
class FixedRate;
struct FixedRateDefaultTypeInternal;
extern FixedRateDefaultTypeInternal _FixedRate_default_instance_;
class Schedule;
struct ScheduleDefaultTypeInternal;
extern ScheduleDefaultTypeInternal _Schedule_default_instance_;
}  // namespace admin
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> ::flyteidl::admin::CronSchedule* Arena::CreateMaybeMessage<::flyteidl::admin::CronSchedule>(Arena*);
template<> ::flyteidl::admin::FixedRate* Arena::CreateMaybeMessage<::flyteidl::admin::FixedRate>(Arena*);
template<> ::flyteidl::admin::Schedule* Arena::CreateMaybeMessage<::flyteidl::admin::Schedule>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace flyteidl {
namespace admin {

enum FixedRateUnit : int {
  MINUTE = 0,
  HOUR = 1,
  DAY = 2,
  FixedRateUnit_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  FixedRateUnit_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool FixedRateUnit_IsValid(int value);
constexpr FixedRateUnit FixedRateUnit_MIN = MINUTE;
constexpr FixedRateUnit FixedRateUnit_MAX = DAY;
constexpr int FixedRateUnit_ARRAYSIZE = FixedRateUnit_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FixedRateUnit_descriptor();
template<typename T>
inline const std::string& FixedRateUnit_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FixedRateUnit>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FixedRateUnit_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FixedRateUnit_descriptor(), enum_t_value);
}
inline bool FixedRateUnit_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FixedRateUnit* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FixedRateUnit>(
    FixedRateUnit_descriptor(), name, value);
}
// ===================================================================

class FixedRate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.FixedRate) */ {
 public:
  inline FixedRate() : FixedRate(nullptr) {}
  ~FixedRate() override;
  explicit constexpr FixedRate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FixedRate(const FixedRate& from);
  FixedRate(FixedRate&& from) noexcept
    : FixedRate() {
    *this = ::std::move(from);
  }

  inline FixedRate& operator=(const FixedRate& from) {
    CopyFrom(from);
    return *this;
  }
  inline FixedRate& operator=(FixedRate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FixedRate& default_instance() {
    return *internal_default_instance();
  }
  static inline const FixedRate* internal_default_instance() {
    return reinterpret_cast<const FixedRate*>(
               &_FixedRate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FixedRate& a, FixedRate& b) {
    a.Swap(&b);
  }
  inline void Swap(FixedRate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FixedRate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FixedRate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FixedRate>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FixedRate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.FixedRate";
  }
  protected:
  explicit FixedRate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kUnitFieldNumber = 2,
  };
  // uint32 value = 1 [json_name = "value"];
  void clear_value();
  uint32_t value() const;
  void set_value(uint32_t value);
  private:
  uint32_t _internal_value() const;
  void _internal_set_value(uint32_t value);
  public:

  // .flyteidl.admin.FixedRateUnit unit = 2 [json_name = "unit"];
  void clear_unit();
  ::flyteidl::admin::FixedRateUnit unit() const;
  void set_unit(::flyteidl::admin::FixedRateUnit value);
  private:
  ::flyteidl::admin::FixedRateUnit _internal_unit() const;
  void _internal_set_unit(::flyteidl::admin::FixedRateUnit value);
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.admin.FixedRate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t value_;
  int unit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fschedule_2eproto;
};
// -------------------------------------------------------------------

class CronSchedule final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.CronSchedule) */ {
 public:
  inline CronSchedule() : CronSchedule(nullptr) {}
  ~CronSchedule() override;
  explicit constexpr CronSchedule(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CronSchedule(const CronSchedule& from);
  CronSchedule(CronSchedule&& from) noexcept
    : CronSchedule() {
    *this = ::std::move(from);
  }

  inline CronSchedule& operator=(const CronSchedule& from) {
    CopyFrom(from);
    return *this;
  }
  inline CronSchedule& operator=(CronSchedule&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CronSchedule& default_instance() {
    return *internal_default_instance();
  }
  static inline const CronSchedule* internal_default_instance() {
    return reinterpret_cast<const CronSchedule*>(
               &_CronSchedule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CronSchedule& a, CronSchedule& b) {
    a.Swap(&b);
  }
  inline void Swap(CronSchedule* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CronSchedule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CronSchedule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CronSchedule>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CronSchedule* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.CronSchedule";
  }
  protected:
  explicit CronSchedule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScheduleFieldNumber = 1,
    kOffsetFieldNumber = 2,
  };
  // string schedule = 1 [json_name = "schedule"];
  void clear_schedule();
  const std::string& schedule() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_schedule(ArgT0&& arg0, ArgT... args);
  std::string* mutable_schedule();
  PROTOBUF_NODISCARD std::string* release_schedule();
  void set_allocated_schedule(std::string* schedule);
  private:
  const std::string& _internal_schedule() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_schedule(const std::string& value);
  std::string* _internal_mutable_schedule();
  public:

  // string offset = 2 [json_name = "offset"];
  void clear_offset();
  const std::string& offset() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_offset(ArgT0&& arg0, ArgT... args);
  std::string* mutable_offset();
  PROTOBUF_NODISCARD std::string* release_offset();
  void set_allocated_offset(std::string* offset);
  private:
  const std::string& _internal_offset() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_offset(const std::string& value);
  std::string* _internal_mutable_offset();
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.admin.CronSchedule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr schedule_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fschedule_2eproto;
};
// -------------------------------------------------------------------

class Schedule final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.Schedule) */ {
 public:
  inline Schedule() : Schedule(nullptr) {}
  ~Schedule() override;
  explicit constexpr Schedule(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Schedule(const Schedule& from);
  Schedule(Schedule&& from) noexcept
    : Schedule() {
    *this = ::std::move(from);
  }

  inline Schedule& operator=(const Schedule& from) {
    CopyFrom(from);
    return *this;
  }
  inline Schedule& operator=(Schedule&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Schedule& default_instance() {
    return *internal_default_instance();
  }
  enum ScheduleExpressionCase {
    kCronExpression = 1,
    kRate = 2,
    kCronSchedule = 4,
    SCHEDULEEXPRESSION_NOT_SET = 0,
  };

  static inline const Schedule* internal_default_instance() {
    return reinterpret_cast<const Schedule*>(
               &_Schedule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Schedule& a, Schedule& b) {
    a.Swap(&b);
  }
  inline void Swap(Schedule* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Schedule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Schedule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Schedule>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Schedule* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.Schedule";
  }
  protected:
  explicit Schedule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKickoffTimeInputArgFieldNumber = 3,
    kCronExpressionFieldNumber = 1,
    kRateFieldNumber = 2,
    kCronScheduleFieldNumber = 4,
  };
  // string kickoff_time_input_arg = 3 [json_name = "kickoffTimeInputArg"];
  void clear_kickoff_time_input_arg();
  const std::string& kickoff_time_input_arg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_kickoff_time_input_arg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_kickoff_time_input_arg();
  PROTOBUF_NODISCARD std::string* release_kickoff_time_input_arg();
  void set_allocated_kickoff_time_input_arg(std::string* kickoff_time_input_arg);
  private:
  const std::string& _internal_kickoff_time_input_arg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_kickoff_time_input_arg(const std::string& value);
  std::string* _internal_mutable_kickoff_time_input_arg();
  public:

  // string cron_expression = 1 [json_name = "cronExpression", deprecated = true];
  PROTOBUF_DEPRECATED bool has_cron_expression() const;
  private:
  bool _internal_has_cron_expression() const;
  public:
  PROTOBUF_DEPRECATED void clear_cron_expression();
  PROTOBUF_DEPRECATED const std::string& cron_expression() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_cron_expression(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_cron_expression();
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED std::string* release_cron_expression();
  PROTOBUF_DEPRECATED void set_allocated_cron_expression(std::string* cron_expression);
  private:
  const std::string& _internal_cron_expression() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cron_expression(const std::string& value);
  std::string* _internal_mutable_cron_expression();
  public:

  // .flyteidl.admin.FixedRate rate = 2 [json_name = "rate"];
  bool has_rate() const;
  private:
  bool _internal_has_rate() const;
  public:
  void clear_rate();
  const ::flyteidl::admin::FixedRate& rate() const;
  PROTOBUF_NODISCARD ::flyteidl::admin::FixedRate* release_rate();
  ::flyteidl::admin::FixedRate* mutable_rate();
  void set_allocated_rate(::flyteidl::admin::FixedRate* rate);
  private:
  const ::flyteidl::admin::FixedRate& _internal_rate() const;
  ::flyteidl::admin::FixedRate* _internal_mutable_rate();
  public:
  void unsafe_arena_set_allocated_rate(
      ::flyteidl::admin::FixedRate* rate);
  ::flyteidl::admin::FixedRate* unsafe_arena_release_rate();

  // .flyteidl.admin.CronSchedule cron_schedule = 4 [json_name = "cronSchedule"];
  bool has_cron_schedule() const;
  private:
  bool _internal_has_cron_schedule() const;
  public:
  void clear_cron_schedule();
  const ::flyteidl::admin::CronSchedule& cron_schedule() const;
  PROTOBUF_NODISCARD ::flyteidl::admin::CronSchedule* release_cron_schedule();
  ::flyteidl::admin::CronSchedule* mutable_cron_schedule();
  void set_allocated_cron_schedule(::flyteidl::admin::CronSchedule* cron_schedule);
  private:
  const ::flyteidl::admin::CronSchedule& _internal_cron_schedule() const;
  ::flyteidl::admin::CronSchedule* _internal_mutable_cron_schedule();
  public:
  void unsafe_arena_set_allocated_cron_schedule(
      ::flyteidl::admin::CronSchedule* cron_schedule);
  ::flyteidl::admin::CronSchedule* unsafe_arena_release_cron_schedule();

  void clear_ScheduleExpression();
  ScheduleExpressionCase ScheduleExpression_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.admin.Schedule)
 private:
  class _Internal;
  void set_has_cron_expression();
  void set_has_rate();
  void set_has_cron_schedule();

  inline bool has_ScheduleExpression() const;
  inline void clear_has_ScheduleExpression();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kickoff_time_input_arg_;
  union ScheduleExpressionUnion {
    constexpr ScheduleExpressionUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cron_expression_;
    ::flyteidl::admin::FixedRate* rate_;
    ::flyteidl::admin::CronSchedule* cron_schedule_;
  } ScheduleExpression_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_flyteidl_2fadmin_2fschedule_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FixedRate

// uint32 value = 1 [json_name = "value"];
inline void FixedRate::clear_value() {
  value_ = 0u;
}
inline uint32_t FixedRate::_internal_value() const {
  return value_;
}
inline uint32_t FixedRate::value() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.FixedRate.value)
  return _internal_value();
}
inline void FixedRate::_internal_set_value(uint32_t value) {
  
  value_ = value;
}
inline void FixedRate::set_value(uint32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.FixedRate.value)
}

// .flyteidl.admin.FixedRateUnit unit = 2 [json_name = "unit"];
inline void FixedRate::clear_unit() {
  unit_ = 0;
}
inline ::flyteidl::admin::FixedRateUnit FixedRate::_internal_unit() const {
  return static_cast< ::flyteidl::admin::FixedRateUnit >(unit_);
}
inline ::flyteidl::admin::FixedRateUnit FixedRate::unit() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.FixedRate.unit)
  return _internal_unit();
}
inline void FixedRate::_internal_set_unit(::flyteidl::admin::FixedRateUnit value) {
  
  unit_ = value;
}
inline void FixedRate::set_unit(::flyteidl::admin::FixedRateUnit value) {
  _internal_set_unit(value);
  // @@protoc_insertion_point(field_set:flyteidl.admin.FixedRate.unit)
}

// -------------------------------------------------------------------

// CronSchedule

// string schedule = 1 [json_name = "schedule"];
inline void CronSchedule::clear_schedule() {
  schedule_.ClearToEmpty();
}
inline const std::string& CronSchedule::schedule() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.CronSchedule.schedule)
  return _internal_schedule();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CronSchedule::set_schedule(ArgT0&& arg0, ArgT... args) {
 
 schedule_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.CronSchedule.schedule)
}
inline std::string* CronSchedule::mutable_schedule() {
  std::string* _s = _internal_mutable_schedule();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.CronSchedule.schedule)
  return _s;
}
inline const std::string& CronSchedule::_internal_schedule() const {
  return schedule_.Get();
}
inline void CronSchedule::_internal_set_schedule(const std::string& value) {
  
  schedule_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CronSchedule::_internal_mutable_schedule() {
  
  return schedule_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CronSchedule::release_schedule() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.CronSchedule.schedule)
  return schedule_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CronSchedule::set_allocated_schedule(std::string* schedule) {
  if (schedule != nullptr) {
    
  } else {
    
  }
  schedule_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), schedule,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (schedule_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    schedule_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.CronSchedule.schedule)
}

// string offset = 2 [json_name = "offset"];
inline void CronSchedule::clear_offset() {
  offset_.ClearToEmpty();
}
inline const std::string& CronSchedule::offset() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.CronSchedule.offset)
  return _internal_offset();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CronSchedule::set_offset(ArgT0&& arg0, ArgT... args) {
 
 offset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.CronSchedule.offset)
}
inline std::string* CronSchedule::mutable_offset() {
  std::string* _s = _internal_mutable_offset();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.CronSchedule.offset)
  return _s;
}
inline const std::string& CronSchedule::_internal_offset() const {
  return offset_.Get();
}
inline void CronSchedule::_internal_set_offset(const std::string& value) {
  
  offset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CronSchedule::_internal_mutable_offset() {
  
  return offset_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CronSchedule::release_offset() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.CronSchedule.offset)
  return offset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CronSchedule::set_allocated_offset(std::string* offset) {
  if (offset != nullptr) {
    
  } else {
    
  }
  offset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), offset,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (offset_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    offset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.CronSchedule.offset)
}

// -------------------------------------------------------------------

// Schedule

// string cron_expression = 1 [json_name = "cronExpression", deprecated = true];
inline bool Schedule::_internal_has_cron_expression() const {
  return ScheduleExpression_case() == kCronExpression;
}
inline bool Schedule::has_cron_expression() const {
  return _internal_has_cron_expression();
}
inline void Schedule::set_has_cron_expression() {
  _oneof_case_[0] = kCronExpression;
}
inline void Schedule::clear_cron_expression() {
  if (_internal_has_cron_expression()) {
    ScheduleExpression_.cron_expression_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_ScheduleExpression();
  }
}
inline const std::string& Schedule::cron_expression() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Schedule.cron_expression)
  return _internal_cron_expression();
}
template <typename ArgT0, typename... ArgT>
inline void Schedule::set_cron_expression(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_cron_expression()) {
    clear_ScheduleExpression();
    set_has_cron_expression();
    ScheduleExpression_.cron_expression_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  ScheduleExpression_.cron_expression_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.Schedule.cron_expression)
}
inline std::string* Schedule::mutable_cron_expression() {
  std::string* _s = _internal_mutable_cron_expression();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Schedule.cron_expression)
  return _s;
}
inline const std::string& Schedule::_internal_cron_expression() const {
  if (_internal_has_cron_expression()) {
    return ScheduleExpression_.cron_expression_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Schedule::_internal_set_cron_expression(const std::string& value) {
  if (!_internal_has_cron_expression()) {
    clear_ScheduleExpression();
    set_has_cron_expression();
    ScheduleExpression_.cron_expression_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  ScheduleExpression_.cron_expression_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Schedule::_internal_mutable_cron_expression() {
  if (!_internal_has_cron_expression()) {
    clear_ScheduleExpression();
    set_has_cron_expression();
    ScheduleExpression_.cron_expression_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return ScheduleExpression_.cron_expression_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Schedule::release_cron_expression() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Schedule.cron_expression)
  if (_internal_has_cron_expression()) {
    clear_has_ScheduleExpression();
    return ScheduleExpression_.cron_expression_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void Schedule::set_allocated_cron_expression(std::string* cron_expression) {
  if (has_ScheduleExpression()) {
    clear_ScheduleExpression();
  }
  if (cron_expression != nullptr) {
    set_has_cron_expression();
    ScheduleExpression_.cron_expression_.UnsafeSetDefault(cron_expression);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(cron_expression);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Schedule.cron_expression)
}

// .flyteidl.admin.FixedRate rate = 2 [json_name = "rate"];
inline bool Schedule::_internal_has_rate() const {
  return ScheduleExpression_case() == kRate;
}
inline bool Schedule::has_rate() const {
  return _internal_has_rate();
}
inline void Schedule::set_has_rate() {
  _oneof_case_[0] = kRate;
}
inline void Schedule::clear_rate() {
  if (_internal_has_rate()) {
    if (GetArenaForAllocation() == nullptr) {
      delete ScheduleExpression_.rate_;
    }
    clear_has_ScheduleExpression();
  }
}
inline ::flyteidl::admin::FixedRate* Schedule::release_rate() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Schedule.rate)
  if (_internal_has_rate()) {
    clear_has_ScheduleExpression();
      ::flyteidl::admin::FixedRate* temp = ScheduleExpression_.rate_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ScheduleExpression_.rate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::admin::FixedRate& Schedule::_internal_rate() const {
  return _internal_has_rate()
      ? *ScheduleExpression_.rate_
      : reinterpret_cast< ::flyteidl::admin::FixedRate&>(::flyteidl::admin::_FixedRate_default_instance_);
}
inline const ::flyteidl::admin::FixedRate& Schedule::rate() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Schedule.rate)
  return _internal_rate();
}
inline ::flyteidl::admin::FixedRate* Schedule::unsafe_arena_release_rate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:flyteidl.admin.Schedule.rate)
  if (_internal_has_rate()) {
    clear_has_ScheduleExpression();
    ::flyteidl::admin::FixedRate* temp = ScheduleExpression_.rate_;
    ScheduleExpression_.rate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Schedule::unsafe_arena_set_allocated_rate(::flyteidl::admin::FixedRate* rate) {
  clear_ScheduleExpression();
  if (rate) {
    set_has_rate();
    ScheduleExpression_.rate_ = rate;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.Schedule.rate)
}
inline ::flyteidl::admin::FixedRate* Schedule::_internal_mutable_rate() {
  if (!_internal_has_rate()) {
    clear_ScheduleExpression();
    set_has_rate();
    ScheduleExpression_.rate_ = CreateMaybeMessage< ::flyteidl::admin::FixedRate >(GetArenaForAllocation());
  }
  return ScheduleExpression_.rate_;
}
inline ::flyteidl::admin::FixedRate* Schedule::mutable_rate() {
  ::flyteidl::admin::FixedRate* _msg = _internal_mutable_rate();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Schedule.rate)
  return _msg;
}

// .flyteidl.admin.CronSchedule cron_schedule = 4 [json_name = "cronSchedule"];
inline bool Schedule::_internal_has_cron_schedule() const {
  return ScheduleExpression_case() == kCronSchedule;
}
inline bool Schedule::has_cron_schedule() const {
  return _internal_has_cron_schedule();
}
inline void Schedule::set_has_cron_schedule() {
  _oneof_case_[0] = kCronSchedule;
}
inline void Schedule::clear_cron_schedule() {
  if (_internal_has_cron_schedule()) {
    if (GetArenaForAllocation() == nullptr) {
      delete ScheduleExpression_.cron_schedule_;
    }
    clear_has_ScheduleExpression();
  }
}
inline ::flyteidl::admin::CronSchedule* Schedule::release_cron_schedule() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Schedule.cron_schedule)
  if (_internal_has_cron_schedule()) {
    clear_has_ScheduleExpression();
      ::flyteidl::admin::CronSchedule* temp = ScheduleExpression_.cron_schedule_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ScheduleExpression_.cron_schedule_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::admin::CronSchedule& Schedule::_internal_cron_schedule() const {
  return _internal_has_cron_schedule()
      ? *ScheduleExpression_.cron_schedule_
      : reinterpret_cast< ::flyteidl::admin::CronSchedule&>(::flyteidl::admin::_CronSchedule_default_instance_);
}
inline const ::flyteidl::admin::CronSchedule& Schedule::cron_schedule() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Schedule.cron_schedule)
  return _internal_cron_schedule();
}
inline ::flyteidl::admin::CronSchedule* Schedule::unsafe_arena_release_cron_schedule() {
  // @@protoc_insertion_point(field_unsafe_arena_release:flyteidl.admin.Schedule.cron_schedule)
  if (_internal_has_cron_schedule()) {
    clear_has_ScheduleExpression();
    ::flyteidl::admin::CronSchedule* temp = ScheduleExpression_.cron_schedule_;
    ScheduleExpression_.cron_schedule_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Schedule::unsafe_arena_set_allocated_cron_schedule(::flyteidl::admin::CronSchedule* cron_schedule) {
  clear_ScheduleExpression();
  if (cron_schedule) {
    set_has_cron_schedule();
    ScheduleExpression_.cron_schedule_ = cron_schedule;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.Schedule.cron_schedule)
}
inline ::flyteidl::admin::CronSchedule* Schedule::_internal_mutable_cron_schedule() {
  if (!_internal_has_cron_schedule()) {
    clear_ScheduleExpression();
    set_has_cron_schedule();
    ScheduleExpression_.cron_schedule_ = CreateMaybeMessage< ::flyteidl::admin::CronSchedule >(GetArenaForAllocation());
  }
  return ScheduleExpression_.cron_schedule_;
}
inline ::flyteidl::admin::CronSchedule* Schedule::mutable_cron_schedule() {
  ::flyteidl::admin::CronSchedule* _msg = _internal_mutable_cron_schedule();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Schedule.cron_schedule)
  return _msg;
}

// string kickoff_time_input_arg = 3 [json_name = "kickoffTimeInputArg"];
inline void Schedule::clear_kickoff_time_input_arg() {
  kickoff_time_input_arg_.ClearToEmpty();
}
inline const std::string& Schedule::kickoff_time_input_arg() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Schedule.kickoff_time_input_arg)
  return _internal_kickoff_time_input_arg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Schedule::set_kickoff_time_input_arg(ArgT0&& arg0, ArgT... args) {
 
 kickoff_time_input_arg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.Schedule.kickoff_time_input_arg)
}
inline std::string* Schedule::mutable_kickoff_time_input_arg() {
  std::string* _s = _internal_mutable_kickoff_time_input_arg();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Schedule.kickoff_time_input_arg)
  return _s;
}
inline const std::string& Schedule::_internal_kickoff_time_input_arg() const {
  return kickoff_time_input_arg_.Get();
}
inline void Schedule::_internal_set_kickoff_time_input_arg(const std::string& value) {
  
  kickoff_time_input_arg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Schedule::_internal_mutable_kickoff_time_input_arg() {
  
  return kickoff_time_input_arg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Schedule::release_kickoff_time_input_arg() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Schedule.kickoff_time_input_arg)
  return kickoff_time_input_arg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Schedule::set_allocated_kickoff_time_input_arg(std::string* kickoff_time_input_arg) {
  if (kickoff_time_input_arg != nullptr) {
    
  } else {
    
  }
  kickoff_time_input_arg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kickoff_time_input_arg,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (kickoff_time_input_arg_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    kickoff_time_input_arg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Schedule.kickoff_time_input_arg)
}

inline bool Schedule::has_ScheduleExpression() const {
  return ScheduleExpression_case() != SCHEDULEEXPRESSION_NOT_SET;
}
inline void Schedule::clear_has_ScheduleExpression() {
  _oneof_case_[0] = SCHEDULEEXPRESSION_NOT_SET;
}
inline Schedule::ScheduleExpressionCase Schedule::ScheduleExpression_case() const {
  return Schedule::ScheduleExpressionCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace admin
}  // namespace flyteidl

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::flyteidl::admin::FixedRateUnit> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flyteidl::admin::FixedRateUnit>() {
  return ::flyteidl::admin::FixedRateUnit_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fadmin_2fschedule_2eproto
