// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/plugins/tensorflow.proto

#include "flyteidl/plugins/tensorflow.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace flyteidl {
namespace plugins {
constexpr DistributedTensorflowTrainingTask::DistributedTensorflowTrainingTask(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : workers_(0)
  , ps_replicas_(0)
  , chief_replicas_(0){}
struct DistributedTensorflowTrainingTaskDefaultTypeInternal {
  constexpr DistributedTensorflowTrainingTaskDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DistributedTensorflowTrainingTaskDefaultTypeInternal() {}
  union {
    DistributedTensorflowTrainingTask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DistributedTensorflowTrainingTaskDefaultTypeInternal _DistributedTensorflowTrainingTask_default_instance_;
}  // namespace plugins
}  // namespace flyteidl
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_flyteidl_2fplugins_2ftensorflow_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_flyteidl_2fplugins_2ftensorflow_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fplugins_2ftensorflow_2eproto = nullptr;

const uint32_t TableStruct_flyteidl_2fplugins_2ftensorflow_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::DistributedTensorflowTrainingTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::DistributedTensorflowTrainingTask, workers_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::DistributedTensorflowTrainingTask, ps_replicas_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::plugins::DistributedTensorflowTrainingTask, chief_replicas_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::flyteidl::plugins::DistributedTensorflowTrainingTask)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::plugins::_DistributedTensorflowTrainingTask_default_instance_),
};

const char descriptor_table_protodef_flyteidl_2fplugins_2ftensorflow_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!flyteidl/plugins/tensorflow.proto\022\020fly"
  "teidl.plugins\"\205\001\n!DistributedTensorflowT"
  "rainingTask\022\030\n\007workers\030\001 \001(\005R\007workers\022\037\n"
  "\013ps_replicas\030\002 \001(\005R\npsReplicas\022%\n\016chief_"
  "replicas\030\003 \001(\005R\rchiefReplicasB\304\001\n\024com.fl"
  "yteidl.pluginsB\017TensorflowProtoH\002Z7githu"
  "b.com/flyteorg/flyteidl/gen/pb-go/flytei"
  "dl/plugins\370\001\000\242\002\003FPX\252\002\020Flyteidl.Plugins\312\002"
  "\020Flyteidl\\Plugins\342\002\034Flyteidl\\Plugins\\GPB"
  "Metadata\352\002\021Flyteidl::Pluginsb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_flyteidl_2fplugins_2ftensorflow_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fplugins_2ftensorflow_2eproto = {
  false, false, 396, descriptor_table_protodef_flyteidl_2fplugins_2ftensorflow_2eproto, "flyteidl/plugins/tensorflow.proto", 
  &descriptor_table_flyteidl_2fplugins_2ftensorflow_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_flyteidl_2fplugins_2ftensorflow_2eproto::offsets,
  file_level_metadata_flyteidl_2fplugins_2ftensorflow_2eproto, file_level_enum_descriptors_flyteidl_2fplugins_2ftensorflow_2eproto, file_level_service_descriptors_flyteidl_2fplugins_2ftensorflow_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_flyteidl_2fplugins_2ftensorflow_2eproto_getter() {
  return &descriptor_table_flyteidl_2fplugins_2ftensorflow_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_flyteidl_2fplugins_2ftensorflow_2eproto(&descriptor_table_flyteidl_2fplugins_2ftensorflow_2eproto);
namespace flyteidl {
namespace plugins {

// ===================================================================

class DistributedTensorflowTrainingTask::_Internal {
 public:
};

DistributedTensorflowTrainingTask::DistributedTensorflowTrainingTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.plugins.DistributedTensorflowTrainingTask)
}
DistributedTensorflowTrainingTask::DistributedTensorflowTrainingTask(const DistributedTensorflowTrainingTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&workers_, &from.workers_,
    static_cast<size_t>(reinterpret_cast<char*>(&chief_replicas_) -
    reinterpret_cast<char*>(&workers_)) + sizeof(chief_replicas_));
  // @@protoc_insertion_point(copy_constructor:flyteidl.plugins.DistributedTensorflowTrainingTask)
}

inline void DistributedTensorflowTrainingTask::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&workers_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&chief_replicas_) -
    reinterpret_cast<char*>(&workers_)) + sizeof(chief_replicas_));
}

DistributedTensorflowTrainingTask::~DistributedTensorflowTrainingTask() {
  // @@protoc_insertion_point(destructor:flyteidl.plugins.DistributedTensorflowTrainingTask)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DistributedTensorflowTrainingTask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DistributedTensorflowTrainingTask::ArenaDtor(void* object) {
  DistributedTensorflowTrainingTask* _this = reinterpret_cast< DistributedTensorflowTrainingTask* >(object);
  (void)_this;
}
void DistributedTensorflowTrainingTask::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DistributedTensorflowTrainingTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DistributedTensorflowTrainingTask::InternalSwap(DistributedTensorflowTrainingTask* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata DistributedTensorflowTrainingTask::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fplugins_2ftensorflow_2eproto_getter, &descriptor_table_flyteidl_2fplugins_2ftensorflow_2eproto_once,
      file_level_metadata_flyteidl_2fplugins_2ftensorflow_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace plugins
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::flyteidl::plugins::DistributedTensorflowTrainingTask* Arena::CreateMaybeMessage< ::flyteidl::plugins::DistributedTensorflowTrainingTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::plugins::DistributedTensorflowTrainingTask >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
