// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: flyteidl/service/signal.proto

#include "flyteidl/service/signal.pb.h"
#include "flyteidl/service/signal.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace flyteidl {
namespace service {

static const char* SignalService_method_names[] = {
  "/flyteidl.service.SignalService/CreateSignal",
  "/flyteidl.service.SignalService/GetSignal",
};

std::unique_ptr< SignalService::Stub> SignalService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SignalService::Stub> stub(new SignalService::Stub(channel));
  return stub;
}

SignalService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateSignal_(SignalService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSignal_(SignalService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SignalService::Stub::CreateSignal(::grpc::ClientContext* context, const ::flyteidl::admin::SignalCreateRequest& request, ::flyteidl::admin::SignalCreateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateSignal_, context, request, response);
}

void SignalService::Stub::experimental_async::CreateSignal(::grpc::ClientContext* context, const ::flyteidl::admin::SignalCreateRequest* request, ::flyteidl::admin::SignalCreateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateSignal_, context, request, response, std::move(f));
}

void SignalService::Stub::experimental_async::CreateSignal(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::SignalCreateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateSignal_, context, request, response, std::move(f));
}

void SignalService::Stub::experimental_async::CreateSignal(::grpc::ClientContext* context, const ::flyteidl::admin::SignalCreateRequest* request, ::flyteidl::admin::SignalCreateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateSignal_, context, request, response, reactor);
}

void SignalService::Stub::experimental_async::CreateSignal(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::SignalCreateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateSignal_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::SignalCreateResponse>* SignalService::Stub::AsyncCreateSignalRaw(::grpc::ClientContext* context, const ::flyteidl::admin::SignalCreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::SignalCreateResponse>::Create(channel_.get(), cq, rpcmethod_CreateSignal_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::SignalCreateResponse>* SignalService::Stub::PrepareAsyncCreateSignalRaw(::grpc::ClientContext* context, const ::flyteidl::admin::SignalCreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::SignalCreateResponse>::Create(channel_.get(), cq, rpcmethod_CreateSignal_, context, request, false);
}

::grpc::Status SignalService::Stub::GetSignal(::grpc::ClientContext* context, const ::flyteidl::admin::SignalGetRequest& request, ::flyteidl::admin::Signal* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetSignal_, context, request, response);
}

void SignalService::Stub::experimental_async::GetSignal(::grpc::ClientContext* context, const ::flyteidl::admin::SignalGetRequest* request, ::flyteidl::admin::Signal* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetSignal_, context, request, response, std::move(f));
}

void SignalService::Stub::experimental_async::GetSignal(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::Signal* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetSignal_, context, request, response, std::move(f));
}

void SignalService::Stub::experimental_async::GetSignal(::grpc::ClientContext* context, const ::flyteidl::admin::SignalGetRequest* request, ::flyteidl::admin::Signal* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetSignal_, context, request, response, reactor);
}

void SignalService::Stub::experimental_async::GetSignal(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::flyteidl::admin::Signal* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetSignal_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::Signal>* SignalService::Stub::AsyncGetSignalRaw(::grpc::ClientContext* context, const ::flyteidl::admin::SignalGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::Signal>::Create(channel_.get(), cq, rpcmethod_GetSignal_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::flyteidl::admin::Signal>* SignalService::Stub::PrepareAsyncGetSignalRaw(::grpc::ClientContext* context, const ::flyteidl::admin::SignalGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::flyteidl::admin::Signal>::Create(channel_.get(), cq, rpcmethod_GetSignal_, context, request, false);
}

SignalService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SignalService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SignalService::Service, ::flyteidl::admin::SignalCreateRequest, ::flyteidl::admin::SignalCreateResponse>(
          std::mem_fn(&SignalService::Service::CreateSignal), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SignalService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SignalService::Service, ::flyteidl::admin::SignalGetRequest, ::flyteidl::admin::Signal>(
          std::mem_fn(&SignalService::Service::GetSignal), this)));
}

SignalService::Service::~Service() {
}

::grpc::Status SignalService::Service::CreateSignal(::grpc::ServerContext* context, const ::flyteidl::admin::SignalCreateRequest* request, ::flyteidl::admin::SignalCreateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SignalService::Service::GetSignal(::grpc::ServerContext* context, const ::flyteidl::admin::SignalGetRequest* request, ::flyteidl::admin::Signal* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace flyteidl
}  // namespace service

