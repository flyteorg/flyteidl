# coding: utf-8

"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from flyteadmin.models.admin_annotations import AdminAnnotations  # noqa: F401,E501
from flyteadmin.models.admin_auth_role import AdminAuthRole  # noqa: F401,E501
from flyteadmin.models.admin_labels import AdminLabels  # noqa: F401,E501
from flyteadmin.models.admin_raw_output_data_config import AdminRawOutputDataConfig  # noqa: F401,E501
from flyteadmin.models.core_quality_of_service import CoreQualityOfService  # noqa: F401,E501


class AdminExecutionRuntimeMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accepted_at': 'datetime',
        'labels': 'AdminLabels',
        'annotations': 'AdminAnnotations',
        'auth_role': 'AdminAuthRole',
        'quality_of_service': 'CoreQualityOfService',
        'raw_output_data_config': 'AdminRawOutputDataConfig'
    }

    attribute_map = {
        'accepted_at': 'accepted_at',
        'labels': 'labels',
        'annotations': 'annotations',
        'auth_role': 'auth_role',
        'quality_of_service': 'quality_of_service',
        'raw_output_data_config': 'raw_output_data_config'
    }

    def __init__(self, accepted_at=None, labels=None, annotations=None, auth_role=None, quality_of_service=None, raw_output_data_config=None):  # noqa: E501
        """AdminExecutionRuntimeMetadata - a model defined in Swagger"""  # noqa: E501

        self._accepted_at = None
        self._labels = None
        self._annotations = None
        self._auth_role = None
        self._quality_of_service = None
        self._raw_output_data_config = None
        self.discriminator = None

        if accepted_at is not None:
            self.accepted_at = accepted_at
        if labels is not None:
            self.labels = labels
        if annotations is not None:
            self.annotations = annotations
        if auth_role is not None:
            self.auth_role = auth_role
        if quality_of_service is not None:
            self.quality_of_service = quality_of_service
        if raw_output_data_config is not None:
            self.raw_output_data_config = raw_output_data_config

    @property
    def accepted_at(self):
        """Gets the accepted_at of this AdminExecutionRuntimeMetadata.  # noqa: E501

        Reported time at which the execution was created.  # noqa: E501

        :return: The accepted_at of this AdminExecutionRuntimeMetadata.  # noqa: E501
        :rtype: datetime
        """
        return self._accepted_at

    @accepted_at.setter
    def accepted_at(self, accepted_at):
        """Sets the accepted_at of this AdminExecutionRuntimeMetadata.

        Reported time at which the execution was created.  # noqa: E501

        :param accepted_at: The accepted_at of this AdminExecutionRuntimeMetadata.  # noqa: E501
        :type: datetime
        """

        self._accepted_at = accepted_at

    @property
    def labels(self):
        """Gets the labels of this AdminExecutionRuntimeMetadata.  # noqa: E501

        Labels to apply to the execution resource.  # noqa: E501

        :return: The labels of this AdminExecutionRuntimeMetadata.  # noqa: E501
        :rtype: AdminLabels
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this AdminExecutionRuntimeMetadata.

        Labels to apply to the execution resource.  # noqa: E501

        :param labels: The labels of this AdminExecutionRuntimeMetadata.  # noqa: E501
        :type: AdminLabels
        """

        self._labels = labels

    @property
    def annotations(self):
        """Gets the annotations of this AdminExecutionRuntimeMetadata.  # noqa: E501

        Annotations to apply to the execution resource.  # noqa: E501

        :return: The annotations of this AdminExecutionRuntimeMetadata.  # noqa: E501
        :rtype: AdminAnnotations
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this AdminExecutionRuntimeMetadata.

        Annotations to apply to the execution resource.  # noqa: E501

        :param annotations: The annotations of this AdminExecutionRuntimeMetadata.  # noqa: E501
        :type: AdminAnnotations
        """

        self._annotations = annotations

    @property
    def auth_role(self):
        """Gets the auth_role of this AdminExecutionRuntimeMetadata.  # noqa: E501

        Optional: auth override to apply this execution.  # noqa: E501

        :return: The auth_role of this AdminExecutionRuntimeMetadata.  # noqa: E501
        :rtype: AdminAuthRole
        """
        return self._auth_role

    @auth_role.setter
    def auth_role(self, auth_role):
        """Sets the auth_role of this AdminExecutionRuntimeMetadata.

        Optional: auth override to apply this execution.  # noqa: E501

        :param auth_role: The auth_role of this AdminExecutionRuntimeMetadata.  # noqa: E501
        :type: AdminAuthRole
        """

        self._auth_role = auth_role

    @property
    def quality_of_service(self):
        """Gets the quality_of_service of this AdminExecutionRuntimeMetadata.  # noqa: E501

        Indicates the runtime priority of the execution.  # noqa: E501

        :return: The quality_of_service of this AdminExecutionRuntimeMetadata.  # noqa: E501
        :rtype: CoreQualityOfService
        """
        return self._quality_of_service

    @quality_of_service.setter
    def quality_of_service(self, quality_of_service):
        """Sets the quality_of_service of this AdminExecutionRuntimeMetadata.

        Indicates the runtime priority of the execution.  # noqa: E501

        :param quality_of_service: The quality_of_service of this AdminExecutionRuntimeMetadata.  # noqa: E501
        :type: CoreQualityOfService
        """

        self._quality_of_service = quality_of_service

    @property
    def raw_output_data_config(self):
        """Gets the raw_output_data_config of this AdminExecutionRuntimeMetadata.  # noqa: E501


        :return: The raw_output_data_config of this AdminExecutionRuntimeMetadata.  # noqa: E501
        :rtype: AdminRawOutputDataConfig
        """
        return self._raw_output_data_config

    @raw_output_data_config.setter
    def raw_output_data_config(self, raw_output_data_config):
        """Sets the raw_output_data_config of this AdminExecutionRuntimeMetadata.


        :param raw_output_data_config: The raw_output_data_config of this AdminExecutionRuntimeMetadata.  # noqa: E501
        :type: AdminRawOutputDataConfig
        """

        self._raw_output_data_config = raw_output_data_config

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdminExecutionRuntimeMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdminExecutionRuntimeMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
