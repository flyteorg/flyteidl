syntax = "proto3";

package flyteidl.core;

option go_package = "github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core";

import "google/protobuf/timestamp.proto";

// Cluster resource that task and workflow will run on
message Resource {
  oneof value {
    RayCluster ray = 1;
  }
}


// Define Ray cluster spec
message RayCluster {
  // Required input field. Unique cluster name provided by user.
  string name = 1;

  // Required field. This field indicates ray cluster configuration
  ClusterSpec cluster_spec = 2;
}

message ClusterSpec {
  // The head group configuration
  HeadGroupSpec head_group_spec = 1;
  // The worker group configurations
  repeated WorkerGroupSpec worker_group_sepc = 2;
}

message HeadGroupSpec {
  // Optional. The computeTemplate of head node group
  string compute_template = 1;
  // Optional field. This field will be used to retrieve right ray container
  string image = 2;
  // Optional. The service type (ClusterIP, NodePort, Load balancer) of the head node
  string service_type = 3;
  // Optional. The ray start parames of head node group
  map<string, string> ray_start_params = 4;
}

message WorkerGroupSpec {
  // Required. Group name of the current worker group
  string group_name = 1;
  // Optional. The computeTemplate of head node group
  string compute_template = 2;
  // Optional field. This field will be used to retrieve right ray container
  string image = 3;
  // Required. Desired replicas of the worker group
  int32 replicas = 4;
  // Optional. Min replicas of the worker group
  int32 min_replicas = 5;
  // Optional. Max replicas of the worker group
  int32 max_replicas = 6;
  // Optional. The ray start parames of worker node group
  map<string, string> ray_start_params = 7;
}
