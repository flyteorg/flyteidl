// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/version.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fadmin_2fversion_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fadmin_2fversion_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fversion_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fadmin_2fversion_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fadmin_2fversion_2eproto;
namespace flyteidl {
namespace admin {
class GetVersionRequest;
struct GetVersionRequestDefaultTypeInternal;
extern GetVersionRequestDefaultTypeInternal _GetVersionRequest_default_instance_;
class GetVersionResponse;
struct GetVersionResponseDefaultTypeInternal;
extern GetVersionResponseDefaultTypeInternal _GetVersionResponse_default_instance_;
class Version;
struct VersionDefaultTypeInternal;
extern VersionDefaultTypeInternal _Version_default_instance_;
}  // namespace admin
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> ::flyteidl::admin::GetVersionRequest* Arena::CreateMaybeMessage<::flyteidl::admin::GetVersionRequest>(Arena*);
template<> ::flyteidl::admin::GetVersionResponse* Arena::CreateMaybeMessage<::flyteidl::admin::GetVersionResponse>(Arena*);
template<> ::flyteidl::admin::Version* Arena::CreateMaybeMessage<::flyteidl::admin::Version>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace flyteidl {
namespace admin {

// ===================================================================

class GetVersionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.GetVersionResponse) */ {
 public:
  inline GetVersionResponse() : GetVersionResponse(nullptr) {}
  ~GetVersionResponse() override;
  explicit constexpr GetVersionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetVersionResponse(const GetVersionResponse& from);
  GetVersionResponse(GetVersionResponse&& from) noexcept
    : GetVersionResponse() {
    *this = ::std::move(from);
  }

  inline GetVersionResponse& operator=(const GetVersionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVersionResponse& operator=(GetVersionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetVersionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetVersionResponse* internal_default_instance() {
    return reinterpret_cast<const GetVersionResponse*>(
               &_GetVersionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetVersionResponse& a, GetVersionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVersionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVersionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetVersionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetVersionResponse>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVersionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.GetVersionResponse";
  }
  protected:
  explicit GetVersionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControlPlaneVersionFieldNumber = 1,
  };
  // .flyteidl.admin.Version control_plane_version = 1 [json_name = "controlPlaneVersion"];
  bool has_control_plane_version() const;
  private:
  bool _internal_has_control_plane_version() const;
  public:
  void clear_control_plane_version();
  const ::flyteidl::admin::Version& control_plane_version() const;
  PROTOBUF_NODISCARD ::flyteidl::admin::Version* release_control_plane_version();
  ::flyteidl::admin::Version* mutable_control_plane_version();
  void set_allocated_control_plane_version(::flyteidl::admin::Version* control_plane_version);
  private:
  const ::flyteidl::admin::Version& _internal_control_plane_version() const;
  ::flyteidl::admin::Version* _internal_mutable_control_plane_version();
  public:
  void unsafe_arena_set_allocated_control_plane_version(
      ::flyteidl::admin::Version* control_plane_version);
  ::flyteidl::admin::Version* unsafe_arena_release_control_plane_version();

  // @@protoc_insertion_point(class_scope:flyteidl.admin.GetVersionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::flyteidl::admin::Version* control_plane_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fversion_2eproto;
};
// -------------------------------------------------------------------

class Version final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:flyteidl.admin.Version) */ {
 public:
  inline Version() : Version(nullptr) {}
  ~Version() override;
  explicit constexpr Version(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Version(const Version& from);
  Version(Version&& from) noexcept
    : Version() {
    *this = ::std::move(from);
  }

  inline Version& operator=(const Version& from) {
    CopyFrom(from);
    return *this;
  }
  inline Version& operator=(Version&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Version& default_instance() {
    return *internal_default_instance();
  }
  static inline const Version* internal_default_instance() {
    return reinterpret_cast<const Version*>(
               &_Version_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Version& a, Version& b) {
    a.Swap(&b);
  }
  inline void Swap(Version* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Version* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Version* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Version>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Version* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.Version";
  }
  protected:
  explicit Version(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuildFieldNumber = 1,
    kVersionFieldNumber = 2,
    kBuildTimeFieldNumber = 3,
  };
  // string Build = 1 [json_name = "Build"];
  void clear_build();
  const std::string& build() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_build(ArgT0&& arg0, ArgT... args);
  std::string* mutable_build();
  PROTOBUF_NODISCARD std::string* release_build();
  void set_allocated_build(std::string* build);
  private:
  const std::string& _internal_build() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_build(const std::string& value);
  std::string* _internal_mutable_build();
  public:

  // string Version = 2 [json_name = "Version"];
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string BuildTime = 3 [json_name = "BuildTime"];
  void clear_buildtime();
  const std::string& buildtime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buildtime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buildtime();
  PROTOBUF_NODISCARD std::string* release_buildtime();
  void set_allocated_buildtime(std::string* buildtime);
  private:
  const std::string& _internal_buildtime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buildtime(const std::string& value);
  std::string* _internal_mutable_buildtime();
  public:

  // @@protoc_insertion_point(class_scope:flyteidl.admin.Version)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr build_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buildtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fversion_2eproto;
};
// -------------------------------------------------------------------

class GetVersionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:flyteidl.admin.GetVersionRequest) */ {
 public:
  inline GetVersionRequest() : GetVersionRequest(nullptr) {}
  explicit constexpr GetVersionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetVersionRequest(const GetVersionRequest& from);
  GetVersionRequest(GetVersionRequest&& from) noexcept
    : GetVersionRequest() {
    *this = ::std::move(from);
  }

  inline GetVersionRequest& operator=(const GetVersionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVersionRequest& operator=(GetVersionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetVersionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetVersionRequest* internal_default_instance() {
    return reinterpret_cast<const GetVersionRequest*>(
               &_GetVersionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetVersionRequest& a, GetVersionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVersionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVersionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetVersionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetVersionRequest>(arena);
  }

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "flyteidl.admin.GetVersionRequest";
  }
  protected:
  explicit GetVersionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:flyteidl.admin.GetVersionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fadmin_2fversion_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetVersionResponse

// .flyteidl.admin.Version control_plane_version = 1 [json_name = "controlPlaneVersion"];
inline bool GetVersionResponse::_internal_has_control_plane_version() const {
  return this != internal_default_instance() && control_plane_version_ != nullptr;
}
inline bool GetVersionResponse::has_control_plane_version() const {
  return _internal_has_control_plane_version();
}
inline void GetVersionResponse::clear_control_plane_version() {
  if (GetArenaForAllocation() == nullptr && control_plane_version_ != nullptr) {
    delete control_plane_version_;
  }
  control_plane_version_ = nullptr;
}
inline const ::flyteidl::admin::Version& GetVersionResponse::_internal_control_plane_version() const {
  const ::flyteidl::admin::Version* p = control_plane_version_;
  return p != nullptr ? *p : reinterpret_cast<const ::flyteidl::admin::Version&>(
      ::flyteidl::admin::_Version_default_instance_);
}
inline const ::flyteidl::admin::Version& GetVersionResponse::control_plane_version() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.GetVersionResponse.control_plane_version)
  return _internal_control_plane_version();
}
inline void GetVersionResponse::unsafe_arena_set_allocated_control_plane_version(
    ::flyteidl::admin::Version* control_plane_version) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(control_plane_version_);
  }
  control_plane_version_ = control_plane_version;
  if (control_plane_version) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:flyteidl.admin.GetVersionResponse.control_plane_version)
}
inline ::flyteidl::admin::Version* GetVersionResponse::release_control_plane_version() {
  
  ::flyteidl::admin::Version* temp = control_plane_version_;
  control_plane_version_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::flyteidl::admin::Version* GetVersionResponse::unsafe_arena_release_control_plane_version() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.GetVersionResponse.control_plane_version)
  
  ::flyteidl::admin::Version* temp = control_plane_version_;
  control_plane_version_ = nullptr;
  return temp;
}
inline ::flyteidl::admin::Version* GetVersionResponse::_internal_mutable_control_plane_version() {
  
  if (control_plane_version_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::admin::Version>(GetArenaForAllocation());
    control_plane_version_ = p;
  }
  return control_plane_version_;
}
inline ::flyteidl::admin::Version* GetVersionResponse::mutable_control_plane_version() {
  ::flyteidl::admin::Version* _msg = _internal_mutable_control_plane_version();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.GetVersionResponse.control_plane_version)
  return _msg;
}
inline void GetVersionResponse::set_allocated_control_plane_version(::flyteidl::admin::Version* control_plane_version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete control_plane_version_;
  }
  if (control_plane_version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::admin::Version>::GetOwningArena(control_plane_version);
    if (message_arena != submessage_arena) {
      control_plane_version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, control_plane_version, submessage_arena);
    }
    
  } else {
    
  }
  control_plane_version_ = control_plane_version;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.GetVersionResponse.control_plane_version)
}

// -------------------------------------------------------------------

// Version

// string Build = 1 [json_name = "Build"];
inline void Version::clear_build() {
  build_.ClearToEmpty();
}
inline const std::string& Version::build() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Version.Build)
  return _internal_build();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Version::set_build(ArgT0&& arg0, ArgT... args) {
 
 build_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.Version.Build)
}
inline std::string* Version::mutable_build() {
  std::string* _s = _internal_mutable_build();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Version.Build)
  return _s;
}
inline const std::string& Version::_internal_build() const {
  return build_.Get();
}
inline void Version::_internal_set_build(const std::string& value) {
  
  build_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Version::_internal_mutable_build() {
  
  return build_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Version::release_build() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Version.Build)
  return build_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Version::set_allocated_build(std::string* build) {
  if (build != nullptr) {
    
  } else {
    
  }
  build_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), build,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (build_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    build_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Version.Build)
}

// string Version = 2 [json_name = "Version"];
inline void Version::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& Version::version() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Version.Version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Version::set_version(ArgT0&& arg0, ArgT... args) {
 
 version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.Version.Version)
}
inline std::string* Version::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Version.Version)
  return _s;
}
inline const std::string& Version::_internal_version() const {
  return version_.Get();
}
inline void Version::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Version::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Version::release_version() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Version.Version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Version::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Version.Version)
}

// string BuildTime = 3 [json_name = "BuildTime"];
inline void Version::clear_buildtime() {
  buildtime_.ClearToEmpty();
}
inline const std::string& Version::buildtime() const {
  // @@protoc_insertion_point(field_get:flyteidl.admin.Version.BuildTime)
  return _internal_buildtime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Version::set_buildtime(ArgT0&& arg0, ArgT... args) {
 
 buildtime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:flyteidl.admin.Version.BuildTime)
}
inline std::string* Version::mutable_buildtime() {
  std::string* _s = _internal_mutable_buildtime();
  // @@protoc_insertion_point(field_mutable:flyteidl.admin.Version.BuildTime)
  return _s;
}
inline const std::string& Version::_internal_buildtime() const {
  return buildtime_.Get();
}
inline void Version::_internal_set_buildtime(const std::string& value) {
  
  buildtime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Version::_internal_mutable_buildtime() {
  
  return buildtime_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Version::release_buildtime() {
  // @@protoc_insertion_point(field_release:flyteidl.admin.Version.BuildTime)
  return buildtime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Version::set_allocated_buildtime(std::string* buildtime) {
  if (buildtime != nullptr) {
    
  } else {
    
  }
  buildtime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buildtime,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (buildtime_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    buildtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Version.BuildTime)
}

// -------------------------------------------------------------------

// GetVersionRequest

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace admin
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_flyteidl_2fadmin_2fversion_2eproto
