// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/workflow.proto

package com.flyteidl.core;

public interface WorkflowNodeOrBuilder extends
    // @@protoc_insertion_point(interface_extends:flyteidl.core.WorkflowNode)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * A globally unique identifier for the launch plan.
   * </pre>
   *
   * <code>.flyteidl.core.Identifier launchplan_ref = 1 [json_name = "launchplanRef"];</code>
   * @return Whether the launchplanRef field is set.
   */
  boolean hasLaunchplanRef();
  /**
   * <pre>
   * A globally unique identifier for the launch plan.
   * </pre>
   *
   * <code>.flyteidl.core.Identifier launchplan_ref = 1 [json_name = "launchplanRef"];</code>
   * @return The launchplanRef.
   */
  com.flyteidl.core.Identifier getLaunchplanRef();
  /**
   * <pre>
   * A globally unique identifier for the launch plan.
   * </pre>
   *
   * <code>.flyteidl.core.Identifier launchplan_ref = 1 [json_name = "launchplanRef"];</code>
   */
  com.flyteidl.core.IdentifierOrBuilder getLaunchplanRefOrBuilder();

  /**
   * <pre>
   * Reference to a subworkflow, that should be defined with the compiler context
   * </pre>
   *
   * <code>.flyteidl.core.Identifier sub_workflow_ref = 2 [json_name = "subWorkflowRef"];</code>
   * @return Whether the subWorkflowRef field is set.
   */
  boolean hasSubWorkflowRef();
  /**
   * <pre>
   * Reference to a subworkflow, that should be defined with the compiler context
   * </pre>
   *
   * <code>.flyteidl.core.Identifier sub_workflow_ref = 2 [json_name = "subWorkflowRef"];</code>
   * @return The subWorkflowRef.
   */
  com.flyteidl.core.Identifier getSubWorkflowRef();
  /**
   * <pre>
   * Reference to a subworkflow, that should be defined with the compiler context
   * </pre>
   *
   * <code>.flyteidl.core.Identifier sub_workflow_ref = 2 [json_name = "subWorkflowRef"];</code>
   */
  com.flyteidl.core.IdentifierOrBuilder getSubWorkflowRefOrBuilder();

  public com.flyteidl.core.WorkflowNode.ReferenceCase getReferenceCase();
}
