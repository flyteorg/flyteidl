// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/interface.proto

#ifndef PROTOBUF_INCLUDED_flyteidl_2fcore_2finterface_2eproto
#define PROTOBUF_INCLUDED_flyteidl_2fcore_2finterface_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "flyteidl/core/types.pb.h"
#include "flyteidl/core/literals.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2finterface_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_flyteidl_2fcore_2finterface_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_flyteidl_2fcore_2finterface_2eproto();
namespace flyteidl {
namespace core {
class Parameter;
class ParameterDefaultTypeInternal;
extern ParameterDefaultTypeInternal _Parameter_default_instance_;
class ParameterMap;
class ParameterMapDefaultTypeInternal;
extern ParameterMapDefaultTypeInternal _ParameterMap_default_instance_;
class ParameterMap_ParametersEntry_DoNotUse;
class ParameterMap_ParametersEntry_DoNotUseDefaultTypeInternal;
extern ParameterMap_ParametersEntry_DoNotUseDefaultTypeInternal _ParameterMap_ParametersEntry_DoNotUse_default_instance_;
class TypedInterface;
class TypedInterfaceDefaultTypeInternal;
extern TypedInterfaceDefaultTypeInternal _TypedInterface_default_instance_;
class Variable;
class VariableDefaultTypeInternal;
extern VariableDefaultTypeInternal _Variable_default_instance_;
class VariableMap;
class VariableMapDefaultTypeInternal;
extern VariableMapDefaultTypeInternal _VariableMap_default_instance_;
class VariableMap_VariablesEntry_DoNotUse;
class VariableMap_VariablesEntry_DoNotUseDefaultTypeInternal;
extern VariableMap_VariablesEntry_DoNotUseDefaultTypeInternal _VariableMap_VariablesEntry_DoNotUse_default_instance_;
}  // namespace core
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> ::flyteidl::core::Parameter* Arena::CreateMaybeMessage<::flyteidl::core::Parameter>(Arena*);
template<> ::flyteidl::core::ParameterMap* Arena::CreateMaybeMessage<::flyteidl::core::ParameterMap>(Arena*);
template<> ::flyteidl::core::ParameterMap_ParametersEntry_DoNotUse* Arena::CreateMaybeMessage<::flyteidl::core::ParameterMap_ParametersEntry_DoNotUse>(Arena*);
template<> ::flyteidl::core::TypedInterface* Arena::CreateMaybeMessage<::flyteidl::core::TypedInterface>(Arena*);
template<> ::flyteidl::core::Variable* Arena::CreateMaybeMessage<::flyteidl::core::Variable>(Arena*);
template<> ::flyteidl::core::VariableMap* Arena::CreateMaybeMessage<::flyteidl::core::VariableMap>(Arena*);
template<> ::flyteidl::core::VariableMap_VariablesEntry_DoNotUse* Arena::CreateMaybeMessage<::flyteidl::core::VariableMap_VariablesEntry_DoNotUse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace flyteidl {
namespace core {

// ===================================================================

class Variable final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.Variable) */ {
 public:
  Variable();
  virtual ~Variable();

  Variable(const Variable& from);

  inline Variable& operator=(const Variable& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Variable(Variable&& from) noexcept
    : Variable() {
    *this = ::std::move(from);
  }

  inline Variable& operator=(Variable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Variable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Variable* internal_default_instance() {
    return reinterpret_cast<const Variable*>(
               &_Variable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Variable* other);
  friend void swap(Variable& a, Variable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Variable* New() const final {
    return CreateMaybeMessage<Variable>(nullptr);
  }

  Variable* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Variable>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Variable& from);
  void MergeFrom(const Variable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Variable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string description = 2;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // .flyteidl.core.LiteralType type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::flyteidl::core::LiteralType& type() const;
  ::flyteidl::core::LiteralType* release_type();
  ::flyteidl::core::LiteralType* mutable_type();
  void set_allocated_type(::flyteidl::core::LiteralType* type);

  // @@protoc_insertion_point(class_scope:flyteidl.core.Variable)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::flyteidl::core::LiteralType* type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2finterface_2eproto;
};
// -------------------------------------------------------------------

class VariableMap_VariablesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<VariableMap_VariablesEntry_DoNotUse, 
    ::std::string, ::flyteidl::core::Variable,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<VariableMap_VariablesEntry_DoNotUse, 
    ::std::string, ::flyteidl::core::Variable,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  VariableMap_VariablesEntry_DoNotUse();
  VariableMap_VariablesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const VariableMap_VariablesEntry_DoNotUse& other);
  static const VariableMap_VariablesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const VariableMap_VariablesEntry_DoNotUse*>(&_VariableMap_VariablesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class VariableMap final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.VariableMap) */ {
 public:
  VariableMap();
  virtual ~VariableMap();

  VariableMap(const VariableMap& from);

  inline VariableMap& operator=(const VariableMap& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VariableMap(VariableMap&& from) noexcept
    : VariableMap() {
    *this = ::std::move(from);
  }

  inline VariableMap& operator=(VariableMap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const VariableMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VariableMap* internal_default_instance() {
    return reinterpret_cast<const VariableMap*>(
               &_VariableMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(VariableMap* other);
  friend void swap(VariableMap& a, VariableMap& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VariableMap* New() const final {
    return CreateMaybeMessage<VariableMap>(nullptr);
  }

  VariableMap* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VariableMap>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VariableMap& from);
  void MergeFrom(const VariableMap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VariableMap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .flyteidl.core.Variable> variables = 1;
  int variables_size() const;
  void clear_variables();
  static const int kVariablesFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::flyteidl::core::Variable >&
      variables() const;
  ::google::protobuf::Map< ::std::string, ::flyteidl::core::Variable >*
      mutable_variables();

  // @@protoc_insertion_point(class_scope:flyteidl.core.VariableMap)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      VariableMap_VariablesEntry_DoNotUse,
      ::std::string, ::flyteidl::core::Variable,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > variables_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2finterface_2eproto;
};
// -------------------------------------------------------------------

class TypedInterface final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.TypedInterface) */ {
 public:
  TypedInterface();
  virtual ~TypedInterface();

  TypedInterface(const TypedInterface& from);

  inline TypedInterface& operator=(const TypedInterface& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TypedInterface(TypedInterface&& from) noexcept
    : TypedInterface() {
    *this = ::std::move(from);
  }

  inline TypedInterface& operator=(TypedInterface&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TypedInterface& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TypedInterface* internal_default_instance() {
    return reinterpret_cast<const TypedInterface*>(
               &_TypedInterface_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(TypedInterface* other);
  friend void swap(TypedInterface& a, TypedInterface& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TypedInterface* New() const final {
    return CreateMaybeMessage<TypedInterface>(nullptr);
  }

  TypedInterface* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TypedInterface>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TypedInterface& from);
  void MergeFrom(const TypedInterface& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TypedInterface* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.core.VariableMap inputs = 1;
  bool has_inputs() const;
  void clear_inputs();
  static const int kInputsFieldNumber = 1;
  const ::flyteidl::core::VariableMap& inputs() const;
  ::flyteidl::core::VariableMap* release_inputs();
  ::flyteidl::core::VariableMap* mutable_inputs();
  void set_allocated_inputs(::flyteidl::core::VariableMap* inputs);

  // .flyteidl.core.VariableMap outputs = 2;
  bool has_outputs() const;
  void clear_outputs();
  static const int kOutputsFieldNumber = 2;
  const ::flyteidl::core::VariableMap& outputs() const;
  ::flyteidl::core::VariableMap* release_outputs();
  ::flyteidl::core::VariableMap* mutable_outputs();
  void set_allocated_outputs(::flyteidl::core::VariableMap* outputs);

  // @@protoc_insertion_point(class_scope:flyteidl.core.TypedInterface)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::core::VariableMap* inputs_;
  ::flyteidl::core::VariableMap* outputs_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2finterface_2eproto;
};
// -------------------------------------------------------------------

class Parameter final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.Parameter) */ {
 public:
  Parameter();
  virtual ~Parameter();

  Parameter(const Parameter& from);

  inline Parameter& operator=(const Parameter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Parameter(Parameter&& from) noexcept
    : Parameter() {
    *this = ::std::move(from);
  }

  inline Parameter& operator=(Parameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Parameter& default_instance();

  enum BehaviorCase {
    kDefault = 2,
    kRequired = 3,
    BEHAVIOR_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Parameter* internal_default_instance() {
    return reinterpret_cast<const Parameter*>(
               &_Parameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Parameter* other);
  friend void swap(Parameter& a, Parameter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Parameter* New() const final {
    return CreateMaybeMessage<Parameter>(nullptr);
  }

  Parameter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Parameter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Parameter& from);
  void MergeFrom(const Parameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Parameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .flyteidl.core.Variable var = 1;
  bool has_var() const;
  void clear_var();
  static const int kVarFieldNumber = 1;
  const ::flyteidl::core::Variable& var() const;
  ::flyteidl::core::Variable* release_var();
  ::flyteidl::core::Variable* mutable_var();
  void set_allocated_var(::flyteidl::core::Variable* var);

  // .flyteidl.core.Literal default = 2;
  bool has_default_() const;
  void clear_default_();
  static const int kDefaultFieldNumber = 2;
  const ::flyteidl::core::Literal& default_() const;
  ::flyteidl::core::Literal* release_default_();
  ::flyteidl::core::Literal* mutable_default_();
  void set_allocated_default_(::flyteidl::core::Literal* default_);

  // bool required = 3;
  private:
  bool has_required() const;
  public:
  void clear_required();
  static const int kRequiredFieldNumber = 3;
  bool required() const;
  void set_required(bool value);

  void clear_behavior();
  BehaviorCase behavior_case() const;
  // @@protoc_insertion_point(class_scope:flyteidl.core.Parameter)
 private:
  class HasBitSetters;
  void set_has_default_();
  void set_has_required();

  inline bool has_behavior() const;
  inline void clear_has_behavior();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::flyteidl::core::Variable* var_;
  union BehaviorUnion {
    BehaviorUnion() {}
    ::flyteidl::core::Literal* default__;
    bool required_;
  } behavior_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_flyteidl_2fcore_2finterface_2eproto;
};
// -------------------------------------------------------------------

class ParameterMap_ParametersEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<ParameterMap_ParametersEntry_DoNotUse, 
    ::std::string, ::flyteidl::core::Parameter,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<ParameterMap_ParametersEntry_DoNotUse, 
    ::std::string, ::flyteidl::core::Parameter,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  ParameterMap_ParametersEntry_DoNotUse();
  ParameterMap_ParametersEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const ParameterMap_ParametersEntry_DoNotUse& other);
  static const ParameterMap_ParametersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ParameterMap_ParametersEntry_DoNotUse*>(&_ParameterMap_ParametersEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class ParameterMap final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flyteidl.core.ParameterMap) */ {
 public:
  ParameterMap();
  virtual ~ParameterMap();

  ParameterMap(const ParameterMap& from);

  inline ParameterMap& operator=(const ParameterMap& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ParameterMap(ParameterMap&& from) noexcept
    : ParameterMap() {
    *this = ::std::move(from);
  }

  inline ParameterMap& operator=(ParameterMap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ParameterMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParameterMap* internal_default_instance() {
    return reinterpret_cast<const ParameterMap*>(
               &_ParameterMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ParameterMap* other);
  friend void swap(ParameterMap& a, ParameterMap& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ParameterMap* New() const final {
    return CreateMaybeMessage<ParameterMap>(nullptr);
  }

  ParameterMap* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ParameterMap>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ParameterMap& from);
  void MergeFrom(const ParameterMap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParameterMap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .flyteidl.core.Parameter> parameters = 1;
  int parameters_size() const;
  void clear_parameters();
  static const int kParametersFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::flyteidl::core::Parameter >&
      parameters() const;
  ::google::protobuf::Map< ::std::string, ::flyteidl::core::Parameter >*
      mutable_parameters();

  // @@protoc_insertion_point(class_scope:flyteidl.core.ParameterMap)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      ParameterMap_ParametersEntry_DoNotUse,
      ::std::string, ::flyteidl::core::Parameter,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > parameters_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flyteidl_2fcore_2finterface_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Variable

// .flyteidl.core.LiteralType type = 1;
inline bool Variable::has_type() const {
  return this != internal_default_instance() && type_ != nullptr;
}
inline const ::flyteidl::core::LiteralType& Variable::type() const {
  const ::flyteidl::core::LiteralType* p = type_;
  // @@protoc_insertion_point(field_get:flyteidl.core.Variable.type)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::LiteralType*>(
      &::flyteidl::core::_LiteralType_default_instance_);
}
inline ::flyteidl::core::LiteralType* Variable::release_type() {
  // @@protoc_insertion_point(field_release:flyteidl.core.Variable.type)
  
  ::flyteidl::core::LiteralType* temp = type_;
  type_ = nullptr;
  return temp;
}
inline ::flyteidl::core::LiteralType* Variable::mutable_type() {
  
  if (type_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::LiteralType>(GetArenaNoVirtual());
    type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Variable.type)
  return type_;
}
inline void Variable::set_allocated_type(::flyteidl::core::LiteralType* type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(type_);
  }
  if (type) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    
  } else {
    
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Variable.type)
}

// string description = 2;
inline void Variable::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Variable::description() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Variable.description)
  return description_.GetNoArena();
}
inline void Variable::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flyteidl.core.Variable.description)
}
#if LANG_CXX11
inline void Variable::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flyteidl.core.Variable.description)
}
#endif
inline void Variable::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flyteidl.core.Variable.description)
}
inline void Variable::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flyteidl.core.Variable.description)
}
inline ::std::string* Variable::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Variable.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Variable::release_description() {
  // @@protoc_insertion_point(field_release:flyteidl.core.Variable.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Variable::set_allocated_description(::std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Variable.description)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// VariableMap

// map<string, .flyteidl.core.Variable> variables = 1;
inline int VariableMap::variables_size() const {
  return variables_.size();
}
inline void VariableMap::clear_variables() {
  variables_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::flyteidl::core::Variable >&
VariableMap::variables() const {
  // @@protoc_insertion_point(field_map:flyteidl.core.VariableMap.variables)
  return variables_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::flyteidl::core::Variable >*
VariableMap::mutable_variables() {
  // @@protoc_insertion_point(field_mutable_map:flyteidl.core.VariableMap.variables)
  return variables_.MutableMap();
}

// -------------------------------------------------------------------

// TypedInterface

// .flyteidl.core.VariableMap inputs = 1;
inline bool TypedInterface::has_inputs() const {
  return this != internal_default_instance() && inputs_ != nullptr;
}
inline void TypedInterface::clear_inputs() {
  if (GetArenaNoVirtual() == nullptr && inputs_ != nullptr) {
    delete inputs_;
  }
  inputs_ = nullptr;
}
inline const ::flyteidl::core::VariableMap& TypedInterface::inputs() const {
  const ::flyteidl::core::VariableMap* p = inputs_;
  // @@protoc_insertion_point(field_get:flyteidl.core.TypedInterface.inputs)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::VariableMap*>(
      &::flyteidl::core::_VariableMap_default_instance_);
}
inline ::flyteidl::core::VariableMap* TypedInterface::release_inputs() {
  // @@protoc_insertion_point(field_release:flyteidl.core.TypedInterface.inputs)
  
  ::flyteidl::core::VariableMap* temp = inputs_;
  inputs_ = nullptr;
  return temp;
}
inline ::flyteidl::core::VariableMap* TypedInterface::mutable_inputs() {
  
  if (inputs_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::VariableMap>(GetArenaNoVirtual());
    inputs_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.TypedInterface.inputs)
  return inputs_;
}
inline void TypedInterface::set_allocated_inputs(::flyteidl::core::VariableMap* inputs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete inputs_;
  }
  if (inputs) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      inputs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, inputs, submessage_arena);
    }
    
  } else {
    
  }
  inputs_ = inputs;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.TypedInterface.inputs)
}

// .flyteidl.core.VariableMap outputs = 2;
inline bool TypedInterface::has_outputs() const {
  return this != internal_default_instance() && outputs_ != nullptr;
}
inline void TypedInterface::clear_outputs() {
  if (GetArenaNoVirtual() == nullptr && outputs_ != nullptr) {
    delete outputs_;
  }
  outputs_ = nullptr;
}
inline const ::flyteidl::core::VariableMap& TypedInterface::outputs() const {
  const ::flyteidl::core::VariableMap* p = outputs_;
  // @@protoc_insertion_point(field_get:flyteidl.core.TypedInterface.outputs)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::VariableMap*>(
      &::flyteidl::core::_VariableMap_default_instance_);
}
inline ::flyteidl::core::VariableMap* TypedInterface::release_outputs() {
  // @@protoc_insertion_point(field_release:flyteidl.core.TypedInterface.outputs)
  
  ::flyteidl::core::VariableMap* temp = outputs_;
  outputs_ = nullptr;
  return temp;
}
inline ::flyteidl::core::VariableMap* TypedInterface::mutable_outputs() {
  
  if (outputs_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::VariableMap>(GetArenaNoVirtual());
    outputs_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.TypedInterface.outputs)
  return outputs_;
}
inline void TypedInterface::set_allocated_outputs(::flyteidl::core::VariableMap* outputs) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete outputs_;
  }
  if (outputs) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      outputs = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, outputs, submessage_arena);
    }
    
  } else {
    
  }
  outputs_ = outputs;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.TypedInterface.outputs)
}

// -------------------------------------------------------------------

// Parameter

// .flyteidl.core.Variable var = 1;
inline bool Parameter::has_var() const {
  return this != internal_default_instance() && var_ != nullptr;
}
inline void Parameter::clear_var() {
  if (GetArenaNoVirtual() == nullptr && var_ != nullptr) {
    delete var_;
  }
  var_ = nullptr;
}
inline const ::flyteidl::core::Variable& Parameter::var() const {
  const ::flyteidl::core::Variable* p = var_;
  // @@protoc_insertion_point(field_get:flyteidl.core.Parameter.var)
  return p != nullptr ? *p : *reinterpret_cast<const ::flyteidl::core::Variable*>(
      &::flyteidl::core::_Variable_default_instance_);
}
inline ::flyteidl::core::Variable* Parameter::release_var() {
  // @@protoc_insertion_point(field_release:flyteidl.core.Parameter.var)
  
  ::flyteidl::core::Variable* temp = var_;
  var_ = nullptr;
  return temp;
}
inline ::flyteidl::core::Variable* Parameter::mutable_var() {
  
  if (var_ == nullptr) {
    auto* p = CreateMaybeMessage<::flyteidl::core::Variable>(GetArenaNoVirtual());
    var_ = p;
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Parameter.var)
  return var_;
}
inline void Parameter::set_allocated_var(::flyteidl::core::Variable* var) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete var_;
  }
  if (var) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      var = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, var, submessage_arena);
    }
    
  } else {
    
  }
  var_ = var;
  // @@protoc_insertion_point(field_set_allocated:flyteidl.core.Parameter.var)
}

// .flyteidl.core.Literal default = 2;
inline bool Parameter::has_default_() const {
  return behavior_case() == kDefault;
}
inline void Parameter::set_has_default_() {
  _oneof_case_[0] = kDefault;
}
inline ::flyteidl::core::Literal* Parameter::release_default_() {
  // @@protoc_insertion_point(field_release:flyteidl.core.Parameter.default)
  if (has_default_()) {
    clear_has_behavior();
      ::flyteidl::core::Literal* temp = behavior_.default__;
    behavior_.default__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::flyteidl::core::Literal& Parameter::default_() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Parameter.default)
  return has_default_()
      ? *behavior_.default__
      : *reinterpret_cast< ::flyteidl::core::Literal*>(&::flyteidl::core::_Literal_default_instance_);
}
inline ::flyteidl::core::Literal* Parameter::mutable_default_() {
  if (!has_default_()) {
    clear_behavior();
    set_has_default_();
    behavior_.default__ = CreateMaybeMessage< ::flyteidl::core::Literal >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:flyteidl.core.Parameter.default)
  return behavior_.default__;
}

// bool required = 3;
inline bool Parameter::has_required() const {
  return behavior_case() == kRequired;
}
inline void Parameter::set_has_required() {
  _oneof_case_[0] = kRequired;
}
inline void Parameter::clear_required() {
  if (has_required()) {
    behavior_.required_ = false;
    clear_has_behavior();
  }
}
inline bool Parameter::required() const {
  // @@protoc_insertion_point(field_get:flyteidl.core.Parameter.required)
  if (has_required()) {
    return behavior_.required_;
  }
  return false;
}
inline void Parameter::set_required(bool value) {
  if (!has_required()) {
    clear_behavior();
    set_has_required();
  }
  behavior_.required_ = value;
  // @@protoc_insertion_point(field_set:flyteidl.core.Parameter.required)
}

inline bool Parameter::has_behavior() const {
  return behavior_case() != BEHAVIOR_NOT_SET;
}
inline void Parameter::clear_has_behavior() {
  _oneof_case_[0] = BEHAVIOR_NOT_SET;
}
inline Parameter::BehaviorCase Parameter::behavior_case() const {
  return Parameter::BehaviorCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ParameterMap

// map<string, .flyteidl.core.Parameter> parameters = 1;
inline int ParameterMap::parameters_size() const {
  return parameters_.size();
}
inline void ParameterMap::clear_parameters() {
  parameters_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::flyteidl::core::Parameter >&
ParameterMap::parameters() const {
  // @@protoc_insertion_point(field_map:flyteidl.core.ParameterMap.parameters)
  return parameters_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::flyteidl::core::Parameter >*
ParameterMap::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_map:flyteidl.core.ParameterMap.parameters)
  return parameters_.MutableMap();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace core
}  // namespace flyteidl

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_flyteidl_2fcore_2finterface_2eproto
