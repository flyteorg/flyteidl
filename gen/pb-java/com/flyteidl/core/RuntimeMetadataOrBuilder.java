// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/tasks.proto

package com.flyteidl.core;

public interface RuntimeMetadataOrBuilder extends
    // @@protoc_insertion_point(interface_extends:flyteidl.core.RuntimeMetadata)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Type of runtime.
   * </pre>
   *
   * <code>.flyteidl.core.RuntimeMetadata.RuntimeType type = 1 [json_name = "type"];</code>
   * @return The enum numeric value on the wire for type.
   */
  int getTypeValue();
  /**
   * <pre>
   * Type of runtime.
   * </pre>
   *
   * <code>.flyteidl.core.RuntimeMetadata.RuntimeType type = 1 [json_name = "type"];</code>
   * @return The type.
   */
  com.flyteidl.core.RuntimeMetadata.RuntimeType getType();

  /**
   * <pre>
   * Version of the runtime. All versions should be backward compatible. However, certain cases call for version
   * checks to ensure tighter validation or setting expectations.
   * </pre>
   *
   * <code>string version = 2 [json_name = "version"];</code>
   * @return The version.
   */
  java.lang.String getVersion();
  /**
   * <pre>
   * Version of the runtime. All versions should be backward compatible. However, certain cases call for version
   * checks to ensure tighter validation or setting expectations.
   * </pre>
   *
   * <code>string version = 2 [json_name = "version"];</code>
   * @return The bytes for version.
   */
  com.google.protobuf.ByteString
      getVersionBytes();

  /**
   * <pre>
   *+optional It can be used to provide extra information about the runtime (e.g. python, golang... etc.).
   * </pre>
   *
   * <code>string flavor = 3 [json_name = "flavor"];</code>
   * @return The flavor.
   */
  java.lang.String getFlavor();
  /**
   * <pre>
   *+optional It can be used to provide extra information about the runtime (e.g. python, golang... etc.).
   * </pre>
   *
   * <code>string flavor = 3 [json_name = "flavor"];</code>
   * @return The bytes for flavor.
   */
  com.google.protobuf.ByteString
      getFlavorBytes();
}
