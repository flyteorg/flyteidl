// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/node_execution.proto

#include "flyteidl/admin/node_execution.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace flyteidl {
namespace admin {
constexpr NodeExecutionGetRequest::NodeExecutionGetRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(nullptr){}
struct NodeExecutionGetRequestDefaultTypeInternal {
  constexpr NodeExecutionGetRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeExecutionGetRequestDefaultTypeInternal() {}
  union {
    NodeExecutionGetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeExecutionGetRequestDefaultTypeInternal _NodeExecutionGetRequest_default_instance_;
constexpr NodeExecutionListRequest::NodeExecutionListRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , filters_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , unique_parent_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , workflow_execution_id_(nullptr)
  , sort_by_(nullptr)
  , limit_(0u){}
struct NodeExecutionListRequestDefaultTypeInternal {
  constexpr NodeExecutionListRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeExecutionListRequestDefaultTypeInternal() {}
  union {
    NodeExecutionListRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeExecutionListRequestDefaultTypeInternal _NodeExecutionListRequest_default_instance_;
constexpr NodeExecutionForTaskListRequest::NodeExecutionForTaskListRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , filters_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , task_execution_id_(nullptr)
  , sort_by_(nullptr)
  , limit_(0u){}
struct NodeExecutionForTaskListRequestDefaultTypeInternal {
  constexpr NodeExecutionForTaskListRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeExecutionForTaskListRequestDefaultTypeInternal() {}
  union {
    NodeExecutionForTaskListRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeExecutionForTaskListRequestDefaultTypeInternal _NodeExecutionForTaskListRequest_default_instance_;
constexpr NodeExecution::NodeExecution(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : input_uri_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(nullptr)
  , closure_(nullptr)
  , metadata_(nullptr){}
struct NodeExecutionDefaultTypeInternal {
  constexpr NodeExecutionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeExecutionDefaultTypeInternal() {}
  union {
    NodeExecution _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeExecutionDefaultTypeInternal _NodeExecution_default_instance_;
constexpr NodeExecutionMetaData::NodeExecutionMetaData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : retry_group_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , spec_node_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , is_parent_node_(false)
  , is_dynamic_(false){}
struct NodeExecutionMetaDataDefaultTypeInternal {
  constexpr NodeExecutionMetaDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeExecutionMetaDataDefaultTypeInternal() {}
  union {
    NodeExecutionMetaData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeExecutionMetaDataDefaultTypeInternal _NodeExecutionMetaData_default_instance_;
constexpr NodeExecutionList::NodeExecutionList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : node_executions_()
  , token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct NodeExecutionListDefaultTypeInternal {
  constexpr NodeExecutionListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeExecutionListDefaultTypeInternal() {}
  union {
    NodeExecutionList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeExecutionListDefaultTypeInternal _NodeExecutionList_default_instance_;
constexpr NodeExecutionClosure::NodeExecutionClosure(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : started_at_(nullptr)
  , duration_(nullptr)
  , created_at_(nullptr)
  , updated_at_(nullptr)
  , phase_(0)

  , _oneof_case_{}{}
struct NodeExecutionClosureDefaultTypeInternal {
  constexpr NodeExecutionClosureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeExecutionClosureDefaultTypeInternal() {}
  union {
    NodeExecutionClosure _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeExecutionClosureDefaultTypeInternal _NodeExecutionClosure_default_instance_;
constexpr WorkflowNodeMetadata::WorkflowNodeMetadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : executionid_(nullptr){}
struct WorkflowNodeMetadataDefaultTypeInternal {
  constexpr WorkflowNodeMetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WorkflowNodeMetadataDefaultTypeInternal() {}
  union {
    WorkflowNodeMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WorkflowNodeMetadataDefaultTypeInternal _WorkflowNodeMetadata_default_instance_;
constexpr TaskNodeMetadata::TaskNodeMetadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : catalog_key_(nullptr)
  , cache_status_(0)
{}
struct TaskNodeMetadataDefaultTypeInternal {
  constexpr TaskNodeMetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TaskNodeMetadataDefaultTypeInternal() {}
  union {
    TaskNodeMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TaskNodeMetadataDefaultTypeInternal _TaskNodeMetadata_default_instance_;
constexpr DynamicWorkflowNodeMetadata::DynamicWorkflowNodeMetadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(nullptr)
  , compiled_workflow_(nullptr){}
struct DynamicWorkflowNodeMetadataDefaultTypeInternal {
  constexpr DynamicWorkflowNodeMetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DynamicWorkflowNodeMetadataDefaultTypeInternal() {}
  union {
    DynamicWorkflowNodeMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DynamicWorkflowNodeMetadataDefaultTypeInternal _DynamicWorkflowNodeMetadata_default_instance_;
constexpr NodeExecutionGetDataRequest::NodeExecutionGetDataRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(nullptr){}
struct NodeExecutionGetDataRequestDefaultTypeInternal {
  constexpr NodeExecutionGetDataRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeExecutionGetDataRequestDefaultTypeInternal() {}
  union {
    NodeExecutionGetDataRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeExecutionGetDataRequestDefaultTypeInternal _NodeExecutionGetDataRequest_default_instance_;
constexpr NodeExecutionGetDataResponse::NodeExecutionGetDataResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : inputs_(nullptr)
  , outputs_(nullptr)
  , full_inputs_(nullptr)
  , full_outputs_(nullptr)
  , dynamic_workflow_(nullptr){}
struct NodeExecutionGetDataResponseDefaultTypeInternal {
  constexpr NodeExecutionGetDataResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeExecutionGetDataResponseDefaultTypeInternal() {}
  union {
    NodeExecutionGetDataResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeExecutionGetDataResponseDefaultTypeInternal _NodeExecutionGetDataResponse_default_instance_;
}  // namespace admin
}  // namespace flyteidl
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_flyteidl_2fadmin_2fnode_5fexecution_2eproto[12];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_flyteidl_2fadmin_2fnode_5fexecution_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fadmin_2fnode_5fexecution_2eproto = nullptr;

const uint32_t TableStruct_flyteidl_2fadmin_2fnode_5fexecution_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NodeExecutionGetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NodeExecutionGetRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NodeExecutionListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NodeExecutionListRequest, workflow_execution_id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NodeExecutionListRequest, limit_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NodeExecutionListRequest, token_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NodeExecutionListRequest, filters_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NodeExecutionListRequest, sort_by_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NodeExecutionListRequest, unique_parent_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NodeExecutionForTaskListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NodeExecutionForTaskListRequest, task_execution_id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NodeExecutionForTaskListRequest, limit_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NodeExecutionForTaskListRequest, token_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NodeExecutionForTaskListRequest, filters_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NodeExecutionForTaskListRequest, sort_by_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NodeExecution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NodeExecution, id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NodeExecution, input_uri_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NodeExecution, closure_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NodeExecution, metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NodeExecutionMetaData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NodeExecutionMetaData, retry_group_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NodeExecutionMetaData, is_parent_node_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NodeExecutionMetaData, spec_node_id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NodeExecutionMetaData, is_dynamic_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NodeExecutionList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NodeExecutionList, node_executions_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NodeExecutionList, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NodeExecutionClosure, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NodeExecutionClosure, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NodeExecutionClosure, phase_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NodeExecutionClosure, started_at_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NodeExecutionClosure, duration_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NodeExecutionClosure, created_at_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NodeExecutionClosure, updated_at_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NodeExecutionClosure, output_result_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NodeExecutionClosure, target_metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowNodeMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::WorkflowNodeMetadata, executionid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskNodeMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskNodeMetadata, cache_status_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::TaskNodeMetadata, catalog_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::DynamicWorkflowNodeMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::DynamicWorkflowNodeMetadata, id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::DynamicWorkflowNodeMetadata, compiled_workflow_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NodeExecutionGetDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NodeExecutionGetDataRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NodeExecutionGetDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NodeExecutionGetDataResponse, inputs_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NodeExecutionGetDataResponse, outputs_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NodeExecutionGetDataResponse, full_inputs_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NodeExecutionGetDataResponse, full_outputs_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NodeExecutionGetDataResponse, dynamic_workflow_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::flyteidl::admin::NodeExecutionGetRequest)},
  { 7, -1, -1, sizeof(::flyteidl::admin::NodeExecutionListRequest)},
  { 19, -1, -1, sizeof(::flyteidl::admin::NodeExecutionForTaskListRequest)},
  { 30, -1, -1, sizeof(::flyteidl::admin::NodeExecution)},
  { 40, -1, -1, sizeof(::flyteidl::admin::NodeExecutionMetaData)},
  { 50, -1, -1, sizeof(::flyteidl::admin::NodeExecutionList)},
  { 58, -1, -1, sizeof(::flyteidl::admin::NodeExecutionClosure)},
  { 76, -1, -1, sizeof(::flyteidl::admin::WorkflowNodeMetadata)},
  { 83, -1, -1, sizeof(::flyteidl::admin::TaskNodeMetadata)},
  { 91, -1, -1, sizeof(::flyteidl::admin::DynamicWorkflowNodeMetadata)},
  { 99, -1, -1, sizeof(::flyteidl::admin::NodeExecutionGetDataRequest)},
  { 106, -1, -1, sizeof(::flyteidl::admin::NodeExecutionGetDataResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_NodeExecutionGetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_NodeExecutionListRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_NodeExecutionForTaskListRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_NodeExecution_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_NodeExecutionMetaData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_NodeExecutionList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_NodeExecutionClosure_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_WorkflowNodeMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_TaskNodeMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_DynamicWorkflowNodeMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_NodeExecutionGetDataRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::flyteidl::admin::_NodeExecutionGetDataResponse_default_instance_),
};

const char descriptor_table_protodef_flyteidl_2fadmin_2fnode_5fexecution_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n#flyteidl/admin/node_execution.proto\022\016f"
  "lyteidl.admin\032\033flyteidl/admin/common.pro"
  "to\032\035flyteidl/core/execution.proto\032\033flyte"
  "idl/core/catalog.proto\032\034flyteidl/core/co"
  "mpiler.proto\032\036flyteidl/core/identifier.p"
  "roto\032\034flyteidl/core/literals.proto\032\037goog"
  "le/protobuf/timestamp.proto\032\036google/prot"
  "obuf/duration.proto\"Q\n\027NodeExecutionGetR"
  "equest\0226\n\002id\030\001 \001(\0132&.flyteidl.core.NodeE"
  "xecutionIdentifierR\002id\"\231\002\n\030NodeExecution"
  "ListRequest\022^\n\025workflow_execution_id\030\001 \001"
  "(\0132*.flyteidl.core.WorkflowExecutionIden"
  "tifierR\023workflowExecutionId\022\024\n\005limit\030\002 \001"
  "(\rR\005limit\022\024\n\005token\030\003 \001(\tR\005token\022\030\n\007filte"
  "rs\030\004 \001(\tR\007filters\022-\n\007sort_by\030\005 \001(\0132\024.fly"
  "teidl.admin.SortR\006sortBy\022(\n\020unique_paren"
  "t_id\030\006 \001(\tR\016uniqueParentId\"\352\001\n\037NodeExecu"
  "tionForTaskListRequest\022R\n\021task_execution"
  "_id\030\001 \001(\0132&.flyteidl.core.TaskExecutionI"
  "dentifierR\017taskExecutionId\022\024\n\005limit\030\002 \001("
  "\rR\005limit\022\024\n\005token\030\003 \001(\tR\005token\022\030\n\007filter"
  "s\030\004 \001(\tR\007filters\022-\n\007sort_by\030\005 \001(\0132\024.flyt"
  "eidl.admin.SortR\006sortBy\"\347\001\n\rNodeExecutio"
  "n\0226\n\002id\030\001 \001(\0132&.flyteidl.core.NodeExecut"
  "ionIdentifierR\002id\022\033\n\tinput_uri\030\002 \001(\tR\010in"
  "putUri\022>\n\007closure\030\003 \001(\0132$.flyteidl.admin"
  ".NodeExecutionClosureR\007closure\022A\n\010metada"
  "ta\030\004 \001(\0132%.flyteidl.admin.NodeExecutionM"
  "etaDataR\010metadata\"\237\001\n\025NodeExecutionMetaD"
  "ata\022\037\n\013retry_group\030\001 \001(\tR\nretryGroup\022$\n\016"
  "is_parent_node\030\002 \001(\010R\014isParentNode\022 \n\014sp"
  "ec_node_id\030\003 \001(\tR\nspecNodeId\022\035\n\nis_dynam"
  "ic\030\004 \001(\010R\tisDynamic\"q\n\021NodeExecutionList"
  "\022F\n\017node_executions\030\001 \003(\0132\035.flyteidl.adm"
  "in.NodeExecutionR\016nodeExecutions\022\024\n\005toke"
  "n\030\002 \001(\tR\005token\"\252\005\n\024NodeExecutionClosure\022"
  "#\n\noutput_uri\030\001 \001(\tB\002\030\001H\000R\toutputUri\0225\n\005"
  "error\030\002 \001(\0132\035.flyteidl.core.ExecutionErr"
  "orH\000R\005error\022@\n\013output_data\030\n \001(\0132\031.flyte"
  "idl.core.LiteralMapB\002\030\001H\000R\noutputData\0228\n"
  "\005phase\030\003 \001(\0162\".flyteidl.core.NodeExecuti"
  "on.PhaseR\005phase\0229\n\nstarted_at\030\004 \001(\0132\032.go"
  "ogle.protobuf.TimestampR\tstartedAt\0225\n\010du"
  "ration\030\005 \001(\0132\031.google.protobuf.DurationR"
  "\010duration\0229\n\ncreated_at\030\006 \001(\0132\032.google.p"
  "rotobuf.TimestampR\tcreatedAt\0229\n\nupdated_"
  "at\030\007 \001(\0132\032.google.protobuf.TimestampR\tup"
  "datedAt\022\\\n\026workflow_node_metadata\030\010 \001(\0132"
  "$.flyteidl.admin.WorkflowNodeMetadataH\001R"
  "\024workflowNodeMetadata\022P\n\022task_node_metad"
  "ata\030\t \001(\0132 .flyteidl.admin.TaskNodeMetad"
  "ataH\001R\020taskNodeMetadataB\017\n\routput_result"
  "B\021\n\017target_metadata\"d\n\024WorkflowNodeMetad"
  "ata\022L\n\013executionId\030\001 \001(\0132*.flyteidl.core"
  ".WorkflowExecutionIdentifierR\013executionI"
  "d\"\231\001\n\020TaskNodeMetadata\022D\n\014cache_status\030\001"
  " \001(\0162!.flyteidl.core.CatalogCacheStatusR"
  "\013cacheStatus\022\?\n\013catalog_key\030\002 \001(\0132\036.flyt"
  "eidl.core.CatalogMetadataR\ncatalogKey\"\235\001"
  "\n\033DynamicWorkflowNodeMetadata\022)\n\002id\030\001 \001("
  "\0132\031.flyteidl.core.IdentifierR\002id\022S\n\021comp"
  "iled_workflow\030\002 \001(\0132&.flyteidl.core.Comp"
  "iledWorkflowClosureR\020compiledWorkflow\"U\n"
  "\033NodeExecutionGetDataRequest\0226\n\002id\030\001 \001(\013"
  "2&.flyteidl.core.NodeExecutionIdentifier"
  "R\002id\"\334\002\n\034NodeExecutionGetDataResponse\0223\n"
  "\006inputs\030\001 \001(\0132\027.flyteidl.admin.UrlBlobB\002"
  "\030\001R\006inputs\0225\n\007outputs\030\002 \001(\0132\027.flyteidl.a"
  "dmin.UrlBlobB\002\030\001R\007outputs\022:\n\013full_inputs"
  "\030\003 \001(\0132\031.flyteidl.core.LiteralMapR\nfullI"
  "nputs\022<\n\014full_outputs\030\004 \001(\0132\031.flyteidl.c"
  "ore.LiteralMapR\013fullOutputs\022V\n\020dynamic_w"
  "orkflow\030\020 \001(\0132+.flyteidl.admin.DynamicWo"
  "rkflowNodeMetadataR\017dynamicWorkflowB\273\001\n\022"
  "com.flyteidl.adminB\022NodeExecutionProtoH\002"
  "Z5github.com/flyteorg/flyteidl/gen/pb-go"
  "/flyteidl/admin\370\001\000\242\002\003FAX\252\002\016Flyteidl.Admi"
  "n\312\002\016Flyteidl\\Admin\342\002\032Flyteidl\\Admin\\GPBM"
  "etadata\352\002\017Flyteidl::Adminb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_flyteidl_2fadmin_2fnode_5fexecution_2eproto_deps[8] = {
  &::descriptor_table_flyteidl_2fadmin_2fcommon_2eproto,
  &::descriptor_table_flyteidl_2fcore_2fcatalog_2eproto,
  &::descriptor_table_flyteidl_2fcore_2fcompiler_2eproto,
  &::descriptor_table_flyteidl_2fcore_2fexecution_2eproto,
  &::descriptor_table_flyteidl_2fcore_2fidentifier_2eproto,
  &::descriptor_table_flyteidl_2fcore_2fliterals_2eproto,
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_flyteidl_2fadmin_2fnode_5fexecution_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flyteidl_2fadmin_2fnode_5fexecution_2eproto = {
  false, false, 3153, descriptor_table_protodef_flyteidl_2fadmin_2fnode_5fexecution_2eproto, "flyteidl/admin/node_execution.proto", 
  &descriptor_table_flyteidl_2fadmin_2fnode_5fexecution_2eproto_once, descriptor_table_flyteidl_2fadmin_2fnode_5fexecution_2eproto_deps, 8, 12,
  schemas, file_default_instances, TableStruct_flyteidl_2fadmin_2fnode_5fexecution_2eproto::offsets,
  file_level_metadata_flyteidl_2fadmin_2fnode_5fexecution_2eproto, file_level_enum_descriptors_flyteidl_2fadmin_2fnode_5fexecution_2eproto, file_level_service_descriptors_flyteidl_2fadmin_2fnode_5fexecution_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_flyteidl_2fadmin_2fnode_5fexecution_2eproto_getter() {
  return &descriptor_table_flyteidl_2fadmin_2fnode_5fexecution_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_flyteidl_2fadmin_2fnode_5fexecution_2eproto(&descriptor_table_flyteidl_2fadmin_2fnode_5fexecution_2eproto);
namespace flyteidl {
namespace admin {

// ===================================================================

class NodeExecutionGetRequest::_Internal {
 public:
  static const ::flyteidl::core::NodeExecutionIdentifier& id(const NodeExecutionGetRequest* msg);
};

const ::flyteidl::core::NodeExecutionIdentifier&
NodeExecutionGetRequest::_Internal::id(const NodeExecutionGetRequest* msg) {
  return *msg->id_;
}
void NodeExecutionGetRequest::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
NodeExecutionGetRequest::NodeExecutionGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.NodeExecutionGetRequest)
}
NodeExecutionGetRequest::NodeExecutionGetRequest(const NodeExecutionGetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::flyteidl::core::NodeExecutionIdentifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.NodeExecutionGetRequest)
}

inline void NodeExecutionGetRequest::SharedCtor() {
id_ = nullptr;
}

NodeExecutionGetRequest::~NodeExecutionGetRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.NodeExecutionGetRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NodeExecutionGetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
}

void NodeExecutionGetRequest::ArenaDtor(void* object) {
  NodeExecutionGetRequest* _this = reinterpret_cast< NodeExecutionGetRequest* >(object);
  (void)_this;
}
void NodeExecutionGetRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeExecutionGetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodeExecutionGetRequest::InternalSwap(NodeExecutionGetRequest* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata NodeExecutionGetRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fnode_5fexecution_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fnode_5fexecution_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fnode_5fexecution_2eproto[0]);
}

// ===================================================================

class NodeExecutionListRequest::_Internal {
 public:
  static const ::flyteidl::core::WorkflowExecutionIdentifier& workflow_execution_id(const NodeExecutionListRequest* msg);
  static const ::flyteidl::admin::Sort& sort_by(const NodeExecutionListRequest* msg);
};

const ::flyteidl::core::WorkflowExecutionIdentifier&
NodeExecutionListRequest::_Internal::workflow_execution_id(const NodeExecutionListRequest* msg) {
  return *msg->workflow_execution_id_;
}
const ::flyteidl::admin::Sort&
NodeExecutionListRequest::_Internal::sort_by(const NodeExecutionListRequest* msg) {
  return *msg->sort_by_;
}
void NodeExecutionListRequest::clear_workflow_execution_id() {
  if (GetArenaForAllocation() == nullptr && workflow_execution_id_ != nullptr) {
    delete workflow_execution_id_;
  }
  workflow_execution_id_ = nullptr;
}
void NodeExecutionListRequest::clear_sort_by() {
  if (GetArenaForAllocation() == nullptr && sort_by_ != nullptr) {
    delete sort_by_;
  }
  sort_by_ = nullptr;
}
NodeExecutionListRequest::NodeExecutionListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.NodeExecutionListRequest)
}
NodeExecutionListRequest::NodeExecutionListRequest(const NodeExecutionListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArenaForAllocation());
  }
  filters_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    filters_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filters().empty()) {
    filters_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filters(), 
      GetArenaForAllocation());
  }
  unique_parent_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    unique_parent_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_unique_parent_id().empty()) {
    unique_parent_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_unique_parent_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_workflow_execution_id()) {
    workflow_execution_id_ = new ::flyteidl::core::WorkflowExecutionIdentifier(*from.workflow_execution_id_);
  } else {
    workflow_execution_id_ = nullptr;
  }
  if (from._internal_has_sort_by()) {
    sort_by_ = new ::flyteidl::admin::Sort(*from.sort_by_);
  } else {
    sort_by_ = nullptr;
  }
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.NodeExecutionListRequest)
}

inline void NodeExecutionListRequest::SharedCtor() {
token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
filters_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  filters_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
unique_parent_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  unique_parent_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&workflow_execution_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&workflow_execution_id_)) + sizeof(limit_));
}

NodeExecutionListRequest::~NodeExecutionListRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.NodeExecutionListRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NodeExecutionListRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filters_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unique_parent_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete workflow_execution_id_;
  if (this != internal_default_instance()) delete sort_by_;
}

void NodeExecutionListRequest::ArenaDtor(void* object) {
  NodeExecutionListRequest* _this = reinterpret_cast< NodeExecutionListRequest* >(object);
  (void)_this;
}
void NodeExecutionListRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeExecutionListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodeExecutionListRequest::InternalSwap(NodeExecutionListRequest* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata NodeExecutionListRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fnode_5fexecution_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fnode_5fexecution_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fnode_5fexecution_2eproto[1]);
}

// ===================================================================

class NodeExecutionForTaskListRequest::_Internal {
 public:
  static const ::flyteidl::core::TaskExecutionIdentifier& task_execution_id(const NodeExecutionForTaskListRequest* msg);
  static const ::flyteidl::admin::Sort& sort_by(const NodeExecutionForTaskListRequest* msg);
};

const ::flyteidl::core::TaskExecutionIdentifier&
NodeExecutionForTaskListRequest::_Internal::task_execution_id(const NodeExecutionForTaskListRequest* msg) {
  return *msg->task_execution_id_;
}
const ::flyteidl::admin::Sort&
NodeExecutionForTaskListRequest::_Internal::sort_by(const NodeExecutionForTaskListRequest* msg) {
  return *msg->sort_by_;
}
void NodeExecutionForTaskListRequest::clear_task_execution_id() {
  if (GetArenaForAllocation() == nullptr && task_execution_id_ != nullptr) {
    delete task_execution_id_;
  }
  task_execution_id_ = nullptr;
}
void NodeExecutionForTaskListRequest::clear_sort_by() {
  if (GetArenaForAllocation() == nullptr && sort_by_ != nullptr) {
    delete sort_by_;
  }
  sort_by_ = nullptr;
}
NodeExecutionForTaskListRequest::NodeExecutionForTaskListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.NodeExecutionForTaskListRequest)
}
NodeExecutionForTaskListRequest::NodeExecutionForTaskListRequest(const NodeExecutionForTaskListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArenaForAllocation());
  }
  filters_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    filters_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filters().empty()) {
    filters_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filters(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_task_execution_id()) {
    task_execution_id_ = new ::flyteidl::core::TaskExecutionIdentifier(*from.task_execution_id_);
  } else {
    task_execution_id_ = nullptr;
  }
  if (from._internal_has_sort_by()) {
    sort_by_ = new ::flyteidl::admin::Sort(*from.sort_by_);
  } else {
    sort_by_ = nullptr;
  }
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.NodeExecutionForTaskListRequest)
}

inline void NodeExecutionForTaskListRequest::SharedCtor() {
token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
filters_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  filters_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&task_execution_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&task_execution_id_)) + sizeof(limit_));
}

NodeExecutionForTaskListRequest::~NodeExecutionForTaskListRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.NodeExecutionForTaskListRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NodeExecutionForTaskListRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filters_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete task_execution_id_;
  if (this != internal_default_instance()) delete sort_by_;
}

void NodeExecutionForTaskListRequest::ArenaDtor(void* object) {
  NodeExecutionForTaskListRequest* _this = reinterpret_cast< NodeExecutionForTaskListRequest* >(object);
  (void)_this;
}
void NodeExecutionForTaskListRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeExecutionForTaskListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodeExecutionForTaskListRequest::InternalSwap(NodeExecutionForTaskListRequest* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata NodeExecutionForTaskListRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fnode_5fexecution_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fnode_5fexecution_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fnode_5fexecution_2eproto[2]);
}

// ===================================================================

class NodeExecution::_Internal {
 public:
  static const ::flyteidl::core::NodeExecutionIdentifier& id(const NodeExecution* msg);
  static const ::flyteidl::admin::NodeExecutionClosure& closure(const NodeExecution* msg);
  static const ::flyteidl::admin::NodeExecutionMetaData& metadata(const NodeExecution* msg);
};

const ::flyteidl::core::NodeExecutionIdentifier&
NodeExecution::_Internal::id(const NodeExecution* msg) {
  return *msg->id_;
}
const ::flyteidl::admin::NodeExecutionClosure&
NodeExecution::_Internal::closure(const NodeExecution* msg) {
  return *msg->closure_;
}
const ::flyteidl::admin::NodeExecutionMetaData&
NodeExecution::_Internal::metadata(const NodeExecution* msg) {
  return *msg->metadata_;
}
void NodeExecution::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
NodeExecution::NodeExecution(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.NodeExecution)
}
NodeExecution::NodeExecution(const NodeExecution& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  input_uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    input_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_input_uri().empty()) {
    input_uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_input_uri(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_id()) {
    id_ = new ::flyteidl::core::NodeExecutionIdentifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_closure()) {
    closure_ = new ::flyteidl::admin::NodeExecutionClosure(*from.closure_);
  } else {
    closure_ = nullptr;
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::flyteidl::admin::NodeExecutionMetaData(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.NodeExecution)
}

inline void NodeExecution::SharedCtor() {
input_uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  input_uri_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&metadata_) -
    reinterpret_cast<char*>(&id_)) + sizeof(metadata_));
}

NodeExecution::~NodeExecution() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.NodeExecution)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NodeExecution::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  input_uri_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete closure_;
  if (this != internal_default_instance()) delete metadata_;
}

void NodeExecution::ArenaDtor(void* object) {
  NodeExecution* _this = reinterpret_cast< NodeExecution* >(object);
  (void)_this;
}
void NodeExecution::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeExecution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodeExecution::InternalSwap(NodeExecution* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata NodeExecution::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fnode_5fexecution_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fnode_5fexecution_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fnode_5fexecution_2eproto[3]);
}

// ===================================================================

class NodeExecutionMetaData::_Internal {
 public:
};

NodeExecutionMetaData::NodeExecutionMetaData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.NodeExecutionMetaData)
}
NodeExecutionMetaData::NodeExecutionMetaData(const NodeExecutionMetaData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  retry_group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    retry_group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_retry_group().empty()) {
    retry_group_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_retry_group(), 
      GetArenaForAllocation());
  }
  spec_node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    spec_node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_spec_node_id().empty()) {
    spec_node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_spec_node_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&is_parent_node_, &from.is_parent_node_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_dynamic_) -
    reinterpret_cast<char*>(&is_parent_node_)) + sizeof(is_dynamic_));
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.NodeExecutionMetaData)
}

inline void NodeExecutionMetaData::SharedCtor() {
retry_group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  retry_group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
spec_node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  spec_node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&is_parent_node_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_dynamic_) -
    reinterpret_cast<char*>(&is_parent_node_)) + sizeof(is_dynamic_));
}

NodeExecutionMetaData::~NodeExecutionMetaData() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.NodeExecutionMetaData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NodeExecutionMetaData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  retry_group_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spec_node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NodeExecutionMetaData::ArenaDtor(void* object) {
  NodeExecutionMetaData* _this = reinterpret_cast< NodeExecutionMetaData* >(object);
  (void)_this;
}
void NodeExecutionMetaData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeExecutionMetaData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodeExecutionMetaData::InternalSwap(NodeExecutionMetaData* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata NodeExecutionMetaData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fnode_5fexecution_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fnode_5fexecution_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fnode_5fexecution_2eproto[4]);
}

// ===================================================================

class NodeExecutionList::_Internal {
 public:
};

NodeExecutionList::NodeExecutionList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  node_executions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.NodeExecutionList)
}
NodeExecutionList::NodeExecutionList(const NodeExecutionList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      node_executions_(from.node_executions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.NodeExecutionList)
}

inline void NodeExecutionList::SharedCtor() {
token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NodeExecutionList::~NodeExecutionList() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.NodeExecutionList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NodeExecutionList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NodeExecutionList::ArenaDtor(void* object) {
  NodeExecutionList* _this = reinterpret_cast< NodeExecutionList* >(object);
  (void)_this;
}
void NodeExecutionList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeExecutionList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodeExecutionList::InternalSwap(NodeExecutionList* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata NodeExecutionList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fnode_5fexecution_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fnode_5fexecution_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fnode_5fexecution_2eproto[5]);
}

// ===================================================================

class NodeExecutionClosure::_Internal {
 public:
  static const ::flyteidl::core::ExecutionError& error(const NodeExecutionClosure* msg);
  static const ::flyteidl::core::LiteralMap& output_data(const NodeExecutionClosure* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& started_at(const NodeExecutionClosure* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& duration(const NodeExecutionClosure* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const NodeExecutionClosure* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated_at(const NodeExecutionClosure* msg);
  static const ::flyteidl::admin::WorkflowNodeMetadata& workflow_node_metadata(const NodeExecutionClosure* msg);
  static const ::flyteidl::admin::TaskNodeMetadata& task_node_metadata(const NodeExecutionClosure* msg);
};

const ::flyteidl::core::ExecutionError&
NodeExecutionClosure::_Internal::error(const NodeExecutionClosure* msg) {
  return *msg->output_result_.error_;
}
const ::flyteidl::core::LiteralMap&
NodeExecutionClosure::_Internal::output_data(const NodeExecutionClosure* msg) {
  return *msg->output_result_.output_data_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
NodeExecutionClosure::_Internal::started_at(const NodeExecutionClosure* msg) {
  return *msg->started_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
NodeExecutionClosure::_Internal::duration(const NodeExecutionClosure* msg) {
  return *msg->duration_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
NodeExecutionClosure::_Internal::created_at(const NodeExecutionClosure* msg) {
  return *msg->created_at_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
NodeExecutionClosure::_Internal::updated_at(const NodeExecutionClosure* msg) {
  return *msg->updated_at_;
}
const ::flyteidl::admin::WorkflowNodeMetadata&
NodeExecutionClosure::_Internal::workflow_node_metadata(const NodeExecutionClosure* msg) {
  return *msg->target_metadata_.workflow_node_metadata_;
}
const ::flyteidl::admin::TaskNodeMetadata&
NodeExecutionClosure::_Internal::task_node_metadata(const NodeExecutionClosure* msg) {
  return *msg->target_metadata_.task_node_metadata_;
}
void NodeExecutionClosure::set_allocated_error(::flyteidl::core::ExecutionError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_output_result();
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error));
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    output_result_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.NodeExecutionClosure.error)
}
void NodeExecutionClosure::clear_error() {
  if (_internal_has_error()) {
    if (GetArenaForAllocation() == nullptr) {
      delete output_result_.error_;
    }
    clear_has_output_result();
  }
}
void NodeExecutionClosure::set_allocated_output_data(::flyteidl::core::LiteralMap* output_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_output_result();
  if (output_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_data));
    if (message_arena != submessage_arena) {
      output_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output_data, submessage_arena);
    }
    set_has_output_data();
    output_result_.output_data_ = output_data;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.NodeExecutionClosure.output_data)
}
void NodeExecutionClosure::clear_output_data() {
  if (_internal_has_output_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete output_result_.output_data_;
    }
    clear_has_output_result();
  }
}
void NodeExecutionClosure::clear_started_at() {
  if (GetArenaForAllocation() == nullptr && started_at_ != nullptr) {
    delete started_at_;
  }
  started_at_ = nullptr;
}
void NodeExecutionClosure::clear_duration() {
  if (GetArenaForAllocation() == nullptr && duration_ != nullptr) {
    delete duration_;
  }
  duration_ = nullptr;
}
void NodeExecutionClosure::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void NodeExecutionClosure::clear_updated_at() {
  if (GetArenaForAllocation() == nullptr && updated_at_ != nullptr) {
    delete updated_at_;
  }
  updated_at_ = nullptr;
}
void NodeExecutionClosure::set_allocated_workflow_node_metadata(::flyteidl::admin::WorkflowNodeMetadata* workflow_node_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_target_metadata();
  if (workflow_node_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::admin::WorkflowNodeMetadata>::GetOwningArena(workflow_node_metadata);
    if (message_arena != submessage_arena) {
      workflow_node_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, workflow_node_metadata, submessage_arena);
    }
    set_has_workflow_node_metadata();
    target_metadata_.workflow_node_metadata_ = workflow_node_metadata;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.NodeExecutionClosure.workflow_node_metadata)
}
void NodeExecutionClosure::set_allocated_task_node_metadata(::flyteidl::admin::TaskNodeMetadata* task_node_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_target_metadata();
  if (task_node_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::flyteidl::admin::TaskNodeMetadata>::GetOwningArena(task_node_metadata);
    if (message_arena != submessage_arena) {
      task_node_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, task_node_metadata, submessage_arena);
    }
    set_has_task_node_metadata();
    target_metadata_.task_node_metadata_ = task_node_metadata;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.NodeExecutionClosure.task_node_metadata)
}
NodeExecutionClosure::NodeExecutionClosure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.NodeExecutionClosure)
}
NodeExecutionClosure::NodeExecutionClosure(const NodeExecutionClosure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_started_at()) {
    started_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.started_at_);
  } else {
    started_at_ = nullptr;
  }
  if (from._internal_has_duration()) {
    duration_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.duration_);
  } else {
    duration_ = nullptr;
  }
  if (from._internal_has_created_at()) {
    created_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from._internal_has_updated_at()) {
    updated_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.updated_at_);
  } else {
    updated_at_ = nullptr;
  }
  phase_ = from.phase_;
  clear_has_output_result();
  switch (from.output_result_case()) {
    case kOutputUri: {
      _internal_set_output_uri(from._internal_output_uri());
      break;
    }
    case kError: {
      _internal_mutable_error()->::flyteidl::core::ExecutionError::MergeFrom(from._internal_error());
      break;
    }
    case kOutputData: {
      _internal_mutable_output_data()->::flyteidl::core::LiteralMap::MergeFrom(from._internal_output_data());
      break;
    }
    case OUTPUT_RESULT_NOT_SET: {
      break;
    }
  }
  clear_has_target_metadata();
  switch (from.target_metadata_case()) {
    case kWorkflowNodeMetadata: {
      _internal_mutable_workflow_node_metadata()->::flyteidl::admin::WorkflowNodeMetadata::MergeFrom(from._internal_workflow_node_metadata());
      break;
    }
    case kTaskNodeMetadata: {
      _internal_mutable_task_node_metadata()->::flyteidl::admin::TaskNodeMetadata::MergeFrom(from._internal_task_node_metadata());
      break;
    }
    case TARGET_METADATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.NodeExecutionClosure)
}

inline void NodeExecutionClosure::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&started_at_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&phase_) -
    reinterpret_cast<char*>(&started_at_)) + sizeof(phase_));
clear_has_output_result();
clear_has_target_metadata();
}

NodeExecutionClosure::~NodeExecutionClosure() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.NodeExecutionClosure)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NodeExecutionClosure::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete started_at_;
  if (this != internal_default_instance()) delete duration_;
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete updated_at_;
  if (has_output_result()) {
    clear_output_result();
  }
  if (has_target_metadata()) {
    clear_target_metadata();
  }
}

void NodeExecutionClosure::ArenaDtor(void* object) {
  NodeExecutionClosure* _this = reinterpret_cast< NodeExecutionClosure* >(object);
  (void)_this;
}
void NodeExecutionClosure::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeExecutionClosure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodeExecutionClosure::clear_output_result() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.admin.NodeExecutionClosure)
  switch (output_result_case()) {
    case kOutputUri: {
      output_result_.output_uri_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kError: {
      if (GetArenaForAllocation() == nullptr) {
        delete output_result_.error_;
      }
      break;
    }
    case kOutputData: {
      if (GetArenaForAllocation() == nullptr) {
        delete output_result_.output_data_;
      }
      break;
    }
    case OUTPUT_RESULT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OUTPUT_RESULT_NOT_SET;
}

void NodeExecutionClosure::clear_target_metadata() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.admin.NodeExecutionClosure)
  switch (target_metadata_case()) {
    case kWorkflowNodeMetadata: {
      if (GetArenaForAllocation() == nullptr) {
        delete target_metadata_.workflow_node_metadata_;
      }
      break;
    }
    case kTaskNodeMetadata: {
      if (GetArenaForAllocation() == nullptr) {
        delete target_metadata_.task_node_metadata_;
      }
      break;
    }
    case TARGET_METADATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = TARGET_METADATA_NOT_SET;
}


void NodeExecutionClosure::InternalSwap(NodeExecutionClosure* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata NodeExecutionClosure::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fnode_5fexecution_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fnode_5fexecution_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fnode_5fexecution_2eproto[6]);
}

// ===================================================================

class WorkflowNodeMetadata::_Internal {
 public:
  static const ::flyteidl::core::WorkflowExecutionIdentifier& executionid(const WorkflowNodeMetadata* msg);
};

const ::flyteidl::core::WorkflowExecutionIdentifier&
WorkflowNodeMetadata::_Internal::executionid(const WorkflowNodeMetadata* msg) {
  return *msg->executionid_;
}
void WorkflowNodeMetadata::clear_executionid() {
  if (GetArenaForAllocation() == nullptr && executionid_ != nullptr) {
    delete executionid_;
  }
  executionid_ = nullptr;
}
WorkflowNodeMetadata::WorkflowNodeMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.WorkflowNodeMetadata)
}
WorkflowNodeMetadata::WorkflowNodeMetadata(const WorkflowNodeMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_executionid()) {
    executionid_ = new ::flyteidl::core::WorkflowExecutionIdentifier(*from.executionid_);
  } else {
    executionid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.WorkflowNodeMetadata)
}

inline void WorkflowNodeMetadata::SharedCtor() {
executionid_ = nullptr;
}

WorkflowNodeMetadata::~WorkflowNodeMetadata() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.WorkflowNodeMetadata)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WorkflowNodeMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete executionid_;
}

void WorkflowNodeMetadata::ArenaDtor(void* object) {
  WorkflowNodeMetadata* _this = reinterpret_cast< WorkflowNodeMetadata* >(object);
  (void)_this;
}
void WorkflowNodeMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkflowNodeMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WorkflowNodeMetadata::InternalSwap(WorkflowNodeMetadata* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata WorkflowNodeMetadata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fnode_5fexecution_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fnode_5fexecution_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fnode_5fexecution_2eproto[7]);
}

// ===================================================================

class TaskNodeMetadata::_Internal {
 public:
  static const ::flyteidl::core::CatalogMetadata& catalog_key(const TaskNodeMetadata* msg);
};

const ::flyteidl::core::CatalogMetadata&
TaskNodeMetadata::_Internal::catalog_key(const TaskNodeMetadata* msg) {
  return *msg->catalog_key_;
}
void TaskNodeMetadata::clear_catalog_key() {
  if (GetArenaForAllocation() == nullptr && catalog_key_ != nullptr) {
    delete catalog_key_;
  }
  catalog_key_ = nullptr;
}
TaskNodeMetadata::TaskNodeMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.TaskNodeMetadata)
}
TaskNodeMetadata::TaskNodeMetadata(const TaskNodeMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_catalog_key()) {
    catalog_key_ = new ::flyteidl::core::CatalogMetadata(*from.catalog_key_);
  } else {
    catalog_key_ = nullptr;
  }
  cache_status_ = from.cache_status_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.TaskNodeMetadata)
}

inline void TaskNodeMetadata::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&catalog_key_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cache_status_) -
    reinterpret_cast<char*>(&catalog_key_)) + sizeof(cache_status_));
}

TaskNodeMetadata::~TaskNodeMetadata() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.TaskNodeMetadata)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TaskNodeMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete catalog_key_;
}

void TaskNodeMetadata::ArenaDtor(void* object) {
  TaskNodeMetadata* _this = reinterpret_cast< TaskNodeMetadata* >(object);
  (void)_this;
}
void TaskNodeMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskNodeMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TaskNodeMetadata::InternalSwap(TaskNodeMetadata* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata TaskNodeMetadata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fnode_5fexecution_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fnode_5fexecution_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fnode_5fexecution_2eproto[8]);
}

// ===================================================================

class DynamicWorkflowNodeMetadata::_Internal {
 public:
  static const ::flyteidl::core::Identifier& id(const DynamicWorkflowNodeMetadata* msg);
  static const ::flyteidl::core::CompiledWorkflowClosure& compiled_workflow(const DynamicWorkflowNodeMetadata* msg);
};

const ::flyteidl::core::Identifier&
DynamicWorkflowNodeMetadata::_Internal::id(const DynamicWorkflowNodeMetadata* msg) {
  return *msg->id_;
}
const ::flyteidl::core::CompiledWorkflowClosure&
DynamicWorkflowNodeMetadata::_Internal::compiled_workflow(const DynamicWorkflowNodeMetadata* msg) {
  return *msg->compiled_workflow_;
}
void DynamicWorkflowNodeMetadata::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
void DynamicWorkflowNodeMetadata::clear_compiled_workflow() {
  if (GetArenaForAllocation() == nullptr && compiled_workflow_ != nullptr) {
    delete compiled_workflow_;
  }
  compiled_workflow_ = nullptr;
}
DynamicWorkflowNodeMetadata::DynamicWorkflowNodeMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.DynamicWorkflowNodeMetadata)
}
DynamicWorkflowNodeMetadata::DynamicWorkflowNodeMetadata(const DynamicWorkflowNodeMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::flyteidl::core::Identifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from._internal_has_compiled_workflow()) {
    compiled_workflow_ = new ::flyteidl::core::CompiledWorkflowClosure(*from.compiled_workflow_);
  } else {
    compiled_workflow_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.DynamicWorkflowNodeMetadata)
}

inline void DynamicWorkflowNodeMetadata::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&compiled_workflow_) -
    reinterpret_cast<char*>(&id_)) + sizeof(compiled_workflow_));
}

DynamicWorkflowNodeMetadata::~DynamicWorkflowNodeMetadata() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.DynamicWorkflowNodeMetadata)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DynamicWorkflowNodeMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete compiled_workflow_;
}

void DynamicWorkflowNodeMetadata::ArenaDtor(void* object) {
  DynamicWorkflowNodeMetadata* _this = reinterpret_cast< DynamicWorkflowNodeMetadata* >(object);
  (void)_this;
}
void DynamicWorkflowNodeMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DynamicWorkflowNodeMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DynamicWorkflowNodeMetadata::InternalSwap(DynamicWorkflowNodeMetadata* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata DynamicWorkflowNodeMetadata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fnode_5fexecution_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fnode_5fexecution_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fnode_5fexecution_2eproto[9]);
}

// ===================================================================

class NodeExecutionGetDataRequest::_Internal {
 public:
  static const ::flyteidl::core::NodeExecutionIdentifier& id(const NodeExecutionGetDataRequest* msg);
};

const ::flyteidl::core::NodeExecutionIdentifier&
NodeExecutionGetDataRequest::_Internal::id(const NodeExecutionGetDataRequest* msg) {
  return *msg->id_;
}
void NodeExecutionGetDataRequest::clear_id() {
  if (GetArenaForAllocation() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
NodeExecutionGetDataRequest::NodeExecutionGetDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.NodeExecutionGetDataRequest)
}
NodeExecutionGetDataRequest::NodeExecutionGetDataRequest(const NodeExecutionGetDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    id_ = new ::flyteidl::core::NodeExecutionIdentifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.NodeExecutionGetDataRequest)
}

inline void NodeExecutionGetDataRequest::SharedCtor() {
id_ = nullptr;
}

NodeExecutionGetDataRequest::~NodeExecutionGetDataRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.NodeExecutionGetDataRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NodeExecutionGetDataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete id_;
}

void NodeExecutionGetDataRequest::ArenaDtor(void* object) {
  NodeExecutionGetDataRequest* _this = reinterpret_cast< NodeExecutionGetDataRequest* >(object);
  (void)_this;
}
void NodeExecutionGetDataRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeExecutionGetDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodeExecutionGetDataRequest::InternalSwap(NodeExecutionGetDataRequest* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata NodeExecutionGetDataRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fnode_5fexecution_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fnode_5fexecution_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fnode_5fexecution_2eproto[10]);
}

// ===================================================================

class NodeExecutionGetDataResponse::_Internal {
 public:
  static const ::flyteidl::admin::UrlBlob& inputs(const NodeExecutionGetDataResponse* msg);
  static const ::flyteidl::admin::UrlBlob& outputs(const NodeExecutionGetDataResponse* msg);
  static const ::flyteidl::core::LiteralMap& full_inputs(const NodeExecutionGetDataResponse* msg);
  static const ::flyteidl::core::LiteralMap& full_outputs(const NodeExecutionGetDataResponse* msg);
  static const ::flyteidl::admin::DynamicWorkflowNodeMetadata& dynamic_workflow(const NodeExecutionGetDataResponse* msg);
};

const ::flyteidl::admin::UrlBlob&
NodeExecutionGetDataResponse::_Internal::inputs(const NodeExecutionGetDataResponse* msg) {
  return *msg->inputs_;
}
const ::flyteidl::admin::UrlBlob&
NodeExecutionGetDataResponse::_Internal::outputs(const NodeExecutionGetDataResponse* msg) {
  return *msg->outputs_;
}
const ::flyteidl::core::LiteralMap&
NodeExecutionGetDataResponse::_Internal::full_inputs(const NodeExecutionGetDataResponse* msg) {
  return *msg->full_inputs_;
}
const ::flyteidl::core::LiteralMap&
NodeExecutionGetDataResponse::_Internal::full_outputs(const NodeExecutionGetDataResponse* msg) {
  return *msg->full_outputs_;
}
const ::flyteidl::admin::DynamicWorkflowNodeMetadata&
NodeExecutionGetDataResponse::_Internal::dynamic_workflow(const NodeExecutionGetDataResponse* msg) {
  return *msg->dynamic_workflow_;
}
void NodeExecutionGetDataResponse::clear_inputs() {
  if (GetArenaForAllocation() == nullptr && inputs_ != nullptr) {
    delete inputs_;
  }
  inputs_ = nullptr;
}
void NodeExecutionGetDataResponse::clear_outputs() {
  if (GetArenaForAllocation() == nullptr && outputs_ != nullptr) {
    delete outputs_;
  }
  outputs_ = nullptr;
}
void NodeExecutionGetDataResponse::clear_full_inputs() {
  if (GetArenaForAllocation() == nullptr && full_inputs_ != nullptr) {
    delete full_inputs_;
  }
  full_inputs_ = nullptr;
}
void NodeExecutionGetDataResponse::clear_full_outputs() {
  if (GetArenaForAllocation() == nullptr && full_outputs_ != nullptr) {
    delete full_outputs_;
  }
  full_outputs_ = nullptr;
}
NodeExecutionGetDataResponse::NodeExecutionGetDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:flyteidl.admin.NodeExecutionGetDataResponse)
}
NodeExecutionGetDataResponse::NodeExecutionGetDataResponse(const NodeExecutionGetDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_inputs()) {
    inputs_ = new ::flyteidl::admin::UrlBlob(*from.inputs_);
  } else {
    inputs_ = nullptr;
  }
  if (from._internal_has_outputs()) {
    outputs_ = new ::flyteidl::admin::UrlBlob(*from.outputs_);
  } else {
    outputs_ = nullptr;
  }
  if (from._internal_has_full_inputs()) {
    full_inputs_ = new ::flyteidl::core::LiteralMap(*from.full_inputs_);
  } else {
    full_inputs_ = nullptr;
  }
  if (from._internal_has_full_outputs()) {
    full_outputs_ = new ::flyteidl::core::LiteralMap(*from.full_outputs_);
  } else {
    full_outputs_ = nullptr;
  }
  if (from._internal_has_dynamic_workflow()) {
    dynamic_workflow_ = new ::flyteidl::admin::DynamicWorkflowNodeMetadata(*from.dynamic_workflow_);
  } else {
    dynamic_workflow_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.NodeExecutionGetDataResponse)
}

inline void NodeExecutionGetDataResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&inputs_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dynamic_workflow_) -
    reinterpret_cast<char*>(&inputs_)) + sizeof(dynamic_workflow_));
}

NodeExecutionGetDataResponse::~NodeExecutionGetDataResponse() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.NodeExecutionGetDataResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NodeExecutionGetDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete inputs_;
  if (this != internal_default_instance()) delete outputs_;
  if (this != internal_default_instance()) delete full_inputs_;
  if (this != internal_default_instance()) delete full_outputs_;
  if (this != internal_default_instance()) delete dynamic_workflow_;
}

void NodeExecutionGetDataResponse::ArenaDtor(void* object) {
  NodeExecutionGetDataResponse* _this = reinterpret_cast< NodeExecutionGetDataResponse* >(object);
  (void)_this;
}
void NodeExecutionGetDataResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeExecutionGetDataResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NodeExecutionGetDataResponse::InternalSwap(NodeExecutionGetDataResponse* other) {
  using std::swap;
  GetReflection()->Swap(this, other);}

::PROTOBUF_NAMESPACE_ID::Metadata NodeExecutionGetDataResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_flyteidl_2fadmin_2fnode_5fexecution_2eproto_getter, &descriptor_table_flyteidl_2fadmin_2fnode_5fexecution_2eproto_once,
      file_level_metadata_flyteidl_2fadmin_2fnode_5fexecution_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace admin
}  // namespace flyteidl
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::flyteidl::admin::NodeExecutionGetRequest* Arena::CreateMaybeMessage< ::flyteidl::admin::NodeExecutionGetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::NodeExecutionGetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::NodeExecutionListRequest* Arena::CreateMaybeMessage< ::flyteidl::admin::NodeExecutionListRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::NodeExecutionListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::NodeExecutionForTaskListRequest* Arena::CreateMaybeMessage< ::flyteidl::admin::NodeExecutionForTaskListRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::NodeExecutionForTaskListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::NodeExecution* Arena::CreateMaybeMessage< ::flyteidl::admin::NodeExecution >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::NodeExecution >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::NodeExecutionMetaData* Arena::CreateMaybeMessage< ::flyteidl::admin::NodeExecutionMetaData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::NodeExecutionMetaData >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::NodeExecutionList* Arena::CreateMaybeMessage< ::flyteidl::admin::NodeExecutionList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::NodeExecutionList >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::NodeExecutionClosure* Arena::CreateMaybeMessage< ::flyteidl::admin::NodeExecutionClosure >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::NodeExecutionClosure >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::WorkflowNodeMetadata* Arena::CreateMaybeMessage< ::flyteidl::admin::WorkflowNodeMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::WorkflowNodeMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::TaskNodeMetadata* Arena::CreateMaybeMessage< ::flyteidl::admin::TaskNodeMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::TaskNodeMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::DynamicWorkflowNodeMetadata* Arena::CreateMaybeMessage< ::flyteidl::admin::DynamicWorkflowNodeMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::DynamicWorkflowNodeMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::NodeExecutionGetDataRequest* Arena::CreateMaybeMessage< ::flyteidl::admin::NodeExecutionGetDataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::NodeExecutionGetDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::NodeExecutionGetDataResponse* Arena::CreateMaybeMessage< ::flyteidl::admin::NodeExecutionGetDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::flyteidl::admin::NodeExecutionGetDataResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
