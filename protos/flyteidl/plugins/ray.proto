syntax = "proto3";

package flyteidl.core;

option go_package = "github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/core";

import "google/protobuf/timestamp.proto";

// RayJobSpec defines the desired state of RayJob
message RayJob {
  // RayClusterSpec is the cluster template to run the job
  RayCluster rayCluster = 1;
  // RuntimeEnv is base64 encoded.
  // Ray runtime environments: https://docs.ray.io/en/latest/ray-core/handling-dependencies.html#runtime-environments
  string RuntimeEnv = 2;
  // ShutdownAfterJobFinishes will determine whether to delete the ray cluster once rayJob succeed or failed.
  bool ShutdownAfterJobFinishes = 3;
  // TTLSecondsAfterFinished is the TTL to clean up RayCluster.
  // It's only working when ShutdownAfterJobFinishes set to true.
  int32 TTLSecondsAfterFinished = 4;
}

// Define Ray cluster spec
message RayCluster {
  // Required field. This field indicates ray cluster configuration
  ClusterSpec cluster_spec = 1;

}

message ClusterSpec {
  // The head group configuration
  HeadGroupSpec head_group_spec = 1;
  // The worker group configurations
  repeated WorkerGroupSpec worker_group_spec = 2;
}

message HeadGroupSpec {
  // Optional. The ray start params of head node group
  map<string, string> ray_start_params = 1;
}

message WorkerGroupSpec {
  // Required. Group name of the current worker group
  string group_name = 1;
  // Required. Desired replicas of the worker group
  int32 replicas = 2;
  // Optional. Min replicas of the worker group
  int32 min_replicas = 3;
  // Optional. Max replicas of the worker group
  int32 max_replicas = 4;
  // Optional. The ray start params of worker node group
  map<string, string> ray_start_params = 5;
}
