// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/admin/common.proto

#include "flyteidl/admin/common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Annotations_ValuesEntry_DoNotUse_flyteidl_2fadmin_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_EmailNotification_flyteidl_2fadmin_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Labels_ValuesEntry_DoNotUse_flyteidl_2fadmin_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NamedEntityIdentifier_flyteidl_2fadmin_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NamedEntityMetadata_flyteidl_2fadmin_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PagerDutyNotification_flyteidl_2fadmin_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SlackNotification_flyteidl_2fadmin_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Sort_flyteidl_2fadmin_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fadmin_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_NamedEntity_flyteidl_2fadmin_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flyteidl_2fcore_2fidentifier_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Identifier_flyteidl_2fcore_2fidentifier_2eproto;
namespace flyteidl {
namespace admin {
class NamedEntityIdentifierDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NamedEntityIdentifier> _instance;
} _NamedEntityIdentifier_default_instance_;
class NamedEntityMetadataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NamedEntityMetadata> _instance;
} _NamedEntityMetadata_default_instance_;
class NamedEntityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NamedEntity> _instance;
} _NamedEntity_default_instance_;
class SortDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Sort> _instance;
} _Sort_default_instance_;
class NamedEntityIdentifierListRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NamedEntityIdentifierListRequest> _instance;
} _NamedEntityIdentifierListRequest_default_instance_;
class NamedEntityListRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NamedEntityListRequest> _instance;
} _NamedEntityListRequest_default_instance_;
class NamedEntityIdentifierListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NamedEntityIdentifierList> _instance;
} _NamedEntityIdentifierList_default_instance_;
class NamedEntityListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NamedEntityList> _instance;
} _NamedEntityList_default_instance_;
class NamedEntityGetRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NamedEntityGetRequest> _instance;
} _NamedEntityGetRequest_default_instance_;
class NamedEntityUpdateRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NamedEntityUpdateRequest> _instance;
} _NamedEntityUpdateRequest_default_instance_;
class NamedEntityUpdateResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NamedEntityUpdateResponse> _instance;
} _NamedEntityUpdateResponse_default_instance_;
class ObjectGetRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ObjectGetRequest> _instance;
} _ObjectGetRequest_default_instance_;
class ResourceListRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResourceListRequest> _instance;
} _ResourceListRequest_default_instance_;
class EmailNotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EmailNotification> _instance;
} _EmailNotification_default_instance_;
class PagerDutyNotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PagerDutyNotification> _instance;
} _PagerDutyNotification_default_instance_;
class SlackNotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SlackNotification> _instance;
} _SlackNotification_default_instance_;
class NotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Notification> _instance;
  const ::flyteidl::admin::EmailNotification* email_;
  const ::flyteidl::admin::PagerDutyNotification* pager_duty_;
  const ::flyteidl::admin::SlackNotification* slack_;
} _Notification_default_instance_;
class UrlBlobDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UrlBlob> _instance;
} _UrlBlob_default_instance_;
class Labels_ValuesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Labels_ValuesEntry_DoNotUse> _instance;
} _Labels_ValuesEntry_DoNotUse_default_instance_;
class LabelsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Labels> _instance;
} _Labels_default_instance_;
class Annotations_ValuesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Annotations_ValuesEntry_DoNotUse> _instance;
} _Annotations_ValuesEntry_DoNotUse_default_instance_;
class AnnotationsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Annotations> _instance;
} _Annotations_default_instance_;
class AuthRoleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AuthRole> _instance;
  ::google::protobuf::internal::ArenaStringPtr assumable_iam_role_;
  ::google::protobuf::internal::ArenaStringPtr kubernetes_service_account_;
} _AuthRole_default_instance_;
}  // namespace admin
}  // namespace flyteidl
static void InitDefaultsNamedEntityIdentifier_flyteidl_2fadmin_2fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_NamedEntityIdentifier_default_instance_;
    new (ptr) ::flyteidl::admin::NamedEntityIdentifier();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::NamedEntityIdentifier::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NamedEntityIdentifier_flyteidl_2fadmin_2fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNamedEntityIdentifier_flyteidl_2fadmin_2fcommon_2eproto}, {}};

static void InitDefaultsNamedEntityMetadata_flyteidl_2fadmin_2fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_NamedEntityMetadata_default_instance_;
    new (ptr) ::flyteidl::admin::NamedEntityMetadata();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::NamedEntityMetadata::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NamedEntityMetadata_flyteidl_2fadmin_2fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNamedEntityMetadata_flyteidl_2fadmin_2fcommon_2eproto}, {}};

static void InitDefaultsNamedEntity_flyteidl_2fadmin_2fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_NamedEntity_default_instance_;
    new (ptr) ::flyteidl::admin::NamedEntity();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::NamedEntity::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_NamedEntity_flyteidl_2fadmin_2fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsNamedEntity_flyteidl_2fadmin_2fcommon_2eproto}, {
      &scc_info_NamedEntityIdentifier_flyteidl_2fadmin_2fcommon_2eproto.base,
      &scc_info_NamedEntityMetadata_flyteidl_2fadmin_2fcommon_2eproto.base,}};

static void InitDefaultsSort_flyteidl_2fadmin_2fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_Sort_default_instance_;
    new (ptr) ::flyteidl::admin::Sort();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::Sort::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Sort_flyteidl_2fadmin_2fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSort_flyteidl_2fadmin_2fcommon_2eproto}, {}};

static void InitDefaultsNamedEntityIdentifierListRequest_flyteidl_2fadmin_2fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_NamedEntityIdentifierListRequest_default_instance_;
    new (ptr) ::flyteidl::admin::NamedEntityIdentifierListRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::NamedEntityIdentifierListRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_NamedEntityIdentifierListRequest_flyteidl_2fadmin_2fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNamedEntityIdentifierListRequest_flyteidl_2fadmin_2fcommon_2eproto}, {
      &scc_info_Sort_flyteidl_2fadmin_2fcommon_2eproto.base,}};

static void InitDefaultsNamedEntityListRequest_flyteidl_2fadmin_2fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_NamedEntityListRequest_default_instance_;
    new (ptr) ::flyteidl::admin::NamedEntityListRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::NamedEntityListRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_NamedEntityListRequest_flyteidl_2fadmin_2fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNamedEntityListRequest_flyteidl_2fadmin_2fcommon_2eproto}, {
      &scc_info_Sort_flyteidl_2fadmin_2fcommon_2eproto.base,}};

static void InitDefaultsNamedEntityIdentifierList_flyteidl_2fadmin_2fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_NamedEntityIdentifierList_default_instance_;
    new (ptr) ::flyteidl::admin::NamedEntityIdentifierList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::NamedEntityIdentifierList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_NamedEntityIdentifierList_flyteidl_2fadmin_2fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNamedEntityIdentifierList_flyteidl_2fadmin_2fcommon_2eproto}, {
      &scc_info_NamedEntityIdentifier_flyteidl_2fadmin_2fcommon_2eproto.base,}};

static void InitDefaultsNamedEntityList_flyteidl_2fadmin_2fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_NamedEntityList_default_instance_;
    new (ptr) ::flyteidl::admin::NamedEntityList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::NamedEntityList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_NamedEntityList_flyteidl_2fadmin_2fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNamedEntityList_flyteidl_2fadmin_2fcommon_2eproto}, {
      &scc_info_NamedEntity_flyteidl_2fadmin_2fcommon_2eproto.base,}};

static void InitDefaultsNamedEntityGetRequest_flyteidl_2fadmin_2fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_NamedEntityGetRequest_default_instance_;
    new (ptr) ::flyteidl::admin::NamedEntityGetRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::NamedEntityGetRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_NamedEntityGetRequest_flyteidl_2fadmin_2fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNamedEntityGetRequest_flyteidl_2fadmin_2fcommon_2eproto}, {
      &scc_info_NamedEntityIdentifier_flyteidl_2fadmin_2fcommon_2eproto.base,}};

static void InitDefaultsNamedEntityUpdateRequest_flyteidl_2fadmin_2fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_NamedEntityUpdateRequest_default_instance_;
    new (ptr) ::flyteidl::admin::NamedEntityUpdateRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::NamedEntityUpdateRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_NamedEntityUpdateRequest_flyteidl_2fadmin_2fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsNamedEntityUpdateRequest_flyteidl_2fadmin_2fcommon_2eproto}, {
      &scc_info_NamedEntityIdentifier_flyteidl_2fadmin_2fcommon_2eproto.base,
      &scc_info_NamedEntityMetadata_flyteidl_2fadmin_2fcommon_2eproto.base,}};

static void InitDefaultsNamedEntityUpdateResponse_flyteidl_2fadmin_2fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_NamedEntityUpdateResponse_default_instance_;
    new (ptr) ::flyteidl::admin::NamedEntityUpdateResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::NamedEntityUpdateResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NamedEntityUpdateResponse_flyteidl_2fadmin_2fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNamedEntityUpdateResponse_flyteidl_2fadmin_2fcommon_2eproto}, {}};

static void InitDefaultsObjectGetRequest_flyteidl_2fadmin_2fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_ObjectGetRequest_default_instance_;
    new (ptr) ::flyteidl::admin::ObjectGetRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::ObjectGetRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ObjectGetRequest_flyteidl_2fadmin_2fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsObjectGetRequest_flyteidl_2fadmin_2fcommon_2eproto}, {
      &scc_info_Identifier_flyteidl_2fcore_2fidentifier_2eproto.base,}};

static void InitDefaultsResourceListRequest_flyteidl_2fadmin_2fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_ResourceListRequest_default_instance_;
    new (ptr) ::flyteidl::admin::ResourceListRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::ResourceListRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ResourceListRequest_flyteidl_2fadmin_2fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsResourceListRequest_flyteidl_2fadmin_2fcommon_2eproto}, {
      &scc_info_NamedEntityIdentifier_flyteidl_2fadmin_2fcommon_2eproto.base,
      &scc_info_Sort_flyteidl_2fadmin_2fcommon_2eproto.base,}};

static void InitDefaultsEmailNotification_flyteidl_2fadmin_2fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_EmailNotification_default_instance_;
    new (ptr) ::flyteidl::admin::EmailNotification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::EmailNotification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EmailNotification_flyteidl_2fadmin_2fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEmailNotification_flyteidl_2fadmin_2fcommon_2eproto}, {}};

static void InitDefaultsPagerDutyNotification_flyteidl_2fadmin_2fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_PagerDutyNotification_default_instance_;
    new (ptr) ::flyteidl::admin::PagerDutyNotification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::PagerDutyNotification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PagerDutyNotification_flyteidl_2fadmin_2fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPagerDutyNotification_flyteidl_2fadmin_2fcommon_2eproto}, {}};

static void InitDefaultsSlackNotification_flyteidl_2fadmin_2fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_SlackNotification_default_instance_;
    new (ptr) ::flyteidl::admin::SlackNotification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::SlackNotification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SlackNotification_flyteidl_2fadmin_2fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSlackNotification_flyteidl_2fadmin_2fcommon_2eproto}, {}};

static void InitDefaultsNotification_flyteidl_2fadmin_2fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_Notification_default_instance_;
    new (ptr) ::flyteidl::admin::Notification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::Notification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Notification_flyteidl_2fadmin_2fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsNotification_flyteidl_2fadmin_2fcommon_2eproto}, {
      &scc_info_EmailNotification_flyteidl_2fadmin_2fcommon_2eproto.base,
      &scc_info_PagerDutyNotification_flyteidl_2fadmin_2fcommon_2eproto.base,
      &scc_info_SlackNotification_flyteidl_2fadmin_2fcommon_2eproto.base,}};

static void InitDefaultsUrlBlob_flyteidl_2fadmin_2fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_UrlBlob_default_instance_;
    new (ptr) ::flyteidl::admin::UrlBlob();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::UrlBlob::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UrlBlob_flyteidl_2fadmin_2fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUrlBlob_flyteidl_2fadmin_2fcommon_2eproto}, {}};

static void InitDefaultsLabels_ValuesEntry_DoNotUse_flyteidl_2fadmin_2fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_Labels_ValuesEntry_DoNotUse_default_instance_;
    new (ptr) ::flyteidl::admin::Labels_ValuesEntry_DoNotUse();
  }
  ::flyteidl::admin::Labels_ValuesEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Labels_ValuesEntry_DoNotUse_flyteidl_2fadmin_2fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLabels_ValuesEntry_DoNotUse_flyteidl_2fadmin_2fcommon_2eproto}, {}};

static void InitDefaultsLabels_flyteidl_2fadmin_2fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_Labels_default_instance_;
    new (ptr) ::flyteidl::admin::Labels();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::Labels::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Labels_flyteidl_2fadmin_2fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLabels_flyteidl_2fadmin_2fcommon_2eproto}, {
      &scc_info_Labels_ValuesEntry_DoNotUse_flyteidl_2fadmin_2fcommon_2eproto.base,}};

static void InitDefaultsAnnotations_ValuesEntry_DoNotUse_flyteidl_2fadmin_2fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_Annotations_ValuesEntry_DoNotUse_default_instance_;
    new (ptr) ::flyteidl::admin::Annotations_ValuesEntry_DoNotUse();
  }
  ::flyteidl::admin::Annotations_ValuesEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Annotations_ValuesEntry_DoNotUse_flyteidl_2fadmin_2fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAnnotations_ValuesEntry_DoNotUse_flyteidl_2fadmin_2fcommon_2eproto}, {}};

static void InitDefaultsAnnotations_flyteidl_2fadmin_2fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_Annotations_default_instance_;
    new (ptr) ::flyteidl::admin::Annotations();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::Annotations::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Annotations_flyteidl_2fadmin_2fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAnnotations_flyteidl_2fadmin_2fcommon_2eproto}, {
      &scc_info_Annotations_ValuesEntry_DoNotUse_flyteidl_2fadmin_2fcommon_2eproto.base,}};

static void InitDefaultsAuthRole_flyteidl_2fadmin_2fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flyteidl::admin::_AuthRole_default_instance_;
    new (ptr) ::flyteidl::admin::AuthRole();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flyteidl::admin::AuthRole::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AuthRole_flyteidl_2fadmin_2fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAuthRole_flyteidl_2fadmin_2fcommon_2eproto}, {}};

void InitDefaults_flyteidl_2fadmin_2fcommon_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_NamedEntityIdentifier_flyteidl_2fadmin_2fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NamedEntityMetadata_flyteidl_2fadmin_2fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NamedEntity_flyteidl_2fadmin_2fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Sort_flyteidl_2fadmin_2fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NamedEntityIdentifierListRequest_flyteidl_2fadmin_2fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NamedEntityListRequest_flyteidl_2fadmin_2fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NamedEntityIdentifierList_flyteidl_2fadmin_2fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NamedEntityList_flyteidl_2fadmin_2fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NamedEntityGetRequest_flyteidl_2fadmin_2fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NamedEntityUpdateRequest_flyteidl_2fadmin_2fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NamedEntityUpdateResponse_flyteidl_2fadmin_2fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ObjectGetRequest_flyteidl_2fadmin_2fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResourceListRequest_flyteidl_2fadmin_2fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EmailNotification_flyteidl_2fadmin_2fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PagerDutyNotification_flyteidl_2fadmin_2fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SlackNotification_flyteidl_2fadmin_2fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Notification_flyteidl_2fadmin_2fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UrlBlob_flyteidl_2fadmin_2fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Labels_ValuesEntry_DoNotUse_flyteidl_2fadmin_2fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Labels_flyteidl_2fadmin_2fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Annotations_ValuesEntry_DoNotUse_flyteidl_2fadmin_2fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Annotations_flyteidl_2fadmin_2fcommon_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AuthRole_flyteidl_2fadmin_2fcommon_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_flyteidl_2fadmin_2fcommon_2eproto[23];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_flyteidl_2fadmin_2fcommon_2eproto[2];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_flyteidl_2fadmin_2fcommon_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_flyteidl_2fadmin_2fcommon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NamedEntityIdentifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NamedEntityIdentifier, project_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NamedEntityIdentifier, domain_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NamedEntityIdentifier, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NamedEntityMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NamedEntityMetadata, description_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NamedEntityMetadata, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NamedEntity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NamedEntity, resource_type_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NamedEntity, id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NamedEntity, metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Sort, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Sort, key_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Sort, direction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NamedEntityIdentifierListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NamedEntityIdentifierListRequest, project_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NamedEntityIdentifierListRequest, domain_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NamedEntityIdentifierListRequest, limit_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NamedEntityIdentifierListRequest, token_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NamedEntityIdentifierListRequest, sort_by_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NamedEntityIdentifierListRequest, filters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NamedEntityListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NamedEntityListRequest, resource_type_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NamedEntityListRequest, project_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NamedEntityListRequest, domain_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NamedEntityListRequest, limit_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NamedEntityListRequest, token_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NamedEntityListRequest, sort_by_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NamedEntityListRequest, filters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NamedEntityIdentifierList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NamedEntityIdentifierList, entities_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NamedEntityIdentifierList, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NamedEntityList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NamedEntityList, entities_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NamedEntityList, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NamedEntityGetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NamedEntityGetRequest, resource_type_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NamedEntityGetRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NamedEntityUpdateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NamedEntityUpdateRequest, resource_type_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NamedEntityUpdateRequest, id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NamedEntityUpdateRequest, metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::NamedEntityUpdateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ObjectGetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ObjectGetRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ResourceListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ResourceListRequest, id_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ResourceListRequest, limit_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ResourceListRequest, token_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ResourceListRequest, filters_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::ResourceListRequest, sort_by_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::EmailNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::EmailNotification, recipients_email_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::PagerDutyNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::PagerDutyNotification, recipients_email_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::SlackNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::SlackNotification, recipients_email_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Notification, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Notification, phases_),
  offsetof(::flyteidl::admin::NotificationDefaultTypeInternal, email_),
  offsetof(::flyteidl::admin::NotificationDefaultTypeInternal, pager_duty_),
  offsetof(::flyteidl::admin::NotificationDefaultTypeInternal, slack_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Notification, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::UrlBlob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::UrlBlob, url_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::UrlBlob, bytes_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Labels_ValuesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Labels_ValuesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Labels_ValuesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Labels_ValuesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Labels, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Labels, values_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Annotations_ValuesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Annotations_ValuesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Annotations_ValuesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Annotations_ValuesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Annotations, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::Annotations, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::AuthRole, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::AuthRole, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::flyteidl::admin::AuthRoleDefaultTypeInternal, assumable_iam_role_),
  offsetof(::flyteidl::admin::AuthRoleDefaultTypeInternal, kubernetes_service_account_),
  PROTOBUF_FIELD_OFFSET(::flyteidl::admin::AuthRole, method_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::flyteidl::admin::NamedEntityIdentifier)},
  { 8, -1, sizeof(::flyteidl::admin::NamedEntityMetadata)},
  { 15, -1, sizeof(::flyteidl::admin::NamedEntity)},
  { 23, -1, sizeof(::flyteidl::admin::Sort)},
  { 30, -1, sizeof(::flyteidl::admin::NamedEntityIdentifierListRequest)},
  { 41, -1, sizeof(::flyteidl::admin::NamedEntityListRequest)},
  { 53, -1, sizeof(::flyteidl::admin::NamedEntityIdentifierList)},
  { 60, -1, sizeof(::flyteidl::admin::NamedEntityList)},
  { 67, -1, sizeof(::flyteidl::admin::NamedEntityGetRequest)},
  { 74, -1, sizeof(::flyteidl::admin::NamedEntityUpdateRequest)},
  { 82, -1, sizeof(::flyteidl::admin::NamedEntityUpdateResponse)},
  { 87, -1, sizeof(::flyteidl::admin::ObjectGetRequest)},
  { 93, -1, sizeof(::flyteidl::admin::ResourceListRequest)},
  { 103, -1, sizeof(::flyteidl::admin::EmailNotification)},
  { 109, -1, sizeof(::flyteidl::admin::PagerDutyNotification)},
  { 115, -1, sizeof(::flyteidl::admin::SlackNotification)},
  { 121, -1, sizeof(::flyteidl::admin::Notification)},
  { 131, -1, sizeof(::flyteidl::admin::UrlBlob)},
  { 138, 145, sizeof(::flyteidl::admin::Labels_ValuesEntry_DoNotUse)},
  { 147, -1, sizeof(::flyteidl::admin::Labels)},
  { 153, 160, sizeof(::flyteidl::admin::Annotations_ValuesEntry_DoNotUse)},
  { 162, -1, sizeof(::flyteidl::admin::Annotations)},
  { 168, -1, sizeof(::flyteidl::admin::AuthRole)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_NamedEntityIdentifier_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_NamedEntityMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_NamedEntity_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_Sort_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_NamedEntityIdentifierListRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_NamedEntityListRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_NamedEntityIdentifierList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_NamedEntityList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_NamedEntityGetRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_NamedEntityUpdateRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_NamedEntityUpdateResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_ObjectGetRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_ResourceListRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_EmailNotification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_PagerDutyNotification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_SlackNotification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_UrlBlob_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_Labels_ValuesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_Labels_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_Annotations_ValuesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_Annotations_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::flyteidl::admin::_AuthRole_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_flyteidl_2fadmin_2fcommon_2eproto = {
  {}, AddDescriptors_flyteidl_2fadmin_2fcommon_2eproto, "flyteidl/admin/common.proto", schemas,
  file_default_instances, TableStruct_flyteidl_2fadmin_2fcommon_2eproto::offsets,
  file_level_metadata_flyteidl_2fadmin_2fcommon_2eproto, 23, file_level_enum_descriptors_flyteidl_2fadmin_2fcommon_2eproto, file_level_service_descriptors_flyteidl_2fadmin_2fcommon_2eproto,
};

const char descriptor_table_protodef_flyteidl_2fadmin_2fcommon_2eproto[] =
  "\n\033flyteidl/admin/common.proto\022\016flyteidl."
  "admin\032\035flyteidl/core/execution.proto\032\036fl"
  "yteidl/core/identifier.proto\"F\n\025NamedEnt"
  "ityIdentifier\022\017\n\007project\030\001 \001(\t\022\016\n\006domain"
  "\030\002 \001(\t\022\014\n\004name\030\003 \001(\t\"[\n\023NamedEntityMetad"
  "ata\022\023\n\013description\030\001 \001(\t\022/\n\005state\030\002 \001(\0162"
  " .flyteidl.admin.NamedEntityState\"\253\001\n\013Na"
  "medEntity\0222\n\rresource_type\030\001 \001(\0162\033.flyte"
  "idl.core.ResourceType\0221\n\002id\030\002 \001(\0132%.flyt"
  "eidl.admin.NamedEntityIdentifier\0225\n\010meta"
  "data\030\003 \001(\0132#.flyteidl.admin.NamedEntityM"
  "etadata\"r\n\004Sort\022\013\n\003key\030\001 \001(\t\0221\n\tdirectio"
  "n\030\002 \001(\0162\036.flyteidl.admin.Sort.Direction\""
  "*\n\tDirection\022\016\n\nDESCENDING\020\000\022\r\n\tASCENDIN"
  "G\020\001\"\231\001\n NamedEntityIdentifierListRequest"
  "\022\017\n\007project\030\001 \001(\t\022\016\n\006domain\030\002 \001(\t\022\r\n\005lim"
  "it\030\003 \001(\r\022\r\n\005token\030\004 \001(\t\022%\n\007sort_by\030\005 \001(\013"
  "2\024.flyteidl.admin.Sort\022\017\n\007filters\030\006 \001(\t\""
  "\303\001\n\026NamedEntityListRequest\0222\n\rresource_t"
  "ype\030\001 \001(\0162\033.flyteidl.core.ResourceType\022\017"
  "\n\007project\030\002 \001(\t\022\016\n\006domain\030\003 \001(\t\022\r\n\005limit"
  "\030\004 \001(\r\022\r\n\005token\030\005 \001(\t\022%\n\007sort_by\030\006 \001(\0132\024"
  ".flyteidl.admin.Sort\022\017\n\007filters\030\007 \001(\t\"c\n"
  "\031NamedEntityIdentifierList\0227\n\010entities\030\001"
  " \003(\0132%.flyteidl.admin.NamedEntityIdentif"
  "ier\022\r\n\005token\030\002 \001(\t\"O\n\017NamedEntityList\022-\n"
  "\010entities\030\001 \003(\0132\033.flyteidl.admin.NamedEn"
  "tity\022\r\n\005token\030\002 \001(\t\"~\n\025NamedEntityGetReq"
  "uest\0222\n\rresource_type\030\001 \001(\0162\033.flyteidl.c"
  "ore.ResourceType\0221\n\002id\030\002 \001(\0132%.flyteidl."
  "admin.NamedEntityIdentifier\"\270\001\n\030NamedEnt"
  "ityUpdateRequest\0222\n\rresource_type\030\001 \001(\0162"
  "\033.flyteidl.core.ResourceType\0221\n\002id\030\002 \001(\013"
  "2%.flyteidl.admin.NamedEntityIdentifier\022"
  "5\n\010metadata\030\003 \001(\0132#.flyteidl.admin.Named"
  "EntityMetadata\"\033\n\031NamedEntityUpdateRespo"
  "nse\"9\n\020ObjectGetRequest\022%\n\002id\030\001 \001(\0132\031.fl"
  "yteidl.core.Identifier\"\236\001\n\023ResourceListR"
  "equest\0221\n\002id\030\001 \001(\0132%.flyteidl.admin.Name"
  "dEntityIdentifier\022\r\n\005limit\030\002 \001(\r\022\r\n\005toke"
  "n\030\003 \001(\t\022\017\n\007filters\030\004 \001(\t\022%\n\007sort_by\030\005 \001("
  "\0132\024.flyteidl.admin.Sort\"-\n\021EmailNotifica"
  "tion\022\030\n\020recipients_email\030\001 \003(\t\"1\n\025PagerD"
  "utyNotification\022\030\n\020recipients_email\030\001 \003("
  "\t\"-\n\021SlackNotification\022\030\n\020recipients_ema"
  "il\030\001 \003(\t\"\363\001\n\014Notification\0226\n\006phases\030\001 \003("
  "\0162&.flyteidl.core.WorkflowExecution.Phas"
  "e\0222\n\005email\030\002 \001(\0132!.flyteidl.admin.EmailN"
  "otificationH\000\022;\n\npager_duty\030\003 \001(\0132%.flyt"
  "eidl.admin.PagerDutyNotificationH\000\0222\n\005sl"
  "ack\030\004 \001(\0132!.flyteidl.admin.SlackNotifica"
  "tionH\000B\006\n\004type\"%\n\007UrlBlob\022\013\n\003url\030\001 \001(\t\022\r"
  "\n\005bytes\030\002 \001(\003\"k\n\006Labels\0222\n\006values\030\001 \003(\0132"
  "\".flyteidl.admin.Labels.ValuesEntry\032-\n\013V"
  "aluesEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\002"
  "8\001\"u\n\013Annotations\0227\n\006values\030\001 \003(\0132\'.flyt"
  "eidl.admin.Annotations.ValuesEntry\032-\n\013Va"
  "luesEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028"
  "\001\"X\n\010AuthRole\022\034\n\022assumable_iam_role\030\001 \001("
  "\tH\000\022$\n\032kubernetes_service_account\030\002 \001(\tH"
  "\000B\010\n\006method*\\\n\020NamedEntityState\022\027\n\023NAMED"
  "_ENTITY_ACTIVE\020\000\022\031\n\025NAMED_ENTITY_ARCHIVE"
  "D\020\001\022\024\n\020SYSTEM_GENERATED\020\002B3Z1github.com/"
  "lyft/flyteidl/gen/pb-go/flyteidl/adminb\006"
  "proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_flyteidl_2fadmin_2fcommon_2eproto = {
  false, InitDefaults_flyteidl_2fadmin_2fcommon_2eproto, 
  descriptor_table_protodef_flyteidl_2fadmin_2fcommon_2eproto,
  "flyteidl/admin/common.proto", &assign_descriptors_table_flyteidl_2fadmin_2fcommon_2eproto, 2566,
};

void AddDescriptors_flyteidl_2fadmin_2fcommon_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[2] =
  {
    ::AddDescriptors_flyteidl_2fcore_2fexecution_2eproto,
    ::AddDescriptors_flyteidl_2fcore_2fidentifier_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_flyteidl_2fadmin_2fcommon_2eproto, deps, 2);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_flyteidl_2fadmin_2fcommon_2eproto = []() { AddDescriptors_flyteidl_2fadmin_2fcommon_2eproto(); return true; }();
namespace flyteidl {
namespace admin {
const ::google::protobuf::EnumDescriptor* Sort_Direction_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_flyteidl_2fadmin_2fcommon_2eproto);
  return file_level_enum_descriptors_flyteidl_2fadmin_2fcommon_2eproto[0];
}
bool Sort_Direction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Sort_Direction Sort::DESCENDING;
const Sort_Direction Sort::ASCENDING;
const Sort_Direction Sort::Direction_MIN;
const Sort_Direction Sort::Direction_MAX;
const int Sort::Direction_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* NamedEntityState_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_flyteidl_2fadmin_2fcommon_2eproto);
  return file_level_enum_descriptors_flyteidl_2fadmin_2fcommon_2eproto[1];
}
bool NamedEntityState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void NamedEntityIdentifier::InitAsDefaultInstance() {
}
class NamedEntityIdentifier::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NamedEntityIdentifier::kProjectFieldNumber;
const int NamedEntityIdentifier::kDomainFieldNumber;
const int NamedEntityIdentifier::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NamedEntityIdentifier::NamedEntityIdentifier()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.NamedEntityIdentifier)
}
NamedEntityIdentifier::NamedEntityIdentifier(const NamedEntityIdentifier& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project().size() > 0) {
    project_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_);
  }
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.domain().size() > 0) {
    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.NamedEntityIdentifier)
}

void NamedEntityIdentifier::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_NamedEntityIdentifier_flyteidl_2fadmin_2fcommon_2eproto.base);
  project_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

NamedEntityIdentifier::~NamedEntityIdentifier() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.NamedEntityIdentifier)
  SharedDtor();
}

void NamedEntityIdentifier::SharedDtor() {
  project_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NamedEntityIdentifier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NamedEntityIdentifier& NamedEntityIdentifier::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NamedEntityIdentifier_flyteidl_2fadmin_2fcommon_2eproto.base);
  return *internal_default_instance();
}


void NamedEntityIdentifier::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.NamedEntityIdentifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  project_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NamedEntityIdentifier::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NamedEntityIdentifier*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string project = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.NamedEntityIdentifier.project");
        object = msg->mutable_project();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string domain = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.NamedEntityIdentifier.domain");
        object = msg->mutable_domain();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.NamedEntityIdentifier.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NamedEntityIdentifier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.NamedEntityIdentifier)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project().data(), static_cast<int>(this->project().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.NamedEntityIdentifier.project"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string domain = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->domain().data(), static_cast<int>(this->domain().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.NamedEntityIdentifier.domain"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.NamedEntityIdentifier.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.NamedEntityIdentifier)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.NamedEntityIdentifier)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NamedEntityIdentifier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.NamedEntityIdentifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project().data(), static_cast<int>(this->project().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.NamedEntityIdentifier.project");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project(), output);
  }

  // string domain = 2;
  if (this->domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), static_cast<int>(this->domain().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.NamedEntityIdentifier.domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->domain(), output);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.NamedEntityIdentifier.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.NamedEntityIdentifier)
}

::google::protobuf::uint8* NamedEntityIdentifier::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.NamedEntityIdentifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project().data(), static_cast<int>(this->project().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.NamedEntityIdentifier.project");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project(), target);
  }

  // string domain = 2;
  if (this->domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), static_cast<int>(this->domain().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.NamedEntityIdentifier.domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->domain(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.NamedEntityIdentifier.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.NamedEntityIdentifier)
  return target;
}

size_t NamedEntityIdentifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.NamedEntityIdentifier)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project());
  }

  // string domain = 2;
  if (this->domain().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->domain());
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NamedEntityIdentifier::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.NamedEntityIdentifier)
  GOOGLE_DCHECK_NE(&from, this);
  const NamedEntityIdentifier* source =
      ::google::protobuf::DynamicCastToGenerated<NamedEntityIdentifier>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.NamedEntityIdentifier)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.NamedEntityIdentifier)
    MergeFrom(*source);
  }
}

void NamedEntityIdentifier::MergeFrom(const NamedEntityIdentifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.NamedEntityIdentifier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project().size() > 0) {

    project_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_);
  }
  if (from.domain().size() > 0) {

    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void NamedEntityIdentifier::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.NamedEntityIdentifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NamedEntityIdentifier::CopyFrom(const NamedEntityIdentifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.NamedEntityIdentifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamedEntityIdentifier::IsInitialized() const {
  return true;
}

void NamedEntityIdentifier::Swap(NamedEntityIdentifier* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NamedEntityIdentifier::InternalSwap(NamedEntityIdentifier* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  project_.Swap(&other->project_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  domain_.Swap(&other->domain_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata NamedEntityIdentifier::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fcommon_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NamedEntityMetadata::InitAsDefaultInstance() {
}
class NamedEntityMetadata::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NamedEntityMetadata::kDescriptionFieldNumber;
const int NamedEntityMetadata::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NamedEntityMetadata::NamedEntityMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.NamedEntityMetadata)
}
NamedEntityMetadata::NamedEntityMetadata(const NamedEntityMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.NamedEntityMetadata)
}

void NamedEntityMetadata::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_NamedEntityMetadata_flyteidl_2fadmin_2fcommon_2eproto.base);
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
}

NamedEntityMetadata::~NamedEntityMetadata() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.NamedEntityMetadata)
  SharedDtor();
}

void NamedEntityMetadata::SharedDtor() {
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NamedEntityMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NamedEntityMetadata& NamedEntityMetadata::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NamedEntityMetadata_flyteidl_2fadmin_2fcommon_2eproto.base);
  return *internal_default_instance();
}


void NamedEntityMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.NamedEntityMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NamedEntityMetadata::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NamedEntityMetadata*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string description = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.NamedEntityMetadata.description");
        object = msg->mutable_description();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .flyteidl.admin.NamedEntityState state = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_state(static_cast<::flyteidl::admin::NamedEntityState>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NamedEntityMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.NamedEntityMetadata)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string description = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.NamedEntityMetadata.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.NamedEntityState state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::flyteidl::admin::NamedEntityState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.NamedEntityMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.NamedEntityMetadata)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NamedEntityMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.NamedEntityMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string description = 1;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.NamedEntityMetadata.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->description(), output);
  }

  // .flyteidl.admin.NamedEntityState state = 2;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.NamedEntityMetadata)
}

::google::protobuf::uint8* NamedEntityMetadata::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.NamedEntityMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string description = 1;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.NamedEntityMetadata.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->description(), target);
  }

  // .flyteidl.admin.NamedEntityState state = 2;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.NamedEntityMetadata)
  return target;
}

size_t NamedEntityMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.NamedEntityMetadata)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string description = 1;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // .flyteidl.admin.NamedEntityState state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NamedEntityMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.NamedEntityMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const NamedEntityMetadata* source =
      ::google::protobuf::DynamicCastToGenerated<NamedEntityMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.NamedEntityMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.NamedEntityMetadata)
    MergeFrom(*source);
  }
}

void NamedEntityMetadata::MergeFrom(const NamedEntityMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.NamedEntityMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void NamedEntityMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.NamedEntityMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NamedEntityMetadata::CopyFrom(const NamedEntityMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.NamedEntityMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamedEntityMetadata::IsInitialized() const {
  return true;
}

void NamedEntityMetadata::Swap(NamedEntityMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NamedEntityMetadata::InternalSwap(NamedEntityMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(state_, other->state_);
}

::google::protobuf::Metadata NamedEntityMetadata::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fcommon_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NamedEntity::InitAsDefaultInstance() {
  ::flyteidl::admin::_NamedEntity_default_instance_._instance.get_mutable()->id_ = const_cast< ::flyteidl::admin::NamedEntityIdentifier*>(
      ::flyteidl::admin::NamedEntityIdentifier::internal_default_instance());
  ::flyteidl::admin::_NamedEntity_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::flyteidl::admin::NamedEntityMetadata*>(
      ::flyteidl::admin::NamedEntityMetadata::internal_default_instance());
}
class NamedEntity::HasBitSetters {
 public:
  static const ::flyteidl::admin::NamedEntityIdentifier& id(const NamedEntity* msg);
  static const ::flyteidl::admin::NamedEntityMetadata& metadata(const NamedEntity* msg);
};

const ::flyteidl::admin::NamedEntityIdentifier&
NamedEntity::HasBitSetters::id(const NamedEntity* msg) {
  return *msg->id_;
}
const ::flyteidl::admin::NamedEntityMetadata&
NamedEntity::HasBitSetters::metadata(const NamedEntity* msg) {
  return *msg->metadata_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NamedEntity::kResourceTypeFieldNumber;
const int NamedEntity::kIdFieldNumber;
const int NamedEntity::kMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NamedEntity::NamedEntity()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.NamedEntity)
}
NamedEntity::NamedEntity(const NamedEntity& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::flyteidl::admin::NamedEntityIdentifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from.has_metadata()) {
    metadata_ = new ::flyteidl::admin::NamedEntityMetadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  resource_type_ = from.resource_type_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.NamedEntity)
}

void NamedEntity::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_NamedEntity_flyteidl_2fadmin_2fcommon_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resource_type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(resource_type_));
}

NamedEntity::~NamedEntity() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.NamedEntity)
  SharedDtor();
}

void NamedEntity::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete metadata_;
}

void NamedEntity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NamedEntity& NamedEntity::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NamedEntity_flyteidl_2fadmin_2fcommon_2eproto.base);
  return *internal_default_instance();
}


void NamedEntity::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.NamedEntity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  resource_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NamedEntity::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NamedEntity*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.ResourceType resource_type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_resource_type(static_cast<::flyteidl::core::ResourceType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .flyteidl.admin.NamedEntityIdentifier id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::NamedEntityIdentifier::_InternalParse;
        object = msg->mutable_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.NamedEntityMetadata metadata = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::NamedEntityMetadata::_InternalParse;
        object = msg->mutable_metadata();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NamedEntity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.NamedEntity)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.ResourceType resource_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_resource_type(static_cast< ::flyteidl::core::ResourceType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.NamedEntityIdentifier id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.NamedEntityMetadata metadata = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.NamedEntity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.NamedEntity)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NamedEntity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.NamedEntity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.ResourceType resource_type = 1;
  if (this->resource_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->resource_type(), output);
  }

  // .flyteidl.admin.NamedEntityIdentifier id = 2;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::id(this), output);
  }

  // .flyteidl.admin.NamedEntityMetadata metadata = 3;
  if (this->has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::metadata(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.NamedEntity)
}

::google::protobuf::uint8* NamedEntity::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.NamedEntity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.ResourceType resource_type = 1;
  if (this->resource_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->resource_type(), target);
  }

  // .flyteidl.admin.NamedEntityIdentifier id = 2;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::id(this), target);
  }

  // .flyteidl.admin.NamedEntityMetadata metadata = 3;
  if (this->has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::metadata(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.NamedEntity)
  return target;
}

size_t NamedEntity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.NamedEntity)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.admin.NamedEntityIdentifier id = 2;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .flyteidl.admin.NamedEntityMetadata metadata = 3;
  if (this->has_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // .flyteidl.core.ResourceType resource_type = 1;
  if (this->resource_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->resource_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NamedEntity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.NamedEntity)
  GOOGLE_DCHECK_NE(&from, this);
  const NamedEntity* source =
      ::google::protobuf::DynamicCastToGenerated<NamedEntity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.NamedEntity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.NamedEntity)
    MergeFrom(*source);
  }
}

void NamedEntity::MergeFrom(const NamedEntity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.NamedEntity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    mutable_id()->::flyteidl::admin::NamedEntityIdentifier::MergeFrom(from.id());
  }
  if (from.has_metadata()) {
    mutable_metadata()->::flyteidl::admin::NamedEntityMetadata::MergeFrom(from.metadata());
  }
  if (from.resource_type() != 0) {
    set_resource_type(from.resource_type());
  }
}

void NamedEntity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.NamedEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NamedEntity::CopyFrom(const NamedEntity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.NamedEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamedEntity::IsInitialized() const {
  return true;
}

void NamedEntity::Swap(NamedEntity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NamedEntity::InternalSwap(NamedEntity* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(metadata_, other->metadata_);
  swap(resource_type_, other->resource_type_);
}

::google::protobuf::Metadata NamedEntity::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fcommon_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Sort::InitAsDefaultInstance() {
}
class Sort::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sort::kKeyFieldNumber;
const int Sort::kDirectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sort::Sort()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.Sort)
}
Sort::Sort(const Sort& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  direction_ = from.direction_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.Sort)
}

void Sort::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Sort_flyteidl_2fadmin_2fcommon_2eproto.base);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  direction_ = 0;
}

Sort::~Sort() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.Sort)
  SharedDtor();
}

void Sort::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Sort::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Sort& Sort::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Sort_flyteidl_2fadmin_2fcommon_2eproto.base);
  return *internal_default_instance();
}


void Sort::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.Sort)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  direction_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Sort::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Sort*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.Sort.key");
        object = msg->mutable_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .flyteidl.admin.Sort.Direction direction = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_direction(static_cast<::flyteidl::admin::Sort_Direction>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Sort::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.Sort)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.Sort.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.Sort.Direction direction = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_direction(static_cast< ::flyteidl::admin::Sort_Direction >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.Sort)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.Sort)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Sort::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.Sort)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.Sort.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // .flyteidl.admin.Sort.Direction direction = 2;
  if (this->direction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->direction(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.Sort)
}

::google::protobuf::uint8* Sort::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.Sort)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.Sort.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // .flyteidl.admin.Sort.Direction direction = 2;
  if (this->direction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->direction(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.Sort)
  return target;
}

size_t Sort::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.Sort)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // .flyteidl.admin.Sort.Direction direction = 2;
  if (this->direction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Sort::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.Sort)
  GOOGLE_DCHECK_NE(&from, this);
  const Sort* source =
      ::google::protobuf::DynamicCastToGenerated<Sort>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.Sort)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.Sort)
    MergeFrom(*source);
  }
}

void Sort::MergeFrom(const Sort& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.Sort)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.direction() != 0) {
    set_direction(from.direction());
  }
}

void Sort::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.Sort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sort::CopyFrom(const Sort& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.Sort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sort::IsInitialized() const {
  return true;
}

void Sort::Swap(Sort* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sort::InternalSwap(Sort* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(direction_, other->direction_);
}

::google::protobuf::Metadata Sort::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fcommon_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NamedEntityIdentifierListRequest::InitAsDefaultInstance() {
  ::flyteidl::admin::_NamedEntityIdentifierListRequest_default_instance_._instance.get_mutable()->sort_by_ = const_cast< ::flyteidl::admin::Sort*>(
      ::flyteidl::admin::Sort::internal_default_instance());
}
class NamedEntityIdentifierListRequest::HasBitSetters {
 public:
  static const ::flyteidl::admin::Sort& sort_by(const NamedEntityIdentifierListRequest* msg);
};

const ::flyteidl::admin::Sort&
NamedEntityIdentifierListRequest::HasBitSetters::sort_by(const NamedEntityIdentifierListRequest* msg) {
  return *msg->sort_by_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NamedEntityIdentifierListRequest::kProjectFieldNumber;
const int NamedEntityIdentifierListRequest::kDomainFieldNumber;
const int NamedEntityIdentifierListRequest::kLimitFieldNumber;
const int NamedEntityIdentifierListRequest::kTokenFieldNumber;
const int NamedEntityIdentifierListRequest::kSortByFieldNumber;
const int NamedEntityIdentifierListRequest::kFiltersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NamedEntityIdentifierListRequest::NamedEntityIdentifierListRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.NamedEntityIdentifierListRequest)
}
NamedEntityIdentifierListRequest::NamedEntityIdentifierListRequest(const NamedEntityIdentifierListRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project().size() > 0) {
    project_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_);
  }
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.domain().size() > 0) {
    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  filters_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filters().size() > 0) {
    filters_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filters_);
  }
  if (from.has_sort_by()) {
    sort_by_ = new ::flyteidl::admin::Sort(*from.sort_by_);
  } else {
    sort_by_ = nullptr;
  }
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.NamedEntityIdentifierListRequest)
}

void NamedEntityIdentifierListRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_NamedEntityIdentifierListRequest_flyteidl_2fadmin_2fcommon_2eproto.base);
  project_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filters_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sort_by_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&sort_by_)) + sizeof(limit_));
}

NamedEntityIdentifierListRequest::~NamedEntityIdentifierListRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.NamedEntityIdentifierListRequest)
  SharedDtor();
}

void NamedEntityIdentifierListRequest::SharedDtor() {
  project_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filters_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sort_by_;
}

void NamedEntityIdentifierListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NamedEntityIdentifierListRequest& NamedEntityIdentifierListRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NamedEntityIdentifierListRequest_flyteidl_2fadmin_2fcommon_2eproto.base);
  return *internal_default_instance();
}


void NamedEntityIdentifierListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.NamedEntityIdentifierListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  project_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filters_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && sort_by_ != nullptr) {
    delete sort_by_;
  }
  sort_by_ = nullptr;
  limit_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NamedEntityIdentifierListRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NamedEntityIdentifierListRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string project = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.NamedEntityIdentifierListRequest.project");
        object = msg->mutable_project();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string domain = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.NamedEntityIdentifierListRequest.domain");
        object = msg->mutable_domain();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint32 limit = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_limit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string token = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.NamedEntityIdentifierListRequest.token");
        object = msg->mutable_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .flyteidl.admin.Sort sort_by = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::Sort::_InternalParse;
        object = msg->mutable_sort_by();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string filters = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.NamedEntityIdentifierListRequest.filters");
        object = msg->mutable_filters();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NamedEntityIdentifierListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.NamedEntityIdentifierListRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project().data(), static_cast<int>(this->project().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.NamedEntityIdentifierListRequest.project"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string domain = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->domain().data(), static_cast<int>(this->domain().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.NamedEntityIdentifierListRequest.domain"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 limit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string token = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.NamedEntityIdentifierListRequest.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.Sort sort_by = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sort_by()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filters = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filters()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filters().data(), static_cast<int>(this->filters().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.NamedEntityIdentifierListRequest.filters"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.NamedEntityIdentifierListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.NamedEntityIdentifierListRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NamedEntityIdentifierListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.NamedEntityIdentifierListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project().data(), static_cast<int>(this->project().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.NamedEntityIdentifierListRequest.project");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project(), output);
  }

  // string domain = 2;
  if (this->domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), static_cast<int>(this->domain().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.NamedEntityIdentifierListRequest.domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->domain(), output);
  }

  // uint32 limit = 3;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->limit(), output);
  }

  // string token = 4;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.NamedEntityIdentifierListRequest.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->token(), output);
  }

  // .flyteidl.admin.Sort sort_by = 5;
  if (this->has_sort_by()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::sort_by(this), output);
  }

  // string filters = 6;
  if (this->filters().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filters().data(), static_cast<int>(this->filters().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.NamedEntityIdentifierListRequest.filters");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->filters(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.NamedEntityIdentifierListRequest)
}

::google::protobuf::uint8* NamedEntityIdentifierListRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.NamedEntityIdentifierListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project().data(), static_cast<int>(this->project().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.NamedEntityIdentifierListRequest.project");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project(), target);
  }

  // string domain = 2;
  if (this->domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), static_cast<int>(this->domain().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.NamedEntityIdentifierListRequest.domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->domain(), target);
  }

  // uint32 limit = 3;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->limit(), target);
  }

  // string token = 4;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.NamedEntityIdentifierListRequest.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->token(), target);
  }

  // .flyteidl.admin.Sort sort_by = 5;
  if (this->has_sort_by()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::sort_by(this), target);
  }

  // string filters = 6;
  if (this->filters().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filters().data(), static_cast<int>(this->filters().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.NamedEntityIdentifierListRequest.filters");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->filters(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.NamedEntityIdentifierListRequest)
  return target;
}

size_t NamedEntityIdentifierListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.NamedEntityIdentifierListRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project());
  }

  // string domain = 2;
  if (this->domain().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->domain());
  }

  // string token = 4;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // string filters = 6;
  if (this->filters().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filters());
  }

  // .flyteidl.admin.Sort sort_by = 5;
  if (this->has_sort_by()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sort_by_);
  }

  // uint32 limit = 3;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->limit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NamedEntityIdentifierListRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.NamedEntityIdentifierListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NamedEntityIdentifierListRequest* source =
      ::google::protobuf::DynamicCastToGenerated<NamedEntityIdentifierListRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.NamedEntityIdentifierListRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.NamedEntityIdentifierListRequest)
    MergeFrom(*source);
  }
}

void NamedEntityIdentifierListRequest::MergeFrom(const NamedEntityIdentifierListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.NamedEntityIdentifierListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project().size() > 0) {

    project_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_);
  }
  if (from.domain().size() > 0) {

    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.filters().size() > 0) {

    filters_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filters_);
  }
  if (from.has_sort_by()) {
    mutable_sort_by()->::flyteidl::admin::Sort::MergeFrom(from.sort_by());
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
}

void NamedEntityIdentifierListRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.NamedEntityIdentifierListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NamedEntityIdentifierListRequest::CopyFrom(const NamedEntityIdentifierListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.NamedEntityIdentifierListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamedEntityIdentifierListRequest::IsInitialized() const {
  return true;
}

void NamedEntityIdentifierListRequest::Swap(NamedEntityIdentifierListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NamedEntityIdentifierListRequest::InternalSwap(NamedEntityIdentifierListRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  project_.Swap(&other->project_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  domain_.Swap(&other->domain_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  token_.Swap(&other->token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filters_.Swap(&other->filters_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sort_by_, other->sort_by_);
  swap(limit_, other->limit_);
}

::google::protobuf::Metadata NamedEntityIdentifierListRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fcommon_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NamedEntityListRequest::InitAsDefaultInstance() {
  ::flyteidl::admin::_NamedEntityListRequest_default_instance_._instance.get_mutable()->sort_by_ = const_cast< ::flyteidl::admin::Sort*>(
      ::flyteidl::admin::Sort::internal_default_instance());
}
class NamedEntityListRequest::HasBitSetters {
 public:
  static const ::flyteidl::admin::Sort& sort_by(const NamedEntityListRequest* msg);
};

const ::flyteidl::admin::Sort&
NamedEntityListRequest::HasBitSetters::sort_by(const NamedEntityListRequest* msg) {
  return *msg->sort_by_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NamedEntityListRequest::kResourceTypeFieldNumber;
const int NamedEntityListRequest::kProjectFieldNumber;
const int NamedEntityListRequest::kDomainFieldNumber;
const int NamedEntityListRequest::kLimitFieldNumber;
const int NamedEntityListRequest::kTokenFieldNumber;
const int NamedEntityListRequest::kSortByFieldNumber;
const int NamedEntityListRequest::kFiltersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NamedEntityListRequest::NamedEntityListRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.NamedEntityListRequest)
}
NamedEntityListRequest::NamedEntityListRequest(const NamedEntityListRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project().size() > 0) {
    project_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_);
  }
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.domain().size() > 0) {
    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  filters_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filters().size() > 0) {
    filters_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filters_);
  }
  if (from.has_sort_by()) {
    sort_by_ = new ::flyteidl::admin::Sort(*from.sort_by_);
  } else {
    sort_by_ = nullptr;
  }
  ::memcpy(&resource_type_, &from.resource_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&resource_type_)) + sizeof(limit_));
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.NamedEntityListRequest)
}

void NamedEntityListRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_NamedEntityListRequest_flyteidl_2fadmin_2fcommon_2eproto.base);
  project_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filters_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sort_by_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&sort_by_)) + sizeof(limit_));
}

NamedEntityListRequest::~NamedEntityListRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.NamedEntityListRequest)
  SharedDtor();
}

void NamedEntityListRequest::SharedDtor() {
  project_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filters_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sort_by_;
}

void NamedEntityListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NamedEntityListRequest& NamedEntityListRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NamedEntityListRequest_flyteidl_2fadmin_2fcommon_2eproto.base);
  return *internal_default_instance();
}


void NamedEntityListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.NamedEntityListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  project_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filters_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && sort_by_ != nullptr) {
    delete sort_by_;
  }
  sort_by_ = nullptr;
  ::memset(&resource_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&resource_type_)) + sizeof(limit_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NamedEntityListRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NamedEntityListRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.ResourceType resource_type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_resource_type(static_cast<::flyteidl::core::ResourceType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string project = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.NamedEntityListRequest.project");
        object = msg->mutable_project();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string domain = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.NamedEntityListRequest.domain");
        object = msg->mutable_domain();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint32 limit = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_limit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string token = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.NamedEntityListRequest.token");
        object = msg->mutable_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .flyteidl.admin.Sort sort_by = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::Sort::_InternalParse;
        object = msg->mutable_sort_by();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string filters = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.NamedEntityListRequest.filters");
        object = msg->mutable_filters();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NamedEntityListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.NamedEntityListRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.ResourceType resource_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_resource_type(static_cast< ::flyteidl::core::ResourceType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string project = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project().data(), static_cast<int>(this->project().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.NamedEntityListRequest.project"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string domain = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->domain().data(), static_cast<int>(this->domain().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.NamedEntityListRequest.domain"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 limit = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string token = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.NamedEntityListRequest.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.Sort sort_by = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sort_by()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filters = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filters()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filters().data(), static_cast<int>(this->filters().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.NamedEntityListRequest.filters"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.NamedEntityListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.NamedEntityListRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NamedEntityListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.NamedEntityListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.ResourceType resource_type = 1;
  if (this->resource_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->resource_type(), output);
  }

  // string project = 2;
  if (this->project().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project().data(), static_cast<int>(this->project().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.NamedEntityListRequest.project");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->project(), output);
  }

  // string domain = 3;
  if (this->domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), static_cast<int>(this->domain().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.NamedEntityListRequest.domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->domain(), output);
  }

  // uint32 limit = 4;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->limit(), output);
  }

  // string token = 5;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.NamedEntityListRequest.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->token(), output);
  }

  // .flyteidl.admin.Sort sort_by = 6;
  if (this->has_sort_by()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::sort_by(this), output);
  }

  // string filters = 7;
  if (this->filters().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filters().data(), static_cast<int>(this->filters().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.NamedEntityListRequest.filters");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->filters(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.NamedEntityListRequest)
}

::google::protobuf::uint8* NamedEntityListRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.NamedEntityListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.ResourceType resource_type = 1;
  if (this->resource_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->resource_type(), target);
  }

  // string project = 2;
  if (this->project().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project().data(), static_cast<int>(this->project().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.NamedEntityListRequest.project");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->project(), target);
  }

  // string domain = 3;
  if (this->domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), static_cast<int>(this->domain().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.NamedEntityListRequest.domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->domain(), target);
  }

  // uint32 limit = 4;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->limit(), target);
  }

  // string token = 5;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.NamedEntityListRequest.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->token(), target);
  }

  // .flyteidl.admin.Sort sort_by = 6;
  if (this->has_sort_by()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::sort_by(this), target);
  }

  // string filters = 7;
  if (this->filters().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filters().data(), static_cast<int>(this->filters().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.NamedEntityListRequest.filters");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->filters(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.NamedEntityListRequest)
  return target;
}

size_t NamedEntityListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.NamedEntityListRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string project = 2;
  if (this->project().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project());
  }

  // string domain = 3;
  if (this->domain().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->domain());
  }

  // string token = 5;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // string filters = 7;
  if (this->filters().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filters());
  }

  // .flyteidl.admin.Sort sort_by = 6;
  if (this->has_sort_by()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sort_by_);
  }

  // .flyteidl.core.ResourceType resource_type = 1;
  if (this->resource_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->resource_type());
  }

  // uint32 limit = 4;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->limit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NamedEntityListRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.NamedEntityListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NamedEntityListRequest* source =
      ::google::protobuf::DynamicCastToGenerated<NamedEntityListRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.NamedEntityListRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.NamedEntityListRequest)
    MergeFrom(*source);
  }
}

void NamedEntityListRequest::MergeFrom(const NamedEntityListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.NamedEntityListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project().size() > 0) {

    project_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_);
  }
  if (from.domain().size() > 0) {

    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.filters().size() > 0) {

    filters_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filters_);
  }
  if (from.has_sort_by()) {
    mutable_sort_by()->::flyteidl::admin::Sort::MergeFrom(from.sort_by());
  }
  if (from.resource_type() != 0) {
    set_resource_type(from.resource_type());
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
}

void NamedEntityListRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.NamedEntityListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NamedEntityListRequest::CopyFrom(const NamedEntityListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.NamedEntityListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamedEntityListRequest::IsInitialized() const {
  return true;
}

void NamedEntityListRequest::Swap(NamedEntityListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NamedEntityListRequest::InternalSwap(NamedEntityListRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  project_.Swap(&other->project_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  domain_.Swap(&other->domain_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  token_.Swap(&other->token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filters_.Swap(&other->filters_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sort_by_, other->sort_by_);
  swap(resource_type_, other->resource_type_);
  swap(limit_, other->limit_);
}

::google::protobuf::Metadata NamedEntityListRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fcommon_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NamedEntityIdentifierList::InitAsDefaultInstance() {
}
class NamedEntityIdentifierList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NamedEntityIdentifierList::kEntitiesFieldNumber;
const int NamedEntityIdentifierList::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NamedEntityIdentifierList::NamedEntityIdentifierList()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.NamedEntityIdentifierList)
}
NamedEntityIdentifierList::NamedEntityIdentifierList(const NamedEntityIdentifierList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      entities_(from.entities_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.NamedEntityIdentifierList)
}

void NamedEntityIdentifierList::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_NamedEntityIdentifierList_flyteidl_2fadmin_2fcommon_2eproto.base);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

NamedEntityIdentifierList::~NamedEntityIdentifierList() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.NamedEntityIdentifierList)
  SharedDtor();
}

void NamedEntityIdentifierList::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NamedEntityIdentifierList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NamedEntityIdentifierList& NamedEntityIdentifierList::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NamedEntityIdentifierList_flyteidl_2fadmin_2fcommon_2eproto.base);
  return *internal_default_instance();
}


void NamedEntityIdentifierList::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.NamedEntityIdentifierList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entities_.Clear();
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NamedEntityIdentifierList::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NamedEntityIdentifierList*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .flyteidl.admin.NamedEntityIdentifier entities = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::flyteidl::admin::NamedEntityIdentifier::_InternalParse;
          object = msg->add_entities();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // string token = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.NamedEntityIdentifierList.token");
        object = msg->mutable_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NamedEntityIdentifierList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.NamedEntityIdentifierList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .flyteidl.admin.NamedEntityIdentifier entities = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_entities()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.NamedEntityIdentifierList.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.NamedEntityIdentifierList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.NamedEntityIdentifierList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NamedEntityIdentifierList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.NamedEntityIdentifierList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .flyteidl.admin.NamedEntityIdentifier entities = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entities_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->entities(static_cast<int>(i)),
      output);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.NamedEntityIdentifierList.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.NamedEntityIdentifierList)
}

::google::protobuf::uint8* NamedEntityIdentifierList::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.NamedEntityIdentifierList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .flyteidl.admin.NamedEntityIdentifier entities = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entities_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->entities(static_cast<int>(i)), target);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.NamedEntityIdentifierList.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.NamedEntityIdentifierList)
  return target;
}

size_t NamedEntityIdentifierList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.NamedEntityIdentifierList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .flyteidl.admin.NamedEntityIdentifier entities = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->entities_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->entities(static_cast<int>(i)));
    }
  }

  // string token = 2;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NamedEntityIdentifierList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.NamedEntityIdentifierList)
  GOOGLE_DCHECK_NE(&from, this);
  const NamedEntityIdentifierList* source =
      ::google::protobuf::DynamicCastToGenerated<NamedEntityIdentifierList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.NamedEntityIdentifierList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.NamedEntityIdentifierList)
    MergeFrom(*source);
  }
}

void NamedEntityIdentifierList::MergeFrom(const NamedEntityIdentifierList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.NamedEntityIdentifierList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entities_.MergeFrom(from.entities_);
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
}

void NamedEntityIdentifierList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.NamedEntityIdentifierList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NamedEntityIdentifierList::CopyFrom(const NamedEntityIdentifierList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.NamedEntityIdentifierList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamedEntityIdentifierList::IsInitialized() const {
  return true;
}

void NamedEntityIdentifierList::Swap(NamedEntityIdentifierList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NamedEntityIdentifierList::InternalSwap(NamedEntityIdentifierList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&entities_)->InternalSwap(CastToBase(&other->entities_));
  token_.Swap(&other->token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata NamedEntityIdentifierList::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fcommon_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NamedEntityList::InitAsDefaultInstance() {
}
class NamedEntityList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NamedEntityList::kEntitiesFieldNumber;
const int NamedEntityList::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NamedEntityList::NamedEntityList()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.NamedEntityList)
}
NamedEntityList::NamedEntityList(const NamedEntityList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      entities_(from.entities_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.NamedEntityList)
}

void NamedEntityList::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_NamedEntityList_flyteidl_2fadmin_2fcommon_2eproto.base);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

NamedEntityList::~NamedEntityList() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.NamedEntityList)
  SharedDtor();
}

void NamedEntityList::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NamedEntityList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NamedEntityList& NamedEntityList::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NamedEntityList_flyteidl_2fadmin_2fcommon_2eproto.base);
  return *internal_default_instance();
}


void NamedEntityList::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.NamedEntityList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entities_.Clear();
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NamedEntityList::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NamedEntityList*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .flyteidl.admin.NamedEntity entities = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::flyteidl::admin::NamedEntity::_InternalParse;
          object = msg->add_entities();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // string token = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.NamedEntityList.token");
        object = msg->mutable_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NamedEntityList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.NamedEntityList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .flyteidl.admin.NamedEntity entities = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_entities()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.NamedEntityList.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.NamedEntityList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.NamedEntityList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NamedEntityList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.NamedEntityList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .flyteidl.admin.NamedEntity entities = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entities_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->entities(static_cast<int>(i)),
      output);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.NamedEntityList.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.NamedEntityList)
}

::google::protobuf::uint8* NamedEntityList::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.NamedEntityList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .flyteidl.admin.NamedEntity entities = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entities_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->entities(static_cast<int>(i)), target);
  }

  // string token = 2;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.NamedEntityList.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.NamedEntityList)
  return target;
}

size_t NamedEntityList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.NamedEntityList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .flyteidl.admin.NamedEntity entities = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->entities_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->entities(static_cast<int>(i)));
    }
  }

  // string token = 2;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NamedEntityList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.NamedEntityList)
  GOOGLE_DCHECK_NE(&from, this);
  const NamedEntityList* source =
      ::google::protobuf::DynamicCastToGenerated<NamedEntityList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.NamedEntityList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.NamedEntityList)
    MergeFrom(*source);
  }
}

void NamedEntityList::MergeFrom(const NamedEntityList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.NamedEntityList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entities_.MergeFrom(from.entities_);
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
}

void NamedEntityList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.NamedEntityList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NamedEntityList::CopyFrom(const NamedEntityList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.NamedEntityList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamedEntityList::IsInitialized() const {
  return true;
}

void NamedEntityList::Swap(NamedEntityList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NamedEntityList::InternalSwap(NamedEntityList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&entities_)->InternalSwap(CastToBase(&other->entities_));
  token_.Swap(&other->token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata NamedEntityList::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fcommon_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NamedEntityGetRequest::InitAsDefaultInstance() {
  ::flyteidl::admin::_NamedEntityGetRequest_default_instance_._instance.get_mutable()->id_ = const_cast< ::flyteidl::admin::NamedEntityIdentifier*>(
      ::flyteidl::admin::NamedEntityIdentifier::internal_default_instance());
}
class NamedEntityGetRequest::HasBitSetters {
 public:
  static const ::flyteidl::admin::NamedEntityIdentifier& id(const NamedEntityGetRequest* msg);
};

const ::flyteidl::admin::NamedEntityIdentifier&
NamedEntityGetRequest::HasBitSetters::id(const NamedEntityGetRequest* msg) {
  return *msg->id_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NamedEntityGetRequest::kResourceTypeFieldNumber;
const int NamedEntityGetRequest::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NamedEntityGetRequest::NamedEntityGetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.NamedEntityGetRequest)
}
NamedEntityGetRequest::NamedEntityGetRequest(const NamedEntityGetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::flyteidl::admin::NamedEntityIdentifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  resource_type_ = from.resource_type_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.NamedEntityGetRequest)
}

void NamedEntityGetRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_NamedEntityGetRequest_flyteidl_2fadmin_2fcommon_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resource_type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(resource_type_));
}

NamedEntityGetRequest::~NamedEntityGetRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.NamedEntityGetRequest)
  SharedDtor();
}

void NamedEntityGetRequest::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
}

void NamedEntityGetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NamedEntityGetRequest& NamedEntityGetRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NamedEntityGetRequest_flyteidl_2fadmin_2fcommon_2eproto.base);
  return *internal_default_instance();
}


void NamedEntityGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.NamedEntityGetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  resource_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NamedEntityGetRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NamedEntityGetRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.ResourceType resource_type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_resource_type(static_cast<::flyteidl::core::ResourceType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .flyteidl.admin.NamedEntityIdentifier id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::NamedEntityIdentifier::_InternalParse;
        object = msg->mutable_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NamedEntityGetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.NamedEntityGetRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.ResourceType resource_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_resource_type(static_cast< ::flyteidl::core::ResourceType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.NamedEntityIdentifier id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.NamedEntityGetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.NamedEntityGetRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NamedEntityGetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.NamedEntityGetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.ResourceType resource_type = 1;
  if (this->resource_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->resource_type(), output);
  }

  // .flyteidl.admin.NamedEntityIdentifier id = 2;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::id(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.NamedEntityGetRequest)
}

::google::protobuf::uint8* NamedEntityGetRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.NamedEntityGetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.ResourceType resource_type = 1;
  if (this->resource_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->resource_type(), target);
  }

  // .flyteidl.admin.NamedEntityIdentifier id = 2;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::id(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.NamedEntityGetRequest)
  return target;
}

size_t NamedEntityGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.NamedEntityGetRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.admin.NamedEntityIdentifier id = 2;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .flyteidl.core.ResourceType resource_type = 1;
  if (this->resource_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->resource_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NamedEntityGetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.NamedEntityGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NamedEntityGetRequest* source =
      ::google::protobuf::DynamicCastToGenerated<NamedEntityGetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.NamedEntityGetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.NamedEntityGetRequest)
    MergeFrom(*source);
  }
}

void NamedEntityGetRequest::MergeFrom(const NamedEntityGetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.NamedEntityGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    mutable_id()->::flyteidl::admin::NamedEntityIdentifier::MergeFrom(from.id());
  }
  if (from.resource_type() != 0) {
    set_resource_type(from.resource_type());
  }
}

void NamedEntityGetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.NamedEntityGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NamedEntityGetRequest::CopyFrom(const NamedEntityGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.NamedEntityGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamedEntityGetRequest::IsInitialized() const {
  return true;
}

void NamedEntityGetRequest::Swap(NamedEntityGetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NamedEntityGetRequest::InternalSwap(NamedEntityGetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(resource_type_, other->resource_type_);
}

::google::protobuf::Metadata NamedEntityGetRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fcommon_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NamedEntityUpdateRequest::InitAsDefaultInstance() {
  ::flyteidl::admin::_NamedEntityUpdateRequest_default_instance_._instance.get_mutable()->id_ = const_cast< ::flyteidl::admin::NamedEntityIdentifier*>(
      ::flyteidl::admin::NamedEntityIdentifier::internal_default_instance());
  ::flyteidl::admin::_NamedEntityUpdateRequest_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::flyteidl::admin::NamedEntityMetadata*>(
      ::flyteidl::admin::NamedEntityMetadata::internal_default_instance());
}
class NamedEntityUpdateRequest::HasBitSetters {
 public:
  static const ::flyteidl::admin::NamedEntityIdentifier& id(const NamedEntityUpdateRequest* msg);
  static const ::flyteidl::admin::NamedEntityMetadata& metadata(const NamedEntityUpdateRequest* msg);
};

const ::flyteidl::admin::NamedEntityIdentifier&
NamedEntityUpdateRequest::HasBitSetters::id(const NamedEntityUpdateRequest* msg) {
  return *msg->id_;
}
const ::flyteidl::admin::NamedEntityMetadata&
NamedEntityUpdateRequest::HasBitSetters::metadata(const NamedEntityUpdateRequest* msg) {
  return *msg->metadata_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NamedEntityUpdateRequest::kResourceTypeFieldNumber;
const int NamedEntityUpdateRequest::kIdFieldNumber;
const int NamedEntityUpdateRequest::kMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NamedEntityUpdateRequest::NamedEntityUpdateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.NamedEntityUpdateRequest)
}
NamedEntityUpdateRequest::NamedEntityUpdateRequest(const NamedEntityUpdateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::flyteidl::admin::NamedEntityIdentifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from.has_metadata()) {
    metadata_ = new ::flyteidl::admin::NamedEntityMetadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  resource_type_ = from.resource_type_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.NamedEntityUpdateRequest)
}

void NamedEntityUpdateRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_NamedEntityUpdateRequest_flyteidl_2fadmin_2fcommon_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resource_type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(resource_type_));
}

NamedEntityUpdateRequest::~NamedEntityUpdateRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.NamedEntityUpdateRequest)
  SharedDtor();
}

void NamedEntityUpdateRequest::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete metadata_;
}

void NamedEntityUpdateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NamedEntityUpdateRequest& NamedEntityUpdateRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NamedEntityUpdateRequest_flyteidl_2fadmin_2fcommon_2eproto.base);
  return *internal_default_instance();
}


void NamedEntityUpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.NamedEntityUpdateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  resource_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NamedEntityUpdateRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NamedEntityUpdateRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.ResourceType resource_type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_resource_type(static_cast<::flyteidl::core::ResourceType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .flyteidl.admin.NamedEntityIdentifier id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::NamedEntityIdentifier::_InternalParse;
        object = msg->mutable_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.NamedEntityMetadata metadata = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::NamedEntityMetadata::_InternalParse;
        object = msg->mutable_metadata();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NamedEntityUpdateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.NamedEntityUpdateRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.ResourceType resource_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_resource_type(static_cast< ::flyteidl::core::ResourceType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.NamedEntityIdentifier id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.NamedEntityMetadata metadata = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.NamedEntityUpdateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.NamedEntityUpdateRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NamedEntityUpdateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.NamedEntityUpdateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.ResourceType resource_type = 1;
  if (this->resource_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->resource_type(), output);
  }

  // .flyteidl.admin.NamedEntityIdentifier id = 2;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::id(this), output);
  }

  // .flyteidl.admin.NamedEntityMetadata metadata = 3;
  if (this->has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::metadata(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.NamedEntityUpdateRequest)
}

::google::protobuf::uint8* NamedEntityUpdateRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.NamedEntityUpdateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.ResourceType resource_type = 1;
  if (this->resource_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->resource_type(), target);
  }

  // .flyteidl.admin.NamedEntityIdentifier id = 2;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::id(this), target);
  }

  // .flyteidl.admin.NamedEntityMetadata metadata = 3;
  if (this->has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::metadata(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.NamedEntityUpdateRequest)
  return target;
}

size_t NamedEntityUpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.NamedEntityUpdateRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.admin.NamedEntityIdentifier id = 2;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .flyteidl.admin.NamedEntityMetadata metadata = 3;
  if (this->has_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // .flyteidl.core.ResourceType resource_type = 1;
  if (this->resource_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->resource_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NamedEntityUpdateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.NamedEntityUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NamedEntityUpdateRequest* source =
      ::google::protobuf::DynamicCastToGenerated<NamedEntityUpdateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.NamedEntityUpdateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.NamedEntityUpdateRequest)
    MergeFrom(*source);
  }
}

void NamedEntityUpdateRequest::MergeFrom(const NamedEntityUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.NamedEntityUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    mutable_id()->::flyteidl::admin::NamedEntityIdentifier::MergeFrom(from.id());
  }
  if (from.has_metadata()) {
    mutable_metadata()->::flyteidl::admin::NamedEntityMetadata::MergeFrom(from.metadata());
  }
  if (from.resource_type() != 0) {
    set_resource_type(from.resource_type());
  }
}

void NamedEntityUpdateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.NamedEntityUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NamedEntityUpdateRequest::CopyFrom(const NamedEntityUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.NamedEntityUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamedEntityUpdateRequest::IsInitialized() const {
  return true;
}

void NamedEntityUpdateRequest::Swap(NamedEntityUpdateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NamedEntityUpdateRequest::InternalSwap(NamedEntityUpdateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(metadata_, other->metadata_);
  swap(resource_type_, other->resource_type_);
}

::google::protobuf::Metadata NamedEntityUpdateRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fcommon_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NamedEntityUpdateResponse::InitAsDefaultInstance() {
}
class NamedEntityUpdateResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NamedEntityUpdateResponse::NamedEntityUpdateResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.NamedEntityUpdateResponse)
}
NamedEntityUpdateResponse::NamedEntityUpdateResponse(const NamedEntityUpdateResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.NamedEntityUpdateResponse)
}

void NamedEntityUpdateResponse::SharedCtor() {
}

NamedEntityUpdateResponse::~NamedEntityUpdateResponse() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.NamedEntityUpdateResponse)
  SharedDtor();
}

void NamedEntityUpdateResponse::SharedDtor() {
}

void NamedEntityUpdateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NamedEntityUpdateResponse& NamedEntityUpdateResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NamedEntityUpdateResponse_flyteidl_2fadmin_2fcommon_2eproto.base);
  return *internal_default_instance();
}


void NamedEntityUpdateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.NamedEntityUpdateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NamedEntityUpdateResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NamedEntityUpdateResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NamedEntityUpdateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.NamedEntityUpdateResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.NamedEntityUpdateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.NamedEntityUpdateResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NamedEntityUpdateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.NamedEntityUpdateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.NamedEntityUpdateResponse)
}

::google::protobuf::uint8* NamedEntityUpdateResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.NamedEntityUpdateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.NamedEntityUpdateResponse)
  return target;
}

size_t NamedEntityUpdateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.NamedEntityUpdateResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NamedEntityUpdateResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.NamedEntityUpdateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NamedEntityUpdateResponse* source =
      ::google::protobuf::DynamicCastToGenerated<NamedEntityUpdateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.NamedEntityUpdateResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.NamedEntityUpdateResponse)
    MergeFrom(*source);
  }
}

void NamedEntityUpdateResponse::MergeFrom(const NamedEntityUpdateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.NamedEntityUpdateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void NamedEntityUpdateResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.NamedEntityUpdateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NamedEntityUpdateResponse::CopyFrom(const NamedEntityUpdateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.NamedEntityUpdateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamedEntityUpdateResponse::IsInitialized() const {
  return true;
}

void NamedEntityUpdateResponse::Swap(NamedEntityUpdateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NamedEntityUpdateResponse::InternalSwap(NamedEntityUpdateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NamedEntityUpdateResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fcommon_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ObjectGetRequest::InitAsDefaultInstance() {
  ::flyteidl::admin::_ObjectGetRequest_default_instance_._instance.get_mutable()->id_ = const_cast< ::flyteidl::core::Identifier*>(
      ::flyteidl::core::Identifier::internal_default_instance());
}
class ObjectGetRequest::HasBitSetters {
 public:
  static const ::flyteidl::core::Identifier& id(const ObjectGetRequest* msg);
};

const ::flyteidl::core::Identifier&
ObjectGetRequest::HasBitSetters::id(const ObjectGetRequest* msg) {
  return *msg->id_;
}
void ObjectGetRequest::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectGetRequest::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectGetRequest::ObjectGetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.ObjectGetRequest)
}
ObjectGetRequest::ObjectGetRequest(const ObjectGetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::flyteidl::core::Identifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.ObjectGetRequest)
}

void ObjectGetRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ObjectGetRequest_flyteidl_2fadmin_2fcommon_2eproto.base);
  id_ = nullptr;
}

ObjectGetRequest::~ObjectGetRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.ObjectGetRequest)
  SharedDtor();
}

void ObjectGetRequest::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
}

void ObjectGetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectGetRequest& ObjectGetRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ObjectGetRequest_flyteidl_2fadmin_2fcommon_2eproto.base);
  return *internal_default_instance();
}


void ObjectGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.ObjectGetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ObjectGetRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ObjectGetRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.core.Identifier id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::core::Identifier::_InternalParse;
        object = msg->mutable_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ObjectGetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.ObjectGetRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.core.Identifier id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.ObjectGetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.ObjectGetRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ObjectGetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.ObjectGetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::id(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.ObjectGetRequest)
}

::google::protobuf::uint8* ObjectGetRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.ObjectGetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.core.Identifier id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::id(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.ObjectGetRequest)
  return target;
}

size_t ObjectGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.ObjectGetRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .flyteidl.core.Identifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectGetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.ObjectGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectGetRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ObjectGetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.ObjectGetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.ObjectGetRequest)
    MergeFrom(*source);
  }
}

void ObjectGetRequest::MergeFrom(const ObjectGetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.ObjectGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    mutable_id()->::flyteidl::core::Identifier::MergeFrom(from.id());
  }
}

void ObjectGetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.ObjectGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectGetRequest::CopyFrom(const ObjectGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.ObjectGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectGetRequest::IsInitialized() const {
  return true;
}

void ObjectGetRequest::Swap(ObjectGetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectGetRequest::InternalSwap(ObjectGetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::google::protobuf::Metadata ObjectGetRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fcommon_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ResourceListRequest::InitAsDefaultInstance() {
  ::flyteidl::admin::_ResourceListRequest_default_instance_._instance.get_mutable()->id_ = const_cast< ::flyteidl::admin::NamedEntityIdentifier*>(
      ::flyteidl::admin::NamedEntityIdentifier::internal_default_instance());
  ::flyteidl::admin::_ResourceListRequest_default_instance_._instance.get_mutable()->sort_by_ = const_cast< ::flyteidl::admin::Sort*>(
      ::flyteidl::admin::Sort::internal_default_instance());
}
class ResourceListRequest::HasBitSetters {
 public:
  static const ::flyteidl::admin::NamedEntityIdentifier& id(const ResourceListRequest* msg);
  static const ::flyteidl::admin::Sort& sort_by(const ResourceListRequest* msg);
};

const ::flyteidl::admin::NamedEntityIdentifier&
ResourceListRequest::HasBitSetters::id(const ResourceListRequest* msg) {
  return *msg->id_;
}
const ::flyteidl::admin::Sort&
ResourceListRequest::HasBitSetters::sort_by(const ResourceListRequest* msg) {
  return *msg->sort_by_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResourceListRequest::kIdFieldNumber;
const int ResourceListRequest::kLimitFieldNumber;
const int ResourceListRequest::kTokenFieldNumber;
const int ResourceListRequest::kFiltersFieldNumber;
const int ResourceListRequest::kSortByFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResourceListRequest::ResourceListRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.ResourceListRequest)
}
ResourceListRequest::ResourceListRequest(const ResourceListRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  filters_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filters().size() > 0) {
    filters_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filters_);
  }
  if (from.has_id()) {
    id_ = new ::flyteidl::admin::NamedEntityIdentifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from.has_sort_by()) {
    sort_by_ = new ::flyteidl::admin::Sort(*from.sort_by_);
  } else {
    sort_by_ = nullptr;
  }
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.ResourceListRequest)
}

void ResourceListRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ResourceListRequest_flyteidl_2fadmin_2fcommon_2eproto.base);
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filters_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&id_)) + sizeof(limit_));
}

ResourceListRequest::~ResourceListRequest() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.ResourceListRequest)
  SharedDtor();
}

void ResourceListRequest::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filters_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete sort_by_;
}

void ResourceListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResourceListRequest& ResourceListRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ResourceListRequest_flyteidl_2fadmin_2fcommon_2eproto.base);
  return *internal_default_instance();
}


void ResourceListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.ResourceListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filters_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && sort_by_ != nullptr) {
    delete sort_by_;
  }
  sort_by_ = nullptr;
  limit_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResourceListRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ResourceListRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flyteidl.admin.NamedEntityIdentifier id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::NamedEntityIdentifier::_InternalParse;
        object = msg->mutable_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // uint32 limit = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_limit(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string token = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.ResourceListRequest.token");
        object = msg->mutable_token();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string filters = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.ResourceListRequest.filters");
        object = msg->mutable_filters();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .flyteidl.admin.Sort sort_by = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::Sort::_InternalParse;
        object = msg->mutable_sort_by();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResourceListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.ResourceListRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flyteidl.admin.NamedEntityIdentifier id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 limit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.ResourceListRequest.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filters = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filters()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filters().data(), static_cast<int>(this->filters().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.ResourceListRequest.filters"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.Sort sort_by = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sort_by()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.ResourceListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.ResourceListRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResourceListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.ResourceListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.admin.NamedEntityIdentifier id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::id(this), output);
  }

  // uint32 limit = 2;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->limit(), output);
  }

  // string token = 3;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.ResourceListRequest.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->token(), output);
  }

  // string filters = 4;
  if (this->filters().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filters().data(), static_cast<int>(this->filters().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.ResourceListRequest.filters");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->filters(), output);
  }

  // .flyteidl.admin.Sort sort_by = 5;
  if (this->has_sort_by()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::sort_by(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.ResourceListRequest)
}

::google::protobuf::uint8* ResourceListRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.ResourceListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flyteidl.admin.NamedEntityIdentifier id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::id(this), target);
  }

  // uint32 limit = 2;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->limit(), target);
  }

  // string token = 3;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.ResourceListRequest.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->token(), target);
  }

  // string filters = 4;
  if (this->filters().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filters().data(), static_cast<int>(this->filters().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.ResourceListRequest.filters");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->filters(), target);
  }

  // .flyteidl.admin.Sort sort_by = 5;
  if (this->has_sort_by()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::sort_by(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.ResourceListRequest)
  return target;
}

size_t ResourceListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.ResourceListRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 3;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // string filters = 4;
  if (this->filters().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filters());
  }

  // .flyteidl.admin.NamedEntityIdentifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .flyteidl.admin.Sort sort_by = 5;
  if (this->has_sort_by()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sort_by_);
  }

  // uint32 limit = 2;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->limit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResourceListRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.ResourceListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ResourceListRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ResourceListRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.ResourceListRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.ResourceListRequest)
    MergeFrom(*source);
  }
}

void ResourceListRequest::MergeFrom(const ResourceListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.ResourceListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.filters().size() > 0) {

    filters_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filters_);
  }
  if (from.has_id()) {
    mutable_id()->::flyteidl::admin::NamedEntityIdentifier::MergeFrom(from.id());
  }
  if (from.has_sort_by()) {
    mutable_sort_by()->::flyteidl::admin::Sort::MergeFrom(from.sort_by());
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
}

void ResourceListRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.ResourceListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceListRequest::CopyFrom(const ResourceListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.ResourceListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceListRequest::IsInitialized() const {
  return true;
}

void ResourceListRequest::Swap(ResourceListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResourceListRequest::InternalSwap(ResourceListRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filters_.Swap(&other->filters_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(sort_by_, other->sort_by_);
  swap(limit_, other->limit_);
}

::google::protobuf::Metadata ResourceListRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fcommon_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void EmailNotification::InitAsDefaultInstance() {
}
class EmailNotification::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EmailNotification::kRecipientsEmailFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmailNotification::EmailNotification()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.EmailNotification)
}
EmailNotification::EmailNotification(const EmailNotification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      recipients_email_(from.recipients_email_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.EmailNotification)
}

void EmailNotification::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_EmailNotification_flyteidl_2fadmin_2fcommon_2eproto.base);
}

EmailNotification::~EmailNotification() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.EmailNotification)
  SharedDtor();
}

void EmailNotification::SharedDtor() {
}

void EmailNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EmailNotification& EmailNotification::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EmailNotification_flyteidl_2fadmin_2fcommon_2eproto.base);
  return *internal_default_instance();
}


void EmailNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.EmailNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recipients_email_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EmailNotification::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EmailNotification*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated string recipients_email = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("flyteidl.admin.EmailNotification.recipients_email");
          object = msg->add_recipients_email();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EmailNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.EmailNotification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string recipients_email = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_recipients_email()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->recipients_email(this->recipients_email_size() - 1).data(),
            static_cast<int>(this->recipients_email(this->recipients_email_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.EmailNotification.recipients_email"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.EmailNotification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.EmailNotification)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EmailNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.EmailNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string recipients_email = 1;
  for (int i = 0, n = this->recipients_email_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->recipients_email(i).data(), static_cast<int>(this->recipients_email(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.EmailNotification.recipients_email");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->recipients_email(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.EmailNotification)
}

::google::protobuf::uint8* EmailNotification::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.EmailNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string recipients_email = 1;
  for (int i = 0, n = this->recipients_email_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->recipients_email(i).data(), static_cast<int>(this->recipients_email(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.EmailNotification.recipients_email");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->recipients_email(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.EmailNotification)
  return target;
}

size_t EmailNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.EmailNotification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string recipients_email = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->recipients_email_size());
  for (int i = 0, n = this->recipients_email_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->recipients_email(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EmailNotification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.EmailNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const EmailNotification* source =
      ::google::protobuf::DynamicCastToGenerated<EmailNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.EmailNotification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.EmailNotification)
    MergeFrom(*source);
  }
}

void EmailNotification::MergeFrom(const EmailNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.EmailNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  recipients_email_.MergeFrom(from.recipients_email_);
}

void EmailNotification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.EmailNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmailNotification::CopyFrom(const EmailNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.EmailNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmailNotification::IsInitialized() const {
  return true;
}

void EmailNotification::Swap(EmailNotification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmailNotification::InternalSwap(EmailNotification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  recipients_email_.InternalSwap(CastToBase(&other->recipients_email_));
}

::google::protobuf::Metadata EmailNotification::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fcommon_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PagerDutyNotification::InitAsDefaultInstance() {
}
class PagerDutyNotification::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PagerDutyNotification::kRecipientsEmailFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PagerDutyNotification::PagerDutyNotification()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.PagerDutyNotification)
}
PagerDutyNotification::PagerDutyNotification(const PagerDutyNotification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      recipients_email_(from.recipients_email_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.PagerDutyNotification)
}

void PagerDutyNotification::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PagerDutyNotification_flyteidl_2fadmin_2fcommon_2eproto.base);
}

PagerDutyNotification::~PagerDutyNotification() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.PagerDutyNotification)
  SharedDtor();
}

void PagerDutyNotification::SharedDtor() {
}

void PagerDutyNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PagerDutyNotification& PagerDutyNotification::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PagerDutyNotification_flyteidl_2fadmin_2fcommon_2eproto.base);
  return *internal_default_instance();
}


void PagerDutyNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.PagerDutyNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recipients_email_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PagerDutyNotification::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PagerDutyNotification*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated string recipients_email = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("flyteidl.admin.PagerDutyNotification.recipients_email");
          object = msg->add_recipients_email();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PagerDutyNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.PagerDutyNotification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string recipients_email = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_recipients_email()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->recipients_email(this->recipients_email_size() - 1).data(),
            static_cast<int>(this->recipients_email(this->recipients_email_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.PagerDutyNotification.recipients_email"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.PagerDutyNotification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.PagerDutyNotification)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PagerDutyNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.PagerDutyNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string recipients_email = 1;
  for (int i = 0, n = this->recipients_email_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->recipients_email(i).data(), static_cast<int>(this->recipients_email(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.PagerDutyNotification.recipients_email");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->recipients_email(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.PagerDutyNotification)
}

::google::protobuf::uint8* PagerDutyNotification::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.PagerDutyNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string recipients_email = 1;
  for (int i = 0, n = this->recipients_email_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->recipients_email(i).data(), static_cast<int>(this->recipients_email(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.PagerDutyNotification.recipients_email");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->recipients_email(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.PagerDutyNotification)
  return target;
}

size_t PagerDutyNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.PagerDutyNotification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string recipients_email = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->recipients_email_size());
  for (int i = 0, n = this->recipients_email_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->recipients_email(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PagerDutyNotification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.PagerDutyNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const PagerDutyNotification* source =
      ::google::protobuf::DynamicCastToGenerated<PagerDutyNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.PagerDutyNotification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.PagerDutyNotification)
    MergeFrom(*source);
  }
}

void PagerDutyNotification::MergeFrom(const PagerDutyNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.PagerDutyNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  recipients_email_.MergeFrom(from.recipients_email_);
}

void PagerDutyNotification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.PagerDutyNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PagerDutyNotification::CopyFrom(const PagerDutyNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.PagerDutyNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PagerDutyNotification::IsInitialized() const {
  return true;
}

void PagerDutyNotification::Swap(PagerDutyNotification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PagerDutyNotification::InternalSwap(PagerDutyNotification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  recipients_email_.InternalSwap(CastToBase(&other->recipients_email_));
}

::google::protobuf::Metadata PagerDutyNotification::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fcommon_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SlackNotification::InitAsDefaultInstance() {
}
class SlackNotification::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SlackNotification::kRecipientsEmailFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SlackNotification::SlackNotification()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.SlackNotification)
}
SlackNotification::SlackNotification(const SlackNotification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      recipients_email_(from.recipients_email_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.SlackNotification)
}

void SlackNotification::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SlackNotification_flyteidl_2fadmin_2fcommon_2eproto.base);
}

SlackNotification::~SlackNotification() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.SlackNotification)
  SharedDtor();
}

void SlackNotification::SharedDtor() {
}

void SlackNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SlackNotification& SlackNotification::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SlackNotification_flyteidl_2fadmin_2fcommon_2eproto.base);
  return *internal_default_instance();
}


void SlackNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.SlackNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recipients_email_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SlackNotification::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SlackNotification*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated string recipients_email = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("flyteidl.admin.SlackNotification.recipients_email");
          object = msg->add_recipients_email();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SlackNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.SlackNotification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string recipients_email = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_recipients_email()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->recipients_email(this->recipients_email_size() - 1).data(),
            static_cast<int>(this->recipients_email(this->recipients_email_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.SlackNotification.recipients_email"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.SlackNotification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.SlackNotification)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SlackNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.SlackNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string recipients_email = 1;
  for (int i = 0, n = this->recipients_email_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->recipients_email(i).data(), static_cast<int>(this->recipients_email(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.SlackNotification.recipients_email");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->recipients_email(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.SlackNotification)
}

::google::protobuf::uint8* SlackNotification::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.SlackNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string recipients_email = 1;
  for (int i = 0, n = this->recipients_email_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->recipients_email(i).data(), static_cast<int>(this->recipients_email(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.SlackNotification.recipients_email");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->recipients_email(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.SlackNotification)
  return target;
}

size_t SlackNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.SlackNotification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string recipients_email = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->recipients_email_size());
  for (int i = 0, n = this->recipients_email_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->recipients_email(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SlackNotification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.SlackNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const SlackNotification* source =
      ::google::protobuf::DynamicCastToGenerated<SlackNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.SlackNotification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.SlackNotification)
    MergeFrom(*source);
  }
}

void SlackNotification::MergeFrom(const SlackNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.SlackNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  recipients_email_.MergeFrom(from.recipients_email_);
}

void SlackNotification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.SlackNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlackNotification::CopyFrom(const SlackNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.SlackNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlackNotification::IsInitialized() const {
  return true;
}

void SlackNotification::Swap(SlackNotification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SlackNotification::InternalSwap(SlackNotification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  recipients_email_.InternalSwap(CastToBase(&other->recipients_email_));
}

::google::protobuf::Metadata SlackNotification::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fcommon_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Notification::InitAsDefaultInstance() {
  ::flyteidl::admin::_Notification_default_instance_.email_ = const_cast< ::flyteidl::admin::EmailNotification*>(
      ::flyteidl::admin::EmailNotification::internal_default_instance());
  ::flyteidl::admin::_Notification_default_instance_.pager_duty_ = const_cast< ::flyteidl::admin::PagerDutyNotification*>(
      ::flyteidl::admin::PagerDutyNotification::internal_default_instance());
  ::flyteidl::admin::_Notification_default_instance_.slack_ = const_cast< ::flyteidl::admin::SlackNotification*>(
      ::flyteidl::admin::SlackNotification::internal_default_instance());
}
class Notification::HasBitSetters {
 public:
  static const ::flyteidl::admin::EmailNotification& email(const Notification* msg);
  static const ::flyteidl::admin::PagerDutyNotification& pager_duty(const Notification* msg);
  static const ::flyteidl::admin::SlackNotification& slack(const Notification* msg);
};

const ::flyteidl::admin::EmailNotification&
Notification::HasBitSetters::email(const Notification* msg) {
  return *msg->type_.email_;
}
const ::flyteidl::admin::PagerDutyNotification&
Notification::HasBitSetters::pager_duty(const Notification* msg) {
  return *msg->type_.pager_duty_;
}
const ::flyteidl::admin::SlackNotification&
Notification::HasBitSetters::slack(const Notification* msg) {
  return *msg->type_.slack_;
}
void Notification::set_allocated_email(::flyteidl::admin::EmailNotification* email) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (email) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      email = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, email, submessage_arena);
    }
    set_has_email();
    type_.email_ = email;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Notification.email)
}
void Notification::set_allocated_pager_duty(::flyteidl::admin::PagerDutyNotification* pager_duty) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (pager_duty) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pager_duty = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pager_duty, submessage_arena);
    }
    set_has_pager_duty();
    type_.pager_duty_ = pager_duty;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Notification.pager_duty)
}
void Notification::set_allocated_slack(::flyteidl::admin::SlackNotification* slack) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (slack) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      slack = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, slack, submessage_arena);
    }
    set_has_slack();
    type_.slack_ = slack;
  }
  // @@protoc_insertion_point(field_set_allocated:flyteidl.admin.Notification.slack)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Notification::kPhasesFieldNumber;
const int Notification::kEmailFieldNumber;
const int Notification::kPagerDutyFieldNumber;
const int Notification::kSlackFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Notification::Notification()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.Notification)
}
Notification::Notification(const Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      phases_(from.phases_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kEmail: {
      mutable_email()->::flyteidl::admin::EmailNotification::MergeFrom(from.email());
      break;
    }
    case kPagerDuty: {
      mutable_pager_duty()->::flyteidl::admin::PagerDutyNotification::MergeFrom(from.pager_duty());
      break;
    }
    case kSlack: {
      mutable_slack()->::flyteidl::admin::SlackNotification::MergeFrom(from.slack());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.Notification)
}

void Notification::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Notification_flyteidl_2fadmin_2fcommon_2eproto.base);
  clear_has_type();
}

Notification::~Notification() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.Notification)
  SharedDtor();
}

void Notification::SharedDtor() {
  if (has_type()) {
    clear_type();
  }
}

void Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Notification& Notification::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Notification_flyteidl_2fadmin_2fcommon_2eproto.base);
  return *internal_default_instance();
}


void Notification::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.admin.Notification)
  switch (type_case()) {
    case kEmail: {
      delete type_.email_;
      break;
    }
    case kPagerDuty: {
      delete type_.pager_duty_;
      break;
    }
    case kSlack: {
      delete type_.slack_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  phases_.Clear();
  clear_type();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Notification::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Notification*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .flyteidl.core.WorkflowExecution.Phase phases = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 10) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedEnumParser;
          object = msg->mutable_phases();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        do {
          ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
          msg->add_phases(static_cast<::flyteidl::core::WorkflowExecution_Phase>(val));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
        break;
      }
      // .flyteidl.admin.EmailNotification email = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::EmailNotification::_InternalParse;
        object = msg->mutable_email();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.PagerDutyNotification pager_duty = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::PagerDutyNotification::_InternalParse;
        object = msg->mutable_pager_duty();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .flyteidl.admin.SlackNotification slack = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::flyteidl::admin::SlackNotification::_InternalParse;
        object = msg->mutable_slack();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.Notification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .flyteidl.core.WorkflowExecution.Phase phases = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_phases(static_cast< ::flyteidl::core::WorkflowExecution_Phase >(value));
          }
          input->PopLimit(limit);
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_phases(static_cast< ::flyteidl::core::WorkflowExecution_Phase >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.EmailNotification email = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_email()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.PagerDutyNotification pager_duty = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pager_duty()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flyteidl.admin.SlackNotification slack = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_slack()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.Notification)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .flyteidl.core.WorkflowExecution.Phase phases = 1;
  if (this->phases_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_phases_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->phases_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->phases(i), output);
  }

  // .flyteidl.admin.EmailNotification email = 2;
  if (has_email()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::email(this), output);
  }

  // .flyteidl.admin.PagerDutyNotification pager_duty = 3;
  if (has_pager_duty()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::pager_duty(this), output);
  }

  // .flyteidl.admin.SlackNotification slack = 4;
  if (has_slack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::slack(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.Notification)
}

::google::protobuf::uint8* Notification::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .flyteidl.core.WorkflowExecution.Phase phases = 1;
  if (this->phases_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(      _phases_cached_byte_size_.load(std::memory_order_relaxed),
        target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->phases_, target);
  }

  // .flyteidl.admin.EmailNotification email = 2;
  if (has_email()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::email(this), target);
  }

  // .flyteidl.admin.PagerDutyNotification pager_duty = 3;
  if (has_pager_duty()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::pager_duty(this), target);
  }

  // .flyteidl.admin.SlackNotification slack = 4;
  if (has_slack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::slack(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.Notification)
  return target;
}

size_t Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .flyteidl.core.WorkflowExecution.Phase phases = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->phases_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->phases(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _phases_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  switch (type_case()) {
    // .flyteidl.admin.EmailNotification email = 2;
    case kEmail: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.email_);
      break;
    }
    // .flyteidl.admin.PagerDutyNotification pager_duty = 3;
    case kPagerDuty: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.pager_duty_);
      break;
    }
    // .flyteidl.admin.SlackNotification slack = 4;
    case kSlack: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.slack_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const Notification* source =
      ::google::protobuf::DynamicCastToGenerated<Notification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.Notification)
    MergeFrom(*source);
  }
}

void Notification::MergeFrom(const Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  phases_.MergeFrom(from.phases_);
  switch (from.type_case()) {
    case kEmail: {
      mutable_email()->::flyteidl::admin::EmailNotification::MergeFrom(from.email());
      break;
    }
    case kPagerDuty: {
      mutable_pager_duty()->::flyteidl::admin::PagerDutyNotification::MergeFrom(from.pager_duty());
      break;
    }
    case kSlack: {
      mutable_slack()->::flyteidl::admin::SlackNotification::MergeFrom(from.slack());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Notification::CopyFrom(const Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Notification::IsInitialized() const {
  return true;
}

void Notification::Swap(Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Notification::InternalSwap(Notification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  phases_.InternalSwap(&other->phases_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata Notification::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fcommon_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void UrlBlob::InitAsDefaultInstance() {
}
class UrlBlob::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UrlBlob::kUrlFieldNumber;
const int UrlBlob::kBytesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UrlBlob::UrlBlob()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.UrlBlob)
}
UrlBlob::UrlBlob(const UrlBlob& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.url().size() > 0) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  bytes_ = from.bytes_;
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.UrlBlob)
}

void UrlBlob::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_UrlBlob_flyteidl_2fadmin_2fcommon_2eproto.base);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bytes_ = PROTOBUF_LONGLONG(0);
}

UrlBlob::~UrlBlob() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.UrlBlob)
  SharedDtor();
}

void UrlBlob::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UrlBlob::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UrlBlob& UrlBlob::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_UrlBlob_flyteidl_2fadmin_2fcommon_2eproto.base);
  return *internal_default_instance();
}


void UrlBlob::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.UrlBlob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bytes_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UrlBlob::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<UrlBlob*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string url = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.UrlBlob.url");
        object = msg->mutable_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int64 bytes = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_bytes(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UrlBlob::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.UrlBlob)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.UrlBlob.url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 bytes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.UrlBlob)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.UrlBlob)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UrlBlob::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.UrlBlob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.UrlBlob.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // int64 bytes = 2;
  if (this->bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->bytes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.UrlBlob)
}

::google::protobuf::uint8* UrlBlob::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.UrlBlob)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.UrlBlob.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // int64 bytes = 2;
  if (this->bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->bytes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.UrlBlob)
  return target;
}

size_t UrlBlob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.UrlBlob)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 1;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  // int64 bytes = 2;
  if (this->bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->bytes());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UrlBlob::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.UrlBlob)
  GOOGLE_DCHECK_NE(&from, this);
  const UrlBlob* source =
      ::google::protobuf::DynamicCastToGenerated<UrlBlob>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.UrlBlob)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.UrlBlob)
    MergeFrom(*source);
  }
}

void UrlBlob::MergeFrom(const UrlBlob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.UrlBlob)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.bytes() != 0) {
    set_bytes(from.bytes());
  }
}

void UrlBlob::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.UrlBlob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UrlBlob::CopyFrom(const UrlBlob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.UrlBlob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UrlBlob::IsInitialized() const {
  return true;
}

void UrlBlob::Swap(UrlBlob* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UrlBlob::InternalSwap(UrlBlob* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  url_.Swap(&other->url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(bytes_, other->bytes_);
}

::google::protobuf::Metadata UrlBlob::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fcommon_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

Labels_ValuesEntry_DoNotUse::Labels_ValuesEntry_DoNotUse() {}
Labels_ValuesEntry_DoNotUse::Labels_ValuesEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void Labels_ValuesEntry_DoNotUse::MergeFrom(const Labels_ValuesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata Labels_ValuesEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fcommon_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fcommon_2eproto[18];
}
void Labels_ValuesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Labels_ValuesEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      Labels_ValuesEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "flyteidl.admin.Labels.ValuesEntry.key"));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.value().data(), static_cast<int>(parser.value().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "flyteidl.admin.Labels.ValuesEntry.value"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void Labels::InitAsDefaultInstance() {
}
class Labels::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Labels::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Labels::Labels()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.Labels)
}
Labels::Labels(const Labels& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  values_.MergeFrom(from.values_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.Labels)
}

void Labels::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Labels_flyteidl_2fadmin_2fcommon_2eproto.base);
}

Labels::~Labels() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.Labels)
  SharedDtor();
}

void Labels::SharedDtor() {
}

void Labels::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Labels& Labels::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Labels_flyteidl_2fadmin_2fcommon_2eproto.base);
  return *internal_default_instance();
}


void Labels::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.Labels)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Labels::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Labels*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // map<string, string> values = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::flyteidl::admin::Labels_ValuesEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->values_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Labels::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.Labels)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, string> values = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          Labels_ValuesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              Labels_ValuesEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&values_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.Labels.ValuesEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.Labels.ValuesEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.Labels)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.Labels)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Labels::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.Labels)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> values = 1;
  if (!this->values().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.admin.Labels.ValuesEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.admin.Labels.ValuesEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->values().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->values().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->values().begin();
          it != this->values().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Labels_ValuesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(values_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(1, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<Labels_ValuesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->values().begin();
          it != this->values().end(); ++it) {
        entry.reset(values_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(1, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.Labels)
}

::google::protobuf::uint8* Labels::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.Labels)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> values = 1;
  if (!this->values().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.admin.Labels.ValuesEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.admin.Labels.ValuesEntry.value");
      }
    };

    if (false &&
        this->values().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->values().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->values().begin();
          it != this->values().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Labels_ValuesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(values_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(1, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<Labels_ValuesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->values().begin();
          it != this->values().end(); ++it) {
        entry.reset(values_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(1, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.Labels)
  return target;
}

size_t Labels::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.Labels)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> values = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->values_size());
  {
    ::std::unique_ptr<Labels_ValuesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->values().begin();
        it != this->values().end(); ++it) {
      entry.reset(values_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Labels::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.Labels)
  GOOGLE_DCHECK_NE(&from, this);
  const Labels* source =
      ::google::protobuf::DynamicCastToGenerated<Labels>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.Labels)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.Labels)
    MergeFrom(*source);
  }
}

void Labels::MergeFrom(const Labels& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.Labels)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void Labels::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.Labels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Labels::CopyFrom(const Labels& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.Labels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Labels::IsInitialized() const {
  return true;
}

void Labels::Swap(Labels* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Labels::InternalSwap(Labels* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  values_.Swap(&other->values_);
}

::google::protobuf::Metadata Labels::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fcommon_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

Annotations_ValuesEntry_DoNotUse::Annotations_ValuesEntry_DoNotUse() {}
Annotations_ValuesEntry_DoNotUse::Annotations_ValuesEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
void Annotations_ValuesEntry_DoNotUse::MergeFrom(const Annotations_ValuesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata Annotations_ValuesEntry_DoNotUse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fcommon_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fcommon_2eproto[20];
}
void Annotations_ValuesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Annotations_ValuesEntry_DoNotUse::_ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx) {
  using MF = ::google::protobuf::internal::MapField<
      Annotations_ValuesEntry_DoNotUse, EntryKeyType, EntryValueType,
      kEntryKeyFieldType, kEntryValueFieldType,
      kEntryDefaultEnumValue>;
  auto mf = static_cast<MF*>(object);
  Parser<MF, ::google::protobuf::Map<EntryKeyType, EntryValueType>> parser(mf);
#define DO_(x) if (!(x)) return false
  DO_(parser.ParseMap(begin, end));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.key().data(), static_cast<int>(parser.key().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "flyteidl.admin.Annotations.ValuesEntry.key"));
  DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
    parser.value().data(), static_cast<int>(parser.value().length()),
    ::google::protobuf::internal::WireFormatLite::PARSE,
    "flyteidl.admin.Annotations.ValuesEntry.value"));
#undef DO_
  return true;
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER


// ===================================================================

void Annotations::InitAsDefaultInstance() {
}
class Annotations::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Annotations::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Annotations::Annotations()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.Annotations)
}
Annotations::Annotations(const Annotations& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  values_.MergeFrom(from.values_);
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.Annotations)
}

void Annotations::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Annotations_flyteidl_2fadmin_2fcommon_2eproto.base);
}

Annotations::~Annotations() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.Annotations)
  SharedDtor();
}

void Annotations::SharedDtor() {
}

void Annotations::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Annotations& Annotations::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Annotations_flyteidl_2fadmin_2fcommon_2eproto.base);
  return *internal_default_instance();
}


void Annotations::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.Annotations)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Annotations::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Annotations*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // map<string, string> values = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::SlowMapEntryParser;
          auto parse_map = ::flyteidl::admin::Annotations_ValuesEntry_DoNotUse::_ParseMap;
          ctx->extra_parse_data().payload.clear();
          ctx->extra_parse_data().parse_map = parse_map;
          object = &msg->values_;
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(parse_map(ptr, newend, object, ctx));
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Annotations::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.Annotations)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, string> values = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          Annotations_ValuesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              Annotations_ValuesEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&values_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.Annotations.ValuesEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.Annotations.ValuesEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.Annotations)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.Annotations)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Annotations::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.Annotations)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> values = 1;
  if (!this->values().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.admin.Annotations.ValuesEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.admin.Annotations.ValuesEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->values().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->values().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->values().begin();
          it != this->values().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Annotations_ValuesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(values_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(1, *entry, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<Annotations_ValuesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->values().begin();
          it != this->values().end(); ++it) {
        entry.reset(values_.NewEntryWrapper(it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(1, *entry, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.Annotations)
}

::google::protobuf::uint8* Annotations::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.Annotations)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> values = 1;
  if (!this->values().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.admin.Annotations.ValuesEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "flyteidl.admin.Annotations.ValuesEntry.value");
      }
    };

    if (false &&
        this->values().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->values().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->values().begin();
          it != this->values().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Annotations_ValuesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(values_.NewEntryWrapper(items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(1, *entry, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      ::std::unique_ptr<Annotations_ValuesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->values().begin();
          it != this->values().end(); ++it) {
        entry.reset(values_.NewEntryWrapper(it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageNoVirtualToArray(1, *entry, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.Annotations)
  return target;
}

size_t Annotations::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.Annotations)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> values = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->values_size());
  {
    ::std::unique_ptr<Annotations_ValuesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->values().begin();
        it != this->values().end(); ++it) {
      entry.reset(values_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Annotations::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.Annotations)
  GOOGLE_DCHECK_NE(&from, this);
  const Annotations* source =
      ::google::protobuf::DynamicCastToGenerated<Annotations>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.Annotations)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.Annotations)
    MergeFrom(*source);
  }
}

void Annotations::MergeFrom(const Annotations& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.Annotations)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void Annotations::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.Annotations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Annotations::CopyFrom(const Annotations& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.Annotations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Annotations::IsInitialized() const {
  return true;
}

void Annotations::Swap(Annotations* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Annotations::InternalSwap(Annotations* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  values_.Swap(&other->values_);
}

::google::protobuf::Metadata Annotations::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fcommon_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fcommon_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AuthRole::InitAsDefaultInstance() {
  ::flyteidl::admin::_AuthRole_default_instance_.assumable_iam_role_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::flyteidl::admin::_AuthRole_default_instance_.kubernetes_service_account_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
class AuthRole::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthRole::kAssumableIamRoleFieldNumber;
const int AuthRole::kKubernetesServiceAccountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthRole::AuthRole()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flyteidl.admin.AuthRole)
}
AuthRole::AuthRole(const AuthRole& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_method();
  switch (from.method_case()) {
    case kAssumableIamRole: {
      set_assumable_iam_role(from.assumable_iam_role());
      break;
    }
    case kKubernetesServiceAccount: {
      set_kubernetes_service_account(from.kubernetes_service_account());
      break;
    }
    case METHOD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:flyteidl.admin.AuthRole)
}

void AuthRole::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AuthRole_flyteidl_2fadmin_2fcommon_2eproto.base);
  clear_has_method();
}

AuthRole::~AuthRole() {
  // @@protoc_insertion_point(destructor:flyteidl.admin.AuthRole)
  SharedDtor();
}

void AuthRole::SharedDtor() {
  if (has_method()) {
    clear_method();
  }
}

void AuthRole::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthRole& AuthRole::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AuthRole_flyteidl_2fadmin_2fcommon_2eproto.base);
  return *internal_default_instance();
}


void AuthRole::clear_method() {
// @@protoc_insertion_point(one_of_clear_start:flyteidl.admin.AuthRole)
  switch (method_case()) {
    case kAssumableIamRole: {
      method_.assumable_iam_role_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kKubernetesServiceAccount: {
      method_.kubernetes_service_account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case METHOD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = METHOD_NOT_SET;
}


void AuthRole::Clear() {
// @@protoc_insertion_point(message_clear_start:flyteidl.admin.AuthRole)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_method();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AuthRole::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AuthRole*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string assumable_iam_role = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.AuthRole.assumable_iam_role");
        object = msg->mutable_assumable_iam_role();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string kubernetes_service_account = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flyteidl.admin.AuthRole.kubernetes_service_account");
        object = msg->mutable_kubernetes_service_account();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AuthRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flyteidl.admin.AuthRole)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string assumable_iam_role = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_assumable_iam_role()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->assumable_iam_role().data(), static_cast<int>(this->assumable_iam_role().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.AuthRole.assumable_iam_role"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string kubernetes_service_account = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kubernetes_service_account()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->kubernetes_service_account().data(), static_cast<int>(this->kubernetes_service_account().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flyteidl.admin.AuthRole.kubernetes_service_account"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flyteidl.admin.AuthRole)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flyteidl.admin.AuthRole)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AuthRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flyteidl.admin.AuthRole)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string assumable_iam_role = 1;
  if (has_assumable_iam_role()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->assumable_iam_role().data(), static_cast<int>(this->assumable_iam_role().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.AuthRole.assumable_iam_role");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->assumable_iam_role(), output);
  }

  // string kubernetes_service_account = 2;
  if (has_kubernetes_service_account()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kubernetes_service_account().data(), static_cast<int>(this->kubernetes_service_account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.AuthRole.kubernetes_service_account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->kubernetes_service_account(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flyteidl.admin.AuthRole)
}

::google::protobuf::uint8* AuthRole::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flyteidl.admin.AuthRole)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string assumable_iam_role = 1;
  if (has_assumable_iam_role()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->assumable_iam_role().data(), static_cast<int>(this->assumable_iam_role().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.AuthRole.assumable_iam_role");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->assumable_iam_role(), target);
  }

  // string kubernetes_service_account = 2;
  if (has_kubernetes_service_account()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->kubernetes_service_account().data(), static_cast<int>(this->kubernetes_service_account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flyteidl.admin.AuthRole.kubernetes_service_account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->kubernetes_service_account(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flyteidl.admin.AuthRole)
  return target;
}

size_t AuthRole::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flyteidl.admin.AuthRole)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (method_case()) {
    // string assumable_iam_role = 1;
    case kAssumableIamRole: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->assumable_iam_role());
      break;
    }
    // string kubernetes_service_account = 2;
    case kKubernetesServiceAccount: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->kubernetes_service_account());
      break;
    }
    case METHOD_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthRole::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flyteidl.admin.AuthRole)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthRole* source =
      ::google::protobuf::DynamicCastToGenerated<AuthRole>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flyteidl.admin.AuthRole)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flyteidl.admin.AuthRole)
    MergeFrom(*source);
  }
}

void AuthRole::MergeFrom(const AuthRole& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flyteidl.admin.AuthRole)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.method_case()) {
    case kAssumableIamRole: {
      set_assumable_iam_role(from.assumable_iam_role());
      break;
    }
    case kKubernetesServiceAccount: {
      set_kubernetes_service_account(from.kubernetes_service_account());
      break;
    }
    case METHOD_NOT_SET: {
      break;
    }
  }
}

void AuthRole::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flyteidl.admin.AuthRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthRole::CopyFrom(const AuthRole& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flyteidl.admin.AuthRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthRole::IsInitialized() const {
  return true;
}

void AuthRole::Swap(AuthRole* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthRole::InternalSwap(AuthRole* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(method_, other->method_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata AuthRole::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flyteidl_2fadmin_2fcommon_2eproto);
  return ::file_level_metadata_flyteidl_2fadmin_2fcommon_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace admin
}  // namespace flyteidl
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::flyteidl::admin::NamedEntityIdentifier* Arena::CreateMaybeMessage< ::flyteidl::admin::NamedEntityIdentifier >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::NamedEntityIdentifier >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::NamedEntityMetadata* Arena::CreateMaybeMessage< ::flyteidl::admin::NamedEntityMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::NamedEntityMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::NamedEntity* Arena::CreateMaybeMessage< ::flyteidl::admin::NamedEntity >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::NamedEntity >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::Sort* Arena::CreateMaybeMessage< ::flyteidl::admin::Sort >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::Sort >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::NamedEntityIdentifierListRequest* Arena::CreateMaybeMessage< ::flyteidl::admin::NamedEntityIdentifierListRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::NamedEntityIdentifierListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::NamedEntityListRequest* Arena::CreateMaybeMessage< ::flyteidl::admin::NamedEntityListRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::NamedEntityListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::NamedEntityIdentifierList* Arena::CreateMaybeMessage< ::flyteidl::admin::NamedEntityIdentifierList >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::NamedEntityIdentifierList >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::NamedEntityList* Arena::CreateMaybeMessage< ::flyteidl::admin::NamedEntityList >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::NamedEntityList >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::NamedEntityGetRequest* Arena::CreateMaybeMessage< ::flyteidl::admin::NamedEntityGetRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::NamedEntityGetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::NamedEntityUpdateRequest* Arena::CreateMaybeMessage< ::flyteidl::admin::NamedEntityUpdateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::NamedEntityUpdateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::NamedEntityUpdateResponse* Arena::CreateMaybeMessage< ::flyteidl::admin::NamedEntityUpdateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::NamedEntityUpdateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::ObjectGetRequest* Arena::CreateMaybeMessage< ::flyteidl::admin::ObjectGetRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::ObjectGetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::ResourceListRequest* Arena::CreateMaybeMessage< ::flyteidl::admin::ResourceListRequest >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::ResourceListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::EmailNotification* Arena::CreateMaybeMessage< ::flyteidl::admin::EmailNotification >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::EmailNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::PagerDutyNotification* Arena::CreateMaybeMessage< ::flyteidl::admin::PagerDutyNotification >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::PagerDutyNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::SlackNotification* Arena::CreateMaybeMessage< ::flyteidl::admin::SlackNotification >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::SlackNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::Notification* Arena::CreateMaybeMessage< ::flyteidl::admin::Notification >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::UrlBlob* Arena::CreateMaybeMessage< ::flyteidl::admin::UrlBlob >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::UrlBlob >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::Labels_ValuesEntry_DoNotUse* Arena::CreateMaybeMessage< ::flyteidl::admin::Labels_ValuesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::Labels_ValuesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::Labels* Arena::CreateMaybeMessage< ::flyteidl::admin::Labels >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::Labels >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::Annotations_ValuesEntry_DoNotUse* Arena::CreateMaybeMessage< ::flyteidl::admin::Annotations_ValuesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::Annotations_ValuesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::Annotations* Arena::CreateMaybeMessage< ::flyteidl::admin::Annotations >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::Annotations >(arena);
}
template<> PROTOBUF_NOINLINE ::flyteidl::admin::AuthRole* Arena::CreateMaybeMessage< ::flyteidl::admin::AuthRole >(Arena* arena) {
  return Arena::CreateInternal< ::flyteidl::admin::AuthRole >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
