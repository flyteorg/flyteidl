syntax = "proto3";
package flyteidl.service;

option go_package = "github.com/flyteorg/flyteidl/gen/pb-go/flyteidl/service";

import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "flyteidl/core/identifier.proto";

message CreateUploadLocationResponse {
  // SignedUrl specifies the url to use to upload content to (e.g. https://my-bucket.s3.amazonaws.com/randomstring/suffix.tar?X-...)
  string signed_url = 1;

  // NativeUrl specifies the url in the format of the configured storage provider (e.g. s3://my-bucket/randomstring/suffix.tar)
  string native_url = 2;

  // ExpiresAt defines when will the signed URL expires.
  google.protobuf.Timestamp expires_at = 3;
}

// CreateUploadLocationRequest specified request for the CreateUploadLocation API.
message CreateUploadLocationRequest {
  // Project to create the upload location for
  // +required
  string project = 1;

  // Domain to create the upload location for.
  // +required
  string domain = 2;

  // Filename specifies a desired suffix for the generated location. E.g. `file.py` or `pre/fix/file.zip`.
  // +optional. By default, the service will generate a consistent name based on the provided parameters.
  string filename = 3;

  // ExpiresIn defines a requested expiration duration for the generated url. The request will be rejected if this
  // exceeds the platform allowed max.
  // +optional. The default value comes from a global config.
  google.protobuf.Duration expires_in = 4;

  // ContentMD5 restricts the upload location to the specific MD5 provided. The ContentMD5 will also appear in the
  // generated path.
  // +required
  bytes content_md5 = 5;
}

// CreateDownloadLocationRequest specified request for the CreateDownloadLocation API.
message CreateDownloadLocationRequest {
  // NativeUrl specifies the url in the format of the configured storage provider (e.g. s3://my-bucket/randomstring/suffix.tar)
  string native_url = 1;

  // ExpiresIn defines a requested expiration duration for the generated url. The request will be rejected if this
  // exceeds the platform allowed max.
  // +optional. The default value comes from a global config.
  google.protobuf.Duration expires_in = 2;

}

message CreateDownloadLocationResponse {
  // SignedUrl specifies the url to use to download content from (e.g. https://my-bucket.s3.amazonaws.com/randomstring/suffix.tar?X-...)
  string signed_url = 1;
  // ExpiresAt defines when will the signed URL expires.
  google.protobuf.Timestamp expires_at = 2;
}

// ArtifactType
enum ArtifactType {
  // ARTIFACT_TYPE_UNDEFINED is the default, often invalid, value for the enum.
  ARTIFACT_TYPE_UNDEFINED = 0;

  // ARTIFACT_TYPE_OUTPUT_METADATA refers to the output.pb file generated after a task, a workflow or a launch plan
  // finishes executing.
  ARTIFACT_TYPE_OUTPUT_METADATA = 1;

  // ARTIFACT_TYPE_DECK refers to the deck html file optionally generated after a task, a workflow or a launch plan
  // finishes executing.
  ARTIFACT_TYPE_DECK = 2;
}

message CreateDownloadLinkRequest {
  oneof source {
    // WorkflowId is the unique identifier for the workflow execution.
    core.WorkflowExecutionIdentifier execution_id = 1;

    // NodeId is the unique identifier for the node execution. For a task node, this will retrieve the output of the
    // most recent attempt of the task.
    core.NodeExecutionIdentifier node_id = 2;

    // TaskId is the unique task execution identifier that points to a specific attempt of the task.
    core.TaskExecutionIdentifier task_id = 3;
  }

  ArtifactType artifact_type = 4;

  // ExpiresIn defines a requested expiration duration for the generated url. The request will be rejected if this
  // exceeds the platform allowed max.
  // +optional. The default value comes from a global config.
  google.protobuf.Duration expires_in = 5;
}

message CreateDownloadLinkResponse {
  // SignedUrl specifies the url to use to download content from (e.g. https://my-bucket.s3.amazonaws.com/randomstring/suffix.tar?X-...)
  repeated string signed_url = 1;

  // ExpiresAt defines when will the signed URL expire.
  google.protobuf.Timestamp expires_at = 2;
}

// DataProxyService defines an RPC Service that allows access to user-data in a controlled manner.
service DataProxyService {
  // CreateUploadLocation creates a signed url to upload artifacts to for a given project/domain.
  rpc CreateUploadLocation (CreateUploadLocationRequest) returns (CreateUploadLocationResponse) {
    option (google.api.http) = {
      post: "/api/v1/dataproxy/artifact_urn"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description: "Creates a write-only http location that is accessible for tasks at runtime."
    };
  }

  // CreateDownloadLocation creates a signed url to download artifacts.
  rpc CreateDownloadLocation (CreateDownloadLocationRequest) returns (CreateDownloadLocationResponse) {
    option deprecated = true;
    option (google.api.http) = {
      get: "/api/v1/dataproxy/artifact_urn"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description: "Deprecated: Please use CreateDownloadLink instead. Creates a read-only http location that is accessible for tasks at runtime."
    };
  }

  // CreateDownloadLocation creates a signed url to download artifacts.
  rpc CreateDownloadLink (CreateDownloadLinkRequest) returns (CreateDownloadLinkResponse) {
    option (google.api.http) = {
      post: "/api/v1/dataproxy/artifact_link"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description: "Creates a read-only http location that is accessible for tasks at runtime."
    };
  }
}
