// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flyteidl/core/compiler.proto

package flyteidl.core;

public final class Compiler {
  private Compiler() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface ConnectionSetOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flyteidl.core.ConnectionSet)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * A list of all the node ids that are downstream from a given node id
     * </pre>
     *
     * <code>map&lt;string, .flyteidl.core.ConnectionSet.IdList&gt; downstream = 7;</code>
     */
    int getDownstreamCount();
    /**
     * <pre>
     * A list of all the node ids that are downstream from a given node id
     * </pre>
     *
     * <code>map&lt;string, .flyteidl.core.ConnectionSet.IdList&gt; downstream = 7;</code>
     */
    boolean containsDownstream(
        java.lang.String key);
    /**
     * Use {@link #getDownstreamMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, flyteidl.core.Compiler.ConnectionSet.IdList>
    getDownstream();
    /**
     * <pre>
     * A list of all the node ids that are downstream from a given node id
     * </pre>
     *
     * <code>map&lt;string, .flyteidl.core.ConnectionSet.IdList&gt; downstream = 7;</code>
     */
    java.util.Map<java.lang.String, flyteidl.core.Compiler.ConnectionSet.IdList>
    getDownstreamMap();
    /**
     * <pre>
     * A list of all the node ids that are downstream from a given node id
     * </pre>
     *
     * <code>map&lt;string, .flyteidl.core.ConnectionSet.IdList&gt; downstream = 7;</code>
     */

    flyteidl.core.Compiler.ConnectionSet.IdList getDownstreamOrDefault(
        java.lang.String key,
        flyteidl.core.Compiler.ConnectionSet.IdList defaultValue);
    /**
     * <pre>
     * A list of all the node ids that are downstream from a given node id
     * </pre>
     *
     * <code>map&lt;string, .flyteidl.core.ConnectionSet.IdList&gt; downstream = 7;</code>
     */

    flyteidl.core.Compiler.ConnectionSet.IdList getDownstreamOrThrow(
        java.lang.String key);

    /**
     * <pre>
     * A list of all the node ids, that are upstream of this node id
     * </pre>
     *
     * <code>map&lt;string, .flyteidl.core.ConnectionSet.IdList&gt; upstream = 8;</code>
     */
    int getUpstreamCount();
    /**
     * <pre>
     * A list of all the node ids, that are upstream of this node id
     * </pre>
     *
     * <code>map&lt;string, .flyteidl.core.ConnectionSet.IdList&gt; upstream = 8;</code>
     */
    boolean containsUpstream(
        java.lang.String key);
    /**
     * Use {@link #getUpstreamMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, flyteidl.core.Compiler.ConnectionSet.IdList>
    getUpstream();
    /**
     * <pre>
     * A list of all the node ids, that are upstream of this node id
     * </pre>
     *
     * <code>map&lt;string, .flyteidl.core.ConnectionSet.IdList&gt; upstream = 8;</code>
     */
    java.util.Map<java.lang.String, flyteidl.core.Compiler.ConnectionSet.IdList>
    getUpstreamMap();
    /**
     * <pre>
     * A list of all the node ids, that are upstream of this node id
     * </pre>
     *
     * <code>map&lt;string, .flyteidl.core.ConnectionSet.IdList&gt; upstream = 8;</code>
     */

    flyteidl.core.Compiler.ConnectionSet.IdList getUpstreamOrDefault(
        java.lang.String key,
        flyteidl.core.Compiler.ConnectionSet.IdList defaultValue);
    /**
     * <pre>
     * A list of all the node ids, that are upstream of this node id
     * </pre>
     *
     * <code>map&lt;string, .flyteidl.core.ConnectionSet.IdList&gt; upstream = 8;</code>
     */

    flyteidl.core.Compiler.ConnectionSet.IdList getUpstreamOrThrow(
        java.lang.String key);
  }
  /**
   * <pre>
   * Adjacency list for the workflow. This is created as part of the compilation process. Every process after the compilation
   * step uses this created ConnectionSet
   * </pre>
   *
   * Protobuf type {@code flyteidl.core.ConnectionSet}
   */
  public  static final class ConnectionSet extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flyteidl.core.ConnectionSet)
      ConnectionSetOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ConnectionSet.newBuilder() to construct.
    private ConnectionSet(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ConnectionSet() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ConnectionSet(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 58: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                downstream_ = com.google.protobuf.MapField.newMapField(
                    DownstreamDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000001;
              }
              com.google.protobuf.MapEntry<java.lang.String, flyteidl.core.Compiler.ConnectionSet.IdList>
              downstream__ = input.readMessage(
                  DownstreamDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              downstream_.getMutableMap().put(
                  downstream__.getKey(), downstream__.getValue());
              break;
            }
            case 66: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                upstream_ = com.google.protobuf.MapField.newMapField(
                    UpstreamDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000002;
              }
              com.google.protobuf.MapEntry<java.lang.String, flyteidl.core.Compiler.ConnectionSet.IdList>
              upstream__ = input.readMessage(
                  UpstreamDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              upstream_.getMutableMap().put(
                  upstream__.getKey(), upstream__.getValue());
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return flyteidl.core.Compiler.internal_static_flyteidl_core_ConnectionSet_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @java.lang.Override
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 7:
          return internalGetDownstream();
        case 8:
          return internalGetUpstream();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return flyteidl.core.Compiler.internal_static_flyteidl_core_ConnectionSet_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              flyteidl.core.Compiler.ConnectionSet.class, flyteidl.core.Compiler.ConnectionSet.Builder.class);
    }

    public interface IdListOrBuilder extends
        // @@protoc_insertion_point(interface_extends:flyteidl.core.ConnectionSet.IdList)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>repeated string ids = 1;</code>
       */
      java.util.List<java.lang.String>
          getIdsList();
      /**
       * <code>repeated string ids = 1;</code>
       */
      int getIdsCount();
      /**
       * <code>repeated string ids = 1;</code>
       */
      java.lang.String getIds(int index);
      /**
       * <code>repeated string ids = 1;</code>
       */
      com.google.protobuf.ByteString
          getIdsBytes(int index);
    }
    /**
     * Protobuf type {@code flyteidl.core.ConnectionSet.IdList}
     */
    public  static final class IdList extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:flyteidl.core.ConnectionSet.IdList)
        IdListOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use IdList.newBuilder() to construct.
      private IdList(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private IdList() {
        ids_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private IdList(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                java.lang.String s = input.readStringRequireUtf8();
                if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                  ids_ = new com.google.protobuf.LazyStringArrayList();
                  mutable_bitField0_ |= 0x00000001;
                }
                ids_.add(s);
                break;
              }
              default: {
                if (!parseUnknownField(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          if (((mutable_bitField0_ & 0x00000001) != 0)) {
            ids_ = ids_.getUnmodifiableView();
          }
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return flyteidl.core.Compiler.internal_static_flyteidl_core_ConnectionSet_IdList_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return flyteidl.core.Compiler.internal_static_flyteidl_core_ConnectionSet_IdList_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                flyteidl.core.Compiler.ConnectionSet.IdList.class, flyteidl.core.Compiler.ConnectionSet.IdList.Builder.class);
      }

      public static final int IDS_FIELD_NUMBER = 1;
      private com.google.protobuf.LazyStringList ids_;
      /**
       * <code>repeated string ids = 1;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getIdsList() {
        return ids_;
      }
      /**
       * <code>repeated string ids = 1;</code>
       */
      public int getIdsCount() {
        return ids_.size();
      }
      /**
       * <code>repeated string ids = 1;</code>
       */
      public java.lang.String getIds(int index) {
        return ids_.get(index);
      }
      /**
       * <code>repeated string ids = 1;</code>
       */
      public com.google.protobuf.ByteString
          getIdsBytes(int index) {
        return ids_.getByteString(index);
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        for (int i = 0; i < ids_.size(); i++) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 1, ids_.getRaw(i));
        }
        unknownFields.writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        {
          int dataSize = 0;
          for (int i = 0; i < ids_.size(); i++) {
            dataSize += computeStringSizeNoTag(ids_.getRaw(i));
          }
          size += dataSize;
          size += 1 * getIdsList().size();
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof flyteidl.core.Compiler.ConnectionSet.IdList)) {
          return super.equals(obj);
        }
        flyteidl.core.Compiler.ConnectionSet.IdList other = (flyteidl.core.Compiler.ConnectionSet.IdList) obj;

        if (!getIdsList()
            .equals(other.getIdsList())) return false;
        if (!unknownFields.equals(other.unknownFields)) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        if (getIdsCount() > 0) {
          hash = (37 * hash) + IDS_FIELD_NUMBER;
          hash = (53 * hash) + getIdsList().hashCode();
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static flyteidl.core.Compiler.ConnectionSet.IdList parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static flyteidl.core.Compiler.ConnectionSet.IdList parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static flyteidl.core.Compiler.ConnectionSet.IdList parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static flyteidl.core.Compiler.ConnectionSet.IdList parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static flyteidl.core.Compiler.ConnectionSet.IdList parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static flyteidl.core.Compiler.ConnectionSet.IdList parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static flyteidl.core.Compiler.ConnectionSet.IdList parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static flyteidl.core.Compiler.ConnectionSet.IdList parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static flyteidl.core.Compiler.ConnectionSet.IdList parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static flyteidl.core.Compiler.ConnectionSet.IdList parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static flyteidl.core.Compiler.ConnectionSet.IdList parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static flyteidl.core.Compiler.ConnectionSet.IdList parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(flyteidl.core.Compiler.ConnectionSet.IdList prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code flyteidl.core.ConnectionSet.IdList}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:flyteidl.core.ConnectionSet.IdList)
          flyteidl.core.Compiler.ConnectionSet.IdListOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return flyteidl.core.Compiler.internal_static_flyteidl_core_ConnectionSet_IdList_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return flyteidl.core.Compiler.internal_static_flyteidl_core_ConnectionSet_IdList_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  flyteidl.core.Compiler.ConnectionSet.IdList.class, flyteidl.core.Compiler.ConnectionSet.IdList.Builder.class);
        }

        // Construct using flyteidl.core.Compiler.ConnectionSet.IdList.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          ids_ = com.google.protobuf.LazyStringArrayList.EMPTY;
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return flyteidl.core.Compiler.internal_static_flyteidl_core_ConnectionSet_IdList_descriptor;
        }

        @java.lang.Override
        public flyteidl.core.Compiler.ConnectionSet.IdList getDefaultInstanceForType() {
          return flyteidl.core.Compiler.ConnectionSet.IdList.getDefaultInstance();
        }

        @java.lang.Override
        public flyteidl.core.Compiler.ConnectionSet.IdList build() {
          flyteidl.core.Compiler.ConnectionSet.IdList result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public flyteidl.core.Compiler.ConnectionSet.IdList buildPartial() {
          flyteidl.core.Compiler.ConnectionSet.IdList result = new flyteidl.core.Compiler.ConnectionSet.IdList(this);
          int from_bitField0_ = bitField0_;
          if (((bitField0_ & 0x00000001) != 0)) {
            ids_ = ids_.getUnmodifiableView();
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.ids_ = ids_;
          onBuilt();
          return result;
        }

        @java.lang.Override
        public Builder clone() {
          return super.clone();
        }
        @java.lang.Override
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.setField(field, value);
        }
        @java.lang.Override
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return super.clearField(field);
        }
        @java.lang.Override
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return super.clearOneof(oneof);
        }
        @java.lang.Override
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return super.setRepeatedField(field, index, value);
        }
        @java.lang.Override
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return super.addRepeatedField(field, value);
        }
        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof flyteidl.core.Compiler.ConnectionSet.IdList) {
            return mergeFrom((flyteidl.core.Compiler.ConnectionSet.IdList)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(flyteidl.core.Compiler.ConnectionSet.IdList other) {
          if (other == flyteidl.core.Compiler.ConnectionSet.IdList.getDefaultInstance()) return this;
          if (!other.ids_.isEmpty()) {
            if (ids_.isEmpty()) {
              ids_ = other.ids_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureIdsIsMutable();
              ids_.addAll(other.ids_);
            }
            onChanged();
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          flyteidl.core.Compiler.ConnectionSet.IdList parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (flyteidl.core.Compiler.ConnectionSet.IdList) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private com.google.protobuf.LazyStringList ids_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        private void ensureIdsIsMutable() {
          if (!((bitField0_ & 0x00000001) != 0)) {
            ids_ = new com.google.protobuf.LazyStringArrayList(ids_);
            bitField0_ |= 0x00000001;
           }
        }
        /**
         * <code>repeated string ids = 1;</code>
         */
        public com.google.protobuf.ProtocolStringList
            getIdsList() {
          return ids_.getUnmodifiableView();
        }
        /**
         * <code>repeated string ids = 1;</code>
         */
        public int getIdsCount() {
          return ids_.size();
        }
        /**
         * <code>repeated string ids = 1;</code>
         */
        public java.lang.String getIds(int index) {
          return ids_.get(index);
        }
        /**
         * <code>repeated string ids = 1;</code>
         */
        public com.google.protobuf.ByteString
            getIdsBytes(int index) {
          return ids_.getByteString(index);
        }
        /**
         * <code>repeated string ids = 1;</code>
         */
        public Builder setIds(
            int index, java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  ensureIdsIsMutable();
          ids_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated string ids = 1;</code>
         */
        public Builder addIds(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  ensureIdsIsMutable();
          ids_.add(value);
          onChanged();
          return this;
        }
        /**
         * <code>repeated string ids = 1;</code>
         */
        public Builder addAllIds(
            java.lang.Iterable<java.lang.String> values) {
          ensureIdsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, ids_);
          onChanged();
          return this;
        }
        /**
         * <code>repeated string ids = 1;</code>
         */
        public Builder clearIds() {
          ids_ = com.google.protobuf.LazyStringArrayList.EMPTY;
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
          return this;
        }
        /**
         * <code>repeated string ids = 1;</code>
         */
        public Builder addIdsBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          ensureIdsIsMutable();
          ids_.add(value);
          onChanged();
          return this;
        }
        @java.lang.Override
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:flyteidl.core.ConnectionSet.IdList)
      }

      // @@protoc_insertion_point(class_scope:flyteidl.core.ConnectionSet.IdList)
      private static final flyteidl.core.Compiler.ConnectionSet.IdList DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new flyteidl.core.Compiler.ConnectionSet.IdList();
      }

      public static flyteidl.core.Compiler.ConnectionSet.IdList getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<IdList>
          PARSER = new com.google.protobuf.AbstractParser<IdList>() {
        @java.lang.Override
        public IdList parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new IdList(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<IdList> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<IdList> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public flyteidl.core.Compiler.ConnectionSet.IdList getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    public static final int DOWNSTREAM_FIELD_NUMBER = 7;
    private static final class DownstreamDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, flyteidl.core.Compiler.ConnectionSet.IdList> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, flyteidl.core.Compiler.ConnectionSet.IdList>newDefaultInstance(
                  flyteidl.core.Compiler.internal_static_flyteidl_core_ConnectionSet_DownstreamEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.MESSAGE,
                  flyteidl.core.Compiler.ConnectionSet.IdList.getDefaultInstance());
    }
    private com.google.protobuf.MapField<
        java.lang.String, flyteidl.core.Compiler.ConnectionSet.IdList> downstream_;
    private com.google.protobuf.MapField<java.lang.String, flyteidl.core.Compiler.ConnectionSet.IdList>
    internalGetDownstream() {
      if (downstream_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            DownstreamDefaultEntryHolder.defaultEntry);
      }
      return downstream_;
    }

    public int getDownstreamCount() {
      return internalGetDownstream().getMap().size();
    }
    /**
     * <pre>
     * A list of all the node ids that are downstream from a given node id
     * </pre>
     *
     * <code>map&lt;string, .flyteidl.core.ConnectionSet.IdList&gt; downstream = 7;</code>
     */

    public boolean containsDownstream(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetDownstream().getMap().containsKey(key);
    }
    /**
     * Use {@link #getDownstreamMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, flyteidl.core.Compiler.ConnectionSet.IdList> getDownstream() {
      return getDownstreamMap();
    }
    /**
     * <pre>
     * A list of all the node ids that are downstream from a given node id
     * </pre>
     *
     * <code>map&lt;string, .flyteidl.core.ConnectionSet.IdList&gt; downstream = 7;</code>
     */

    public java.util.Map<java.lang.String, flyteidl.core.Compiler.ConnectionSet.IdList> getDownstreamMap() {
      return internalGetDownstream().getMap();
    }
    /**
     * <pre>
     * A list of all the node ids that are downstream from a given node id
     * </pre>
     *
     * <code>map&lt;string, .flyteidl.core.ConnectionSet.IdList&gt; downstream = 7;</code>
     */

    public flyteidl.core.Compiler.ConnectionSet.IdList getDownstreamOrDefault(
        java.lang.String key,
        flyteidl.core.Compiler.ConnectionSet.IdList defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, flyteidl.core.Compiler.ConnectionSet.IdList> map =
          internalGetDownstream().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * A list of all the node ids that are downstream from a given node id
     * </pre>
     *
     * <code>map&lt;string, .flyteidl.core.ConnectionSet.IdList&gt; downstream = 7;</code>
     */

    public flyteidl.core.Compiler.ConnectionSet.IdList getDownstreamOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, flyteidl.core.Compiler.ConnectionSet.IdList> map =
          internalGetDownstream().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int UPSTREAM_FIELD_NUMBER = 8;
    private static final class UpstreamDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, flyteidl.core.Compiler.ConnectionSet.IdList> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, flyteidl.core.Compiler.ConnectionSet.IdList>newDefaultInstance(
                  flyteidl.core.Compiler.internal_static_flyteidl_core_ConnectionSet_UpstreamEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.MESSAGE,
                  flyteidl.core.Compiler.ConnectionSet.IdList.getDefaultInstance());
    }
    private com.google.protobuf.MapField<
        java.lang.String, flyteidl.core.Compiler.ConnectionSet.IdList> upstream_;
    private com.google.protobuf.MapField<java.lang.String, flyteidl.core.Compiler.ConnectionSet.IdList>
    internalGetUpstream() {
      if (upstream_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            UpstreamDefaultEntryHolder.defaultEntry);
      }
      return upstream_;
    }

    public int getUpstreamCount() {
      return internalGetUpstream().getMap().size();
    }
    /**
     * <pre>
     * A list of all the node ids, that are upstream of this node id
     * </pre>
     *
     * <code>map&lt;string, .flyteidl.core.ConnectionSet.IdList&gt; upstream = 8;</code>
     */

    public boolean containsUpstream(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetUpstream().getMap().containsKey(key);
    }
    /**
     * Use {@link #getUpstreamMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, flyteidl.core.Compiler.ConnectionSet.IdList> getUpstream() {
      return getUpstreamMap();
    }
    /**
     * <pre>
     * A list of all the node ids, that are upstream of this node id
     * </pre>
     *
     * <code>map&lt;string, .flyteidl.core.ConnectionSet.IdList&gt; upstream = 8;</code>
     */

    public java.util.Map<java.lang.String, flyteidl.core.Compiler.ConnectionSet.IdList> getUpstreamMap() {
      return internalGetUpstream().getMap();
    }
    /**
     * <pre>
     * A list of all the node ids, that are upstream of this node id
     * </pre>
     *
     * <code>map&lt;string, .flyteidl.core.ConnectionSet.IdList&gt; upstream = 8;</code>
     */

    public flyteidl.core.Compiler.ConnectionSet.IdList getUpstreamOrDefault(
        java.lang.String key,
        flyteidl.core.Compiler.ConnectionSet.IdList defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, flyteidl.core.Compiler.ConnectionSet.IdList> map =
          internalGetUpstream().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * A list of all the node ids, that are upstream of this node id
     * </pre>
     *
     * <code>map&lt;string, .flyteidl.core.ConnectionSet.IdList&gt; upstream = 8;</code>
     */

    public flyteidl.core.Compiler.ConnectionSet.IdList getUpstreamOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, flyteidl.core.Compiler.ConnectionSet.IdList> map =
          internalGetUpstream().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetDownstream(),
          DownstreamDefaultEntryHolder.defaultEntry,
          7);
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetUpstream(),
          UpstreamDefaultEntryHolder.defaultEntry,
          8);
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (java.util.Map.Entry<java.lang.String, flyteidl.core.Compiler.ConnectionSet.IdList> entry
           : internalGetDownstream().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, flyteidl.core.Compiler.ConnectionSet.IdList>
        downstream__ = DownstreamDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(7, downstream__);
      }
      for (java.util.Map.Entry<java.lang.String, flyteidl.core.Compiler.ConnectionSet.IdList> entry
           : internalGetUpstream().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, flyteidl.core.Compiler.ConnectionSet.IdList>
        upstream__ = UpstreamDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(8, upstream__);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof flyteidl.core.Compiler.ConnectionSet)) {
        return super.equals(obj);
      }
      flyteidl.core.Compiler.ConnectionSet other = (flyteidl.core.Compiler.ConnectionSet) obj;

      if (!internalGetDownstream().equals(
          other.internalGetDownstream())) return false;
      if (!internalGetUpstream().equals(
          other.internalGetUpstream())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (!internalGetDownstream().getMap().isEmpty()) {
        hash = (37 * hash) + DOWNSTREAM_FIELD_NUMBER;
        hash = (53 * hash) + internalGetDownstream().hashCode();
      }
      if (!internalGetUpstream().getMap().isEmpty()) {
        hash = (37 * hash) + UPSTREAM_FIELD_NUMBER;
        hash = (53 * hash) + internalGetUpstream().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static flyteidl.core.Compiler.ConnectionSet parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Compiler.ConnectionSet parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Compiler.ConnectionSet parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Compiler.ConnectionSet parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Compiler.ConnectionSet parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Compiler.ConnectionSet parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Compiler.ConnectionSet parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static flyteidl.core.Compiler.ConnectionSet parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static flyteidl.core.Compiler.ConnectionSet parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static flyteidl.core.Compiler.ConnectionSet parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static flyteidl.core.Compiler.ConnectionSet parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static flyteidl.core.Compiler.ConnectionSet parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(flyteidl.core.Compiler.ConnectionSet prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Adjacency list for the workflow. This is created as part of the compilation process. Every process after the compilation
     * step uses this created ConnectionSet
     * </pre>
     *
     * Protobuf type {@code flyteidl.core.ConnectionSet}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flyteidl.core.ConnectionSet)
        flyteidl.core.Compiler.ConnectionSetOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return flyteidl.core.Compiler.internal_static_flyteidl_core_ConnectionSet_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 7:
            return internalGetDownstream();
          case 8:
            return internalGetUpstream();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 7:
            return internalGetMutableDownstream();
          case 8:
            return internalGetMutableUpstream();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return flyteidl.core.Compiler.internal_static_flyteidl_core_ConnectionSet_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                flyteidl.core.Compiler.ConnectionSet.class, flyteidl.core.Compiler.ConnectionSet.Builder.class);
      }

      // Construct using flyteidl.core.Compiler.ConnectionSet.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        internalGetMutableDownstream().clear();
        internalGetMutableUpstream().clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return flyteidl.core.Compiler.internal_static_flyteidl_core_ConnectionSet_descriptor;
      }

      @java.lang.Override
      public flyteidl.core.Compiler.ConnectionSet getDefaultInstanceForType() {
        return flyteidl.core.Compiler.ConnectionSet.getDefaultInstance();
      }

      @java.lang.Override
      public flyteidl.core.Compiler.ConnectionSet build() {
        flyteidl.core.Compiler.ConnectionSet result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public flyteidl.core.Compiler.ConnectionSet buildPartial() {
        flyteidl.core.Compiler.ConnectionSet result = new flyteidl.core.Compiler.ConnectionSet(this);
        int from_bitField0_ = bitField0_;
        result.downstream_ = internalGetDownstream();
        result.downstream_.makeImmutable();
        result.upstream_ = internalGetUpstream();
        result.upstream_.makeImmutable();
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof flyteidl.core.Compiler.ConnectionSet) {
          return mergeFrom((flyteidl.core.Compiler.ConnectionSet)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(flyteidl.core.Compiler.ConnectionSet other) {
        if (other == flyteidl.core.Compiler.ConnectionSet.getDefaultInstance()) return this;
        internalGetMutableDownstream().mergeFrom(
            other.internalGetDownstream());
        internalGetMutableUpstream().mergeFrom(
            other.internalGetUpstream());
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        flyteidl.core.Compiler.ConnectionSet parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (flyteidl.core.Compiler.ConnectionSet) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.MapField<
          java.lang.String, flyteidl.core.Compiler.ConnectionSet.IdList> downstream_;
      private com.google.protobuf.MapField<java.lang.String, flyteidl.core.Compiler.ConnectionSet.IdList>
      internalGetDownstream() {
        if (downstream_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              DownstreamDefaultEntryHolder.defaultEntry);
        }
        return downstream_;
      }
      private com.google.protobuf.MapField<java.lang.String, flyteidl.core.Compiler.ConnectionSet.IdList>
      internalGetMutableDownstream() {
        onChanged();;
        if (downstream_ == null) {
          downstream_ = com.google.protobuf.MapField.newMapField(
              DownstreamDefaultEntryHolder.defaultEntry);
        }
        if (!downstream_.isMutable()) {
          downstream_ = downstream_.copy();
        }
        return downstream_;
      }

      public int getDownstreamCount() {
        return internalGetDownstream().getMap().size();
      }
      /**
       * <pre>
       * A list of all the node ids that are downstream from a given node id
       * </pre>
       *
       * <code>map&lt;string, .flyteidl.core.ConnectionSet.IdList&gt; downstream = 7;</code>
       */

      public boolean containsDownstream(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        return internalGetDownstream().getMap().containsKey(key);
      }
      /**
       * Use {@link #getDownstreamMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, flyteidl.core.Compiler.ConnectionSet.IdList> getDownstream() {
        return getDownstreamMap();
      }
      /**
       * <pre>
       * A list of all the node ids that are downstream from a given node id
       * </pre>
       *
       * <code>map&lt;string, .flyteidl.core.ConnectionSet.IdList&gt; downstream = 7;</code>
       */

      public java.util.Map<java.lang.String, flyteidl.core.Compiler.ConnectionSet.IdList> getDownstreamMap() {
        return internalGetDownstream().getMap();
      }
      /**
       * <pre>
       * A list of all the node ids that are downstream from a given node id
       * </pre>
       *
       * <code>map&lt;string, .flyteidl.core.ConnectionSet.IdList&gt; downstream = 7;</code>
       */

      public flyteidl.core.Compiler.ConnectionSet.IdList getDownstreamOrDefault(
          java.lang.String key,
          flyteidl.core.Compiler.ConnectionSet.IdList defaultValue) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, flyteidl.core.Compiler.ConnectionSet.IdList> map =
            internalGetDownstream().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * A list of all the node ids that are downstream from a given node id
       * </pre>
       *
       * <code>map&lt;string, .flyteidl.core.ConnectionSet.IdList&gt; downstream = 7;</code>
       */

      public flyteidl.core.Compiler.ConnectionSet.IdList getDownstreamOrThrow(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, flyteidl.core.Compiler.ConnectionSet.IdList> map =
            internalGetDownstream().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearDownstream() {
        internalGetMutableDownstream().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       * A list of all the node ids that are downstream from a given node id
       * </pre>
       *
       * <code>map&lt;string, .flyteidl.core.ConnectionSet.IdList&gt; downstream = 7;</code>
       */

      public Builder removeDownstream(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableDownstream().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, flyteidl.core.Compiler.ConnectionSet.IdList>
      getMutableDownstream() {
        return internalGetMutableDownstream().getMutableMap();
      }
      /**
       * <pre>
       * A list of all the node ids that are downstream from a given node id
       * </pre>
       *
       * <code>map&lt;string, .flyteidl.core.ConnectionSet.IdList&gt; downstream = 7;</code>
       */
      public Builder putDownstream(
          java.lang.String key,
          flyteidl.core.Compiler.ConnectionSet.IdList value) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        if (value == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableDownstream().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <pre>
       * A list of all the node ids that are downstream from a given node id
       * </pre>
       *
       * <code>map&lt;string, .flyteidl.core.ConnectionSet.IdList&gt; downstream = 7;</code>
       */

      public Builder putAllDownstream(
          java.util.Map<java.lang.String, flyteidl.core.Compiler.ConnectionSet.IdList> values) {
        internalGetMutableDownstream().getMutableMap()
            .putAll(values);
        return this;
      }

      private com.google.protobuf.MapField<
          java.lang.String, flyteidl.core.Compiler.ConnectionSet.IdList> upstream_;
      private com.google.protobuf.MapField<java.lang.String, flyteidl.core.Compiler.ConnectionSet.IdList>
      internalGetUpstream() {
        if (upstream_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              UpstreamDefaultEntryHolder.defaultEntry);
        }
        return upstream_;
      }
      private com.google.protobuf.MapField<java.lang.String, flyteidl.core.Compiler.ConnectionSet.IdList>
      internalGetMutableUpstream() {
        onChanged();;
        if (upstream_ == null) {
          upstream_ = com.google.protobuf.MapField.newMapField(
              UpstreamDefaultEntryHolder.defaultEntry);
        }
        if (!upstream_.isMutable()) {
          upstream_ = upstream_.copy();
        }
        return upstream_;
      }

      public int getUpstreamCount() {
        return internalGetUpstream().getMap().size();
      }
      /**
       * <pre>
       * A list of all the node ids, that are upstream of this node id
       * </pre>
       *
       * <code>map&lt;string, .flyteidl.core.ConnectionSet.IdList&gt; upstream = 8;</code>
       */

      public boolean containsUpstream(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        return internalGetUpstream().getMap().containsKey(key);
      }
      /**
       * Use {@link #getUpstreamMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, flyteidl.core.Compiler.ConnectionSet.IdList> getUpstream() {
        return getUpstreamMap();
      }
      /**
       * <pre>
       * A list of all the node ids, that are upstream of this node id
       * </pre>
       *
       * <code>map&lt;string, .flyteidl.core.ConnectionSet.IdList&gt; upstream = 8;</code>
       */

      public java.util.Map<java.lang.String, flyteidl.core.Compiler.ConnectionSet.IdList> getUpstreamMap() {
        return internalGetUpstream().getMap();
      }
      /**
       * <pre>
       * A list of all the node ids, that are upstream of this node id
       * </pre>
       *
       * <code>map&lt;string, .flyteidl.core.ConnectionSet.IdList&gt; upstream = 8;</code>
       */

      public flyteidl.core.Compiler.ConnectionSet.IdList getUpstreamOrDefault(
          java.lang.String key,
          flyteidl.core.Compiler.ConnectionSet.IdList defaultValue) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, flyteidl.core.Compiler.ConnectionSet.IdList> map =
            internalGetUpstream().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * A list of all the node ids, that are upstream of this node id
       * </pre>
       *
       * <code>map&lt;string, .flyteidl.core.ConnectionSet.IdList&gt; upstream = 8;</code>
       */

      public flyteidl.core.Compiler.ConnectionSet.IdList getUpstreamOrThrow(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, flyteidl.core.Compiler.ConnectionSet.IdList> map =
            internalGetUpstream().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearUpstream() {
        internalGetMutableUpstream().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       * A list of all the node ids, that are upstream of this node id
       * </pre>
       *
       * <code>map&lt;string, .flyteidl.core.ConnectionSet.IdList&gt; upstream = 8;</code>
       */

      public Builder removeUpstream(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableUpstream().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, flyteidl.core.Compiler.ConnectionSet.IdList>
      getMutableUpstream() {
        return internalGetMutableUpstream().getMutableMap();
      }
      /**
       * <pre>
       * A list of all the node ids, that are upstream of this node id
       * </pre>
       *
       * <code>map&lt;string, .flyteidl.core.ConnectionSet.IdList&gt; upstream = 8;</code>
       */
      public Builder putUpstream(
          java.lang.String key,
          flyteidl.core.Compiler.ConnectionSet.IdList value) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        if (value == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableUpstream().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <pre>
       * A list of all the node ids, that are upstream of this node id
       * </pre>
       *
       * <code>map&lt;string, .flyteidl.core.ConnectionSet.IdList&gt; upstream = 8;</code>
       */

      public Builder putAllUpstream(
          java.util.Map<java.lang.String, flyteidl.core.Compiler.ConnectionSet.IdList> values) {
        internalGetMutableUpstream().getMutableMap()
            .putAll(values);
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flyteidl.core.ConnectionSet)
    }

    // @@protoc_insertion_point(class_scope:flyteidl.core.ConnectionSet)
    private static final flyteidl.core.Compiler.ConnectionSet DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new flyteidl.core.Compiler.ConnectionSet();
    }

    public static flyteidl.core.Compiler.ConnectionSet getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ConnectionSet>
        PARSER = new com.google.protobuf.AbstractParser<ConnectionSet>() {
      @java.lang.Override
      public ConnectionSet parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ConnectionSet(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ConnectionSet> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ConnectionSet> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public flyteidl.core.Compiler.ConnectionSet getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CompiledWorkflowOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flyteidl.core.CompiledWorkflow)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Completely contained Workflow Template
     * </pre>
     *
     * <code>.flyteidl.core.WorkflowTemplate template = 1;</code>
     */
    boolean hasTemplate();
    /**
     * <pre>
     * Completely contained Workflow Template
     * </pre>
     *
     * <code>.flyteidl.core.WorkflowTemplate template = 1;</code>
     */
    flyteidl.core.Workflow.WorkflowTemplate getTemplate();
    /**
     * <pre>
     * Completely contained Workflow Template
     * </pre>
     *
     * <code>.flyteidl.core.WorkflowTemplate template = 1;</code>
     */
    flyteidl.core.Workflow.WorkflowTemplateOrBuilder getTemplateOrBuilder();

    /**
     * <pre>
     * For internal use only! This field is used by the system and must not be filled in. Any values set will be ignored.
     * </pre>
     *
     * <code>.flyteidl.core.ConnectionSet connections = 2;</code>
     */
    boolean hasConnections();
    /**
     * <pre>
     * For internal use only! This field is used by the system and must not be filled in. Any values set will be ignored.
     * </pre>
     *
     * <code>.flyteidl.core.ConnectionSet connections = 2;</code>
     */
    flyteidl.core.Compiler.ConnectionSet getConnections();
    /**
     * <pre>
     * For internal use only! This field is used by the system and must not be filled in. Any values set will be ignored.
     * </pre>
     *
     * <code>.flyteidl.core.ConnectionSet connections = 2;</code>
     */
    flyteidl.core.Compiler.ConnectionSetOrBuilder getConnectionsOrBuilder();
  }
  /**
   * <pre>
   * Output of the compilation Step. This object represents one workflow. We store more metadata at this layer
   * </pre>
   *
   * Protobuf type {@code flyteidl.core.CompiledWorkflow}
   */
  public  static final class CompiledWorkflow extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flyteidl.core.CompiledWorkflow)
      CompiledWorkflowOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CompiledWorkflow.newBuilder() to construct.
    private CompiledWorkflow(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CompiledWorkflow() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private CompiledWorkflow(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              flyteidl.core.Workflow.WorkflowTemplate.Builder subBuilder = null;
              if (template_ != null) {
                subBuilder = template_.toBuilder();
              }
              template_ = input.readMessage(flyteidl.core.Workflow.WorkflowTemplate.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(template_);
                template_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              flyteidl.core.Compiler.ConnectionSet.Builder subBuilder = null;
              if (connections_ != null) {
                subBuilder = connections_.toBuilder();
              }
              connections_ = input.readMessage(flyteidl.core.Compiler.ConnectionSet.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(connections_);
                connections_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return flyteidl.core.Compiler.internal_static_flyteidl_core_CompiledWorkflow_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return flyteidl.core.Compiler.internal_static_flyteidl_core_CompiledWorkflow_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              flyteidl.core.Compiler.CompiledWorkflow.class, flyteidl.core.Compiler.CompiledWorkflow.Builder.class);
    }

    public static final int TEMPLATE_FIELD_NUMBER = 1;
    private flyteidl.core.Workflow.WorkflowTemplate template_;
    /**
     * <pre>
     * Completely contained Workflow Template
     * </pre>
     *
     * <code>.flyteidl.core.WorkflowTemplate template = 1;</code>
     */
    public boolean hasTemplate() {
      return template_ != null;
    }
    /**
     * <pre>
     * Completely contained Workflow Template
     * </pre>
     *
     * <code>.flyteidl.core.WorkflowTemplate template = 1;</code>
     */
    public flyteidl.core.Workflow.WorkflowTemplate getTemplate() {
      return template_ == null ? flyteidl.core.Workflow.WorkflowTemplate.getDefaultInstance() : template_;
    }
    /**
     * <pre>
     * Completely contained Workflow Template
     * </pre>
     *
     * <code>.flyteidl.core.WorkflowTemplate template = 1;</code>
     */
    public flyteidl.core.Workflow.WorkflowTemplateOrBuilder getTemplateOrBuilder() {
      return getTemplate();
    }

    public static final int CONNECTIONS_FIELD_NUMBER = 2;
    private flyteidl.core.Compiler.ConnectionSet connections_;
    /**
     * <pre>
     * For internal use only! This field is used by the system and must not be filled in. Any values set will be ignored.
     * </pre>
     *
     * <code>.flyteidl.core.ConnectionSet connections = 2;</code>
     */
    public boolean hasConnections() {
      return connections_ != null;
    }
    /**
     * <pre>
     * For internal use only! This field is used by the system and must not be filled in. Any values set will be ignored.
     * </pre>
     *
     * <code>.flyteidl.core.ConnectionSet connections = 2;</code>
     */
    public flyteidl.core.Compiler.ConnectionSet getConnections() {
      return connections_ == null ? flyteidl.core.Compiler.ConnectionSet.getDefaultInstance() : connections_;
    }
    /**
     * <pre>
     * For internal use only! This field is used by the system and must not be filled in. Any values set will be ignored.
     * </pre>
     *
     * <code>.flyteidl.core.ConnectionSet connections = 2;</code>
     */
    public flyteidl.core.Compiler.ConnectionSetOrBuilder getConnectionsOrBuilder() {
      return getConnections();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (template_ != null) {
        output.writeMessage(1, getTemplate());
      }
      if (connections_ != null) {
        output.writeMessage(2, getConnections());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (template_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getTemplate());
      }
      if (connections_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getConnections());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof flyteidl.core.Compiler.CompiledWorkflow)) {
        return super.equals(obj);
      }
      flyteidl.core.Compiler.CompiledWorkflow other = (flyteidl.core.Compiler.CompiledWorkflow) obj;

      if (hasTemplate() != other.hasTemplate()) return false;
      if (hasTemplate()) {
        if (!getTemplate()
            .equals(other.getTemplate())) return false;
      }
      if (hasConnections() != other.hasConnections()) return false;
      if (hasConnections()) {
        if (!getConnections()
            .equals(other.getConnections())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasTemplate()) {
        hash = (37 * hash) + TEMPLATE_FIELD_NUMBER;
        hash = (53 * hash) + getTemplate().hashCode();
      }
      if (hasConnections()) {
        hash = (37 * hash) + CONNECTIONS_FIELD_NUMBER;
        hash = (53 * hash) + getConnections().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static flyteidl.core.Compiler.CompiledWorkflow parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Compiler.CompiledWorkflow parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Compiler.CompiledWorkflow parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Compiler.CompiledWorkflow parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Compiler.CompiledWorkflow parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Compiler.CompiledWorkflow parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Compiler.CompiledWorkflow parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static flyteidl.core.Compiler.CompiledWorkflow parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static flyteidl.core.Compiler.CompiledWorkflow parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static flyteidl.core.Compiler.CompiledWorkflow parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static flyteidl.core.Compiler.CompiledWorkflow parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static flyteidl.core.Compiler.CompiledWorkflow parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(flyteidl.core.Compiler.CompiledWorkflow prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Output of the compilation Step. This object represents one workflow. We store more metadata at this layer
     * </pre>
     *
     * Protobuf type {@code flyteidl.core.CompiledWorkflow}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flyteidl.core.CompiledWorkflow)
        flyteidl.core.Compiler.CompiledWorkflowOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return flyteidl.core.Compiler.internal_static_flyteidl_core_CompiledWorkflow_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return flyteidl.core.Compiler.internal_static_flyteidl_core_CompiledWorkflow_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                flyteidl.core.Compiler.CompiledWorkflow.class, flyteidl.core.Compiler.CompiledWorkflow.Builder.class);
      }

      // Construct using flyteidl.core.Compiler.CompiledWorkflow.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (templateBuilder_ == null) {
          template_ = null;
        } else {
          template_ = null;
          templateBuilder_ = null;
        }
        if (connectionsBuilder_ == null) {
          connections_ = null;
        } else {
          connections_ = null;
          connectionsBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return flyteidl.core.Compiler.internal_static_flyteidl_core_CompiledWorkflow_descriptor;
      }

      @java.lang.Override
      public flyteidl.core.Compiler.CompiledWorkflow getDefaultInstanceForType() {
        return flyteidl.core.Compiler.CompiledWorkflow.getDefaultInstance();
      }

      @java.lang.Override
      public flyteidl.core.Compiler.CompiledWorkflow build() {
        flyteidl.core.Compiler.CompiledWorkflow result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public flyteidl.core.Compiler.CompiledWorkflow buildPartial() {
        flyteidl.core.Compiler.CompiledWorkflow result = new flyteidl.core.Compiler.CompiledWorkflow(this);
        if (templateBuilder_ == null) {
          result.template_ = template_;
        } else {
          result.template_ = templateBuilder_.build();
        }
        if (connectionsBuilder_ == null) {
          result.connections_ = connections_;
        } else {
          result.connections_ = connectionsBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof flyteidl.core.Compiler.CompiledWorkflow) {
          return mergeFrom((flyteidl.core.Compiler.CompiledWorkflow)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(flyteidl.core.Compiler.CompiledWorkflow other) {
        if (other == flyteidl.core.Compiler.CompiledWorkflow.getDefaultInstance()) return this;
        if (other.hasTemplate()) {
          mergeTemplate(other.getTemplate());
        }
        if (other.hasConnections()) {
          mergeConnections(other.getConnections());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        flyteidl.core.Compiler.CompiledWorkflow parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (flyteidl.core.Compiler.CompiledWorkflow) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private flyteidl.core.Workflow.WorkflowTemplate template_;
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Workflow.WorkflowTemplate, flyteidl.core.Workflow.WorkflowTemplate.Builder, flyteidl.core.Workflow.WorkflowTemplateOrBuilder> templateBuilder_;
      /**
       * <pre>
       * Completely contained Workflow Template
       * </pre>
       *
       * <code>.flyteidl.core.WorkflowTemplate template = 1;</code>
       */
      public boolean hasTemplate() {
        return templateBuilder_ != null || template_ != null;
      }
      /**
       * <pre>
       * Completely contained Workflow Template
       * </pre>
       *
       * <code>.flyteidl.core.WorkflowTemplate template = 1;</code>
       */
      public flyteidl.core.Workflow.WorkflowTemplate getTemplate() {
        if (templateBuilder_ == null) {
          return template_ == null ? flyteidl.core.Workflow.WorkflowTemplate.getDefaultInstance() : template_;
        } else {
          return templateBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Completely contained Workflow Template
       * </pre>
       *
       * <code>.flyteidl.core.WorkflowTemplate template = 1;</code>
       */
      public Builder setTemplate(flyteidl.core.Workflow.WorkflowTemplate value) {
        if (templateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          template_ = value;
          onChanged();
        } else {
          templateBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Completely contained Workflow Template
       * </pre>
       *
       * <code>.flyteidl.core.WorkflowTemplate template = 1;</code>
       */
      public Builder setTemplate(
          flyteidl.core.Workflow.WorkflowTemplate.Builder builderForValue) {
        if (templateBuilder_ == null) {
          template_ = builderForValue.build();
          onChanged();
        } else {
          templateBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Completely contained Workflow Template
       * </pre>
       *
       * <code>.flyteidl.core.WorkflowTemplate template = 1;</code>
       */
      public Builder mergeTemplate(flyteidl.core.Workflow.WorkflowTemplate value) {
        if (templateBuilder_ == null) {
          if (template_ != null) {
            template_ =
              flyteidl.core.Workflow.WorkflowTemplate.newBuilder(template_).mergeFrom(value).buildPartial();
          } else {
            template_ = value;
          }
          onChanged();
        } else {
          templateBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Completely contained Workflow Template
       * </pre>
       *
       * <code>.flyteidl.core.WorkflowTemplate template = 1;</code>
       */
      public Builder clearTemplate() {
        if (templateBuilder_ == null) {
          template_ = null;
          onChanged();
        } else {
          template_ = null;
          templateBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Completely contained Workflow Template
       * </pre>
       *
       * <code>.flyteidl.core.WorkflowTemplate template = 1;</code>
       */
      public flyteidl.core.Workflow.WorkflowTemplate.Builder getTemplateBuilder() {
        
        onChanged();
        return getTemplateFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Completely contained Workflow Template
       * </pre>
       *
       * <code>.flyteidl.core.WorkflowTemplate template = 1;</code>
       */
      public flyteidl.core.Workflow.WorkflowTemplateOrBuilder getTemplateOrBuilder() {
        if (templateBuilder_ != null) {
          return templateBuilder_.getMessageOrBuilder();
        } else {
          return template_ == null ?
              flyteidl.core.Workflow.WorkflowTemplate.getDefaultInstance() : template_;
        }
      }
      /**
       * <pre>
       * Completely contained Workflow Template
       * </pre>
       *
       * <code>.flyteidl.core.WorkflowTemplate template = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Workflow.WorkflowTemplate, flyteidl.core.Workflow.WorkflowTemplate.Builder, flyteidl.core.Workflow.WorkflowTemplateOrBuilder> 
          getTemplateFieldBuilder() {
        if (templateBuilder_ == null) {
          templateBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              flyteidl.core.Workflow.WorkflowTemplate, flyteidl.core.Workflow.WorkflowTemplate.Builder, flyteidl.core.Workflow.WorkflowTemplateOrBuilder>(
                  getTemplate(),
                  getParentForChildren(),
                  isClean());
          template_ = null;
        }
        return templateBuilder_;
      }

      private flyteidl.core.Compiler.ConnectionSet connections_;
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Compiler.ConnectionSet, flyteidl.core.Compiler.ConnectionSet.Builder, flyteidl.core.Compiler.ConnectionSetOrBuilder> connectionsBuilder_;
      /**
       * <pre>
       * For internal use only! This field is used by the system and must not be filled in. Any values set will be ignored.
       * </pre>
       *
       * <code>.flyteidl.core.ConnectionSet connections = 2;</code>
       */
      public boolean hasConnections() {
        return connectionsBuilder_ != null || connections_ != null;
      }
      /**
       * <pre>
       * For internal use only! This field is used by the system and must not be filled in. Any values set will be ignored.
       * </pre>
       *
       * <code>.flyteidl.core.ConnectionSet connections = 2;</code>
       */
      public flyteidl.core.Compiler.ConnectionSet getConnections() {
        if (connectionsBuilder_ == null) {
          return connections_ == null ? flyteidl.core.Compiler.ConnectionSet.getDefaultInstance() : connections_;
        } else {
          return connectionsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * For internal use only! This field is used by the system and must not be filled in. Any values set will be ignored.
       * </pre>
       *
       * <code>.flyteidl.core.ConnectionSet connections = 2;</code>
       */
      public Builder setConnections(flyteidl.core.Compiler.ConnectionSet value) {
        if (connectionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          connections_ = value;
          onChanged();
        } else {
          connectionsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * For internal use only! This field is used by the system and must not be filled in. Any values set will be ignored.
       * </pre>
       *
       * <code>.flyteidl.core.ConnectionSet connections = 2;</code>
       */
      public Builder setConnections(
          flyteidl.core.Compiler.ConnectionSet.Builder builderForValue) {
        if (connectionsBuilder_ == null) {
          connections_ = builderForValue.build();
          onChanged();
        } else {
          connectionsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * For internal use only! This field is used by the system and must not be filled in. Any values set will be ignored.
       * </pre>
       *
       * <code>.flyteidl.core.ConnectionSet connections = 2;</code>
       */
      public Builder mergeConnections(flyteidl.core.Compiler.ConnectionSet value) {
        if (connectionsBuilder_ == null) {
          if (connections_ != null) {
            connections_ =
              flyteidl.core.Compiler.ConnectionSet.newBuilder(connections_).mergeFrom(value).buildPartial();
          } else {
            connections_ = value;
          }
          onChanged();
        } else {
          connectionsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * For internal use only! This field is used by the system and must not be filled in. Any values set will be ignored.
       * </pre>
       *
       * <code>.flyteidl.core.ConnectionSet connections = 2;</code>
       */
      public Builder clearConnections() {
        if (connectionsBuilder_ == null) {
          connections_ = null;
          onChanged();
        } else {
          connections_ = null;
          connectionsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * For internal use only! This field is used by the system and must not be filled in. Any values set will be ignored.
       * </pre>
       *
       * <code>.flyteidl.core.ConnectionSet connections = 2;</code>
       */
      public flyteidl.core.Compiler.ConnectionSet.Builder getConnectionsBuilder() {
        
        onChanged();
        return getConnectionsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * For internal use only! This field is used by the system and must not be filled in. Any values set will be ignored.
       * </pre>
       *
       * <code>.flyteidl.core.ConnectionSet connections = 2;</code>
       */
      public flyteidl.core.Compiler.ConnectionSetOrBuilder getConnectionsOrBuilder() {
        if (connectionsBuilder_ != null) {
          return connectionsBuilder_.getMessageOrBuilder();
        } else {
          return connections_ == null ?
              flyteidl.core.Compiler.ConnectionSet.getDefaultInstance() : connections_;
        }
      }
      /**
       * <pre>
       * For internal use only! This field is used by the system and must not be filled in. Any values set will be ignored.
       * </pre>
       *
       * <code>.flyteidl.core.ConnectionSet connections = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Compiler.ConnectionSet, flyteidl.core.Compiler.ConnectionSet.Builder, flyteidl.core.Compiler.ConnectionSetOrBuilder> 
          getConnectionsFieldBuilder() {
        if (connectionsBuilder_ == null) {
          connectionsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              flyteidl.core.Compiler.ConnectionSet, flyteidl.core.Compiler.ConnectionSet.Builder, flyteidl.core.Compiler.ConnectionSetOrBuilder>(
                  getConnections(),
                  getParentForChildren(),
                  isClean());
          connections_ = null;
        }
        return connectionsBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flyteidl.core.CompiledWorkflow)
    }

    // @@protoc_insertion_point(class_scope:flyteidl.core.CompiledWorkflow)
    private static final flyteidl.core.Compiler.CompiledWorkflow DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new flyteidl.core.Compiler.CompiledWorkflow();
    }

    public static flyteidl.core.Compiler.CompiledWorkflow getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<CompiledWorkflow>
        PARSER = new com.google.protobuf.AbstractParser<CompiledWorkflow>() {
      @java.lang.Override
      public CompiledWorkflow parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CompiledWorkflow(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<CompiledWorkflow> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CompiledWorkflow> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public flyteidl.core.Compiler.CompiledWorkflow getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CompiledTaskOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flyteidl.core.CompiledTask)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Completely contained TaskTemplate
     * </pre>
     *
     * <code>.flyteidl.core.TaskTemplate template = 1;</code>
     */
    boolean hasTemplate();
    /**
     * <pre>
     * Completely contained TaskTemplate
     * </pre>
     *
     * <code>.flyteidl.core.TaskTemplate template = 1;</code>
     */
    flyteidl.core.Tasks.TaskTemplate getTemplate();
    /**
     * <pre>
     * Completely contained TaskTemplate
     * </pre>
     *
     * <code>.flyteidl.core.TaskTemplate template = 1;</code>
     */
    flyteidl.core.Tasks.TaskTemplateOrBuilder getTemplateOrBuilder();
  }
  /**
   * <pre>
   * Output of the Compilation step. This object represent one Task. We store more metadata at this layer
   * </pre>
   *
   * Protobuf type {@code flyteidl.core.CompiledTask}
   */
  public  static final class CompiledTask extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flyteidl.core.CompiledTask)
      CompiledTaskOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CompiledTask.newBuilder() to construct.
    private CompiledTask(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CompiledTask() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private CompiledTask(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              flyteidl.core.Tasks.TaskTemplate.Builder subBuilder = null;
              if (template_ != null) {
                subBuilder = template_.toBuilder();
              }
              template_ = input.readMessage(flyteidl.core.Tasks.TaskTemplate.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(template_);
                template_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return flyteidl.core.Compiler.internal_static_flyteidl_core_CompiledTask_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return flyteidl.core.Compiler.internal_static_flyteidl_core_CompiledTask_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              flyteidl.core.Compiler.CompiledTask.class, flyteidl.core.Compiler.CompiledTask.Builder.class);
    }

    public static final int TEMPLATE_FIELD_NUMBER = 1;
    private flyteidl.core.Tasks.TaskTemplate template_;
    /**
     * <pre>
     * Completely contained TaskTemplate
     * </pre>
     *
     * <code>.flyteidl.core.TaskTemplate template = 1;</code>
     */
    public boolean hasTemplate() {
      return template_ != null;
    }
    /**
     * <pre>
     * Completely contained TaskTemplate
     * </pre>
     *
     * <code>.flyteidl.core.TaskTemplate template = 1;</code>
     */
    public flyteidl.core.Tasks.TaskTemplate getTemplate() {
      return template_ == null ? flyteidl.core.Tasks.TaskTemplate.getDefaultInstance() : template_;
    }
    /**
     * <pre>
     * Completely contained TaskTemplate
     * </pre>
     *
     * <code>.flyteidl.core.TaskTemplate template = 1;</code>
     */
    public flyteidl.core.Tasks.TaskTemplateOrBuilder getTemplateOrBuilder() {
      return getTemplate();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (template_ != null) {
        output.writeMessage(1, getTemplate());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (template_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getTemplate());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof flyteidl.core.Compiler.CompiledTask)) {
        return super.equals(obj);
      }
      flyteidl.core.Compiler.CompiledTask other = (flyteidl.core.Compiler.CompiledTask) obj;

      if (hasTemplate() != other.hasTemplate()) return false;
      if (hasTemplate()) {
        if (!getTemplate()
            .equals(other.getTemplate())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasTemplate()) {
        hash = (37 * hash) + TEMPLATE_FIELD_NUMBER;
        hash = (53 * hash) + getTemplate().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static flyteidl.core.Compiler.CompiledTask parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Compiler.CompiledTask parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Compiler.CompiledTask parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Compiler.CompiledTask parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Compiler.CompiledTask parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Compiler.CompiledTask parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Compiler.CompiledTask parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static flyteidl.core.Compiler.CompiledTask parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static flyteidl.core.Compiler.CompiledTask parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static flyteidl.core.Compiler.CompiledTask parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static flyteidl.core.Compiler.CompiledTask parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static flyteidl.core.Compiler.CompiledTask parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(flyteidl.core.Compiler.CompiledTask prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Output of the Compilation step. This object represent one Task. We store more metadata at this layer
     * </pre>
     *
     * Protobuf type {@code flyteidl.core.CompiledTask}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flyteidl.core.CompiledTask)
        flyteidl.core.Compiler.CompiledTaskOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return flyteidl.core.Compiler.internal_static_flyteidl_core_CompiledTask_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return flyteidl.core.Compiler.internal_static_flyteidl_core_CompiledTask_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                flyteidl.core.Compiler.CompiledTask.class, flyteidl.core.Compiler.CompiledTask.Builder.class);
      }

      // Construct using flyteidl.core.Compiler.CompiledTask.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (templateBuilder_ == null) {
          template_ = null;
        } else {
          template_ = null;
          templateBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return flyteidl.core.Compiler.internal_static_flyteidl_core_CompiledTask_descriptor;
      }

      @java.lang.Override
      public flyteidl.core.Compiler.CompiledTask getDefaultInstanceForType() {
        return flyteidl.core.Compiler.CompiledTask.getDefaultInstance();
      }

      @java.lang.Override
      public flyteidl.core.Compiler.CompiledTask build() {
        flyteidl.core.Compiler.CompiledTask result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public flyteidl.core.Compiler.CompiledTask buildPartial() {
        flyteidl.core.Compiler.CompiledTask result = new flyteidl.core.Compiler.CompiledTask(this);
        if (templateBuilder_ == null) {
          result.template_ = template_;
        } else {
          result.template_ = templateBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof flyteidl.core.Compiler.CompiledTask) {
          return mergeFrom((flyteidl.core.Compiler.CompiledTask)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(flyteidl.core.Compiler.CompiledTask other) {
        if (other == flyteidl.core.Compiler.CompiledTask.getDefaultInstance()) return this;
        if (other.hasTemplate()) {
          mergeTemplate(other.getTemplate());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        flyteidl.core.Compiler.CompiledTask parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (flyteidl.core.Compiler.CompiledTask) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private flyteidl.core.Tasks.TaskTemplate template_;
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Tasks.TaskTemplate, flyteidl.core.Tasks.TaskTemplate.Builder, flyteidl.core.Tasks.TaskTemplateOrBuilder> templateBuilder_;
      /**
       * <pre>
       * Completely contained TaskTemplate
       * </pre>
       *
       * <code>.flyteidl.core.TaskTemplate template = 1;</code>
       */
      public boolean hasTemplate() {
        return templateBuilder_ != null || template_ != null;
      }
      /**
       * <pre>
       * Completely contained TaskTemplate
       * </pre>
       *
       * <code>.flyteidl.core.TaskTemplate template = 1;</code>
       */
      public flyteidl.core.Tasks.TaskTemplate getTemplate() {
        if (templateBuilder_ == null) {
          return template_ == null ? flyteidl.core.Tasks.TaskTemplate.getDefaultInstance() : template_;
        } else {
          return templateBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Completely contained TaskTemplate
       * </pre>
       *
       * <code>.flyteidl.core.TaskTemplate template = 1;</code>
       */
      public Builder setTemplate(flyteidl.core.Tasks.TaskTemplate value) {
        if (templateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          template_ = value;
          onChanged();
        } else {
          templateBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Completely contained TaskTemplate
       * </pre>
       *
       * <code>.flyteidl.core.TaskTemplate template = 1;</code>
       */
      public Builder setTemplate(
          flyteidl.core.Tasks.TaskTemplate.Builder builderForValue) {
        if (templateBuilder_ == null) {
          template_ = builderForValue.build();
          onChanged();
        } else {
          templateBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Completely contained TaskTemplate
       * </pre>
       *
       * <code>.flyteidl.core.TaskTemplate template = 1;</code>
       */
      public Builder mergeTemplate(flyteidl.core.Tasks.TaskTemplate value) {
        if (templateBuilder_ == null) {
          if (template_ != null) {
            template_ =
              flyteidl.core.Tasks.TaskTemplate.newBuilder(template_).mergeFrom(value).buildPartial();
          } else {
            template_ = value;
          }
          onChanged();
        } else {
          templateBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Completely contained TaskTemplate
       * </pre>
       *
       * <code>.flyteidl.core.TaskTemplate template = 1;</code>
       */
      public Builder clearTemplate() {
        if (templateBuilder_ == null) {
          template_ = null;
          onChanged();
        } else {
          template_ = null;
          templateBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Completely contained TaskTemplate
       * </pre>
       *
       * <code>.flyteidl.core.TaskTemplate template = 1;</code>
       */
      public flyteidl.core.Tasks.TaskTemplate.Builder getTemplateBuilder() {
        
        onChanged();
        return getTemplateFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Completely contained TaskTemplate
       * </pre>
       *
       * <code>.flyteidl.core.TaskTemplate template = 1;</code>
       */
      public flyteidl.core.Tasks.TaskTemplateOrBuilder getTemplateOrBuilder() {
        if (templateBuilder_ != null) {
          return templateBuilder_.getMessageOrBuilder();
        } else {
          return template_ == null ?
              flyteidl.core.Tasks.TaskTemplate.getDefaultInstance() : template_;
        }
      }
      /**
       * <pre>
       * Completely contained TaskTemplate
       * </pre>
       *
       * <code>.flyteidl.core.TaskTemplate template = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Tasks.TaskTemplate, flyteidl.core.Tasks.TaskTemplate.Builder, flyteidl.core.Tasks.TaskTemplateOrBuilder> 
          getTemplateFieldBuilder() {
        if (templateBuilder_ == null) {
          templateBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              flyteidl.core.Tasks.TaskTemplate, flyteidl.core.Tasks.TaskTemplate.Builder, flyteidl.core.Tasks.TaskTemplateOrBuilder>(
                  getTemplate(),
                  getParentForChildren(),
                  isClean());
          template_ = null;
        }
        return templateBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flyteidl.core.CompiledTask)
    }

    // @@protoc_insertion_point(class_scope:flyteidl.core.CompiledTask)
    private static final flyteidl.core.Compiler.CompiledTask DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new flyteidl.core.Compiler.CompiledTask();
    }

    public static flyteidl.core.Compiler.CompiledTask getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<CompiledTask>
        PARSER = new com.google.protobuf.AbstractParser<CompiledTask>() {
      @java.lang.Override
      public CompiledTask parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CompiledTask(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<CompiledTask> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CompiledTask> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public flyteidl.core.Compiler.CompiledTask getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CompiledWorkflowClosureOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flyteidl.core.CompiledWorkflowClosure)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *+required
     * </pre>
     *
     * <code>.flyteidl.core.CompiledWorkflow primary = 1;</code>
     */
    boolean hasPrimary();
    /**
     * <pre>
     *+required
     * </pre>
     *
     * <code>.flyteidl.core.CompiledWorkflow primary = 1;</code>
     */
    flyteidl.core.Compiler.CompiledWorkflow getPrimary();
    /**
     * <pre>
     *+required
     * </pre>
     *
     * <code>.flyteidl.core.CompiledWorkflow primary = 1;</code>
     */
    flyteidl.core.Compiler.CompiledWorkflowOrBuilder getPrimaryOrBuilder();

    /**
     * <pre>
     * Guaranteed that there will only exist one and only one workflow with a given id, i.e., every sub workflow has a
     * unique identifier. Also every enclosed subworkflow is used either by a primary workflow or by a subworkflow
     * as an inlined workflow
     *+optional
     * </pre>
     *
     * <code>repeated .flyteidl.core.CompiledWorkflow sub_workflows = 2;</code>
     */
    java.util.List<flyteidl.core.Compiler.CompiledWorkflow> 
        getSubWorkflowsList();
    /**
     * <pre>
     * Guaranteed that there will only exist one and only one workflow with a given id, i.e., every sub workflow has a
     * unique identifier. Also every enclosed subworkflow is used either by a primary workflow or by a subworkflow
     * as an inlined workflow
     *+optional
     * </pre>
     *
     * <code>repeated .flyteidl.core.CompiledWorkflow sub_workflows = 2;</code>
     */
    flyteidl.core.Compiler.CompiledWorkflow getSubWorkflows(int index);
    /**
     * <pre>
     * Guaranteed that there will only exist one and only one workflow with a given id, i.e., every sub workflow has a
     * unique identifier. Also every enclosed subworkflow is used either by a primary workflow or by a subworkflow
     * as an inlined workflow
     *+optional
     * </pre>
     *
     * <code>repeated .flyteidl.core.CompiledWorkflow sub_workflows = 2;</code>
     */
    int getSubWorkflowsCount();
    /**
     * <pre>
     * Guaranteed that there will only exist one and only one workflow with a given id, i.e., every sub workflow has a
     * unique identifier. Also every enclosed subworkflow is used either by a primary workflow or by a subworkflow
     * as an inlined workflow
     *+optional
     * </pre>
     *
     * <code>repeated .flyteidl.core.CompiledWorkflow sub_workflows = 2;</code>
     */
    java.util.List<? extends flyteidl.core.Compiler.CompiledWorkflowOrBuilder> 
        getSubWorkflowsOrBuilderList();
    /**
     * <pre>
     * Guaranteed that there will only exist one and only one workflow with a given id, i.e., every sub workflow has a
     * unique identifier. Also every enclosed subworkflow is used either by a primary workflow or by a subworkflow
     * as an inlined workflow
     *+optional
     * </pre>
     *
     * <code>repeated .flyteidl.core.CompiledWorkflow sub_workflows = 2;</code>
     */
    flyteidl.core.Compiler.CompiledWorkflowOrBuilder getSubWorkflowsOrBuilder(
        int index);

    /**
     * <pre>
     * Guaranteed that there will only exist one and only one task with a given id, i.e., every task has a unique id
     *+required (at least 1)
     * </pre>
     *
     * <code>repeated .flyteidl.core.CompiledTask tasks = 3;</code>
     */
    java.util.List<flyteidl.core.Compiler.CompiledTask> 
        getTasksList();
    /**
     * <pre>
     * Guaranteed that there will only exist one and only one task with a given id, i.e., every task has a unique id
     *+required (at least 1)
     * </pre>
     *
     * <code>repeated .flyteidl.core.CompiledTask tasks = 3;</code>
     */
    flyteidl.core.Compiler.CompiledTask getTasks(int index);
    /**
     * <pre>
     * Guaranteed that there will only exist one and only one task with a given id, i.e., every task has a unique id
     *+required (at least 1)
     * </pre>
     *
     * <code>repeated .flyteidl.core.CompiledTask tasks = 3;</code>
     */
    int getTasksCount();
    /**
     * <pre>
     * Guaranteed that there will only exist one and only one task with a given id, i.e., every task has a unique id
     *+required (at least 1)
     * </pre>
     *
     * <code>repeated .flyteidl.core.CompiledTask tasks = 3;</code>
     */
    java.util.List<? extends flyteidl.core.Compiler.CompiledTaskOrBuilder> 
        getTasksOrBuilderList();
    /**
     * <pre>
     * Guaranteed that there will only exist one and only one task with a given id, i.e., every task has a unique id
     *+required (at least 1)
     * </pre>
     *
     * <code>repeated .flyteidl.core.CompiledTask tasks = 3;</code>
     */
    flyteidl.core.Compiler.CompiledTaskOrBuilder getTasksOrBuilder(
        int index);
  }
  /**
   * <pre>
   * A Compiled Workflow Closure contains all the information required to start a new execution, or to visualize a workflow
   * and its details. The CompiledWorkflowClosure should always contain a primary workflow, that is the main workflow that
   * will being the execution. All subworkflows are denormalized. WorkflowNodes refer to the workflow identifiers of
   * compiled subworkflows.
   * </pre>
   *
   * Protobuf type {@code flyteidl.core.CompiledWorkflowClosure}
   */
  public  static final class CompiledWorkflowClosure extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flyteidl.core.CompiledWorkflowClosure)
      CompiledWorkflowClosureOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CompiledWorkflowClosure.newBuilder() to construct.
    private CompiledWorkflowClosure(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CompiledWorkflowClosure() {
      subWorkflows_ = java.util.Collections.emptyList();
      tasks_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private CompiledWorkflowClosure(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              flyteidl.core.Compiler.CompiledWorkflow.Builder subBuilder = null;
              if (primary_ != null) {
                subBuilder = primary_.toBuilder();
              }
              primary_ = input.readMessage(flyteidl.core.Compiler.CompiledWorkflow.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(primary_);
                primary_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                subWorkflows_ = new java.util.ArrayList<flyteidl.core.Compiler.CompiledWorkflow>();
                mutable_bitField0_ |= 0x00000002;
              }
              subWorkflows_.add(
                  input.readMessage(flyteidl.core.Compiler.CompiledWorkflow.parser(), extensionRegistry));
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) != 0)) {
                tasks_ = new java.util.ArrayList<flyteidl.core.Compiler.CompiledTask>();
                mutable_bitField0_ |= 0x00000004;
              }
              tasks_.add(
                  input.readMessage(flyteidl.core.Compiler.CompiledTask.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          subWorkflows_ = java.util.Collections.unmodifiableList(subWorkflows_);
        }
        if (((mutable_bitField0_ & 0x00000004) != 0)) {
          tasks_ = java.util.Collections.unmodifiableList(tasks_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return flyteidl.core.Compiler.internal_static_flyteidl_core_CompiledWorkflowClosure_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return flyteidl.core.Compiler.internal_static_flyteidl_core_CompiledWorkflowClosure_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              flyteidl.core.Compiler.CompiledWorkflowClosure.class, flyteidl.core.Compiler.CompiledWorkflowClosure.Builder.class);
    }

    private int bitField0_;
    public static final int PRIMARY_FIELD_NUMBER = 1;
    private flyteidl.core.Compiler.CompiledWorkflow primary_;
    /**
     * <pre>
     *+required
     * </pre>
     *
     * <code>.flyteidl.core.CompiledWorkflow primary = 1;</code>
     */
    public boolean hasPrimary() {
      return primary_ != null;
    }
    /**
     * <pre>
     *+required
     * </pre>
     *
     * <code>.flyteidl.core.CompiledWorkflow primary = 1;</code>
     */
    public flyteidl.core.Compiler.CompiledWorkflow getPrimary() {
      return primary_ == null ? flyteidl.core.Compiler.CompiledWorkflow.getDefaultInstance() : primary_;
    }
    /**
     * <pre>
     *+required
     * </pre>
     *
     * <code>.flyteidl.core.CompiledWorkflow primary = 1;</code>
     */
    public flyteidl.core.Compiler.CompiledWorkflowOrBuilder getPrimaryOrBuilder() {
      return getPrimary();
    }

    public static final int SUB_WORKFLOWS_FIELD_NUMBER = 2;
    private java.util.List<flyteidl.core.Compiler.CompiledWorkflow> subWorkflows_;
    /**
     * <pre>
     * Guaranteed that there will only exist one and only one workflow with a given id, i.e., every sub workflow has a
     * unique identifier. Also every enclosed subworkflow is used either by a primary workflow or by a subworkflow
     * as an inlined workflow
     *+optional
     * </pre>
     *
     * <code>repeated .flyteidl.core.CompiledWorkflow sub_workflows = 2;</code>
     */
    public java.util.List<flyteidl.core.Compiler.CompiledWorkflow> getSubWorkflowsList() {
      return subWorkflows_;
    }
    /**
     * <pre>
     * Guaranteed that there will only exist one and only one workflow with a given id, i.e., every sub workflow has a
     * unique identifier. Also every enclosed subworkflow is used either by a primary workflow or by a subworkflow
     * as an inlined workflow
     *+optional
     * </pre>
     *
     * <code>repeated .flyteidl.core.CompiledWorkflow sub_workflows = 2;</code>
     */
    public java.util.List<? extends flyteidl.core.Compiler.CompiledWorkflowOrBuilder> 
        getSubWorkflowsOrBuilderList() {
      return subWorkflows_;
    }
    /**
     * <pre>
     * Guaranteed that there will only exist one and only one workflow with a given id, i.e., every sub workflow has a
     * unique identifier. Also every enclosed subworkflow is used either by a primary workflow or by a subworkflow
     * as an inlined workflow
     *+optional
     * </pre>
     *
     * <code>repeated .flyteidl.core.CompiledWorkflow sub_workflows = 2;</code>
     */
    public int getSubWorkflowsCount() {
      return subWorkflows_.size();
    }
    /**
     * <pre>
     * Guaranteed that there will only exist one and only one workflow with a given id, i.e., every sub workflow has a
     * unique identifier. Also every enclosed subworkflow is used either by a primary workflow or by a subworkflow
     * as an inlined workflow
     *+optional
     * </pre>
     *
     * <code>repeated .flyteidl.core.CompiledWorkflow sub_workflows = 2;</code>
     */
    public flyteidl.core.Compiler.CompiledWorkflow getSubWorkflows(int index) {
      return subWorkflows_.get(index);
    }
    /**
     * <pre>
     * Guaranteed that there will only exist one and only one workflow with a given id, i.e., every sub workflow has a
     * unique identifier. Also every enclosed subworkflow is used either by a primary workflow or by a subworkflow
     * as an inlined workflow
     *+optional
     * </pre>
     *
     * <code>repeated .flyteidl.core.CompiledWorkflow sub_workflows = 2;</code>
     */
    public flyteidl.core.Compiler.CompiledWorkflowOrBuilder getSubWorkflowsOrBuilder(
        int index) {
      return subWorkflows_.get(index);
    }

    public static final int TASKS_FIELD_NUMBER = 3;
    private java.util.List<flyteidl.core.Compiler.CompiledTask> tasks_;
    /**
     * <pre>
     * Guaranteed that there will only exist one and only one task with a given id, i.e., every task has a unique id
     *+required (at least 1)
     * </pre>
     *
     * <code>repeated .flyteidl.core.CompiledTask tasks = 3;</code>
     */
    public java.util.List<flyteidl.core.Compiler.CompiledTask> getTasksList() {
      return tasks_;
    }
    /**
     * <pre>
     * Guaranteed that there will only exist one and only one task with a given id, i.e., every task has a unique id
     *+required (at least 1)
     * </pre>
     *
     * <code>repeated .flyteidl.core.CompiledTask tasks = 3;</code>
     */
    public java.util.List<? extends flyteidl.core.Compiler.CompiledTaskOrBuilder> 
        getTasksOrBuilderList() {
      return tasks_;
    }
    /**
     * <pre>
     * Guaranteed that there will only exist one and only one task with a given id, i.e., every task has a unique id
     *+required (at least 1)
     * </pre>
     *
     * <code>repeated .flyteidl.core.CompiledTask tasks = 3;</code>
     */
    public int getTasksCount() {
      return tasks_.size();
    }
    /**
     * <pre>
     * Guaranteed that there will only exist one and only one task with a given id, i.e., every task has a unique id
     *+required (at least 1)
     * </pre>
     *
     * <code>repeated .flyteidl.core.CompiledTask tasks = 3;</code>
     */
    public flyteidl.core.Compiler.CompiledTask getTasks(int index) {
      return tasks_.get(index);
    }
    /**
     * <pre>
     * Guaranteed that there will only exist one and only one task with a given id, i.e., every task has a unique id
     *+required (at least 1)
     * </pre>
     *
     * <code>repeated .flyteidl.core.CompiledTask tasks = 3;</code>
     */
    public flyteidl.core.Compiler.CompiledTaskOrBuilder getTasksOrBuilder(
        int index) {
      return tasks_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (primary_ != null) {
        output.writeMessage(1, getPrimary());
      }
      for (int i = 0; i < subWorkflows_.size(); i++) {
        output.writeMessage(2, subWorkflows_.get(i));
      }
      for (int i = 0; i < tasks_.size(); i++) {
        output.writeMessage(3, tasks_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (primary_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getPrimary());
      }
      for (int i = 0; i < subWorkflows_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, subWorkflows_.get(i));
      }
      for (int i = 0; i < tasks_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, tasks_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof flyteidl.core.Compiler.CompiledWorkflowClosure)) {
        return super.equals(obj);
      }
      flyteidl.core.Compiler.CompiledWorkflowClosure other = (flyteidl.core.Compiler.CompiledWorkflowClosure) obj;

      if (hasPrimary() != other.hasPrimary()) return false;
      if (hasPrimary()) {
        if (!getPrimary()
            .equals(other.getPrimary())) return false;
      }
      if (!getSubWorkflowsList()
          .equals(other.getSubWorkflowsList())) return false;
      if (!getTasksList()
          .equals(other.getTasksList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasPrimary()) {
        hash = (37 * hash) + PRIMARY_FIELD_NUMBER;
        hash = (53 * hash) + getPrimary().hashCode();
      }
      if (getSubWorkflowsCount() > 0) {
        hash = (37 * hash) + SUB_WORKFLOWS_FIELD_NUMBER;
        hash = (53 * hash) + getSubWorkflowsList().hashCode();
      }
      if (getTasksCount() > 0) {
        hash = (37 * hash) + TASKS_FIELD_NUMBER;
        hash = (53 * hash) + getTasksList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static flyteidl.core.Compiler.CompiledWorkflowClosure parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Compiler.CompiledWorkflowClosure parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Compiler.CompiledWorkflowClosure parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Compiler.CompiledWorkflowClosure parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Compiler.CompiledWorkflowClosure parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static flyteidl.core.Compiler.CompiledWorkflowClosure parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static flyteidl.core.Compiler.CompiledWorkflowClosure parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static flyteidl.core.Compiler.CompiledWorkflowClosure parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static flyteidl.core.Compiler.CompiledWorkflowClosure parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static flyteidl.core.Compiler.CompiledWorkflowClosure parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static flyteidl.core.Compiler.CompiledWorkflowClosure parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static flyteidl.core.Compiler.CompiledWorkflowClosure parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(flyteidl.core.Compiler.CompiledWorkflowClosure prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A Compiled Workflow Closure contains all the information required to start a new execution, or to visualize a workflow
     * and its details. The CompiledWorkflowClosure should always contain a primary workflow, that is the main workflow that
     * will being the execution. All subworkflows are denormalized. WorkflowNodes refer to the workflow identifiers of
     * compiled subworkflows.
     * </pre>
     *
     * Protobuf type {@code flyteidl.core.CompiledWorkflowClosure}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flyteidl.core.CompiledWorkflowClosure)
        flyteidl.core.Compiler.CompiledWorkflowClosureOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return flyteidl.core.Compiler.internal_static_flyteidl_core_CompiledWorkflowClosure_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return flyteidl.core.Compiler.internal_static_flyteidl_core_CompiledWorkflowClosure_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                flyteidl.core.Compiler.CompiledWorkflowClosure.class, flyteidl.core.Compiler.CompiledWorkflowClosure.Builder.class);
      }

      // Construct using flyteidl.core.Compiler.CompiledWorkflowClosure.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getSubWorkflowsFieldBuilder();
          getTasksFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (primaryBuilder_ == null) {
          primary_ = null;
        } else {
          primary_ = null;
          primaryBuilder_ = null;
        }
        if (subWorkflowsBuilder_ == null) {
          subWorkflows_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          subWorkflowsBuilder_.clear();
        }
        if (tasksBuilder_ == null) {
          tasks_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          tasksBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return flyteidl.core.Compiler.internal_static_flyteidl_core_CompiledWorkflowClosure_descriptor;
      }

      @java.lang.Override
      public flyteidl.core.Compiler.CompiledWorkflowClosure getDefaultInstanceForType() {
        return flyteidl.core.Compiler.CompiledWorkflowClosure.getDefaultInstance();
      }

      @java.lang.Override
      public flyteidl.core.Compiler.CompiledWorkflowClosure build() {
        flyteidl.core.Compiler.CompiledWorkflowClosure result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public flyteidl.core.Compiler.CompiledWorkflowClosure buildPartial() {
        flyteidl.core.Compiler.CompiledWorkflowClosure result = new flyteidl.core.Compiler.CompiledWorkflowClosure(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (primaryBuilder_ == null) {
          result.primary_ = primary_;
        } else {
          result.primary_ = primaryBuilder_.build();
        }
        if (subWorkflowsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            subWorkflows_ = java.util.Collections.unmodifiableList(subWorkflows_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.subWorkflows_ = subWorkflows_;
        } else {
          result.subWorkflows_ = subWorkflowsBuilder_.build();
        }
        if (tasksBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0)) {
            tasks_ = java.util.Collections.unmodifiableList(tasks_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.tasks_ = tasks_;
        } else {
          result.tasks_ = tasksBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof flyteidl.core.Compiler.CompiledWorkflowClosure) {
          return mergeFrom((flyteidl.core.Compiler.CompiledWorkflowClosure)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(flyteidl.core.Compiler.CompiledWorkflowClosure other) {
        if (other == flyteidl.core.Compiler.CompiledWorkflowClosure.getDefaultInstance()) return this;
        if (other.hasPrimary()) {
          mergePrimary(other.getPrimary());
        }
        if (subWorkflowsBuilder_ == null) {
          if (!other.subWorkflows_.isEmpty()) {
            if (subWorkflows_.isEmpty()) {
              subWorkflows_ = other.subWorkflows_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureSubWorkflowsIsMutable();
              subWorkflows_.addAll(other.subWorkflows_);
            }
            onChanged();
          }
        } else {
          if (!other.subWorkflows_.isEmpty()) {
            if (subWorkflowsBuilder_.isEmpty()) {
              subWorkflowsBuilder_.dispose();
              subWorkflowsBuilder_ = null;
              subWorkflows_ = other.subWorkflows_;
              bitField0_ = (bitField0_ & ~0x00000002);
              subWorkflowsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getSubWorkflowsFieldBuilder() : null;
            } else {
              subWorkflowsBuilder_.addAllMessages(other.subWorkflows_);
            }
          }
        }
        if (tasksBuilder_ == null) {
          if (!other.tasks_.isEmpty()) {
            if (tasks_.isEmpty()) {
              tasks_ = other.tasks_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureTasksIsMutable();
              tasks_.addAll(other.tasks_);
            }
            onChanged();
          }
        } else {
          if (!other.tasks_.isEmpty()) {
            if (tasksBuilder_.isEmpty()) {
              tasksBuilder_.dispose();
              tasksBuilder_ = null;
              tasks_ = other.tasks_;
              bitField0_ = (bitField0_ & ~0x00000004);
              tasksBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getTasksFieldBuilder() : null;
            } else {
              tasksBuilder_.addAllMessages(other.tasks_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        flyteidl.core.Compiler.CompiledWorkflowClosure parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (flyteidl.core.Compiler.CompiledWorkflowClosure) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private flyteidl.core.Compiler.CompiledWorkflow primary_;
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Compiler.CompiledWorkflow, flyteidl.core.Compiler.CompiledWorkflow.Builder, flyteidl.core.Compiler.CompiledWorkflowOrBuilder> primaryBuilder_;
      /**
       * <pre>
       *+required
       * </pre>
       *
       * <code>.flyteidl.core.CompiledWorkflow primary = 1;</code>
       */
      public boolean hasPrimary() {
        return primaryBuilder_ != null || primary_ != null;
      }
      /**
       * <pre>
       *+required
       * </pre>
       *
       * <code>.flyteidl.core.CompiledWorkflow primary = 1;</code>
       */
      public flyteidl.core.Compiler.CompiledWorkflow getPrimary() {
        if (primaryBuilder_ == null) {
          return primary_ == null ? flyteidl.core.Compiler.CompiledWorkflow.getDefaultInstance() : primary_;
        } else {
          return primaryBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *+required
       * </pre>
       *
       * <code>.flyteidl.core.CompiledWorkflow primary = 1;</code>
       */
      public Builder setPrimary(flyteidl.core.Compiler.CompiledWorkflow value) {
        if (primaryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          primary_ = value;
          onChanged();
        } else {
          primaryBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       *+required
       * </pre>
       *
       * <code>.flyteidl.core.CompiledWorkflow primary = 1;</code>
       */
      public Builder setPrimary(
          flyteidl.core.Compiler.CompiledWorkflow.Builder builderForValue) {
        if (primaryBuilder_ == null) {
          primary_ = builderForValue.build();
          onChanged();
        } else {
          primaryBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       *+required
       * </pre>
       *
       * <code>.flyteidl.core.CompiledWorkflow primary = 1;</code>
       */
      public Builder mergePrimary(flyteidl.core.Compiler.CompiledWorkflow value) {
        if (primaryBuilder_ == null) {
          if (primary_ != null) {
            primary_ =
              flyteidl.core.Compiler.CompiledWorkflow.newBuilder(primary_).mergeFrom(value).buildPartial();
          } else {
            primary_ = value;
          }
          onChanged();
        } else {
          primaryBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       *+required
       * </pre>
       *
       * <code>.flyteidl.core.CompiledWorkflow primary = 1;</code>
       */
      public Builder clearPrimary() {
        if (primaryBuilder_ == null) {
          primary_ = null;
          onChanged();
        } else {
          primary_ = null;
          primaryBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       *+required
       * </pre>
       *
       * <code>.flyteidl.core.CompiledWorkflow primary = 1;</code>
       */
      public flyteidl.core.Compiler.CompiledWorkflow.Builder getPrimaryBuilder() {
        
        onChanged();
        return getPrimaryFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *+required
       * </pre>
       *
       * <code>.flyteidl.core.CompiledWorkflow primary = 1;</code>
       */
      public flyteidl.core.Compiler.CompiledWorkflowOrBuilder getPrimaryOrBuilder() {
        if (primaryBuilder_ != null) {
          return primaryBuilder_.getMessageOrBuilder();
        } else {
          return primary_ == null ?
              flyteidl.core.Compiler.CompiledWorkflow.getDefaultInstance() : primary_;
        }
      }
      /**
       * <pre>
       *+required
       * </pre>
       *
       * <code>.flyteidl.core.CompiledWorkflow primary = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          flyteidl.core.Compiler.CompiledWorkflow, flyteidl.core.Compiler.CompiledWorkflow.Builder, flyteidl.core.Compiler.CompiledWorkflowOrBuilder> 
          getPrimaryFieldBuilder() {
        if (primaryBuilder_ == null) {
          primaryBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              flyteidl.core.Compiler.CompiledWorkflow, flyteidl.core.Compiler.CompiledWorkflow.Builder, flyteidl.core.Compiler.CompiledWorkflowOrBuilder>(
                  getPrimary(),
                  getParentForChildren(),
                  isClean());
          primary_ = null;
        }
        return primaryBuilder_;
      }

      private java.util.List<flyteidl.core.Compiler.CompiledWorkflow> subWorkflows_ =
        java.util.Collections.emptyList();
      private void ensureSubWorkflowsIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          subWorkflows_ = new java.util.ArrayList<flyteidl.core.Compiler.CompiledWorkflow>(subWorkflows_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          flyteidl.core.Compiler.CompiledWorkflow, flyteidl.core.Compiler.CompiledWorkflow.Builder, flyteidl.core.Compiler.CompiledWorkflowOrBuilder> subWorkflowsBuilder_;

      /**
       * <pre>
       * Guaranteed that there will only exist one and only one workflow with a given id, i.e., every sub workflow has a
       * unique identifier. Also every enclosed subworkflow is used either by a primary workflow or by a subworkflow
       * as an inlined workflow
       *+optional
       * </pre>
       *
       * <code>repeated .flyteidl.core.CompiledWorkflow sub_workflows = 2;</code>
       */
      public java.util.List<flyteidl.core.Compiler.CompiledWorkflow> getSubWorkflowsList() {
        if (subWorkflowsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(subWorkflows_);
        } else {
          return subWorkflowsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Guaranteed that there will only exist one and only one workflow with a given id, i.e., every sub workflow has a
       * unique identifier. Also every enclosed subworkflow is used either by a primary workflow or by a subworkflow
       * as an inlined workflow
       *+optional
       * </pre>
       *
       * <code>repeated .flyteidl.core.CompiledWorkflow sub_workflows = 2;</code>
       */
      public int getSubWorkflowsCount() {
        if (subWorkflowsBuilder_ == null) {
          return subWorkflows_.size();
        } else {
          return subWorkflowsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Guaranteed that there will only exist one and only one workflow with a given id, i.e., every sub workflow has a
       * unique identifier. Also every enclosed subworkflow is used either by a primary workflow or by a subworkflow
       * as an inlined workflow
       *+optional
       * </pre>
       *
       * <code>repeated .flyteidl.core.CompiledWorkflow sub_workflows = 2;</code>
       */
      public flyteidl.core.Compiler.CompiledWorkflow getSubWorkflows(int index) {
        if (subWorkflowsBuilder_ == null) {
          return subWorkflows_.get(index);
        } else {
          return subWorkflowsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Guaranteed that there will only exist one and only one workflow with a given id, i.e., every sub workflow has a
       * unique identifier. Also every enclosed subworkflow is used either by a primary workflow or by a subworkflow
       * as an inlined workflow
       *+optional
       * </pre>
       *
       * <code>repeated .flyteidl.core.CompiledWorkflow sub_workflows = 2;</code>
       */
      public Builder setSubWorkflows(
          int index, flyteidl.core.Compiler.CompiledWorkflow value) {
        if (subWorkflowsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSubWorkflowsIsMutable();
          subWorkflows_.set(index, value);
          onChanged();
        } else {
          subWorkflowsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Guaranteed that there will only exist one and only one workflow with a given id, i.e., every sub workflow has a
       * unique identifier. Also every enclosed subworkflow is used either by a primary workflow or by a subworkflow
       * as an inlined workflow
       *+optional
       * </pre>
       *
       * <code>repeated .flyteidl.core.CompiledWorkflow sub_workflows = 2;</code>
       */
      public Builder setSubWorkflows(
          int index, flyteidl.core.Compiler.CompiledWorkflow.Builder builderForValue) {
        if (subWorkflowsBuilder_ == null) {
          ensureSubWorkflowsIsMutable();
          subWorkflows_.set(index, builderForValue.build());
          onChanged();
        } else {
          subWorkflowsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Guaranteed that there will only exist one and only one workflow with a given id, i.e., every sub workflow has a
       * unique identifier. Also every enclosed subworkflow is used either by a primary workflow or by a subworkflow
       * as an inlined workflow
       *+optional
       * </pre>
       *
       * <code>repeated .flyteidl.core.CompiledWorkflow sub_workflows = 2;</code>
       */
      public Builder addSubWorkflows(flyteidl.core.Compiler.CompiledWorkflow value) {
        if (subWorkflowsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSubWorkflowsIsMutable();
          subWorkflows_.add(value);
          onChanged();
        } else {
          subWorkflowsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Guaranteed that there will only exist one and only one workflow with a given id, i.e., every sub workflow has a
       * unique identifier. Also every enclosed subworkflow is used either by a primary workflow or by a subworkflow
       * as an inlined workflow
       *+optional
       * </pre>
       *
       * <code>repeated .flyteidl.core.CompiledWorkflow sub_workflows = 2;</code>
       */
      public Builder addSubWorkflows(
          int index, flyteidl.core.Compiler.CompiledWorkflow value) {
        if (subWorkflowsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSubWorkflowsIsMutable();
          subWorkflows_.add(index, value);
          onChanged();
        } else {
          subWorkflowsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Guaranteed that there will only exist one and only one workflow with a given id, i.e., every sub workflow has a
       * unique identifier. Also every enclosed subworkflow is used either by a primary workflow or by a subworkflow
       * as an inlined workflow
       *+optional
       * </pre>
       *
       * <code>repeated .flyteidl.core.CompiledWorkflow sub_workflows = 2;</code>
       */
      public Builder addSubWorkflows(
          flyteidl.core.Compiler.CompiledWorkflow.Builder builderForValue) {
        if (subWorkflowsBuilder_ == null) {
          ensureSubWorkflowsIsMutable();
          subWorkflows_.add(builderForValue.build());
          onChanged();
        } else {
          subWorkflowsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Guaranteed that there will only exist one and only one workflow with a given id, i.e., every sub workflow has a
       * unique identifier. Also every enclosed subworkflow is used either by a primary workflow or by a subworkflow
       * as an inlined workflow
       *+optional
       * </pre>
       *
       * <code>repeated .flyteidl.core.CompiledWorkflow sub_workflows = 2;</code>
       */
      public Builder addSubWorkflows(
          int index, flyteidl.core.Compiler.CompiledWorkflow.Builder builderForValue) {
        if (subWorkflowsBuilder_ == null) {
          ensureSubWorkflowsIsMutable();
          subWorkflows_.add(index, builderForValue.build());
          onChanged();
        } else {
          subWorkflowsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Guaranteed that there will only exist one and only one workflow with a given id, i.e., every sub workflow has a
       * unique identifier. Also every enclosed subworkflow is used either by a primary workflow or by a subworkflow
       * as an inlined workflow
       *+optional
       * </pre>
       *
       * <code>repeated .flyteidl.core.CompiledWorkflow sub_workflows = 2;</code>
       */
      public Builder addAllSubWorkflows(
          java.lang.Iterable<? extends flyteidl.core.Compiler.CompiledWorkflow> values) {
        if (subWorkflowsBuilder_ == null) {
          ensureSubWorkflowsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, subWorkflows_);
          onChanged();
        } else {
          subWorkflowsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Guaranteed that there will only exist one and only one workflow with a given id, i.e., every sub workflow has a
       * unique identifier. Also every enclosed subworkflow is used either by a primary workflow or by a subworkflow
       * as an inlined workflow
       *+optional
       * </pre>
       *
       * <code>repeated .flyteidl.core.CompiledWorkflow sub_workflows = 2;</code>
       */
      public Builder clearSubWorkflows() {
        if (subWorkflowsBuilder_ == null) {
          subWorkflows_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          subWorkflowsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Guaranteed that there will only exist one and only one workflow with a given id, i.e., every sub workflow has a
       * unique identifier. Also every enclosed subworkflow is used either by a primary workflow or by a subworkflow
       * as an inlined workflow
       *+optional
       * </pre>
       *
       * <code>repeated .flyteidl.core.CompiledWorkflow sub_workflows = 2;</code>
       */
      public Builder removeSubWorkflows(int index) {
        if (subWorkflowsBuilder_ == null) {
          ensureSubWorkflowsIsMutable();
          subWorkflows_.remove(index);
          onChanged();
        } else {
          subWorkflowsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Guaranteed that there will only exist one and only one workflow with a given id, i.e., every sub workflow has a
       * unique identifier. Also every enclosed subworkflow is used either by a primary workflow or by a subworkflow
       * as an inlined workflow
       *+optional
       * </pre>
       *
       * <code>repeated .flyteidl.core.CompiledWorkflow sub_workflows = 2;</code>
       */
      public flyteidl.core.Compiler.CompiledWorkflow.Builder getSubWorkflowsBuilder(
          int index) {
        return getSubWorkflowsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Guaranteed that there will only exist one and only one workflow with a given id, i.e., every sub workflow has a
       * unique identifier. Also every enclosed subworkflow is used either by a primary workflow or by a subworkflow
       * as an inlined workflow
       *+optional
       * </pre>
       *
       * <code>repeated .flyteidl.core.CompiledWorkflow sub_workflows = 2;</code>
       */
      public flyteidl.core.Compiler.CompiledWorkflowOrBuilder getSubWorkflowsOrBuilder(
          int index) {
        if (subWorkflowsBuilder_ == null) {
          return subWorkflows_.get(index);  } else {
          return subWorkflowsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Guaranteed that there will only exist one and only one workflow with a given id, i.e., every sub workflow has a
       * unique identifier. Also every enclosed subworkflow is used either by a primary workflow or by a subworkflow
       * as an inlined workflow
       *+optional
       * </pre>
       *
       * <code>repeated .flyteidl.core.CompiledWorkflow sub_workflows = 2;</code>
       */
      public java.util.List<? extends flyteidl.core.Compiler.CompiledWorkflowOrBuilder> 
           getSubWorkflowsOrBuilderList() {
        if (subWorkflowsBuilder_ != null) {
          return subWorkflowsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(subWorkflows_);
        }
      }
      /**
       * <pre>
       * Guaranteed that there will only exist one and only one workflow with a given id, i.e., every sub workflow has a
       * unique identifier. Also every enclosed subworkflow is used either by a primary workflow or by a subworkflow
       * as an inlined workflow
       *+optional
       * </pre>
       *
       * <code>repeated .flyteidl.core.CompiledWorkflow sub_workflows = 2;</code>
       */
      public flyteidl.core.Compiler.CompiledWorkflow.Builder addSubWorkflowsBuilder() {
        return getSubWorkflowsFieldBuilder().addBuilder(
            flyteidl.core.Compiler.CompiledWorkflow.getDefaultInstance());
      }
      /**
       * <pre>
       * Guaranteed that there will only exist one and only one workflow with a given id, i.e., every sub workflow has a
       * unique identifier. Also every enclosed subworkflow is used either by a primary workflow or by a subworkflow
       * as an inlined workflow
       *+optional
       * </pre>
       *
       * <code>repeated .flyteidl.core.CompiledWorkflow sub_workflows = 2;</code>
       */
      public flyteidl.core.Compiler.CompiledWorkflow.Builder addSubWorkflowsBuilder(
          int index) {
        return getSubWorkflowsFieldBuilder().addBuilder(
            index, flyteidl.core.Compiler.CompiledWorkflow.getDefaultInstance());
      }
      /**
       * <pre>
       * Guaranteed that there will only exist one and only one workflow with a given id, i.e., every sub workflow has a
       * unique identifier. Also every enclosed subworkflow is used either by a primary workflow or by a subworkflow
       * as an inlined workflow
       *+optional
       * </pre>
       *
       * <code>repeated .flyteidl.core.CompiledWorkflow sub_workflows = 2;</code>
       */
      public java.util.List<flyteidl.core.Compiler.CompiledWorkflow.Builder> 
           getSubWorkflowsBuilderList() {
        return getSubWorkflowsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          flyteidl.core.Compiler.CompiledWorkflow, flyteidl.core.Compiler.CompiledWorkflow.Builder, flyteidl.core.Compiler.CompiledWorkflowOrBuilder> 
          getSubWorkflowsFieldBuilder() {
        if (subWorkflowsBuilder_ == null) {
          subWorkflowsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              flyteidl.core.Compiler.CompiledWorkflow, flyteidl.core.Compiler.CompiledWorkflow.Builder, flyteidl.core.Compiler.CompiledWorkflowOrBuilder>(
                  subWorkflows_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          subWorkflows_ = null;
        }
        return subWorkflowsBuilder_;
      }

      private java.util.List<flyteidl.core.Compiler.CompiledTask> tasks_ =
        java.util.Collections.emptyList();
      private void ensureTasksIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          tasks_ = new java.util.ArrayList<flyteidl.core.Compiler.CompiledTask>(tasks_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          flyteidl.core.Compiler.CompiledTask, flyteidl.core.Compiler.CompiledTask.Builder, flyteidl.core.Compiler.CompiledTaskOrBuilder> tasksBuilder_;

      /**
       * <pre>
       * Guaranteed that there will only exist one and only one task with a given id, i.e., every task has a unique id
       *+required (at least 1)
       * </pre>
       *
       * <code>repeated .flyteidl.core.CompiledTask tasks = 3;</code>
       */
      public java.util.List<flyteidl.core.Compiler.CompiledTask> getTasksList() {
        if (tasksBuilder_ == null) {
          return java.util.Collections.unmodifiableList(tasks_);
        } else {
          return tasksBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Guaranteed that there will only exist one and only one task with a given id, i.e., every task has a unique id
       *+required (at least 1)
       * </pre>
       *
       * <code>repeated .flyteidl.core.CompiledTask tasks = 3;</code>
       */
      public int getTasksCount() {
        if (tasksBuilder_ == null) {
          return tasks_.size();
        } else {
          return tasksBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Guaranteed that there will only exist one and only one task with a given id, i.e., every task has a unique id
       *+required (at least 1)
       * </pre>
       *
       * <code>repeated .flyteidl.core.CompiledTask tasks = 3;</code>
       */
      public flyteidl.core.Compiler.CompiledTask getTasks(int index) {
        if (tasksBuilder_ == null) {
          return tasks_.get(index);
        } else {
          return tasksBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Guaranteed that there will only exist one and only one task with a given id, i.e., every task has a unique id
       *+required (at least 1)
       * </pre>
       *
       * <code>repeated .flyteidl.core.CompiledTask tasks = 3;</code>
       */
      public Builder setTasks(
          int index, flyteidl.core.Compiler.CompiledTask value) {
        if (tasksBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTasksIsMutable();
          tasks_.set(index, value);
          onChanged();
        } else {
          tasksBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Guaranteed that there will only exist one and only one task with a given id, i.e., every task has a unique id
       *+required (at least 1)
       * </pre>
       *
       * <code>repeated .flyteidl.core.CompiledTask tasks = 3;</code>
       */
      public Builder setTasks(
          int index, flyteidl.core.Compiler.CompiledTask.Builder builderForValue) {
        if (tasksBuilder_ == null) {
          ensureTasksIsMutable();
          tasks_.set(index, builderForValue.build());
          onChanged();
        } else {
          tasksBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Guaranteed that there will only exist one and only one task with a given id, i.e., every task has a unique id
       *+required (at least 1)
       * </pre>
       *
       * <code>repeated .flyteidl.core.CompiledTask tasks = 3;</code>
       */
      public Builder addTasks(flyteidl.core.Compiler.CompiledTask value) {
        if (tasksBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTasksIsMutable();
          tasks_.add(value);
          onChanged();
        } else {
          tasksBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Guaranteed that there will only exist one and only one task with a given id, i.e., every task has a unique id
       *+required (at least 1)
       * </pre>
       *
       * <code>repeated .flyteidl.core.CompiledTask tasks = 3;</code>
       */
      public Builder addTasks(
          int index, flyteidl.core.Compiler.CompiledTask value) {
        if (tasksBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTasksIsMutable();
          tasks_.add(index, value);
          onChanged();
        } else {
          tasksBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Guaranteed that there will only exist one and only one task with a given id, i.e., every task has a unique id
       *+required (at least 1)
       * </pre>
       *
       * <code>repeated .flyteidl.core.CompiledTask tasks = 3;</code>
       */
      public Builder addTasks(
          flyteidl.core.Compiler.CompiledTask.Builder builderForValue) {
        if (tasksBuilder_ == null) {
          ensureTasksIsMutable();
          tasks_.add(builderForValue.build());
          onChanged();
        } else {
          tasksBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Guaranteed that there will only exist one and only one task with a given id, i.e., every task has a unique id
       *+required (at least 1)
       * </pre>
       *
       * <code>repeated .flyteidl.core.CompiledTask tasks = 3;</code>
       */
      public Builder addTasks(
          int index, flyteidl.core.Compiler.CompiledTask.Builder builderForValue) {
        if (tasksBuilder_ == null) {
          ensureTasksIsMutable();
          tasks_.add(index, builderForValue.build());
          onChanged();
        } else {
          tasksBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Guaranteed that there will only exist one and only one task with a given id, i.e., every task has a unique id
       *+required (at least 1)
       * </pre>
       *
       * <code>repeated .flyteidl.core.CompiledTask tasks = 3;</code>
       */
      public Builder addAllTasks(
          java.lang.Iterable<? extends flyteidl.core.Compiler.CompiledTask> values) {
        if (tasksBuilder_ == null) {
          ensureTasksIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, tasks_);
          onChanged();
        } else {
          tasksBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Guaranteed that there will only exist one and only one task with a given id, i.e., every task has a unique id
       *+required (at least 1)
       * </pre>
       *
       * <code>repeated .flyteidl.core.CompiledTask tasks = 3;</code>
       */
      public Builder clearTasks() {
        if (tasksBuilder_ == null) {
          tasks_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          tasksBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Guaranteed that there will only exist one and only one task with a given id, i.e., every task has a unique id
       *+required (at least 1)
       * </pre>
       *
       * <code>repeated .flyteidl.core.CompiledTask tasks = 3;</code>
       */
      public Builder removeTasks(int index) {
        if (tasksBuilder_ == null) {
          ensureTasksIsMutable();
          tasks_.remove(index);
          onChanged();
        } else {
          tasksBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Guaranteed that there will only exist one and only one task with a given id, i.e., every task has a unique id
       *+required (at least 1)
       * </pre>
       *
       * <code>repeated .flyteidl.core.CompiledTask tasks = 3;</code>
       */
      public flyteidl.core.Compiler.CompiledTask.Builder getTasksBuilder(
          int index) {
        return getTasksFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Guaranteed that there will only exist one and only one task with a given id, i.e., every task has a unique id
       *+required (at least 1)
       * </pre>
       *
       * <code>repeated .flyteidl.core.CompiledTask tasks = 3;</code>
       */
      public flyteidl.core.Compiler.CompiledTaskOrBuilder getTasksOrBuilder(
          int index) {
        if (tasksBuilder_ == null) {
          return tasks_.get(index);  } else {
          return tasksBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Guaranteed that there will only exist one and only one task with a given id, i.e., every task has a unique id
       *+required (at least 1)
       * </pre>
       *
       * <code>repeated .flyteidl.core.CompiledTask tasks = 3;</code>
       */
      public java.util.List<? extends flyteidl.core.Compiler.CompiledTaskOrBuilder> 
           getTasksOrBuilderList() {
        if (tasksBuilder_ != null) {
          return tasksBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(tasks_);
        }
      }
      /**
       * <pre>
       * Guaranteed that there will only exist one and only one task with a given id, i.e., every task has a unique id
       *+required (at least 1)
       * </pre>
       *
       * <code>repeated .flyteidl.core.CompiledTask tasks = 3;</code>
       */
      public flyteidl.core.Compiler.CompiledTask.Builder addTasksBuilder() {
        return getTasksFieldBuilder().addBuilder(
            flyteidl.core.Compiler.CompiledTask.getDefaultInstance());
      }
      /**
       * <pre>
       * Guaranteed that there will only exist one and only one task with a given id, i.e., every task has a unique id
       *+required (at least 1)
       * </pre>
       *
       * <code>repeated .flyteidl.core.CompiledTask tasks = 3;</code>
       */
      public flyteidl.core.Compiler.CompiledTask.Builder addTasksBuilder(
          int index) {
        return getTasksFieldBuilder().addBuilder(
            index, flyteidl.core.Compiler.CompiledTask.getDefaultInstance());
      }
      /**
       * <pre>
       * Guaranteed that there will only exist one and only one task with a given id, i.e., every task has a unique id
       *+required (at least 1)
       * </pre>
       *
       * <code>repeated .flyteidl.core.CompiledTask tasks = 3;</code>
       */
      public java.util.List<flyteidl.core.Compiler.CompiledTask.Builder> 
           getTasksBuilderList() {
        return getTasksFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          flyteidl.core.Compiler.CompiledTask, flyteidl.core.Compiler.CompiledTask.Builder, flyteidl.core.Compiler.CompiledTaskOrBuilder> 
          getTasksFieldBuilder() {
        if (tasksBuilder_ == null) {
          tasksBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              flyteidl.core.Compiler.CompiledTask, flyteidl.core.Compiler.CompiledTask.Builder, flyteidl.core.Compiler.CompiledTaskOrBuilder>(
                  tasks_,
                  ((bitField0_ & 0x00000004) != 0),
                  getParentForChildren(),
                  isClean());
          tasks_ = null;
        }
        return tasksBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flyteidl.core.CompiledWorkflowClosure)
    }

    // @@protoc_insertion_point(class_scope:flyteidl.core.CompiledWorkflowClosure)
    private static final flyteidl.core.Compiler.CompiledWorkflowClosure DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new flyteidl.core.Compiler.CompiledWorkflowClosure();
    }

    public static flyteidl.core.Compiler.CompiledWorkflowClosure getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<CompiledWorkflowClosure>
        PARSER = new com.google.protobuf.AbstractParser<CompiledWorkflowClosure>() {
      @java.lang.Override
      public CompiledWorkflowClosure parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CompiledWorkflowClosure(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<CompiledWorkflowClosure> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CompiledWorkflowClosure> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public flyteidl.core.Compiler.CompiledWorkflowClosure getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flyteidl_core_ConnectionSet_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flyteidl_core_ConnectionSet_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flyteidl_core_ConnectionSet_IdList_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flyteidl_core_ConnectionSet_IdList_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flyteidl_core_ConnectionSet_DownstreamEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flyteidl_core_ConnectionSet_DownstreamEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flyteidl_core_ConnectionSet_UpstreamEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flyteidl_core_ConnectionSet_UpstreamEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flyteidl_core_CompiledWorkflow_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flyteidl_core_CompiledWorkflow_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flyteidl_core_CompiledTask_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flyteidl_core_CompiledTask_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flyteidl_core_CompiledWorkflowClosure_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flyteidl_core_CompiledWorkflowClosure_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\034flyteidl/core/compiler.proto\022\rflyteidl" +
      ".core\032\034flyteidl/core/workflow.proto\032\031fly" +
      "teidl/core/tasks.proto\"\324\002\n\rConnectionSet" +
      "\022@\n\ndownstream\030\007 \003(\0132,.flyteidl.core.Con" +
      "nectionSet.DownstreamEntry\022<\n\010upstream\030\010" +
      " \003(\0132*.flyteidl.core.ConnectionSet.Upstr" +
      "eamEntry\032\025\n\006IdList\022\013\n\003ids\030\001 \003(\t\032V\n\017Downs" +
      "treamEntry\022\013\n\003key\030\001 \001(\t\0222\n\005value\030\002 \001(\0132#" +
      ".flyteidl.core.ConnectionSet.IdList:\0028\001\032" +
      "T\n\rUpstreamEntry\022\013\n\003key\030\001 \001(\t\0222\n\005value\030\002" +
      " \001(\0132#.flyteidl.core.ConnectionSet.IdLis" +
      "t:\0028\001\"x\n\020CompiledWorkflow\0221\n\010template\030\001 " +
      "\001(\0132\037.flyteidl.core.WorkflowTemplate\0221\n\013" +
      "connections\030\002 \001(\0132\034.flyteidl.core.Connec" +
      "tionSet\"=\n\014CompiledTask\022-\n\010template\030\001 \001(" +
      "\0132\033.flyteidl.core.TaskTemplate\"\257\001\n\027Compi" +
      "ledWorkflowClosure\0220\n\007primary\030\001 \001(\0132\037.fl" +
      "yteidl.core.CompiledWorkflow\0226\n\rsub_work" +
      "flows\030\002 \003(\0132\037.flyteidl.core.CompiledWork" +
      "flow\022*\n\005tasks\030\003 \003(\0132\033.flyteidl.core.Comp" +
      "iledTaskB6Z4github.com/flyteorg/flyteidl" +
      "/gen/pb-go/flyteidl/coreb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          flyteidl.core.Workflow.getDescriptor(),
          flyteidl.core.Tasks.getDescriptor(),
        }, assigner);
    internal_static_flyteidl_core_ConnectionSet_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_flyteidl_core_ConnectionSet_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flyteidl_core_ConnectionSet_descriptor,
        new java.lang.String[] { "Downstream", "Upstream", });
    internal_static_flyteidl_core_ConnectionSet_IdList_descriptor =
      internal_static_flyteidl_core_ConnectionSet_descriptor.getNestedTypes().get(0);
    internal_static_flyteidl_core_ConnectionSet_IdList_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flyteidl_core_ConnectionSet_IdList_descriptor,
        new java.lang.String[] { "Ids", });
    internal_static_flyteidl_core_ConnectionSet_DownstreamEntry_descriptor =
      internal_static_flyteidl_core_ConnectionSet_descriptor.getNestedTypes().get(1);
    internal_static_flyteidl_core_ConnectionSet_DownstreamEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flyteidl_core_ConnectionSet_DownstreamEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_flyteidl_core_ConnectionSet_UpstreamEntry_descriptor =
      internal_static_flyteidl_core_ConnectionSet_descriptor.getNestedTypes().get(2);
    internal_static_flyteidl_core_ConnectionSet_UpstreamEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flyteidl_core_ConnectionSet_UpstreamEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_flyteidl_core_CompiledWorkflow_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_flyteidl_core_CompiledWorkflow_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flyteidl_core_CompiledWorkflow_descriptor,
        new java.lang.String[] { "Template", "Connections", });
    internal_static_flyteidl_core_CompiledTask_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_flyteidl_core_CompiledTask_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flyteidl_core_CompiledTask_descriptor,
        new java.lang.String[] { "Template", });
    internal_static_flyteidl_core_CompiledWorkflowClosure_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_flyteidl_core_CompiledWorkflowClosure_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flyteidl_core_CompiledWorkflowClosure_descriptor,
        new java.lang.String[] { "Primary", "SubWorkflows", "Tasks", });
    flyteidl.core.Workflow.getDescriptor();
    flyteidl.core.Tasks.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
